
/*
	本檔案為自動生成，請勿手動編輯！
	The main script file: CeJS_wiki/CeJS_wiki.js
		is auto created by auto-generate tool: build.combined(.js) @ Wed Sep 21 2022 04:33:15 GMT+0800 (台北標準時間).
*/


(function () {
	const _golbal = typeof globalThis === 'object' ? globalThis : golbal;
	_golbal.CeL = _golbal.CeL || {};
	if (_golbal.CeL.initializer) {
		_golbal.CeL._initializer = _golbal.CeL.initializer;
		delete _golbal.CeL.initializer;
	}
	_golbal.CeL.skip_loading_modules = ["CeL.data.native","CeL.data.code","CeL.data.date","CeL.application.net.wiki","CeL.application.OS.Windows","CeL.data","CeL.data.numeral","CeL.application.locale","CeL.interact.DOM","CeL.application.net","CeL.application.net.wiki.namespace","CeL.application.net.MIME","CeL.application.net.Ajax","CeL.application.net.wiki.task","CeL.application.net.wiki.parser","CeL.application.net.wiki.query","CeL.application.platform.nodejs","CeL.application.storage","CeL.application.net.wiki.Flow","CeL.application.net.wiki.page","CeL.application.net.wiki.list","CeL.application.net.wiki.page.Page","CeL.application.net.wiki.edit","CeL.application.net.wiki.parser.wikitext","CeL.application.net.wiki.parser.section","CeL.application.net.wiki.parser.misc","application/locale/resources/gettext_plural_rules.js","application/locale/resources/cmn-Hant-TW.js","application/locale/resources/de-DE.js"];
})();


/*
	本檔案為自動生成，請勿手動編輯！
	This file is auto created from _structure/structure.js, base.js, module.js, dependency_chain.js, initialization.js
		by auto-generate tool: build.nodejs(.js) @ 2022.
*/

'use strict';

if (typeof CeL !== 'function') {



/**
 * <code>
TODO
將 module_name 改成 arguments
http://threecups.org/?p=129

http://cdnjs.com/

listen language change event
play board

use <a href="http://prototyp.ical.ly/index.php/2007/03/01/javascript-design-patterns-1-the-singleton/" accessdate="2010/4/25 0:23" title="prototyp.ical.ly &amp;raquo; Javascript Design Patterns - 1. The Singleton">Singleton pattern</a>,
Module 模式或單例模式（<a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" accessdate="2010/4/25 0:25" title="单例模式">Singleton</a>）<a href="http://www.comsharp.com/GetKnowledge/zh-CN/TeamBlogTimothyPage_K950.aspx" accessdate="2010/4/25 0:24" title="那些相见恨晚的 JavaScript 技巧 - 基于 COMSHARP CMS">為 Douglas Crockford 所推崇</a>，並被大量應用在 Yahoo User Interface Library YUI。

http://wiki.forum.nokia.com/index.php/JavaScript_Performance_Best_Practices
http://ioio.name/core-javascript-pitfalls.html

CommonJS
http://www.heliximitate.cn/studyblog/archives/tag/commonjs





</code>
 */



/**
 * <code>
// TODO
// 2011/7/31 21:18:01




//module

//typeof CeL_id === 'string' && typeof this[CeL_id] === 'function' &&
typeof CeL === 'function' && CeL.run({
name:[module_name],
require:[function_name,module_name],

code:function(CeL){

var private_value=1;

function module_function_1(arg) {
	;
}
module_function_1.required='';


function module_class_1(arg) {
	;
}

function get_value(){
	return private_value;
}

module_class_1.prototype.print=function(){};
module_class_1.print=function(){};


return {module_function_1,module_class_1};

}

});



</code>
 */



// void(
// typeof CeL !== 'function' &&
(
/**
 * We can redefine native values only for undefined.<br />
 * http://weblogs.asp.net/bleroy/archive/2006/08/02/Define-undefined.aspx<br />
 * <br />
 * Will speed up references to undefined, and allows redefining its name. (from
 * jQuery)<br />
 * <br />
 * 用在比較或是 return undefined<br />
 * 在舊的 browser 中，undefined 可能不存在。
 */
function (globalThis) {

	if (false)
		if (typeof globalThis !== 'object' && typeof globalThis !== 'function')
			throw new Error('No globalThis object specified!');

	var
		// https://developers.google.com/closure/compiler/docs/js-for-compiler
		/** @const */ library_name = 'CeL',

		/**
		 * library version.
		 * 
		 * @type {String}
		 * @ignore
		 */
		library_version = '4.5.5',


		/**
		 * default debug level
		 * 
		 * @type {ℕ⁰:Natural+0}
		 * @ignore
		 */
		debug = 0,
		// 原生 console。
		// typeof console !== 'undefined' && console
		has_console = typeof console === 'object'
		//
		&& (typeof console.log === 'function'
		// in IE 8, typeof console.log === 'object'.
		|| typeof console.log === 'object')
		&& typeof console.error === typeof console.log
		&& typeof console.trace === typeof console.log,


		old_namespace,

		// default not_native_keyword.
		KEY_not_native = typeof Symbol === 'function' ? Symbol('not_native') : 'not_native',

		// _base_function_to_extend,

		function_name_pattern;


	// members of library -----------------------------------------------

	// define 'undefined'
	try {
		// undefined === void 0
		if (undefined !== undefined) {
			throw 1;
		}
		// eval('if(undefined!==undefined){throw 1;}');
	} catch (e) {
		// Firefox/49.0 WebExtensions 可能 throw:
		// Error: call to eval() blocked by CSP
		// @see
		// https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/CSP

		// or: undefined=void 0
		if (e === 1)
			eval('undefined=this.undefined;');
	}


	try {
		old_namespace = globalThis[library_name];
	} catch (e) {
		// throw { message: '' };
		throw new Error(library_name + ': Cannot get the global scope object!');
	}



	if (false) {
		_Global.JustANumber = 2;
		var _GlobalPrototype = _Global.constructor.prototype;
		_GlobalPrototype.JustANumber = 2;
	}

	// 若已經定義過，跳過。因為已有對 conflict 的對策，因此跳過。
	if (false)
		if (globalThis[library_name] !== undefined)
			return;


	/**
	 * Will speed up references to DOM: window, and allows redefining its name.
	 * (from jQuery)
	 * 
	 * @ignore
	 */
	// window = this;


	/**
	 * 本 JavaScript framework 的框架基本宣告。<br />
	 * base name-space declaration of JavaScript library framework
	 * 
	 * @name CeL
	 * @class Colorless echo JavaScript kit/library: library base name-space
	 */
	function _() {
		/**
		 * function CeL: library root<br />
		 * declaration for debug
		 */
		// this.globalThis = arguments[0] || arguments.callee.ce_doc;
		// return new (this.init.apply(globalThis, arguments));
	};

	// if (typeof _.prototype !== 'object')
	_// JSDT:_module_
	.
	/**
	 * framework main prototype definition for JSDT: 有 prototype 才會將之當作 Class
	 */
	prototype = {
	};

	// _.library_version =
	_.version = library_version;
	_.build_date = new Date("2022-09-20T20:33:07.464Z");

	// name-space 歸屬設定

	_// JSDT:_module_
	.
	get_old_namespace = function () {
		return old_namespace;
	};

	_// JSDT:_module_
	.
	recover_namespace = function () {
		if (old_namespace === undefined)
			delete globalThis[library_name];
		else
			globalThis[library_name] = old_namespace;
		return _;
	};



	_// JSDT:_module_
	.
	/**
	 * JavaScript library framework main class name.
	 * 
	 * @see <a
	 *      href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf">ECMA-262</a>:
	 *      Object.Class: A string value indicating the kind of this object.
	 * @constant
	 */
	Class = library_name;

	var is_WWW = typeof window === 'object'
		&& (globalThis === window
			// 2021/11/16 e.g., under https://web.archive.org/
			// `window is {Proxy} of `globalThis`
			|| window.window === window && _ === window[library_name])
		// 由條件嚴苛的開始。
		&& typeof navigator === 'object'
			// Internet Explorer 6.0 (6.00.2900.2180),
			// Internet Explorer 7.0 (7.00.5730.13) 中，
			// navigator === window.navigator 不成立！
			&& navigator == window.navigator
		&& typeof location === 'object'
			&& location === window.location
		// object || function
		&& typeof setTimeout !== 'undefined'
			&& setTimeout === window.setTimeout
		&& typeof document === 'object'
			&& document === window.document
		// 下兩個在 IE5.5 中都是 Object
		// && _.is_type(window, 'globalThis')
		// && _.is_type(document, 'HTMLDocument')

		// && navigator.userAgent
	,
	is_W3CDOM =
		is_WWW
		// W3CDOM, type: Object @ IE5.5
		&& document.createElement
		// &&!!document.createElement
		// type: Object @ IE5.5
		&& document.getElementsByTagName;

	_// JSDT:_module_
	.
	/**
	 * Are we in a web environment?
	 * 
	 * @param {Boolean}
	 *            W3CDOM Test if we are in a World Wide Web Consortium (W3C)
	 *            Document Object Model (DOM) environment.
	 * 
	 * @return We're in a WWW environment.
	 * 
	 * @since 2009/12/29 19:18:53
	 * @see use lazy evaluation / lazy loading
	 * @_memberOf _module_
	 */
	is_WWW = function (W3CDOM) {
		return W3CDOM ? is_W3CDOM : is_WWW;
	};


	_// JSDT:_module_
	.
	/**
	 * 本 library 專用之 evaluate()。
	 * 
	 * 若在 function 中 eval 以獲得 local variable，在舊 browser 中須加 var。<br />
	 * e.g., 'var local_variable=' + ..<br />
	 * 不加 var 在舊 browser 中會變成 global 變數。
	 * 
	 * @param {String}code
	 *            script code to evaluate
	 * 
	 * @returns value that evaluate process returned
	 * @see window.eval === window.parent.eval
	 *      http://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript
	 *      http://perfectionkills.com/global-eval-what-are-the-options/
	 */
	eval_code = globalThis.execScript ?
	function (code) {
		// 解決 CeL.run() 在可以直接取得 code 的情況下，於舊版 JScript 可能會以 eval() 來 include，
		// 這將造成 var 的值不會被設定到 global scope。

		// use window.execScript(code, "JavaScript") in JScript:
		// window.execScript() 將直接使用全局上下文環境，
		// 因此，execScript(Str)中的字符串Str可以影響全局變量。——也包括聲明全局變量、函數以及對象構造器。

		// window.execScript doesn’t return a value.
		return globalThis.execScript(code, "JavaScript");
	}
	:
	function eval_code(code) {
		/**
		 * JSC eval() takes an optional second argument which can be 'unsafe'.<br />
		 * Mozilla/SpiderMonkey eval() takes an optional second argument which
		 * is the scope object for new symbols.
		 */
		if (false) {
			_.debug(globalThis.eval, 2);
			_.debug(globalThis.eval && globalThis.eval !== arguments.callee);
		}
		// NO globalThis.eval.call(global, code) :
		// http://perfectionkills.com/global-eval-what-are-the-options/

		// TODO: 似乎不總是有用。見 era.htm。
		return globalThis.eval && globalThis.eval !== eval_code ? globalThis.eval(code)
			// QuickJS 2020-04-12 必須把本段註解全部刪除，否則不能正常執行。應為 bug。
			// 這種表示法 Eclipse Kepler (4.3.2) SR2 之 JsDoc 尚無法處理。
			: (0, eval)(code);
	};


	try {
		_// JSDT:_module_
		.
		/**
		 * evaluate @ Global scope.<br />
		 * 
		 * By the ECMA-262, new Function() will 'Pass in the Global Environment
		 * as the Scope parameter.'<br />
		 * 
		 * copy from jQuery core.js
		 * 
		 * @param {String}code
		 *            script code to evaluate
		 * 
		 * @returns value that evaluate process returned
		 * @see <a
		 *      href="http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context"
		 *      accessdate="2011/8/6 8:56">Eval JavaScript in a global context |
		 *      Java.net</a> use execScript on Internet Explorer
		 */
		global_eval = new Function('code', 'return '
			+ (
					typeof execScript === 'function' ? 'execScript('
					: is_WWW ? 'window.eval(' : 'eval.call(null,'
			)
			+ 'code)');
	} catch (e) {
		// Firefox/49.0 WebExtensions 可能 throw:
		// Error: call to Function() blocked by CSP
		_.global_eval = function(code) {
			_.error('global_eval: Cannot eval()!');
		};
	}


	// 2019/6/3 18:16:44 CeL.null_Object() → Object.create(null)
	if (typeof Object.create !== 'function') {
		// https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/create
		// 先暫時給一個，用於 `Object.create(null)`。
		(Object.create = function create(proto, propertiesObject) {
			// new Object();
			var new_Object = {};
			new_Object.__proto__ = proto;
			if(typeof propertiesObject === "object") {
				Object.defineProperties(new_Object, propertiesObject);
			}
	        return new_Object;
		})[KEY_not_native] = true;
	}

	/**
	 * setup options. 前置處理 options，正規化 read-only 參數。
	 * 
	 * @example<code>
	   //	// 前導作業/前置處理。
	   //	if (!library_namespace.is_Object(options))
	   //		options = Object.create(null);
	   // →
	   //	options = library_namespace.setup_options(options);
	   //	options = library_namespace.setup_options(options, true);
	 * </code>
	 * 
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項。
	 * @param {Boolean}[new_one]
	 *            重新造出可被更改的選項。當會更改到options時，再設定此項。
	 * 
	 * @returns {Object}選項。
	 * 
	 * @since 2016/3/13 13:58:9
	 */
	function _setup_options(options, new_one) {
		if (options && !new_one) {
			return options;
		}

		// create a new one. copy options.
		// or use Object.clone(options)
		options = Object.assign(Object.create(null), options);
		// 註冊為副本。
		options.new_NO = (options.new_NO | 0) + 1;
		return options;
	}
	/**
	 * setup options. 前置處理 options，正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。<br />
	 * 僅用在<b>不會改變</b> options 的情況。
	 * 
	 * @example<code>
	   //	// 前導作業/前置處理。
	   //	if (!library_namespace.is_Object(options))
	   //		options = Object.create(null);
	   // →
	   //	options = library_namespace.setup_options(options);
	 * </code>
	 * 
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項。
	 * 
	 * @returns {Object}選項。
	 * 
	 * @since 2016/3/13 13:58:9
	 */
	function setup_options(options) {
		if (typeof options === 'string') {
			// e.g., 'bot' → {bot:true}
			// e.g., 'bot|minor' → {bot:true,minor:true}
			var _options = Object.create(null), i = 0;
			for (options = options.split('|'); i < options.length; i++) {
				if (options[i]) {
					_options[options[i]] = true;
				}
			}
			return _options;
		}
		// e.g., number: Invalid option?
		return (typeof options === 'object' /* || typeof options === 'function' */)
		// typeof null === 'object'
		&& options || Object.assign(Object.create(null), options);
	}
	/**
	 * setup options. 前置處理 / clone options，避免修改或覆蓋附加參數。<br />
	 * 重新造出可被更改的選項。當會更改到 options 時，再使用此函數。
	 * 
	 * @example<code>

	// 前導作業/前置處理。
	// 重新造一個 options 以避免污染。
	if (!library_namespace.is_Object(options))
		options = Object.create(null);
	// →
	options = library_namespace.new_options(options);
	// 使用新語法。
	options = { ...options };

	</code>
	 * 
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項。
	 * 
	 * @returns {Object}選項。
	 * 
	 * @since 2016/03/14 16:34:09
	 */
	function new_options(options) {
		// create a new one. copy options.
		// or use Object.clone(options)
		var length = arguments.length;
		if (_.is_Object(options)) {
			if ((new_options.new_key in options) && length === 1) {
				// converted
				return options;
			}
			options = Object.assign(Object.create(null), options);
		} else {
			options = Object.create(null);
		}
		if (length > 1) {
			for(var i = 1; i < length; i++)
				// if (_.is_Object(arguments[i]))
				if (arguments[i])
					Object.assign(options, arguments[i]);
		}
		Object.defineProperty(options, new_options.new_key, {
			// let [new_options.new_key] deletable
			configurable : true,
			// 不允許 enumerable 以避免此屬性被使用。
			// enumerable : false
			value : true
		});
		return options;
	}
	new_options.new_key = 'is new options';
	// 不會更動 options 的用此。
	_.setup_options = setup_options;
	// 會更動 options 的用此。
	_.new_options = new_options;


	var modify_function_hash = Object.create(null);

	_// JSDT:_module_
	.
	/**
	 * simple evaluates to get the value of specified variable identifier name.
	 * 
	 * 不使用 eval() 的方法，一層一層 call name-space。
	 * 
	 * BUG: 無論是不是相同 name_space，只要 variable_name 相同，即會執行 modify_function。<br />
	 * 以記憶體空間換取時間效率，會增加記憶體空間之使用。
	 * 
	 * 在兩個子層(a.b.c)下，這樣作效率較差@Chrome/5.0.375.29:<br />
	 * function(v){try{return(new Function('return('+v+')'))();}catch(e){}}
	 * 
	 * TODO:<br />
	 * 不存在時 throw.
	 * 
	 * @param {String}variable_name
	 *            variable identifier name. e.g., /[a-z\d$_]+(.[a-z\d_]+)+/i
	 * @param {Function}[modify_function]
	 *            註冊: 當以 .set_value() 改變時，順便執行此函數:<br />
	 *            modify_function(value, variable_name).
	 * @param {Object|Function}[name_space]
	 *            initialize name-space. default: globalThis.
	 * @param [value]
	 *            設定 variable 為 value.
	 * 
	 * @returns value of specified variable identifier name
	 * 
	 * @since 2010/1/1 18:11:40
	 * @note 'namespace' 是 JScript.NET 的保留字。
	 * 
	 * @see https://github.com/tc39/proposal-optional-chaining
	 */
	value_of = function (variable_name, modify_function, name_space, value) {
		var variable_name_array;
		if (Array.isArray(variable_name) && variable_name.length > 0) {
			variable_name_array = variable_name;
			variable_name = variable_name.join('.');
			// 在 Object("") 的情況下，typeof this==='object'。此時不可用 typeof。
		} else if (typeof variable_name === 'string' && variable_name)
			variable_name_array = variable_name.split('.');
		else
			// return variable_name: 預防 value_of(null/undefined/NaN)
			return variable_name;

		// _.debug('get value of [' + variable_name + ']');
		if (_.is_Function(modify_function)) {
			if (variable_name in modify_function_hash)
				modify_function_hash[variable_name].push(modify_function);
			else
				modify_function_hash[variable_name] = [modify_function];
		}

		var i = 0,
		// TODO:
		// 可處理如:
		// obj1 . obj2 [ ' obj3.4 * \[ ' ] [''] . obj5 [ " obj6 \" \' \] . " ]
		// or detect obj1 .. obj2
		l = variable_name_array.length,
		v = name_space ||
			// `CeL.env.global`, NOT `CeL.env.globalThis`
			globalThis,
		// do set value
		do_set = arguments.length > 3;
		if (false)
			_.debug('globalThis.' + _.Class + ' = ' + _.env.global[_.Class]);

		if (do_set)
			l--;

		try {
			while (i < l) {
				// _.debug('to [' + variable_name_array[i] + ']: ' +
				// v[variable_name_array[i]]),
				if (variable_name_array[i] in v)
					v = v[variable_name_array[i++]];
				else
					throw 1;
			}

			if (do_set) {
				v[variable_name_array[i]] = value;
				do_set = modify_function_hash[variable_name];
				if (do_set)
					for (i in do_set)
						try {
							do_set[i](value, variable_name);
						} catch (e) {
							// TODO: handle exception
						}
			}

		} catch (e) {
			variable_name_array[i] = '<em>' + variable_name_array[i] + '</em><span class="debug_weaken">';
			if (false)
				alert(_.log.buffer.length + ',' + _.log.max_length + '\n'
						+ _.debug);
			_.debug('Cannot ' + (do_set ? 'set' : 'get') +
					' variable [<span title="' + variable_name + '">' + variable_name_array.join('.') + '</span></span>]!', 2, 'value_of');
			// throw
			return undefined;
		}

		return v;
	};


	_// JSDT:_module_
	.
	/**
	 * simple evaluates to set value of specified variable identifier name.<br />
	 * 不使用 eval().
	 * 
	 * @param {String}variable_name
	 *            variable identifier name. e.g., /[a-z\d$_]+(.[a-z\d_]+)+/i
	 * @param [value]
	 *            設定 variable 為 value.
	 * @param {Object|Function}[name_space]
	 *            initialize name-space. default: globalThis.
	 * 
	 * @returns name-space of specified variable identifier name.<br />
	 *          e.g., return a.b.c when call .set_value('a.b.c.d').
	 * @since 2011/8/27 15:43:03
	 */
	set_value = function (variable_name, value, name_space) {
		return _.value_of(variable_name, null, name_space, value);
	};


	// ------------------------------------------------------------------------

	_// JSDT:_module_
	.
	/**
	 * is index 用, only digits. 整數 >= 0.<br />
	 * cf. Number.isInteger()
	 * 
	 * @param value
	 *            value to test
	 * @returns if value only digits.
	 */
	is_digits = function (value) {
		// 須預防 TypeError: Cannot convert object to primitive value。
		return typeof value !== 'object'
		// value == value | 0
		// value == (value >>> 0)
		&& /^\d+$/.test(value);
	};


	if (false)
		if (!globalThis.is_digits)
			globalThis.is_digits = _.is_digits;


	/**
	 * 測試各 type:
	 * 
	 * undefined:<br />
	 * 變數值存在且變數 'undefined' 存在時: variable === undefined<br />
	 * 否則: typeof(variable) === 'undefined'
	 * 
	 * TODO:<br />
	 * void(1) === void(0) === undefined
	 * 
	 * number, boolean, string:<br />
	 * typeof(variable) === '~'<br />
	 * 
	 * TODO:<br />
	 * NaN<br />
	 * int/float
	 * 
	 * object:<br />
	 * null
	 * 
	 * 不同 frame 中的 Array 擁有不同的 constructor
	 */
	/**
	 * A cache to the function we use to get the type of specified value.<br />
	 * Get the [[Class]] property of this object.<br />
	 * 不使用 Object.toString() 是怕被 overridden
	 * 
	 * @type {Function}
	 * @inner
	 */
	var get_object_type = Function.prototype.bind
		? Function.prototype.call.bind(Object.prototype.toString)
		: function (o) { return Object.prototype.toString.call(o); };

	_.get_object_type = get_object_type;

	_// JSDT:_module_
	.
	/**
	 * 判斷為何種 type。主要用在 Error, DOMException 等 native methods / native objects /
	 * built-in objects 之判別。
	 * 
	 * @param value
	 *            variable or class instance to test
	 * @param {String}[want_type]
	 *            type to compare: number, string, boolean, undefined, object,
	 *            function
	 * @param {Boolean}[get_Class]
	 *            get the class name of a class(function) instance.
	 * 
	 * @returns {Boolean} The type is matched.
	 * @returns {String} The type of value
	 * @returns {undefined} error occurred
	 * 
	 * @example<code>

	CeL.is_type(value_to_test, 'Array');

	</code>
	 * 
	 * @since 2009/12/14 19:50:14
	 * @see <a
	 *      href="http://lifesinger.org/blog/2009/02/javascript-type-check-2/"
	 *      accessdate="2009/12/6 19:10">JavaScript类型检测小结（下） - 岁月如歌</a><br />
	 *      <a
	 *      href="http://thinkweb2.com/projects/prototype/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/"
	 *      accessdate="2009/12/6 19:10">Perfection kills &raquo; `instanceof`
	 *      considered harmful (or how to write a robust `isArray`)</a>
	 */
	is_type = function is_type(value, want_type, get_Class) {
		var type;
		if (want_type && (type = typeof want_type) !== 'string')
			want_type = type;

		type = value === null ? String(value) : typeof value;

		if (get_Class)
			try {
				if (type === 'function' && value.Class)
					// get the class name of a class
					// 若 value 為 function 時，測試其本身之 Class。
					type = value.Class;
				else if (type === 'function' || type === 'object')
					if (('constructor' in value) && (get_Class = value.constructor).Class)
						// get the class name of a class instance
						// 若 value 為 function 且無 Class，或為 object 時，測試其
						// constructor 之 Class。
						type = get_Class.Class;
					else if (get_Class = _.get_function_name(get_Class))
						// get Class by function name
						type = get_Class;
			} catch (e) {
				_.error(_.Class + '.is_type: Fault to get ths class name of value!');
			}

		if (type !== 'object')
			// type maybe 'unknown' or 'date'!
			return want_type ? type === want_type.toLowerCase() : type;

		try {
			get_Class = get_object_type(value);
		} catch (e) {
			_.error(_.Class + '.is_type: Fault to get object type of value!');
			get_Class = '';
		}

		if (want_type)
			return get_Class === (want_type.charAt(0) === '[' ? want_type
					: '[object ' + want_type + ']');

		want_type = get_Class.match(/^\[object ([^\]]+)\]$/);
		if (want_type)
			return want_type[1];

		return type;
	};


	_// JSDT:_module_
	.
	/**
	 * get a type test function
	 * 
	 * @example<code>
	 * // 大量驗證時，推薦另外在本身 scope 中造出捷徑：
	 * _.OtS = Object.prototype.toString;
	 * var is_Person = CeL.type_tester('Person', 'OtS');
	 * // test
	 * if(is_Person(value))
	 *  // it's really a Person object
	 *  ;
	 * </code>
	 * 
	 * @param {String}want_type
	 *            object type to compare
	 * @param {String}[toString_reference]
	 *            a reference name to Object.prototype.toString
	 * 
	 * @returns {Function} type test function
	 * @since 2009/12/20 08:38:26
	 */
	type_tester = function type_tester(want_type, toString_reference) {
		var t = '[object ' + want_type + ']';

		if (false)
		return new Function('v', 'return "' + t + '"==='
				+ (toString_reference ||
				// 在 Google Chrome 中，
				// 'Object.prototype.toString' 可以與其 reference 同速度，
				// 但其他的 reference 會快些。
				'Object.prototype.toString'
				)
				+ '.call(v);');

		return typeof toString_reference === 'string'
			&& toString_reference ?
				new Function('v', 'return "' + t
					+ '"===' + toString_reference + '.call(v);')

				// slow@Chrome
				: function (v) { return t === get_object_type(v); };
				// faster@Chrome
				// : new Function('v', 'return "' + t +
				// '"===Object.prototype.toString.call(v);');

	};

	_// JSDT:_module_
	.
	/**
	 * Test if the value is a native Function.
	 * 
	 * @param v
	 *            value to test
	 * @returns {Boolean} the value is a native Function.
	 * @since 2009/12/20 08:38:26
	 */
	is_Function =
		// _.type_tester('Function');
		function is_Function(v) {
		// typeof 比 Object.prototype.toString 快，
		// 不過得注意有些 native object 可能 type 是 'function'，但不具有 function 特性。
		return get_object_type(v) === '[object Function]';

		// 須注意，在 firefox 3 中，
		// typeof [object HTMLObjectElement] 之外的 HTMLElement 皆 ===
		// 'function'，

		// 因此光用 typeof() === 'function' 而執行下去會得出
		// [XPCWrappedNative_NoHelper] Component is not available

		if (false)
			return typeof v === 'function'
					|| get_object_type(v) === '[object Function]';
	};


	_// JSDT:_module_
	.
	/**
	 * Test if the value is a native ECMAScript Object / plain {Object}. is an
	 * ordinary object.<br />
	 * 去除 null, undefined。 TODO:<br />
	 * test null<br />
	 * BUG: IE8 中 is_Object(ELEMENT_NODE) === true！
	 * 
	 * @param v
	 *            value to test
	 * @returns {Boolean} the value is an ordinary object (a native Object).
	 *          else: exotic object, ECMAScript function object (pure function),
	 *          a primitive value.
	 * @since 2009/12/20 08:38:26
	 */
	is_Object =
		// MSIE 6.0 - 9.0 (JScript 9.0.16450):
		// Object.prototype.toString.call(undefined) === '[object Object]'
		// Object.prototype.toString.call(null) === '[object Object]'
		get_object_type(null) === '[object Object]' || get_object_type(undefined) === '[object Object]' ?
		function is_Object(v) {
			// &&: 除非為必要條件，否則越難達到、評估成本越小的應擺前面。
			return get_object_type(v) === '[object Object]'
			// && typeof v !== 'undefined' && v !== null
			&& v
			// incase CeL.is_Object(new CeL.URI())
			&& (!v.__proto__ || v.__proto__.constructor === Object);
		}
		:
		// _.type_tester('Object');
		function is_Object(v) {
			// 非如此不得與 jQuery 平起平坐…
			return get_object_type(v) === '[object Object]'
			// incase CeL.is_Object(new CeL.URI())
			// (!v.__proto__ || v instanceof Object)
			&& (!v.__proto__ || v.__proto__.constructor === Object);
		};

	_// JSDT:_module_
	.
	is_empty_object = function is_empty_object(value) {
		if (typeof value === 'object') {
			for (var key in value) {
				if (!Object.hasOwn || Object.hasOwn(value, key)) {
					return false;
				}
			}
			return true;
		}
		// return undefined: not object.
	};

	_.is_RegExp = _.type_tester('RegExp');

	// Object.getPrototypeOf
	_.is_Date = false && (new Date).__proto__ === Date.prototype ? function(value) {
		return value && value.__proto__ === Date.prototype;
	} : _.type_tester('Date');


	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	function is_version(version_now, version_to_test, exactly) {
		if (!isNaN(version_now)) {
			if (!version_to_test) {
				// 數字化版本號
				return +version_now;
			}
			return exactly ? version_now == version_to_test
					: version_now > version_to_test;
		}

		if (typeof version_now === 'string') {
			version_now = version_now.replace(/^v(?:er)/i, '');
			version_to_test = version_to_test && String(version_to_test).replace(/^v(?:er)/i, '');
			if (exactly) {
				return version_now === version_to_test;
			}
			version_now = version_now.split('.');
			if (!version_to_test) {
				// 數字化版本號 function digitize_version(version)
				// v0.9 → 0.09
				// v0.10 → 0.10
				// v0.12 → 0.12
				// v4.9 → 4.09
				// v15.12.0 → 15.12
				// v16.1 → 16.01
				// 預防: +1.9 > +1.10 == 1.1
				return +version_now[0] + version_now[1] / 100;
			}

			version_to_test = version_to_test.split('.');
			var diff = version_now[0] - version_to_test[0];
			if (diff)
				return diff > 0;

			if (!version_to_test[1])
				return true;
			diff = version_now[1] - version_to_test[1];
			if (diff)
				return diff > 0;

			return !version_to_test[2] || +version_now[2] >= +version_to_test[2];
		}

		if (!version_to_test)
			return version_now;
	}

	/**
	 * 檢測 Web browser / engine 相容性，runtime environment 執行環境。
	 * 
	 * Warning: should use CeL.platform('node', '12.10'), NOT
	 * CeL.platform('node', 12.10)
	 * 
	 * @param {String|Object}key
	 *            Web browser / engine name.
	 * @param {String|Number}[version]
	 *            最低版本。
	 * @param {Boolean}[exactly]
	 *            需要準確相同。
	 * 
	 * @returns {Boolean} 相容
	 */
	function platform(key, version, exactly) {
		// CeL.platform({name: version}, exactly);
		var tmp;
		if (_.is_Object(key)) {
			for (tmp in key) {
				// version 當作 exactly
				if (platform(tmp, key[tmp], version))
					return true;
			}
			return false;
		}
	
		key = String(key).toLowerCase();
		if (key in platform.alias)
			key = platform.alias[key];
		// CeL.platform(name, version, exactly);
		tmp = platform.browser;
		if (tmp && tmp.toLowerCase() === key
				&& (!version || is_version(platform.version, version, exactly))) {
			return true;
		}

		tmp = platform.engine;
		if (tmp && tmp.toLowerCase() === key
				&& (!version || is_version(platform.engine_version, version, exactly))) {
			return true;
		}

		tmp = platform.OS;
		if (tmp && tmp.toLowerCase().indexOf(
			//
			key === 'windows' ? 'win' : key) === 0) {
			return true;
		}

		return false;
	};

	platform.alias = {
		ie : 'msie',
		explorer : 'msie',
		'internet explorer' : 'msie'
	};

	platform.toString = function() {
		return platform.browser + ' ' + platform.version;
	};

	try {
		/**
		 * is_nodejs, shortcut for node.js: nodejs version.<br />
		 * Node.js 有比較特殊的 global scope 處理方法。<br />
		 * 有可能為 undefined!
		 * 
		 * @type {String|Undefined}
		 */
		platform.nodejs =
			// typeof global === 'object' &&
			typeof require === 'function' && require('fs')
			//
			&& typeof process === 'object' && typeof process.versions === 'object'
			//
			&& typeof console === 'object' && typeof console.log === 'function'
			// use `CeL.platform('node', version_to_test)`
			// if you want to test the version
			&& process.versions.node;
	} catch(e) {
		// require('fs') error?
	}

	platform.is_Windows = function() {
		// https://www.lisenet.com/2014/get-windows-system-information-via-wmi-command-line-wmic/
		// TODO: `wmic OS get Caption,CSDVersion,OSArchitecture,Version`

		// WMIC is deprecated.
		// https://docs.microsoft.com/zh-tw/dotnet/api/system.environment.osversion
		// nvironment.OSVersion屬性不提供可靠的方式，來識別正確的作業系統和它的版本。 因此，我們不建議使用此方法。
		// `PowerShell.exe -Command "&
		// {[System.Environment]::OSVersion.Version}"`

		// Windows: process.platform.toLowerCase().startsWith('win')
		// @see os.version()
		return platform.OS && platform.OS.toLowerCase().indexOf('win') === 0;
	};

	if (is_WWW)
		(function() {
			// e.g., 'Win32'
			platform.OS = navigator.platform;
			// shortcut for Windows
			platform.Windows = platform.is_Windows();
	
			var userAgent = String(navigator.userAgent), matched;
			platform.mobile = /mobile/i.test(userAgent);

			// 特別的網頁瀏覽器放前面。因此 "IE" 應置於後。
			if (matched = userAgent
					.match(/(Chromium|Chrome|Opera|Safari|Firefox|(?:MS)?IE)[\/ ](\d+\.\d+)/i)) {
				platform.browser = matched[1];
				platform.version = +matched[2];
			} else if (matched = userAgent.match(/rv:(\d+\.\d+)/)) {
				// http://msdn.microsoft.com/zh-tw/library/ie/hh869301%28v=vs.85%29.aspx
				// 依賴使用者代理字串的網站應該更新為使用現代技術，例如功能偵測、調適型配置以及其他現代做法。
				// 瀏覽器版本現在由新的修訂版 ("rv") 權杖報告。
				// The revision token indicates the version of IE11
				platform.browser = 'MSIE';
				platform.version = +matched[1];
			}
	
			// Web browser layout engine.
			var tmp = navigator.product;
			if (matched = userAgent
					.match(/(Gecko|WebKit|Blink|KHTML|Presto|Trident)[\/ ](\d+(?:\.\d+))/i)) {
				if (tmp && tmp !== matched[1] && has_console) {
					// e.g., IE 11
					console.error('platform: navigator engine error! [' + tmp
							+ '] != [' + matched[1] + ']');
				}
				platform.engine = matched[1];
				platform.engine_version = +matched[2];
			} else
				// Firefox: Gecko
				platform.engine = tmp;
		})();

	// for node.js: .platform.browser, .platform.is_interactive will setup in
	// _structure/module.js.

	_.platform = platform;

	// ------------------------------------------------------------------------

	var
	// is Microsoft Windows Script Host (WSH)
	script_host = !is_WWW && typeof WScript === 'object';

	// for JScript: 在 IE8, IE9 中，get_object_type(WScript) 為 '[object Object]' !!
	if (script_host = script_host && (!_.is_Object(WScript) || String(WScript) === 'Windows Script Host') && WScript.FullName) {
		_// JSDT:_module_
		.
		/**
		 * the fully qualified path of the host executable.<br />
		 * 'cscript' || 'wscript'
		 * 
		 * @see http://msdn.microsoft.com/en-us/library/z00t383b(v=vs.84).aspx
		 * @_memberOf _module_
		 */
		script_host = script_host = script_host.replace(/^(.+)\\/, '').toLowerCase().replace(/\.exe$/, '');
	}

	// 需要測試的環境 (both old and new; node, WScript, ...)：
	// Unix (e.g., Tool Labs) (included + jsub + interactive 互動形式)
	// Windows console (both included / interactive 互動形式)

	// cache. (('')) for unknown environment.
	var script_full_path = '';

	if (is_WWW) {
		script_full_path = unescape(window.location.pathname) || script_full_path;

	} else if (script_host) {
		// 在 .hta 中取代 WScript.ScriptFullName。
		script_full_path = WScript.ScriptFullName || script_full_path;

	} else if (platform.nodejs) {
		// 2021/4/20 11:36:5 require.main===undefined @ new electron-builder
		// package
		// may use `module.filename`
		if (require.main) {
			// for newer node.js. 須放置於 ((__filename)) 判斷前!
			script_full_path = require.main.filename || script_full_path;

		} else if (false /* 20160609 deprecated */) {
			// 以 require('/path/to/node.loader.js') 之方法 include library 時，
			// ((__filename)) 會得到 loader 之 path，
			// 且不能從 globalThis.__filename 獲得 script path，只好另尋出路。

			// isTTY: 為 nodejs: interactive 互動形式。
			// 但 isTTY 在 command line 執行程式時也會為 true！
			// && (process.stdout && !process.stdout.isTTY

			// Unix node console 時 include 的話無 require.main，而 __filename 為
			// node.loader.js 之 full path。

			// for old node.js
			// @see __dirname
			script_full_path = typeof __filename === 'string' && __filename || script_full_path;
			// process.argv[1]: 這不一定會包含 path！
			// || process.argv && process.argv[1])

			if (!script_full_path) {
				// debug
				console.error('No script_full_path @ nodejs!');
				console.log(process);
				console.log('require.main: ' + JSON.stringify(require.main));
				console.log('require.main.filename: ' + (require.main && require.main.filename));
				console.log('__filename: ' + __filename);
				console.trace(script_full_path);
			}
		}

	} else if (_.is_Object(old_namespace)) {
		// for jslibs 與特殊環境. 需確認已定義 _.is_Object()
		script_full_path = old_namespace.loader_script || script_full_path;
	}



	_// JSDT:_module_
	.
	/**
	 * 取得執行 script 之 path。
	 * 
	 * @returns {String}執行 script 之 path。
	 * @returns '' Unknown environment
	 */
	get_script_full_name = function () {
		return script_full_path;
	};

	_// JSDT:_module_
	.
	/**
	 * 取得執行 script 之名稱(不包括 .js 等 extension).
	 * 
	 * 在有 script 的情況，應該為 script name。<br />
	 * 在 node.js interactive 的情況，應該為 ''。
	 * 
	 * @returns {String} 執行 script 之 名稱。
	 * @returns '' unknown environment
	 */
	get_script_name = function (get_file_name) {
		var full_path = _.get_script_full_name(), m = full_path.match(/[^\\\/]*$/);
		return get_file_name ? m[0] : m[0].replace(/\.[^.]*$/, '');
	};

	if (false)
		_// JSDT:_module_
		.
		deprecated_get_script_name = function () {
			// deprecated
			var n, i, j;

			if (script_host) {
				n = WScript.ScriptName;
				i = n.lastIndexOf('.');
				return i === -1 ? n : n.slice(0, i);
			}

			if (is_WWW) {
				n = unescape(window.location.pathname), j = n.lastIndexOf('.');
				if (!(i = n.lastIndexOf('\\') + 1))
					// location.pathname 在 .hta 中會回傳 '\' 形式的 path
					i = n.lastIndexOf('/') + 1;
				// return window.document.title;
				return i < j ? n.slice(i, j) : n.slice(i);
			}
		};


	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// 環境變數處理。

	// 先建一個出來以利使用。
	_.env = Object.create(null);

	_// JSDT:_module_
	.
	/**
	 * Setup environment variables. 重新設定環境變數 (environment variables) enumeration
	 * 與程式會用到的 library 相關變數 / configuration。
	 * 
	 * @param {String}[OS_type]
	 *            type of OS
	 * @param {Boolean}[reset]
	 *            reset the environment variables
	 * 
	 * @returns {Object} environment variables set
	 */
	reset_env = function reset_env(OS_type, reset) {
		// CeL.env[環境變數名稱]=環境變數之值. this === _ === library_namespace
		var OS, env = !reset && _.env || (_.env = Object.create(null)),
		//
		win_env_keys = 'PROMPT|HOME|PUBLIC|SESSIONNAME|LOCALAPPDATA|OS|Path|PROCESSOR_IDENTIFIER|SystemDrive|SystemRoot|TEMP|TMP|USERNAME|USERPROFILE|ProgramData|ProgramFiles|ProgramFiles(x86)|ProgramW6432|windir'.split('|');

		if (platform.nodejs) {
			// import all environment variables
			Object.assign(env, process.env);
		}

		/**
		 * library main file base name
		 * 
		 * @name CeL.env.main_script_name
		 * @type {String}
		 */
		env.main_script_name = 'ce';

		/**
		 * default extension of script file.<br />
		 * setup_extension @ CeL.get_script_base_path() 可能會再設定一次，偵測為 .txt 的情況。
		 * @type {String}
		 * @see <a
		 *      href="http://soswitcher.blogspot.com/2009/05/blogger-host-javascript-file-for-free.html"
		 *      accessdate="2010/3/11 23:30">Blogger - Host Javascript File for
		 *      Free - Blogger,Javascript - Blogger Blog by Switcher</a>
		 * @name CeL.env.script_extension
		 */
		env.script_extension = '.js';

		/**
		 * library main file name<br />
		 * setup_extension @ CeL.get_script_base_path() 可能會再設定一次，偵測為 .txt 的情況。
		 * 
		 * full path: {@link CeL.env.registry_path} +
		 * {@link CeL.env.main_script}
		 * 
		 * @example<code>
		 * CeL.log('full path: [' + CeL.env.registry_path + CeL.env.main_script + ']');
		 * </code>
		 * 
		 * @name CeL.env.main_script
		 * @type {String}
		 */
		env.main_script = env.main_script_name + env.script_extension;

		/**
		 * module 中的這 member 定義了哪些 member 不被 extend。
		 * 
		 * @name CeL.env.not_to_extend_keyword
		 * @type {String}
		 */
		env.not_to_extend_keyword = 'no_extend';

		/**
		 * 非 native 的 method (native methods / native objects / built-in
		 * objects)， 可由 [KEY_not_native] ([CeL.env.not_native_keyword]) 來判別是否為
		 * native method。<br />
		 * e.g., use Object.defineProperty[CeL.env.not_native_keyword] to test
		 * if the browser don't have native support for Object.defineProperty().
		 * 
		 * @name CeL.env.not_native_keyword
		 * @type {String}
		 */
		env.not_native_keyword = KEY_not_native;

		/**
		 * 本 library source 檔案使用之 encoding。<br />
		 * Windows 中不使用會產生語法錯誤!
		 * 
		 * e.g., 'UTF-16', 'UTF-8'
		 * 
		 * @name CeL.env.source_encoding
		 * @type {String}
		 */
		env.source_encoding = 'UTF-16';

		/**
		 * creator group / 組織名稱 organization name
		 * 
		 * @name CeL.env.organization
		 * @type {String}
		 */
		env.organization = 'Colorless echo';

		/**
		 * default globalThis object. 有可能為 undefined!
		 * 
		 * @name CeL.env.globalThis
		 * @type {Object}
		 */
		env.global = globalThis;
		// from now on, `CeL.env.global` 已被覆蓋。

		/**
		 * 在 registry 中存放 library 資料的 base path
		 * 
		 * @name CeL.env.registry_base
		 * @type {String}
		 */
		env.registry_base = 'HKCU\\Software\\' + env.organization + '\\' + _.Class
					+ '\\';
		/**
		 * 在 registry 中存放 library 在 File System 中的 base path 的 key name
		 * 
		 * @name CeL.env.registry_base
		 * @type {String}
		 */
		env.registry_path_key_name = env.registry_base + 'path';
		// if(typeof WScript === 'object')
		try {
			// WScript.Echo(env.registry_path_key_name);
			// WScript.Echo(_.get_script_base_path());
			
			var WshShell = WScript.CreateObject("WScript.Shell");
			/**
			 * 存放在 registry 中的 path，通常指的是 library 在 File System 中的 base path。<br />
			 * 將在 setup_library_base_path 以此設定 base path，並以此決定 module path。
			 * 
			 * @name CeL.env.registry_path
			 * @type {String}
			 * @see https://msdn.microsoft.com/en-us/library/x83z1d9f.aspx
			 * 
			 */
			env.registry_path = WshShell.RegRead(env.registry_path_key_name)
			// 去除 filename
			// .replace(/[^\\\/]+$/, '')
			;
			// _.debug(env.registry_path);

			// @see getEnvironment() @ CeL.application.OS.Windows
			var WshEnvironment = WshShell.Environment("Process");
			for (var index = 0; index < win_env_keys.length; index++) {
				var key = win_env_keys[index], value = WshEnvironment(key);
				if (value)
					env[key] = value;
			}

		} catch (e) {
			// _.warn(e.message);
		}

		if (platform.nodejs) {
			// 環境變數 in node.js
			if (false) {
				for (var index = 0; index < win_env_keys.length; index++) {
					var key = win_env_keys[index], value = process.env[key];
					if (value)
						env[key] = value;
				}
			}

			var node_os = require('os');

			if (!env.home
			// home directory 用戶個人文件夾 家目錄
			&& !(env.home = typeof node_os.homedir === 'function' && node_os.homedir()
			/**
			 * @see https://nodejs.org/api/os.html#os_os_userinfo_options
			 * 
			 * The value of homedir returned by os.userInfo() is provided by the
			 * operating system. This differs from the result of os.homedir(),
			 * which queries environment variables for the home directory before
			 * falling back to the operating system response.
			 * 
			 * os.userInfo() Throws a SystemError if a user has no username or
			 * homedir.
			 */
			|| typeof node_os.userInfo === 'function' && node_os.userInfo() && node_os.userInfo().homedir
			// http://stackoverflow.com/questions/9080085/node-js-find-home-directory-in-platform-agnostic-way
			|| process.env.HOME || process.env.USERPROFILE)
			// e.g., Windows 10
			&& process.env.HOMEDRIVE && process.env.HOMEPATH) {
				/** {String}user home directory */
				env.home = process.env.HOMEDRIVE + process.env.HOMEPATH;
			}

			if (!env.user) {
				env.user = typeof node_os.userInfo === 'function' && node_os.userInfo() && node_os.userInfo().username
				|| process.env.USER || process.env.USERNAME
				// e.g., macOS
				|| process.env.LOGNAME;
			}

			env.line_separator = node_os.EOL || env.line_separator;

			// Release memory. 釋放被占用的記憶體。
			node_os = null;
		}

		// 條件式編譯(条件コンパイル) for version>=4, 用 /*@ and @*/ to 判別。
		// http://msdn.microsoft.com/en-us/library/ie/8ka90k2e(v=vs.94).aspx
		/**
		 * Conditional compilation is not supported in Internet Explorer 11
		 * Standards mode and Windows Store apps. Conditional compilation is
		 * supported in Internet Explorer 10 Standards mode and in all earlier
		 * versions.
		 */
/**
 * <code>
/*@cc_on
@if(@_PowerPC||@_mac)
OS='Mac';
@else
@if(@_win32||@_win64||@_win16)
OS='Windows';
@else
OS='UNIX'; // unknown
@end
@end@
 */

		/**
		 * 本次執行所在 OS 平台。
		 * 
		 * @name CeL.env.OS
		 * @type {String}
		 */
		env.OS = OS = OS_type || OS
				// @see os.version()
				|| platform.nodejs && process.platform
				// 假如未設定則由 path 判斷。
				|| (_.get_script_full_name().indexOf('\\') !== -1 ? 'Windows' : 'UNIX')
				//
				|| env.OS;

		var is_UNIX = env.OS.toLowerCase() in {
			// macOS @ node.js
			darwin : true,
			linux : true,
			freebsd : true,
			unix : true
		};

		/**
		 * 文件預設 line separator / NewLine / new_line / line delimiter。<br />
		 * in VB: vbCrLf
		 * 
		 * @name CeL.env.line_separator
		 * @type {String}
		 */
		env.line_separator =
				is_UNIX ? '\n' : OS === 'Mac' ? '\r'
				// e.g., 'win32'
				: '\r\n';

		/**
		 * file system 預設 path separator。<br />
		 * platform-dependent path separator character, 決定目錄(directory)分隔。
		 * 
		 * @name CeL.env.path_separator
		 * @type {String}
		 * 
		 * @see https://stackoverflow.com/questions/125813/how-to-determine-the-os-path-separator-in-javascript
		 */
		env.path_separator =
			platform.nodejs && require('path') && require('path').sep
			|| (is_UNIX ? '/' : '\\');

		if (env.home && !/[\\\/]$/.test(env.home)) {
			// CeL.append_path_separator(CeL.env.home)
			env.home += env.path_separator;
		}

		/**
		 * library 之外部檔案 (external source files) 放置地。 純目錄名，不加目錄分隔。
		 * 
		 * @name CeL.env.external_directory_name
		 * @type {String}
		 */
		env.external_directory_name = 'external';

		/**
		 * library 之資源文件 (resource files) 放置地。 純目錄名，不加目錄分隔。 resources/
		 * 
		 * @name CeL.env.resources_directory_name
		 * @type {String}
		 */
		env.resources_directory_name = 'resources';

		/**
		 * 預設 module name separator。
		 * 
		 * @name CeL.env.module_name_separator
		 * @type {String}
		 */
		env.module_name_separator = '.';
		/**
		 * path_separator pattern in 通用(regular)運算式。
		 * 
		 * @name CeL.env.path_separator_pattern
		 * @type {String}
		 */
		env.path_separator_pattern = _.to_RegExp_pattern ?
				_.to_RegExp_pattern(env.path_separator)
				: (env.path_separator === '\\' ? '\\' : '') + env.path_separator;
		/**
		 * 預設語系。<br />
		 * 0x404:中文-台灣,<br />
		 * 0x0411:日文-日本
		 * 
		 * @name CeL.env.locale
		 * @see <a
		 *      href="http://msdn.microsoft.com/zh-tw/library/system.globalization.cultureinfo(VS.80).aspx">CultureInfo
		 *      類別</a>
		 * @type {Number}
		 */
		env.locale = 0x404;

		/**
		 * script name.
		 * 
		 * @name CeL.env.script_name
		 * @type {String}
		 */
		env.script_name = _.get_script_name();
		/**
		 * base path of script.
		 * 
		 * TODO:<br />
		 * 以 reg 代替
		 * 
		 * @name CeL.env.script_base_path
		 * @type {String}
		 */
		env.script_base_path = _.get_script_full_name()
			// 去除 filename
			.replace(/[^\\\/]+$/, '');

		/**
		 * Legal identifier name in RegExp.<br />
		 * 這 pattern 會佔去兩個筆紀錄: first letter, and least.<br />
		 * .replace(/_/ [g],'for first letter')<br />
		 * .replace(/\\d/,'for least')<br />
		 * 這邊列出的只是合法 identifier 的*子集*，且未去除 reserved words!<br />
		 * 請注意實際判別須加入 ^..$
		 * 
		 * 不用 \d 而用 0-9 是因為 \d 還包括了 MATHEMATICAL BOLD DIGIT。<br />
		 * <a href="http://blog.est.im/archives/3229" accessdate="2010/11/16
		 * 20:6">基于正则的URL匹配安全性考虑</a>
		 * 
		 * @name CeL.env.identifier_RegExp
		 * @type {RegExp}
		 * @see ECMA-262 7.6 Identifier Names and Identifiers
		 */
		env.identifier_RegExp = /([a-zA-Z$_]|\\u[0-9a-fA-F]{4})([a-zA-Z$_0-9]+|\\u[0-9a-fA-F]{4}){0,63}/;

		/**
		 * Legal identifier name in String from env.identifier_RegExp.
		 * 
		 * @name CeL.env.identifier_String
		 */
		env.identifier_String = env.identifier_RegExp.source;

		// test for-of statement (IterationStatement)
		try {
			env.has_for_of = new Function('for(var i of [7])return i===7;')();
		} catch (e) {
			// TODO: handle exception
		}

		// arrow function
		try {
			env.has_arrow_function = new Function('a','return((a)=>a+1)(a);')(2) === 3;
		} catch (e) {
			// TODO: handle exception
		}

		// RegExp lookbehind assertions
		// from ECMA-262, 9th edition, ECMAScript 2018
		try {
			env.has_RegExp_lookbehind = '$12.34'.match(new RegExp('(?<=\\D)\\d+'))[0] === '12'
				// http://2ality.com/2017/05/regexp-lookbehind-assertions.html
				&& 'a1ba2ba3b'.match(new RegExp('(?<=b)a.b', 'g')).join(',') === 'a2b,a3b'
				&& '0b11b22b33b4'.match(new RegExp('(?<!1)b\\d', 'g')).join(',') === 'b1,b3,b4';
		} catch (e) {
			// TODO: handle exception
		}

		// BigInt
		try {
			env.has_bigint = typeof BigInt === 'function' && typeof BigInt(1) === 'bigint'
				&& eval('999999n*8888888n*777777777n===6913572635062427358024n');
		} catch (e) {
			// TODO: handle exception
		}

		// ** 亦即，所有預先設定 (configuration) 應該放置於 CeL.env 之下。
		// 把 old_namespace.env 下原先的環境設定 copy 過來。
		// 例如用在直接讀取檔案內容並 eval()，要設定 env.script_extension, env.main_script 的情況。
		if (_.is_Object(old_namespace) && _.is_Object(old_namespace.env)) {
			Object.assign(env, old_namespace.env);
		}

		return env;
	};


	_// JSDT:_module_
	.
	// TODO
	get_identifier_RegExp = function (pattern, flag, add_for_first_letter, add_for_all_letter) {
		var s = _.env.identifier_String;
		if (add_for_first_letter)
			s = s.replace(/_/g, add_for_first_letter);
		if (add_for_all_letter)
			s = s.replace(/0-9/g, add_for_all_letter);

		return new RegExp(
				(get_object_type(pattern) === '[object RegExp]' ? pattern.source : pattern)
					.replace(/$identifier/g, s), flag || '');
	};


	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	/**
	 * setting pair.<br />
	 * 提供給函數設定 flag / optional argument 處理用。
	 * 
	 * @example <code>

	var setting = setting_pair({});

	 * </code>
	 * 
	 * @param default_setting
	 *            預設 setting.
	 * 
	 * @returns {Function}
	 */
	function setting_pair(default_setting) {
		var setting_now = default_setting || Object.create(null),
		setting_handle = function (name, value) {
			if (_.is_Object(name)) {
				// setter
				for (var i in name) {
					// _.debug('[' + i + ']=[' + name[i] + ']'),
					if (typeof name[i] !== 'undefined')
						setting_now[i] = name[i];
					else if (i in setting_now)
						delete setting_now[i];
				}
				return setting_now;
			}

			if (Array.isArray(name)) {
				// getter
				var r = [];
				name.forEach(function (n, i) {
					if (n in setting_now)
						r[i] = setting_now[n];
				});
				return r;
			}

			if (false)
				if (arguments.length > 1)
					_.debug('[' + name + ']=[' + value + ']');
			return arguments.length > 1 ? (setting_now[name] = value)
					: name ? setting_now[name] : setting_now;
		};
		setting_handle.reset = function (setting) {
			return setting_now = setting || Object.create(null);
		};

		// additional setting.
		for (var i = 1, length = arguments.length, o; i < length; i++)
			if (_.is_Object(o = arguments[i]))
				setting_handle(o);

		return setting_handle;
	}


	/**
	 * <code>

	setting_pair.prototype.handle = function(name, value) {
		var setting_now = this.setting_now;

		if (_.is_Object(name)) {
			// setter
			for ( var i in name) {
				//_.debug('[' + i + ']=[' + name[i] + ']'),
				if(typeof name[i] !== 'undefined')
					setting_now[i] = name[i];
				else if(i in setting_now)
					delete setting_now[i];
			}
			return setting_now;
		}

		if (Array.isArray(name)) {
			// getter
			var i, r = [], n;
			for (i in name) {
				n = name[i];
				if (n in setting_now)
					r[i] = setting_now[n];
			}
			return r;
		}

		//if(arguments.length > 1) _.debug('[' + name + ']=[' + value + ']');
		return arguments.length > 1 ? (setting_now[name] = value)
				: setting_now[name];
	};
	setting_pair.prototype.reset = function(setting) {
		return this.setting_now = setting || Object.create(null);
	};

	</code>
	 */


	_// JSDT:_module_
	.
	setting_pair = setting_pair;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// for debug & log.


	_// JSDT:_module_
	.
	/**
	 * Tell if it's now debugging.
	 * 
	 * @param {ℕ⁰:Natural+0}[debug_level]
	 *            if it's now in this debug level.
	 * 
	 * @returns {Boolean} It's now in specified debug level.
	 * @returns {ℕ⁰:Natural+0} It's now in what debug level (Integer).
	 */
	is_debug = function (debug_level) {
		return typeof debug_level !== 'number' ? debug || 0
				: debug >= debug_level;
	};

	_// JSDT:_module_
	.
	/**
	 * Set debugging level
	 * 
	 * @param {ℕ⁰:Natural+0}[debug_level]
	 *            The debugging level to set.
	 * 
	 * @type {ℕ⁰:Natural+0}
	 * @returns {ℕ⁰:Natural+0} debugging level now
	 */
	set_debug = function (debug_level) {
		if (!isNaN(debug_level))
			debug = Math.max(0, debug_level);

		else if (typeof debug_level === 'undefined' && !debug)
			debug = 1;

		if (Error.stackTraceLimit > 0) {
			// Node.js: default: 10
			Error.stackTraceLimit = debug > 2 ? 100 : debug > 0 ? 15 : 10;
		}

		return debug;
	};





	_// JSDT:_module_
	.
	/**
	 * Get the hash key of text.
	 * 
	 * @param {String}text
	 *            text to test
	 * 
	 * @returns {String} hash key
	 */
	_get_hash_key = function (text) {
		// text = String(text);
		// text = '' + text;
		var l = text.length, take = 30, from = .3;
		from = Math.floor(l * from);
		if (false)
			_.log(from + '~' + l + ': '
					+ (l - from < take ? text : text.substr(from, take)));
		return l - from < take ? text : text.substr(from, take);
	};

	/**
	 * <code>

	Chrome/22.0.1229.64
	fast->slow:
	(1000000*Math.random())>>>0
		but int32 only
	parseInt(1000000*Math.random())
	Math.floor(1000000*Math.random())

	</code>
	 */



	// for JScript<=5
	try {
		// @deprecated /^\s*function[\s\n]+(\w+)[\s\n]*\(/
		// ^\\s*: JScript 6-9 native object 需要這個。
		// function_name_pattern = new
		// RegExp('^\\s*function[\\s\\n]+(\\w+)[\\s\\n]*\\(');

		_.PATTERN_function = function_name_pattern =
		// [ all, function name, function arguments, function body ]
		/^\s*function(?:[\s\n]+([^\s\n]*?)[\s\n]*)?\([\s\n]*([^)]*?)[\s\n]*\)[\s\n]*{[\s\n]*([\s\S]*)[\s\n]*}[\s\n;]*$/;

		// TODO: arrow function expression
		// [ all, function arguments, function body ]
		// e.g., "(n) => {return n>0;}"
		/^\s*\([\s\n]*([^)]*?)[\s\n]*\)[\s\n]*=>[\s\n]*{[\s\n]*([\s\S]*)[\s\n]*}[\s\n;]*$/;

	} catch (e) {
		function_name_pattern = function emulate_function_name(fs) {
			fs = String(fs);
			var l = 'function ', r, s;

			if (fs.indexOf(l) === 0) {
				l = l.length;
				s = {
					' ': 1,
					'\n': 1,
					'\r': 1,
					'\t': 1
				};
				while (fs.charAt(l) in s)
					l++;
				r = fs.indexOf('(', l);
				while (fs.charAt(--r) in s) { }

				return [, fs.slice(l, r + 1)];
			}
		};
		// TODO
		if (typeof RegExp !== 'object')
			globalThis.RegExp = function () { };
	}

	/**
	 * 獲得函數名。
	 * 
	 * @param {Function}fr
	 *            function reference
	 * @param {String}ns
	 *            name-space
	 * @param {Boolean}force_load
	 *            force reload this name-space
	 * 
	 * @returns
	 * @see 可能的話請改用 {@link CeL.native.parse_function}(F).funcName
	 * @since 2010/1/7 22:10:27
	 */
	function get_function_name(fr, ns, force_load) {
		if (!fr)
			try {
				fr = arguments.caller;
			} catch (e) {
				if (!fr)
					return '';
			}

		if (fr.name)
			return fr.name;

		var
		// 初始化變數 'm'。
		// 不用 insteadof 是怕傳入奇怪的東西，例如 {String} script code.
		m = typeof fr,
		// function body text (函數的解譯文字)
		ft, b, load, k, i;

		if (m === 'function') {
			// 勿更改傳入之 argument
			if(false){
				if ('toString' in fr) {
					m = fr.toString;
					delete fr.toString;
				}
				ft = String(fr);
				if (m)
					fr.toString = m;
			}

			// TODO: cache Function.prototype.toString
			ft = Function.prototype.toString.call(fr);
		} else if (m === 'string')
			// typeof fr === 'string'
			ft = fr;
		else
			return '';

		// 以函數的解譯文字獲得函數名
		m = _.is_RegExp(function_name_pattern) ?
				// 包含引數: + '(' + (f ? m[2] : '') + ')';
				((m = ft.match(function_name_pattern)) && m[1] || /^[a-zA-Z_\d.]{1,30}$/.test(ft) && ft || 0)
				: function_name_pattern instanceof Function ?
					function_name_pattern(ft)
					: 0;
		if (m) {
			// _.debug('matched ' + m, 1, _.Class + '.get_function_name');
			return m;
		}
		// 無法從 function code 本身得到 name 之資訊。
		// 匿名函數?

		// 查詢是否是已註冊之 function。
		b = get_function_name.b;
		if (b)
			load = get_function_name.ns;
		else
			get_function_name.b = b = Object.create(null), get_function_name.ns = load = Object.create(null);

		if (!ns)
			ns = _;

		// cache functions
		if ((_.is_Function(ns) || _.is_Object(ns)) && ns.Class
						&& (force_load || !load[ns.Class])) {
			for (i in ns)
				if (typeof ns[i] === 'function') {
					k = _._get_hash_key(String(ns[i]));
					m = ns.Class + _.env.module_name_separator + i;
					// _.debug(m + ': ' + k + (', ' + ns[i]).slice(0, 200));
					if (!(m in load)) {
						load[m] = 1;
						if (!b[k])
							b[k] = [];
						b[k].push([m, ns[i]]);
					}
				}
			load[ns.Class] = 1;
		}

		// 將函數與 cache 比對以獲得函數名。
		// TODO: Array.prototype.indexOf()
		m = b[_._get_hash_key(ft)];
		if (m)
			for (i = 0; i < m.length; i++) {
				b = m[i][1];
				if (// typeof fr === 'function' &&
						fr === b || ft === String(b))
					return m[i][0];
			}

		return '';// '(unknown)';
	};

	_// JSDT:_module_
	.
	get_function_name = get_function_name;


	// noop
	_// JSDT:_module_
	.
	null_function =
		// new Function;
		function () { };


	_// JSDT:_module_
	.
	constant_function = function(value) {
		value = String(value);

		if (!(value in constant_function)
			// true/false/Number/null/undefined/global variables only!
			// && ((value in globalThis) || !isNaN(value))
			) {
			constant_function[value] = new Function('return(' + value + ')');
		}
		return constant_function[value];
	};

	try {
		_.constant_function(false);
	} catch (e) {
		// Firefox/49.0 WebExtensions 可能 throw:
		// Error: call to Function() blocked by CSP
		_.constant_function = function(value) {
			return function() {
				return value;
			};
		};
	}

	// ---------------------------------------------------------------------//
	// Initialization

	// ---------------------------------------------------------------------//
	// 處理 styled/stylized messages.
	// @see
	// https://stackoverflow.com/questions/22155879/how-do-i-create-formatted-javascript-console-log-messages

	/**
	 * 將 messages 去掉 style，轉成 plain text messages。
	 * 
	 * @param {Array}messages
	 *            附加格式的訊息。 messages with style.
	 * 
	 * @returns {String}plain text messages.
	 */
	function SGR_to_plain(messages) {
		return Array.isArray(messages) ? messages.filter(function(message, index) {
			return index % 2 === 0;
		}).join('')
		// '' + messages
		: messages;
	}

	/** {Object}cache for CeL.interact.console.SGR */
	var SGR, SGR_debug;

	/**
	 * 在已經存在 SGR 的功能下，以之格式化訊息。
	 * 
	 * @param {Array}messages
	 *            附加格式的訊息。 messages with style. 將當作 new SGR() 之 arguments。
	 * 
	 * @returns {String}formatted messages. 格式化後的訊息。
	 * 
	 * @see 'interact.console'
	 */
	function new_SGR(messages) {
		// 注意: 在 call stack 中有 SGR 時會造成:
		// RangeError: Maximum call stack size exceeded
		// 因此不能用於測試 SGR 本身! 故須避免之。
		// CeL.is_debug(min_debug): assert: SGR 在這 level 以上才會呼叫 .debug()。
		// TODO: 檢測 call stack。
		return _.is_debug(SGR_debug)
		// 若 SGR.CSI 被改過，則即便顯示亦無法得到預期之結果，不如跳過。
		|| SGR.CSI !== SGR.default_CSI ? SGR_to_plain(messages)
		// 顯示具格式（如 color 顏色）的 messages。
		: new SGR(messages).toString();
	}

	/**
	 * 處理 console 之 message。添加主控端報告的顯示格式（如 color 顏色）。<br />
	 * 若無法執行 new SGR()，則會將 messages 轉成 plain text。實作部分詳見 SGR。
	 * 
	 * @param {Array}messages
	 *            附加格式的訊息。 messages with style.
	 * 
	 * @returns {String}格式化後的訊息。
	 * 
	 * @see to_SGR() @ 'application.debug.log'
	 */
	function to_SGR(messages) {
		if (_.SGR) {
			SGR = _.SGR;
			SGR_debug = SGR.min_debug_level;
			return (_.to_SGR = new_SGR)(messages);
		}
		// 將 messages 去掉 style，轉成 plain text messages。
		return SGR_to_plain(messages);
	}

	// 在 WWW 的環境下，則直接 pass style 設定。
	_.to_SGR = is_WWW ? SGR_to_plain : to_SGR;

	// --------------------------------

	var
	/** {RegExp}是否具有 caller。能辨識紀錄之 caller。須排除"C:\"之類。 */
	PATTERN_log_caller = /^([a-z_\d.]{2,}:\s*)(.+)$/i,
	/** {Boolean}使用 styled 紀錄。 */
	using_style = !_.env.no_log_style,
	/** {Object}default style of console. */
	default_style = {
		// trace : '',
		// debug 另外設定。
		// debug : '',
		log : 'green',
		// information
		info : 'cyan',
		// warning
		warn : 'yellow',
		error : 'red;bg=white'
	};

	// a simple simulation of CeL.application.locale.gettext
	// Please include application.locale if you need a full version.
	// cache gettext only inside sync function, or using CeL.gettext instead:
	// application.locale 會自動 overwrite .gettext。
	// 假如多次使用，不如直接 include application.locale。
	function simple_gettext(text_id) {
		if (false && _.locale && _.locale.gettext) {
			_.gettext = _.locale.gettext;
			return _.gettext.apply(null, arguments);
		}

		// a simplified version
		// assert: typeof text_id === 'string'
		var arg = arguments;
		return text_id.replace(/%(\d+)/g, function(all, NO) {
			return NO < arg.length ?
			// extract_message_from_nodes(arg[NO])
			arg[NO] : all;
		});
	}

	_.gettext = simple_gettext;

	/**
	 * @example <code>

	var gettext = CeL.cache_gettext(function(_) { gettext = _; });
	var gettext = CeL.cache_gettext(_ => gettext = _);

	 </code>
	 */
	_.cache_gettext = function(adapter) {
		return function _gettext() {
			var gettext = _.locale && _.locale.gettext;
			if (gettext) {
				adapter(gettext);
			} else {
				gettext = simple_gettext;
			}

			return gettext.apply ? gettext.apply(null, arguments)
			// 這方法沒有準確符合arguments的長度，有缺陷。
			: gettext(arguments[0], arguments[1], arguments[2], arguments[3]);
		};
	};

	if (platform.nodejs && process.versions) {
		process.versions[library_name.toLowerCase()] = library_version;
		if (using_style === undefined) {
			// 若為 nodejs，預設使用 styled 紀錄。
			// using_style = _.platform.nodejs
			using_style = !!process.versions.node;
		}
	}

	function is_DOM_node(node) {
		return _.is_Object(node) && ('T' in node
		// || 'span' in node
		);
	}

	// 在沒有載入 new_node() @ CeL.DOM 的情況下嘗試解析 DOM object
	function extract_message_from_nodes(nodes, style_array) {
		if (Array.isArray(nodes)) {
			// nodes.forEach()
			for (var index = 0; index < nodes.length; index++) {
				var node = nodes[index];
				nodes[index] = extract_message_from_nodes(node, style_array);
				if (_.gettext.append_message_tail_space && node && node.T) {
					var inner = nodes[index + 1];
					// 只是簡易處理，不完善。
					// @see CeL.interact.DOM.new_node()
					inner = _.gettext.apply(null, Array.isArray(inner) ? inner : [ inner ]);
					nodes[index] = _.gettext.append_message_tail_space(nodes[index], {
						no_more_convert : true,
						next_sentence : inner
					});
				}
			}
			return nodes.join('');
		}

		if (!_.is_Object(nodes)) {
			if (style_array) {
				style_array.push(style_array.has_style ? [
				style_array.has_style.fg ? '-fg' : '',
				style_array.has_style.bg ? '-bg' : ''].join(';') : '', nodes);
				if (style_array.has_style)
					style_array.has_style = true;
			}
			return nodes;
		}

		var tag_name = nodes.$;
		if (!tag_name) {
			for (tag_name in nodes) {
				break;
			}
		}

		var inner = nodes[tag_name];
		if (tag_name !== 'T') {
			inner = extract_message_from_nodes(inner);
		} {
			inner = _.gettext.apply(null, Array.isArray(inner) ? inner : [ inner ]);
		}

		var color_index = _.SGR && _.SGR.color_index,
		//
		style = color_index && (nodes.style || nodes.S);
		// console.log(style);
		// parse CSS to SGR color style
		if (typeof style === 'string') {
			style.replace(/(?:^|[;\s])(background-)?color\s*:\s*([^\s;]+)/g, function(all, bg, color) {
				color = color.toLowerCase();
				if (!(color in color_index))
					return;
				if (typeof style === 'string') {
					style = Object.create(null);
				}
				style[bg ? 'bg' : 'fg'] = color;
			});
			if (typeof style === 'string') {
				style = '';
			}
		} else if (style && ((style.color in color_index)
			|| (style.backgroundColor in color_index))) {
			style = {
				fg : (style.color in color_index) && style.color || '',
				bg : (style.backgroundColor in color_index) && style.backgroundColor || ''
			};
		} else
			style = '';

		if (style_array) {
			style_array.push(style, inner);
			if (style)
				style_array.has_style = style;
		}
		// 不再傳入 style_array
		return inner;
	}

	/**
	 * 預先處理 log messages。
	 * 
	 * TODO: 判別 console 是否具備 stylify/著色功能。
	 * 
	 * @param {Array|String}messages
	 *            欲記錄訊息。
	 * @param {Boolean}[from_styled_logger]
	 *            caller is styled logger.
	 * 
	 * @returns {Array}styled messages
	 */
	function preprocess_log_messages(messages, type, from_styled_logger) {
		// console.log(using_style);
		// console.trace(messages);
		if (!using_style) {
			// 不採用 styled log。不自動著色。
			return typeof messages === 'string' ? messages : SGR_to_plain(messages);
		}

		var style_array;
		if (Array.isArray(messages)) {
			// messages.forEach()
			for (var index = 0; index < messages.length; index++) {
				if (is_DOM_node(messages[index])) {
					style_array = true;
					break;
				}
			}

		} else if (is_DOM_node(messages)) {
			style_array = true;
		}
		if (style_array) {
			// 從頭到尾沒有特殊格式的話，就轉成純粹的字串。
			messages = extract_message_from_nodes(messages, style_array = [ '' ]);
			if (style_array.has_style) {
				// reset style
				if (_.is_Object(style_array.has_style)) {
					style_array.push([
		  				style_array.has_style.fg ? '-fg' : '',
  						style_array.has_style.bg ? '-bg' : ''].join(';'), '');
				}
				messages = style_array;
			}
			// console.trace(style_array);
		}

		var matched;
		if (typeof messages === 'string') {
			// 自動著色。
			matched = messages.match(PATTERN_log_caller);
			if (matched) {
				// e.g., CeL.log("function_name: messages");
				messages = [ matched[1], default_style[type], matched[2], 0 ];
			} else {
				messages = [ '', default_style[type], messages, 0 ];
			}

		} else if (from_styled_logger) {
			// assert: Array.isArray(messages)
			// 自動著色。
			// TODO: 效果不佳。
			matched = messages[0].match(PATTERN_log_caller);
			if (matched) {
				// e.g., CeL.log([ 'function_name: messages 0', 'style',
				// 'messages 1' ]);
				messages.splice(0, 1, '', default_style[type], matched[1], 0, matched[2]);
				// 最後設定 reset，避免影響到後頭之顯示。
				if (messages.length % 2 === 0)
					messages.push('', 0);
				else
					messages.push(0);
			}
		}

		return _.to_SGR(messages);
	}

	_.preprocess_log_messages = preprocess_log_messages;

	/**
	 * 不能放在 if (has_console) {} 中 @ node.js v0.10.25:
	 * 
	 * <code>
	   SyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.
	   </code>
	 */
	function setup_log(type) {
		// 將 CeL[type] 轉成 console[_type]。
		var _type = type;
		if (!console[_type])
			// e.g., 不見得在所有平台上都有 console.info() 。
			return;

		_[type] = function(messages, clear) {
			if (clear && console.clear)
				console.clear();
			// IE8 中，無法使用 console.log.apply()。
			// return console[type].apply(console, arguments);
			console[_type](preprocess_log_messages(messages, type));
		};

		/**
		 * setup frontend of styled messages. 使可輸入 CeL.s*().
		 * 
		 * <code>
		   CeL.slog([ 'CeJS: This is a ', 'fg=yellow', 'styled', '-fg', ' message.' ]);
		   CeL.sinfo('CeJS: There are some informations.');
		   </code>
		 */
		_['s' + type] = function(messages, clear) {
			if (clear && console.clear)
				console.clear();
			console[_type](preprocess_log_messages(messages, type, true));
		};
	}

	// temporary decoration of debug console,
	// in case we call for nothing and raise error
	if (has_console) {
		_.env.has_console = has_console;

		// 利用原生 console 來 debug。
		// 不直接指定 console.*: 預防 'Uncaught TypeError: Illegal invocation'.

		(function() {
			for ( var type in default_style) {
				// default style: foreground 前景
				default_style[type] = 'fg=' + default_style[type];
				setup_log(type);
			}
		})();

		// caller: from what caller
		_.debug = function (messages, level, caller) {
			if (!_.is_debug(level))
				return;

			if (caller) {
				caller = _.get_function_name(caller) + ': ';
				if (typeof messages === 'object') {
					if (Array.isArray(messages)) {
						// e.g., CeL.debug([{T:'msg'},'msg2'],1,'caller');
						messages.unshift(caller);
					} else {
						// e.g., CeL.debug({T:'msg'},1,'caller');
						messages = [ caller, messages ];
					}
				} else {
					// e.g., CeL.debug('msg',1,'caller');
					messages = caller + messages;
				}
			}
			// console.trace()
			console.log(preprocess_log_messages(messages, 'debug'));
		};
		// styled logger
		_.sdebug = function (messages, level, caller) {
			if (!_.is_debug(level))
				return;
			if (caller) {
				if (!Array.isArray(messages))
					// assert: (typeof messages === 'string')
					messages = [ messages ];
				messages.unshift('fg=blue', _.get_function_name(caller) + ': ', 0);
				messages = _.to_SGR(messages);
			} else {
				messages = preprocess_log_messages(messages, 'debug', true);
			}
			// console.trace()
			console.log(messages);
		}

	} else {
		_.error = _.warn = _.log = function (message) {
			/**
			 * 請注意:<br />
			 * _.log.buffer === this.log.buffer !== log.buffer<br />
			 * 
			 * 在 WScript 中 需要用 _.log，其他則可用 log。<br />
			 * 因此應該將所有類似的值指定給雙方，並注意不是[常數]的情況。
			 */
			var _s = _.log;
			// _s.function_to_call.apply(null,arguments);
			// _s.function_to_call.apply(globalThis, arguments);

			_s.buffer.push(message);

			if (!(_s.max_length >= 0))
				_s.max_length = 0;

			// 沒加 'debug &&' 在 IE 中會跳出大量 alert.
			if (debug && _s.buffer.length > _s.max_length) {
				_s.function_to_call.call(globalThis, _s.buffer.join('\n\n'));
				// reset buffer
				_s.buffer = [];
			}
		};

		_.debug = function (message, level, from) {
			if (_.is_debug(level))
				return _.log((from && (from = _.get_function_name(from)) ? from + ': ' : '[debug] ') + message);
		};

		/**
		 * test:<br />
		 * var k=function l(){alert(l.m);};k.m=1;alert(l.m+','+k.m);k();
		 * 
		 * JScript 中<br />
		 * k();<br />
		 * 為 undefined, 其他會把 "l." 代換成 "k."？
		 * 
		 * @inner
		 */
		// _.debug.buffer = _.error.buffer = _.warn.buffer =
		_.log.buffer = [];


		// _.debug.max_length = _.error.max_length = _.warn.max_length =
		_.log.max_length = 0;
		// if(!isNaN(CeL.log.max_length)) CeL.log.max_length = 20;


		var max_log_length = 1000,
		prepare_message = function (message) {
			message = String(message);
			if (message.length > 2 * max_log_length)
				message = message.slice(0, max_log_length) + '\n\n...\n\n' + message.slice(-max_log_length);
			return message;
		};

		// _.debug.function_to_call = _.error.function_to_call =
		// _.warn.function_to_call =

		_.log.function_to_call =
			// console 已在前面特別處理，以作美化。
			// typeof JSalert === 'function' ? JSalert :
			script_host ?
				function (message) { WScript.Echo(prepare_message(message)); } :
			// for jslibs
			typeof _configuration === 'object' && typeof _configuration.stdout === 'function' ?
				function (message) { _configuration.stdout(prepare_message(message) + '\n'); } :
			// for JSDB
			typeof writeln === 'function' ?
				function (message) { writeln(prepare_message(message)); } :
			// 預設以訊息框代替。
			typeof alert === 'object' || typeof alert === 'function' ?
				function (message) { alert(prepare_message(message)); } :
			// 無任何可用之反映管道。
			_.null_function;
	}

	// cache
	_.debug_console = function debug_console() {};
	_.debug_console.log = _.log;
	_.debug_console.warn = _.warn;
	_.debug_console.error = _.error;
	_.debug_console.debug = _.debug;

	// CeL.log_temporary(): temporary message
	// console_message(), log_status(), interactive_message()
	// Will re-set @ set_initializor() @ module.js
	_.log_temporary = _.null_function;

	// ---------------------------------------------------------------------//
	// 補強 (shim, polyfill) 用的 functions。
	// setup Object.defineProperty()

	/**
	 * 修改/加入屬性 propertyKey 至物件 object。<br />
	 * shim for 先前過舊的版本。
	 * 
	 * @param {Object|Function}object
	 *            要加入或修改屬性的目標物件。
	 * @param {String}propertyKey
	 *            屬性名稱。
	 * @param {Object}attributes
	 *            屬性的描述元。
	 * @returns 目標物件 object。
	 * 
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
	 */
	function defineProperty(object, propertyKey, attributes) {
		if ('value' in attributes) {
			object[propertyKey] = attributes.value;

		} else if (typeof attributes.get === 'function') {
			try {
				object[propertyKey] = attributes.get();
				if (_.is_debug(2))
					_.warn('Object.defineProperty: 將設定成 get() 所得之值 ['
							+ object[propertyKey] + ']！');
			} catch (error) {
				// TODO: handle exception
			}
			// ignore .set
		}
		// else: nothing to set.

		return object;
	}
	defineProperty[KEY_not_native] = true;

	if (typeof Object.defineProperty !== 'function') {
		// 會動到原來的 Object.defineProperty。
		Object.defineProperty = defineProperty;
	} else {
		try {
			(function () {
				// workaround for Object.defineProperty @ IE8
				// http://kangax.github.com/es5-compat-table/
				// In Internet Explorer 8 Object.defineProperty only accepts DOM
				// objects (MSDN reference).
				// http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx
				// Trying to use Object.defineProperty() on native objects
				// throws an error.
				var o = {};
				if (Object.defineProperty({}, 'p', { value : o }).p !== o)
					throw 1;

			})();

		} catch (e) {
			// backup original Object.defineProperty.
			var _defineProperty = Object._defineProperty = Object.defineProperty;
			// copy from interact.DOM
			// for IE5-8
			(Object.defineProperty = function IE5_to_8_defineProperty(target, propertyKey, attributes) {
				if (Object.prototype.toString.call(target) === '[object Object]'
					// e.g., IE 5-8. 這種判別方法有漏洞!
					&& typeof target.nodeType === 'number')
					try {
						return _defineProperty(target, propertyKey, attributes);
					} catch (e) {
					}

				// 不作錯誤偵測: 不能設定，就直接 throw。
				return defineProperty(target, propertyKey, attributes);
			})[KEY_not_native] = true;
		}
	}

	// 確認 Object.defineProperty() 是否能正確設值。
	if (!Object.defineProperty[KEY_not_native]) {
		try {
			(function() {
				var i, value = 7, old_value = value,
				//
				test_Funciton = function() {
				};
				Object.defineProperty(test_Funciton, 'size', {
					// enumerable : false,
					// configurable : false,
					get : function() {
						return value;
					},
					set : function(v) {
						if (value - 1 === v)
							value = v;
					}
				});
				for (i in test_Funciton)
					if (i === 'size')
						throw 1;
				try {
					test_Funciton.size = value + 1;
				} catch (e) {
				}
				try {
					delete test_Funciton.size;
				} catch (e) {
				}
				if (test_Funciton.size !== value)
					throw 1;
				test_Funciton.size = value - 1;
				if (test_Funciton.size !== value || test_Funciton.size === old_value)
					throw 1;
			})();

		} catch (e) {
			// Don't have standard Object.defineProperty()!
			Object.defineProperty[KEY_not_native] = true;
		}
	}

	// ---------------------------------------------------------------------------//
	// 這裡添加本 library base 會用到的，或重要的，過於基本的 native function
	// (標準已規定，但先前版本未具備的內建物件功能)。

	// 添加 method, to add method, use set_method() or Object.defineProperties()
	// or Object.defineProperty()
	// 延展物件, to add property, use Object.assign()

	// 因為 set_method() 會用到 is_debug()，因此須先確保 is_debug() 已 loaded。

	// ^\s*: JScript 6-9 native object 需要這個。
	// console.log() @ node.js: "function () {...}"
	// TODO: see ((function_name_pattern)) above
	// @see
	// https://tc39.github.io/Function-prototype-toString-revision/#prod-NativeFunction
	// [ all, IdentifierName ]
	// 舊的 JS environment 無法取得 FormalParameters。
	var native_pattern = /^\s*function\s+(\w*)\s*\([^()]*\)\s*{\s*\[native code\]\s*}\s*$/;

	_.is_native_Function = function(variable) {
		return typeof variable === 'function'
		// is a builtin function
		&& native_pattern.test(Function.prototype.toString.call(variable));
	};

	/**
	 * 若 variable 為 Standard Built-in ECMAScript Objects / native object /
	 * native ECMASCript object, 則回傳其 name / Constructor name。<br />
	 * 現行實作並未有標準支持！
	 * 
	 * @param variable
	 *            欲測試之 variable。
	 * @returns native object 之 name。
	 */
	function native_name(variable) {
		try {
			var value, match;

			// TODO: Function.prototype.bind 可能造成非 native Function 卻形如 "[native
			// code]" @ Firefox 20。
			// 注意: '' + Object.create(null) 會 throw TypeError: Cannot convert
			// object to primitive value
			if (typeof variable === 'function'
			//
			&& (match = Function.prototype.toString.call(variable).match(native_pattern)))
				return match[1];

			match = String(variable.constructor).match(native_pattern);
			if (match && (value = _.value_of(match[1])) && variable === value.prototype)
				return match[1] + '.prototype';

			if (variable === Math)
				// '' + Math === "[object Math]" @ Chrome/36
				return 'Math';

		} catch (e) {
			// TODO: handle exception
		}
	}

	_// JSDT:_module_
	.
	native_name = native_name;

	// need_to_check_in_for_in = undefined || { 'valueOf' : {}.valueOf,
	// 'toString' : {}.toString };
	var need_to_check_in_for_in = (function() {
		var key = {}, need_to_check = {
			_valueOf : key.valueOf,
			_toString : key.toString
		};
		for (key in {
			// IE8 中，以 for ( in ) 迭代，會漏掉 valueOf, toString 這兩個。
			valueOf : function() {
			},
			toString : function() {
			}
		})
			delete need_to_check['_' + key];

		for (key in need_to_check)
			return need_to_check;
	})();

	/**
	 * 設定物件方法:<br />
	 * extend properties to name_space.<br />
	 * 將 from_name_space 下的 variable_set 延展/覆蓋到 name_space。<br />
	 * Object.defineProperties() without overwrite extend properties to
	 * name_space.
	 * 
	 * @example <code>
	 * var o={a:0,b:1,c:'a',d:2,e:'g',f:4};
	 * CeL.set_method({a:1,b:2,c:3},o,[function(key){return !CeL.is_digits(o[key]);},'b','c','d','e','s']);
	 * // {a:1,b:1,c:3,d:2}
	 * </code>
	 * 
	 * 注意: CeL.set_method() 不覆蓋原有的設定。欲覆蓋原有的設定請用 Object.assign()。
	 * 
	 * @param {Object|Function}name_space
	 *            target name-space. extend to what name-space.
	 * @param {Object|Function}properties
	 *            欲延展那些 properties.
	 * @param {Undefined|Boolean|String|Array|Object|Function}[filter]
	 *            {Boolean} false: preserve NONE. overwrite even 衝突.<br />
	 *            {Boolean} true: preserve ALL. don't overwrite if 衝突.<br />
	 *            <br />
	 *            {Null} null: the same as false.<br />
	 *            undefined: default: if the target has the same key, preserve
	 *            the same type.<br />
	 *            {String} preserve type, should be this type. 若已存在此 type，或 eval
	 *            後回傳 true (function)，則不 overwrite。<br />
	 *            <br />
	 *            {Object} {key : 'preserve type'}<br />
	 *            {Array} [keys]: copy 所有 type 不同之 keys。<br />
	 *            {Function} filter(key, name_space, properties) return true:
	 *            preserve, false: copy the key.
	 * @param {Object}[attributes]
	 *            attributes used in Object.defineProperty()
	 * @returns target name-space
	 * @see
	 * @since 2014/5/5<br />
	 *        2014/5/6 refactoring 重構
	 */
	function set_method(name_space, properties, filter, attributes) {
		if (!attributes)
			attributes = Object.create(null);

		if (!name_space) {
			_.debug('沒有指定擴展的對象，擴展到 set_method.default_target。', 1, 'set_method');
			if (!(name_space = set_method.default_target))
				if (name_space === null
				// && _.is_Object(properties)
				)
					return name_space;
				else
					name_space = Object.create(null);
		}

		if (name_space === properties) {
			_.debug('(' + properties + '): 目標與來源相同。', 2, 'set_method');
			return;
		}

		var key;
		// assert: 在 Array.isArray() 設定前，不可以使用 filter。
		if (filter && Array.isArray(filter)) {
			// filter: Array → Object
			key = filter;
			filter = Object.create(null);
			if (typeof key[0] === 'string')
				// set default value: overwrite.
				key.unshift(false);
			key.forEach(function(k, i, o) {
				if (i === 0)
					key = o[i];
				else
					filter[o[i]] = key;
			});
		}

		function setter() {
			// !_.is_Function()
			var value = filter, not_native_keyword = _.env.not_native_keyword || KEY_not_native;
			if (_.is_Object(filter))
				if (key in properties)
					value = filter[key];
				else
					// 僅考慮 filter 與 properties 皆包含的屬性。
					return;

			if (typeof value === 'function'
				//
				&& (value = value(key, name_space, properties)) === true)
					// 直接跳過，保留原值。
					return;

			if (typeof value === 'string') {
				// _.is_type()
				value = typeof name_space[key] === value;
			} else if (value) {
				if (value === true)
					// 偵測是否已經存在 target name_space。
					value = key in name_space;
				else
					_.warn('set_method.setter: Unknown filter: [' + value + ']');
			} else if (value !== false) {
				// undefined, null, NaN
				value = typeof name_space[key] === typeof properties[key]
				// 假如原先有的並非原生函數，應該是有比較好、針對性的實作方法，那麼就用新的覆蓋舊的。
				&& name_space[key] && !name_space[key][not_native_keyword];
			}

			if (value)
				return;

			attributes.value = value = properties[key];
			// 以新的覆蓋舊的。
			if (name_space[key] && name_space[key][not_native_keyword]) {
				try {
					delete name_space[key];
				} catch (e) {
					// TODO: handle exception
				}
			}

			// Opera/9.80 中，set_method(Number, ..) 會造成：
			// Object.defineProperty: first argument not an Object
			try {
				Object.defineProperty(name_space, key, attributes);
			} catch (e) {
				name_space[key] = value;
			}

			// 放這邊，確保 not_native_keyword 一定會被設定。
			var name = native_name(name_space);
			if (name && typeof value === 'function') {
				try {
					Object.defineProperty(value,
					// 設定非 native 之 flag.
					not_native_keyword, {
						value : true
					});
				} catch (e) {
					value[not_native_keyword] = true;
				}
			} else if (typeof value === 'function') {
				value[not_native_keyword] = true;
			}

			// Warning: 由於執行時可能處於 log() stack 中，若 log() 會用到 set_method()，這邊又
			// call .debug()，可能會循環呼叫，造成 stack overflow。
			if (_.is_debug(name ? 1 : 3)) {
				// 若更動 native Object 等，則作個警示。
				_.debug((name || '(' + _.is_type(name_space) + ')')
						+ '.' + key + ' = (' + (typeof value) + ')'
						+ (_.is_debug(4) || typeof value !== 'function'
								&& typeof value !== 'object' && typeof value !== 'symbol' ? ' [' + value + ']'
								: ''), 1, 'set_method');
			}
		}

		// TODO: 若 {Function}properties 另外處理，依現行實作會出問題?
		for (key in (_.is_Object(filter) ? filter : properties))
			setter();

		if (need_to_check_in_for_in
			// Object 的情況，已經在前面處理完了。
			&& !_.is_Object(filter)) {
			if (!filter)
				filter = false;
			for (key in need_to_check_in_for_in)
				// assert: !== 須由左至右運算。
				// assert: i = 0; [ 1, 2 ][i] !== [ 2, 2 ][i = 1];
				if (need_to_check_in_for_in[key] !== properties[key = key.slice(1)])
					setter();
		}

		return name_space;
	}
	_.set_method = set_method;


	/**
	 * Test if the value is a native Array.
	 * 
	 * @param v
	 *            value to test
	 * @returns {Boolean} the value is a native Array.
	 * @since 2009/12/20 08:38:26
	 */
	set_method(Array, {
		isArray: // _.type_tester('Array');
		function isArray(v) {
			// instanceof 比 Object.prototype.toString 快
			return v instanceof Array
					|| get_object_type(v) === '[object Array]';
		}
	});


	// Warning: 在 node.js v0.10.48 下，對於以 set/get 來設定 target[key]
	// 的情況，可能造成設定完後 process, console 變成未定義之變數。
	// node.js v0.12.18 下沒有這個問題。
	_.need_avoid_assign_to_setter = platform.nodejs && !platform('node', '0.12');

	set_method(Object, {
		// Object.defineProperties()
		defineProperties : function defineProperties(object, properties) {
			var key;
			for (key in properties)
				Object.defineProperty(object, key, properties[key]);
			if (need_to_check_in_for_in)
				for (key in need_to_check_in_for_in)
					// assert: !== 須由左至右運算。
					// assert: i = 0; [ 1, 2 ][i] !== [ 2, 2 ][i = 1];
					if (need_to_check_in_for_in[key] !== properties[key = key
							.slice(1)])
						Object.defineProperty(object, key, properties[key]);
			return object;
		},
		// https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/create
		// Object.create() 指定其原型物件與屬性，創建一個新物件。
		create : function create(proto, propertiesObject) {
			if (proto === null && !propertiesObject) {
				/**
				 * 取得裸 Object (naked Object)。
				 * 
				 * TODO: 快速回應的方法。但不見得在所有環境都適用，還需要再經過測試。
				 * 
				 * @returns 裸 Object (naked Object)。
				 */
				return {};
			}

			if (proto !== null && typeof proto !== 'object' && typeof proto !== 'function') {
				throw TypeError('Object prototype may only be an Object or null');
			}

			var object = new Object();
			object.__proto__ = proto;
			/**
			 * Object.create(null) 可取得裸 Object (naked Object)。Object prototype
			 * may only be an Object or null<br />
			 * 預防 Object.prototype 有東西，並消除 .toString() 之類。<br />
			 * 
			 * 注意: '' + Object.create(null) 會 throw TypeError: Cannot convert
			 * object to primitive value
			 * 
			 * @see <a href="http://hax.iteye.com/blog/1663476"
			 *      accessdate="2013/1/8 20:17">如何创建一个JavaScript裸对象 - hax的技术部落格 -
			 *      ITeye技术网站</a>
			 */
			for ( var attribute in object) {
				// This will also delete .__proto__
				delete object[attribute];
			}

			if (typeof propertiesObject === 'object')
				Object.defineProperties(object, propertiesObject);
			return object;
		},
		// 延展物件
		// to add property, use Object.assign()
		// application.debug.log use this.
		assign : function assign(target, source) {
			target = Object(target);
			for (var index = 1, length = arguments.length, key; index < length;) {
				source = Object(arguments[index++]);
				for (key in source) {
					// Warning: 可能得注意 `need_avoid_assign_to_setter`
					// @see CeL.application.net.URI()
					target[key] = source[key];
				}
				if (need_to_check_in_for_in)
					for (key in need_to_check_in_for_in)
						// assert: !== 須由左至右運算。
						// assert: i = 0; [ 1, 2 ][i] !== [ 2, 2 ][i = 1];
						if (need_to_check_in_for_in[key] !== source[key = key
								.slice(1)])
							target[key] = source[key];
			}
			return target;
		}
	});

	set_method(Array.prototype, {
		// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach
		forEach: function forEach(callbackfn, thisArg) {
			for (var index = 0, length = this.length,
				// 使用 Function.prototype.call。
					use_call = thisArg !== undefined && thisArg !== null
					&& typeof callbackfn.call === 'function';
				index < length; index++)
				// 為允許 delete，先作 check。
				if (index in this) {
					if (use_call) {
						callbackfn.call(thisArg, this[index], index, this);
					} else {
						// 少一道手續。
						callbackfn(this[index], index, this);
					}
				}
		}
	});

	// ---------------------------------------------------------------------//

	// @see CeL.data.code.compatibility.is_thenable()
	// cf. Promise.isPromise()
	function is_thenable(value) {
		return value
		// https://github.com/then/is-promise/blob/master/index.js
		// && (typeof value === 'object' || typeof value === 'function')
		&& typeof value.then === 'function';
	}

	function is_async_function(value) {
		// https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction
		// 注意 AsyncFunction 不是一個全域物件。 它可以以下程式碼獲得。
		// Object.getPrototypeOf(async function(){}).constructor
		return typeof value === 'function'
		// to allow async functions:
		// https://github.com/tc39/ecmascript-asyncawait/issues/78
		&& value.constructor.name === 'AsyncFunction';
	}


	function run_and_then(first_to_run, and_then, error_catcher) {
		if (!error_catcher) {
			var result = first_to_run();
			if (is_thenable(result))
				return result.then(and_then);

			return and_then(result);
		}

		try {
			var result = first_to_run();
			if (is_thenable(result))
				return result.then(and_then, error_catcher);

			return and_then(result);
		} catch(e) {
			return error_catcher(e);
		}
	}

	set_method(_, {
		is_thenable : is_thenable,
		is_async_function : is_async_function,
		run_and_then : run_and_then
	});

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// 依賴於 set_method() 設定完之後才能使用的方法


	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// for software verification(驗證) and validation(驗收).

	// _.preserve_verify_code = false;



	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// 最終設定。

	if (false) {
		var test_obj = _(2, 'test: Initialization');

		test_obj.test_print('OK!');
	}

	if (false) {
		if (has_console) {
			console.log('globalThis: ' + typeof globalThis);
			console.log(library_name + ': ' + typeof globalThis[library_name]);
		}
	}

	/**
	 * 能執行到最後都沒出錯才設定到 globalThis。
	 * 
	 * @ignore
	 */
	globalThis[library_name] = _;
	if (typeof module === 'object'
	// NG if we have specified module.exports: ((module.exports === exports))
	// http://weizhifeng.net/node-js-exports-vs-module-exports.html
	// 如果module.exports當前沒有任何屬性的話，exports會把這些屬性賦予module.exports。
	&& typeof module.exports === 'object') {
		module.exports = _;
	}

	// test globalThis.
	try {
		if (_ !== eval(library_name))
			throw 1;
		// TODO: test delete globalThis object.
	} catch (e) {
		if (e === 1) {
			// 若失敗，表示其他對 globalThis 的操作亦無法成功。可能因為 globalThis 並非真的
			// Global，或權限被限制了？
			_.warn('無法正確設定 globalThis object!');
		} else if (e && e.message && e.message.indexOf('by CSP') !== -1) {
			// Firefox/49.0 WebExtensions 可能 throw:
			// Error: call to eval() blocked by CSP
			_.env.no_eval = true;
			// use chrome.tabs.executeScript(null, {code:''});
		}
	}


}
)(
	/**
	 * Global Scope object 整體<br />
	 * 於 CeL.eval_code 使用.<br />
	 * 
	 * TODO:<br />
	 * Function constructor evaluates in a scope of that function, not in a
	 * global scope.<br />
	 * http://perfectionkills.com/global-eval-what-are-the-options/
	 * 
	 * @ignore
	 * @see <a
	 *      href="http://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript"
	 *      accessdate="2011/8/6 10:7">How to get the Global Object in
	 *      JavaScript? - Stack Overflow</a>
	 */

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
	typeof globalThis === 'object' && globalThis.Array === Array && globalThis

	// In strict mode, this inside globe functions is undefined.
	// https://developer.mozilla.org/en/JavaScript/Strict_mode
	|| typeof window !== 'undefined' && window
	// isWeb() ? window : this;

	// https://github.com/tc39/proposal-global
	// 由於在HTML Application環境中，self並不等於window，但是應該要用window，所以先跳過這一項。
	// 因著HTA的問題，要採用也必須放在window之後。
	|| typeof self !== 'undefined' && self

	// e.g., node.js
	|| typeof global === 'object' && global.Array === Array && global
	// http://nodejs.org/api/globals.html
	// node.js requires this method to setup REALLY global various:
	// require isn't actually a global but rather local to each module.
	// However, this causes CSP violations in Chrome apps.
	|| Function('return this')()
	// (function(){return this;})()
)
// ) // void(
;







/**
 * <code>
 TODO:

 瘦身


 等呼叫時才 initialization


 http://headjs.com/#theory
 Head JS :: The only script in your HEAD

 Multiversion Support
 http://requirejs.org/docs/api.html



 <a href="http://msdn.microsoft.com/en-us/library/2b36h1wa.aspx" accessdate="2012/12/19 19:48">arguments Object</a>:
 The arguments object is not available when running in fast mode, the default for JScript. To compile a program from the command line that uses the arguments object, you must turn off the fast option by using /fast-. It is not safe to turn off the fast option in ASP.NET because of threading issues.


 </code>
 */

if (typeof CeL === 'function') {
	(function(_) {

		// var _// JSDT:_module_
		// = this;

		if (false) {
			// IE8 中，以 for ( in ) 迭代，會漏掉這兩個。
			var need_check_toString = (function() {
				var a, OK = 0;
				for (a in {
					valueOf : function() {
					},
					toString : function() {
					},
					p : 1
				})
					if (a === 'valueOf' || a === 'toString')
						OK++;
				return OK !== 2;
			})();

			/**
			 * <code>
			CeL.extend(function f_name(){}, object || string, initial arguments);
			CeL.extend({name:function(){},.. }, object || string);
			CeL.extend([function1,function12,..], object || string);
			
			set .name
			</code>
			 */

			/**
			 * 延展物件 (learned from jQuery):<br />
			 * extend variable_set to name_space.<br />
			 * 將 from_name_space 下的 variable_set 延展/覆蓋到 name_space。<br />
			 * 
			 * @remark MooTools 1.4.5 會 overwrite 此函數!
			 * 
			 * @param {Object|Array|String}variable_set
			 *            欲延展之 variable set.
			 * @param {Object|Function}name_space
			 *            target name-space. extend to what name-space.
			 * @param {Object|Function}from_name_space
			 *            When inputing function names, we need a base
			 *            name-space to search these functions.
			 * @param {true|String|Function}reserve_type
			 *            若已存在此 type (true|String)，或 eval 後回傳 true (function)，則不
			 *            overwrite。
			 * @returns target names-pace
			 * @see <a
			 *      href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2009/03/01/jquery-extend.aspx"
			 *      accessdate="2009/11/17 1:24" title="jQuery.extend的用法 -
			 *      黑暗執行緒">jQuery.extend的用法</a>,<br />
			 *      <a
			 *      href="http://www.cnblogs.com/rubylouvre/archive/2009/11/21/1607072.html"
			 *      accessdate="2010/1/1 1:40">jQuery源码学习笔记三 - Ruby's Louvre -
			 *      博客园</a>
			 * @since 2009/11/25 21:17:44
			 * @deprecated 2014/5/6 → CeL.set_method()
			 */
			var extend = function(variable_set, name_space, from_name_space,
					reserve_type) {

				if (typeof name_space === 'undefined' || name_space === null) {
					_
							.debug('沒有指定擴展的對象，擴展到 extend.default_target。', 3,
									'extend');
					if (!(name_space = extend.default_target))
						if (name_space === null
								&& typeof from_name_space === 'undefined'
						// && _.is_Object(variable_set)
						)
							return variable_set;
						else
							name_space = {};
				}

				if (typeof from_name_space === 'undefined'
						|| from_name_space === null)
					from_name_space = extend.default_target;
				else if (variable_set === null
						&& _.is_Function(from_name_space))
					variable_set = from_name_space;

				var variable_name, setter = function(v) {
					if (!reserve_type
							|| (
							// true: any type.
							reserve_type === true ? !(variable_name in name_space)
									: typeof reserve_type === 'function' ? !reserve_type(
											name_space[variable_name], v)
											: !_.is_type(
													name_space[variable_name],
													reserve_type))) {

						// Warning: 由於執行時可能處於 log() stack 中，若 log() 會用到
						// extend()，這邊又 call .debug()，可能會循環呼叫，造成 stack overflow。
						if (_.is_debug()) {
							var target_name = _.native_name(name_space);
							// 若更動 native Object 等，則作個警示。
							_.debug((target_name || '(' + _.is_type(name_space)
									+ ')')
									+ '.'
									+ variable_name
									+ ' = ('
									+ (typeof v)
									+ ')'
									+ (_.is_debug(4) || typeof v !== 'function'
											&& typeof v !== 'object' ? ' [' + v
											+ ']' : ''), target_name ? 1 : 3,
									'extend.setter');
						}

						name_space[variable_name] = v;
					}
				};

				if (_.is_Object(variable_set)
				// 若 function 另外處理，依現行實作會出問題！
				|| _.is_Function(variable_set)) {
					if (need_check_toString) {
						if ('valueOf' in variable_set)
							variable_set['. added_' + 'valueOf'] = variable_set.valueOf;
						if ('toString' in variable_set)
							variable_set['. added_' + 'toString'] = variable_set.toString;
					}

					for (variable_name in variable_set) {
						if (need_check_toString)
							variable_name = variable_name.replace(/^\. added_/,
									'');
						if (from_name_space)
							if (variable_name in from_name_space) {
								setter(from_name_space[variable_name]);
								// 這邊的處置可能不甚周延。
							} else {
								if (false && (variable_set[variable_name] in from_name_space))
									setter(from_name_space[variable_set[variable_name]]);
							}
						else
							setter(variable_set[variable_name]);
					}

					if (need_check_toString) {
						if ('valueOf' in variable_set)
							delete variable_set['. added_' + 'valueOf'];
						if ('toString' in variable_set)
							delete variable_set['. added_' + 'toString'];
					}
				} else if (Array.isArray(variable_set)
						&& !Array.isArray(name_space)) {
					variable_set
							.forEach(function(o) {
								if (typeof o === 'object'
										|| (o in from_name_space))
									extend(o, name_space, from_name_space,
											reserve_type);
							});

				} else if (typeof variable_set === 'string') {
					if (!from_name_space) {
						_.debug('預設從本 library 自身 extend to target name-space。',
								3, 'extend');
						from_name_space = _;
					}

					if (name_space === from_name_space)
						_
								.debug('(' + variable_set + '): 目標與來源相同。', 2,
										'extend');
					else if ((variable_name = variable_set) in from_name_space) {
						setter(from_name_space[variable_name]);
						_.debug('(' + (typeof from_name_space[variable_name])
								+ ') ' + variable_name + '\n='
								+ from_name_space[variable_name] + '\n\nto:\n'
								+ name_space, 2, 'extend');
					} else
						try {
							setter(_.value_of(variable_name));
							_.debug('.' + variable_name + ' = '
									+ name_space[variable_name], 2, 'extend');
						} catch (e) {
							_.warn(_.Class + '.extend:\n' + e.message);
						}

				} else if (typeof variable_set === 'function') {
					if (_.parse_function) {
						// TODO
						throw new Error(1,
								'extend: Not Yet Implemented! (for function)');
					} else {
						_.warn(_.Class + '.extend: Warning: Please include '
								+ _.Class + '.parse_function() first!');
					}

				}

				return name_space;
			};

			// extend.default_target = _;

			_// JSDT:_module_
			.extend = extend;
		}

		// .object_hash 之類會用到。
		_.set_method(Array.prototype, {
			indexOf : function indexOf(element, index) {
				index = index > 1 ? Math.floor(index) : 0;
				for (var length = this.length; index < length; index++)
					if (index in this && this[index] === element)
						return index;
				return -1;
			}
		});

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		/**
		 * @examples <code>

		var some_function =  args  =>   some_operators  ;
		var some_function = (args) => { some_operators };
		some_function = CeL.function_placeholder(() => some_function = CeL.some_function || some_function, some_function);

		var some_function = function(args) { some_operators; };
		some_function = CeL.function_placeholder(function(){
			return some_function = CeL.some_function || some_function;
		}, some_function);

		</code>
		 */

		function function_placeholder(setter, fallback) {
			var full_version = setter();
			if (full_version && full_version !== fallback
					&& _.is_Function(full_version)) {
				_.debug('採用完整功能版函數', 1, 'function_placeholder');
			} else {
				full_version = fallback;
			}
			return (full_version || fallback).apply(arguments);
		}
		_.function_placeholder = function_placeholder;

		_// JSDT:_module_
		.
		/**
		 * 設定 name_space 下的 function_name 待執行時換作 initializor 的 return。<br />
		 * 換句話說，執行 name_space 下的 function_name (name_space[function_name]) 時把
		 * name_space[function_name] 換成 new_function (initializor 的 return)。
		 * 
		 * for Lazy Function Definition Pattern.<br />
		 * 惰性求值（lazy evaluation or call-by-need），又稱懶惰求值、懶漢求值。
		 * 
		 * TODO:<br />
		 * 使用本函數不能完全解決先前已經指定 identifier 的情況。<br />
		 * 因此對於會使用本函數的函數，盡量別使用 .use_function() 來 include，否則可能會出現問題!
		 * 
		 * @example <code>
		 * library_namespace.set_initializor('function_name', function(function_name){return function(){};}, _);
		 * </code>
		 * 
		 * @param {String}function_name
		 *            function name to replace: name_space.function_name
		 * @param {Function}initializor
		 *            will return function identifier to replace with
		 * @param name_space
		 *            in which name-space
		 * @returns new_function
		 * @see http://realazy.org/blog/2007/08/16/lazy-function-definition-pattern/,
		 *      http://peter.michaux.ca/article/3556
		 */
		set_initializor = function(function_name, initializor, name_space) {
			var do_replace;
			if (arguments.length < 3 && _.is_Function(function_name)
					&& (do_replace = _.get_function_name(function_name))) {
				// e.g., library_namespace.set_initializor(get_HTA, _);
				name_space = initializor;
				initializor = function_name;
				function_name = do_replace;
				// _.debug('Get function name [' + function_name + '].');
			}

			if (!name_space)
				name_space = _;
			if (!initializor)
				initializor = name_space[function_name];

			do_replace = function() {
				if (false) {
					_.debug(name_space[function_name] === do_replace);
					_.debug(name_space.Class + '[' + function_name + ']='
							+ name_space[function_name]);
					_.debug('do_replace=' + do_replace);
				}
				var old_function = name_space[function_name], new_function;
				if (old_function === do_replace) {
					// 實際執行。
					try {
						new_function = initializor.call(name_space,
								function_name, arguments);
						// new_function = initializor.apply(_, arguments);
						if (false)
							_.debug('new_function = [' + (typeof new_function)
									+ ']' + new_function);
					} catch (r) {
						// 可能因時機未到，或是 initialization arguments 不合適。不作 replace。
						return r;
						// throw r;
					}

					if (typeof new_function !== 'function')
						// 確定會回傳 function 以供後續執行。
						initializor = new_function, new_function = function() {
							if (false)
								_.debug('new function return [' + initializor
										+ '].', 1, 'set_initializor');
							return initializor;
						};

					// searching for other extends
					if (_[function_name] === old_function) {
						_.debug('Replace base name-space function ['
								+ function_name + '].', 1, 'set_initializor');
						_[function_name] = new_function;
					} else
						_.debug('Base name-space function [' + function_name
								+ ']: ' + _[function_name] + '.', 1,
								'set_initializor');

					// 設定 name_space[function_name]。
					_.debug('Replace function [' + function_name + '].', 1,
							'set_initializor');
					name_space[function_name] = new_function;
					if (false) {
						_.debug(name_space[function_name] === do_replace);
						_.debug(name_space.Class + '[' + function_name + ']='
								+ name_space[function_name]);
					}
				} else {
					// 已經替換過。
					if (_.is_debug(2))
						_.warn('set_initializor: The function ['
								+ function_name
								+ '] had replaced with a new one.');
					new_function = old_function;
				}

				// _.debug('new function: ' + new_function);
				// _.debug('return ' + new_function.apply(_, arguments));
				return new_function.apply(_, arguments);
			};

			return name_space[function_name] = do_replace;
		};

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		_.is_HTA = _.is_WWW()
		// http://msdn.microsoft.com/en-us/library/ms536496(v=vs.85).aspx
		// HTAs do not support the AutoComplete in HTML forms feature, or the
		// window.external object.
		&& window.external === null && window.ActiveXObject
				&& document.getElementsByTagName('APPLICATION').length === 1;

		function new_XMLHttpRequest() {
			return new XMLHttpRequest();
		}

		// 'Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'
		// 'Msxml2.XMLHTTP.6.0','Msxml2.XMLHTTP.5.0','Msxml2.XMLHTTP.4.0','Msxml2.XMLHTTP.3.0',["MSXML2",
		// "Microsoft", "MSXML"].['XMLHTTP','DOMDocument'][".6.0", ".4.0",
		// ".3.0", ""]
		function new_MS_XMLHTTP() {
			return new ActiveXObject('Microsoft.XMLHTTP');
		}

		/**
		 * 設定取得 XMLHttpRequest object 的方法。<br />
		 * The XMLHttpRequest object can't be cached. So we cache the method to
		 * get the XMLHttpRequest controller.
		 * 
		 * 在 HTA 中，XMLHttpRequest() 比 ActiveXObject('Microsoft.XMLHTTP')
		 * 更容易遇到拒絕存取。例如在同一目錄下的 .txt 檔。<br />
		 * 但在 IE 中，ActiveXObject 可能造成主動式內容之問題。<br />
		 * jQuery: Microsoft failed to properly implement the XMLHttpRequest in
		 * IE7, so we use the ActiveXObject when it is available.
		 * 
		 * @inner
		 * @ignore
		 */
		if (_.is_HTA)
			try {
				_.new_XMLHttp = new_MS_XMLHTTP() && new_MS_XMLHTTP;
			} catch (e) {
			}

		if (!_.new_XMLHttp)
			try {
				// normal method to get a new XMLHttpRequest controller.
				// 相當於 new XMLHttpRequest()
				// Ajax 程式應該考慮到 server 沒有回應時之處置
				_.new_XMLHttp = new_XMLHttpRequest() && new_XMLHttpRequest;
			} catch (e) {
			}

		// _.is_HTA 的情況，已經測在前面試過了。
		if (!_.new_XMLHttp && !_.is_HTA)
			try {
				_.new_XMLHttp = new_MS_XMLHTTP() && new_MS_XMLHTTP;
			} catch (e) {
			}

		// 皆無：use XMLDocument.
		// The document.all().XMLDocument is a Microsoft IE subset of
		// JavaScript.
		// http://www.bindows.net/
		// http://www.java2s.com/Code/JavaScriptReference/Javascript-Properties/XMLDocument.htm

		if (_.new_XMLHttp
				// https://github.com/electron/electron/issues/2288
				// How to detect if running in electron?
				// https://github.com/cheton/is-electron/blob/master/index.js
				&& (typeof process !== 'object'
						|| typeof process.versions !== 'object' || !process.versions.electron)) {

		} else if (_.platform.nodejs) {
			// for node.js, node_fs
			_.new_XMLHttp = require('fs');
			_.platform.browser = process.versions.electron ? 'electron'
					: 'node';
			_.platform.version = process.versions.electron
					|| process.versions.node;
			// @see os.version()
			_.platform.OS = process.platform;
			// shortcut for Windows
			_.platform.Windows = _.platform.is_Windows();

			// argument vector
			_.env.argv = process.argv;
			// env hash: see CeL.env.arg_hash @ CeL.application.platform.nodejs

			if (_.platform.browser === 'node')
				_.platform.is_CLI = true;
			else if (_.platform.browser === 'electron')
				// is GUI
				_.platform.is_CLI = false;

			// 為 CLI interactive 互動形式。
			// @see WScript.Interactive @ CeL.application.OS.Windows.job
			_.platform.is_interactive
			// isTTY: 為 nodejs: interactive 互動形式。
			// 但 isTTY 在 command line 執行程式時也會為 true！
			= process.stdout && process.stdout.isTTY
			// Windows 7 to Windows 10
			|| process.env.SESSIONNAME === 'Console';

			if (_.platform.is_interactive) {
				_.log_temporary = function log_temporary(message) {
					// message + ' ...\r'
					process.stdout.write('\r'
							+ _.preprocess_log_messages(message) + '  \r');
				};
			}

			// TODO:
			// https://github.com/driverdan/node-XMLHttpRequest/blob/master/lib/XMLHttpRequest.js
			var node_read_file = _.new_XMLHttp = _.new_XMLHttp.readFileSync;

			// The encoding can be 'utf8', 'ascii', or 'base64'.
			// http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options
			_.get_file = function get_file(path, encoding) {
				// for node.js
				if (_.platform.Windows && /^\/[a-z]:\//i.test(path)) {
					// 在 electron package 中，script_base_path 可能形如 '/D:/'...。
					// node.js 在讀取 "/D:/"... 這一種檔案時會轉換成 "/D:/D:/"...
					path = path.slice(1);
				}

				var data, i, l, tmp;
				try {
					data = node_read_file(path, encoding);
				} catch (e) {
					data = node_read_file(path);
				}

				if (typeof data !== 'string') {
					// auto detect encoding
					l = data.length;
					if (data[0] === 255 && data[1] === 254) {
						_.debug(path + ': UTF-16LE', 4);
						// 去掉 BOM。
						// pass byte order mark (BOM), the first 2 bytes.
						i = 2;
						tmp = [];
						while (i < l)
							tmp.push(String.fromCharCode(data[i++] + 256
									* data[i++]));
					} else if (data[0] === 254 && data[1] === 255) {
						_.debug(path + ': UTF-16BE', 4);
						// pass byte order mark (BOM), the first 2 bytes.
						i = 2;
						tmp = [];
						while (i < l)
							tmp.push(String.fromCharCode(256 * data[i++]
									+ data[i++]));
					} else if (!encoding && data[0] === 239 && data[1] === 187
							&& data[2] === 191) {
						// 或許是存成了 UTF-8？
						// https://en.wikipedia.org/wiki/Byte_order_mark#Representations_of_byte_order_marks_by_encoding
						_.debug('get_file: Treat file as UTF-8 with BOM: ['
								+ path + ']', 2);
						// tmp = null;
						if (false) {
							// http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options
							data = node_read_file(path, 'utf8')
							// pass byte order mark (BOM), the first 1 byte:
							// \uFEFF.
							.slice(1);
						} else {
							// console.log([ path, data.slice(0, 10) ]);
							// assert: data.toString().charCodeAt(0) === 65279
							// data.toString().charAt(0) === \uFEFF

							// buffer.toString('utf8', 0, length);
							data = data.toString(/* Default: 'utf8' */)
							// pass byte order mark (BOM), the first 1 byte:
							// \uFEFF.
							// 採用 data.toString('utf8', 3)，奇怪的是有時仍然會得到
							// [65279,...] @ node.js 14.7.0 。
							// 不如全部 .toString() 之後再 .slice(1)。
							.slice(1);
						}

					} else
						try {
							i = node_read_file(path, 'utf8');
							_.debug('get_file: Treat file as UTF-8: [' + path
									+ ']', 2);
							// tmp = null;
							data = i;
						} catch (e) {
							// console.warn(e);
							if (l > 1)
								_
										.debug('get_file: Unknown byte order mark (BOM) of ['
												+ path
												+ ']: '
												+ data[0]
												+ ','
												+ data[1]);
							// 當作 ASCII 處理。
							i = 0;
							tmp = [];
							while (i < l)
								// data.toString('utf-8', 0, length);
								tmp.push(String.fromCharCode(data[i++]));
						}
					if (tmp)
						data = tmp.join('');
				}

				return data;
			};

		} else if (typeof _configuration === 'object'
		// for jslibs
		&& typeof File === 'function') {
			_.platform.browser = 'jsio';
			LoadModule('jsio');
			_.get_file = function(path) {
				// _configuration.stderr(path);
				var c, i, data = new File(path).Open('r').Read(), l = data.length, tmp = [], next_code = function() {
					c = data.charCodeAt(i++);
					return c < 0 ? c + 256 : c;
				};

				_configuration.stderr(path + ': ' + data.charCodeAt(0) + ','
						+ data.charCodeAt(1));
				if (data.charCodeAt(0) === -1 && data.charCodeAt(1) === -2) {
					// _.debug(path + ': UTF-16LE');
					for (i = 2; i < l;)
						tmp.push(String.fromCharCode(next_code() + 256
								* next_code()));
					data = tmp.join('');
				} else if (data.charCodeAt(0) === -2
						&& data.charCodeAt(1) === -1) {
					// _.debug(path + ': UTF-16BE');
					for (i = 2; i < l;)
						tmp.push(String.fromCharCode(next_code() * 256
								+ next_code()));
					data = tmp.join('');
				}

				return data;
			};

		} else if (typeof Stream === 'function') {
			// for JSDB
			_.platform.browser = 'JSDB';
			_.get_file = function(path) {
				// _.log('get_file: ' + path);
				try {
					return new Stream(path
					// , 'r'
					).readFile();
				} catch (e) {
					// _.log(e.message);
				}

				var data = new Stream(path, 'b'), tmp = [],
				// The byte order mark (BOM).
				BOM = [ data.readUInt8(), data.readUInt8() ];
				if (BOM[0] === 255 && BOM[1] === 254) {
					// _.debug(path + ': UTF-16LE');
					while (!data.eof)
						tmp.push(String.fromCharCode(data.readUInt8() + 256
								* data.readUInt8()));
				} else if (BOM[0] === 254 && BOM[1] === 255) {
					// _.debug(path + ': UTF-16BE');
					while (!data.eof)
						tmp.push(String.fromCharCode(data.readUInt8() * 256
								+ data.readUInt8()));
				} else {
					data.rewind();
					while (!data.eof)
						tmp.push(data.get());
				}
				data.close();
				return tmp.join('');
			};

		} else
			_.get_file = function() {
				// No XMLHttpRequest controller.

				var m = 'get_file: This scripting engine does not support XMLHttpRequest.';
				_.warn(m);
				throw new Error(m);
				// firefox: This function must return a result of type any.
				// return undefined;
			};

		_// JSDT:_module_
		.
		/**
		 * Ask privilege in mozilla projects: Firefox 2, 3.<br />
		 * get_file() 遇到需要提高權限時使用。<br />
		 * enablePrivilege 似乎只能在執行的 function 本身或 caller 呼叫才有效果，跳出函數即無效，不能
		 * cache，因此提供 callback。<br />
		 * 就算按下「記住此決定」，重開瀏覽器後需要再重新授權。
		 * 
		 * @param {String|Error}
		 *            privilege privilege that asked 或因權限不足導致的 Error
		 * @param {Function|Array}
		 *            callback|[callback,arguments] Run this callback if getting
		 *            the privilege. If it's not a function but a
		 *            number(經過幾層/loop層數), detect if there's a loop or run the
		 *            caller.
		 * @returns OK / the return of callback
		 * @throws error
		 * @since 2010/1/2 00:40:42
		 */
		require_netscape_privilege = function require_netscape_privilege(
				privilege, callback) {
			var _s = require_netscape_privilege, f, i,
			/**
			 * raise error. error 有很多種，所以僅以 'object' 判定。
			 * 
			 * @inner
			 * @ignore
			 */
			re = function(m) {
				// _.debug('Error: ' + m);
				throw privilege && typeof privilege === 'object' ?
				// Error object
				privilege :
				// new Error (message)
				new Error(m);
			};

			if (!_s.enabled)
				re('Privilege requiring disabled.');

			// test loop
			// 得小心使用: 指定錯可能造成 loop!
			if (!isNaN(callback) && callback > 0 && callback < 32) {
				try {
					/**
					 * @Firefox 4: <code>
					 * TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them
					 * </code>
					 */
					for (f = _s, i = 0; i < callback; i++) {
						f = f.caller;
						if (f)
							// TODO: do not use arguments
							f = f.arguments.callee;
					}

					if (f === _s)
						// It's looped
						re('Privilege requiring looped.');

					callback = 1;

				} catch (e) {
					// TODO: handle exception
				}

			}

			f = _s.enablePrivilege;
			// _.debug('enablePrivilege: ' + f);
			// '我們需要一點權限來使用 XMLHttpRequest.open。\n* 請勾選記住這項設定的方格。'
			if (!f
					&& !(_s.enablePrivilege = f = _
							.value_of('netscape.security.PrivilegeManager.enablePrivilege')))
				// 更改設定，預防白忙。
				_s.enabled = false, re('No enablePrivilege get.');

			if (_.is_type(privilege, 'DOMException') && privilege.code === 1012)
				// http://jck11.pixnet.net/blog/post/11630232
				// Mozilla的安全機制是透過PrivilegeManager來管理，透過PrivilegeManager的enablePrivilege()函式來開啟這項設定。
				// 須在open()之前呼叫enablePrivilege()開啟UniversalBrowserRead權限。

				// http://code.google.com/p/ubiquity-xforms/wiki/CrossDomainSubmissionDeployment
				// Or: In the URL type "about:config", get to
				// "signed.applets.codebase_principal_support" and change its
				// value to true.

				// 由任何網站或視窗讀取私密性資料
				privilege = 'UniversalBrowserRead';

			else if (!privilege || typeof privilege !== 'string')
				re('Unknown privilege.');

			// _.debug('privilege: ' + privilege);
			try {
				if (false)
					_.log(_.Class
							+ '.require_netscape_privilege: Asking privilege ['
							+ privilege + ']..');
				f(privilege);
			} catch (e) {
				if (privilege !== 'UniversalBrowserRead' || !_.is_local())
					_
							.warn(_.Class
									+ '.require_netscape_privilege: User denied privilege ['
									+ privilege + '].');
				throw e;
			}

			// _.debug('OK. Get [' + privilege + ']');

			if (callback === 1) {
				// _.debug('再執行一次 caller..');
				try {
					callback = _s.caller;
				} catch (e) {
					// TODO: handle exception
				}
				return callback.apply(_, callback.arguments);

				if (false) {
					i = callback.apply(_, callback.arguments);
					_.debug(('return ' + i).slice(0, 200));
					return i;
				}
			} else if (_.is_Function(callback))
				// 已審查過，為 function
				return callback();
			else if (Array.isArray(callback))
				return callback[0].apply(_, callback[1]);
		};

		/**
		 * 當需要要求權限時，是否執行。（這樣可能彈出對話框）<br />
		 * Firefox 5 之後，就算要求了，對 local 也沒用，甚至會 hang 住掛掉，因此取消了。
		 * 
		 * @type Boolean
		 */
		_// JSDT:_module_
		.require_netscape_privilege.enabled = false;

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		var is_Opera = _.is_WWW(true) && navigator.appName === 'Opera';

		/**
		 * 以同時依序(synchronously)的方式，載入最基本之資源取得功能。<br />
		 * Get resource files by {@link XMLHttpRequest}.<br />
		 * 依序載入 resources，用於 include JavaScript 檔之類需求時，取得檔案內容之輕量級函數。<br />
		 * 除 Ajax，本函數亦可用在 CScript 執行中。<br />
		 * see also: .application.net.Ajax.get_URL()
		 * 
		 * @example<code>

		//	get contents of [path/to/file]:
		var file_contents = CeL.get_file('path/to/file');

		</code>
		 * 
		 * @param {String}
		 *            path URI / full path.
		 *            <em style="text-decoration:line-through;">不能用相對path！</em>
		 * @param {String}
		 *            [encoding] file encoding
		 * @returns {String} data content of path
		 * @returns {undefined} when error occurred: no Ajax function, ..
		 * @throws uncaught
		 * exception @ Firefox: 0x80520012 (NS_ERROR_FILE_NOT_FOUND), <a
		 *           href="http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/#exceptions">NETWORK_ERR</a>
		 *           exception
		 * @throws 'Access
		 * to restricted URI denied' 當 access 到上一層目錄時 @ Firefox
		 * @see <a
		 *      href=http://blog.joycode.com/saucer/archive/2006/10/03/84572.aspx">Cross
		 *      Site AJAX</a>, <a
		 *      href="http://domscripting.com/blog/display/91">Cross-domain Ajax</a>,
		 *      <a
		 *      href="http://forums.mozillazine.org/viewtopic.php?f=25&amp;t=737645"
		 *      accessdate="2010/1/1 19:37">FF3 issue with iFrames and XSLT
		 *      standards</a>, <a
		 *      href="http://kb.mozillazine.org/Security.fileuri.strict_origin_policy"
		 *      accessdate="2010/1/1 19:38">Security.fileuri.strict origin
		 *      policy - MozillaZine Knowledge Base</a> Chrome: <a
		 *      href="http://code.google.com/p/chromium/issues/detail?id=37586"
		 *      title="between builds 39339 (good) and 39344 (bad)">NETWORK_ERR:
		 *      XMLHttpRequest Exception 101</a>
		 */
		function get_file(path, encoding, post_data) {
			return undefined; //MODIFIED
			if (_.is_Object(encoding)) {
				post_data = encoding;
				encoding = null;
			}
			if (_.is_Object(path)) {
				post_data = path.post || post_data;
				encoding = path.encoding || encoding;
			}

			var method = post_data ? 'POST' : 'GET',
			/**
			 * The XMLHttpRequest object can't be cached.
			 * 
			 * @inner
			 * @ignore
			 */
			object = _.new_XMLHttp();

			// 4096: URL 長度限制，與瀏覽器有關。
			if (typeof path === 'string' && path.length > 4096
					&& (post_data = path.match(/^([^?]{6,200})\?(.+)$/)))
				path = post_data[1], post_data = post_data[2], method = 'PUT';
			else
				post_data = null;

			try {
				// IE 10 中，local file 光 .open() 就 throw 了。
				object.open(method, path, false);

				// 有些版本的 Mozilla 瀏覽器在伺服器送回的資料未含 XML mime-type
				// 檔頭（header）時會出錯。為了避免這個問題，可以用下列方法覆寫伺服器傳回的檔頭，以免傳回的不是 text/xml。
				// http://squio.nl/blog/2006/06/27/xmlhttprequest-and-character-encoding/
				// http://www.w3.org/TR/XMLHttpRequest/ search encoding
				if (encoding && object.overrideMimeType)
					/**
					 * old:<code>
					object.overrideMimeType('text/xml;charset=' + encoding);
					</code>
					 * 但這樣會被當作 XML 解析，產生語法錯誤。
					 * 
					 * TODO:<br />
					 * try:<code>
					object.overrideMimeType('text/plain;charset=' + encoding);
					</code>
					 */
					object.overrideMimeType('application/json;charset='
							+ encoding);

				// http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/#dfn-send
				// Invoking send() without the data argument must give the same
				// result as if it was invoked with null as argument.

				// 若檔案不存在，會 throw。
				object.send(post_data);

				if (65533 === object.responseText.charCodeAt(0)
				/**
				 * e.g., @ <code>Mozilla/5.0 (Windows NT 6.1; rv:29.0) Gecko/20100101 Firefox/29.0</code>
				 */
				&& navigator.userAgent.indexOf(' Gecko/2') !== -1) {
					_.env.same_origin_policy = true;
					var error = new Error(
							'get_file: Cannot parse UTF-32 encoding of ['
									+ path + '] @ Firefox!');
					// 於 load_named() 使用，避免顯示 '重新讀取(reload)，或是過段時間再嘗試或許可以解決問題。'
					error.type = 'encode';
					throw error;
				}

				delete get_file.error;

			} catch (e) {
				if (e.number === -1072896658
				// || e.message.indexOf('c00ce56e') !== -1
				) {
					// http://support.microsoft.com/kb/304625
					throw new Error(
							'指定的資源回傳了系統不支援的文字編碼，因此無法解碼資料。請檢查此網頁回傳之 header，確認系統可解碼 Content-Type 之 charset。');
				}

				/**
				 * Chome:
				 * <code>XMLHttpRequest cannot load file:///X:/*.js. Cross origin requests are only supported for HTTP.</code>
				 * 
				 * Opera 11.50: 不會 throw，但是 .responseText === ''。
				 * 
				 * Apple Safari 3.0.3 may throw NETWORK_ERR: XMLHttpRequest
				 * Exception 101
				 */
				get_file.error = e;

				if (_.is_debug(2)) {
					_.warn(_.Class + '.get_file: Loading [' + path
							+ '] failed!');
					_.error(e);
				}

				/** <code>[XPCWrappedNative_NoHelper] Cannot modify properties of a WrappedNative @ firefox</code> */
				// e.object = o;
				if (
				// 5: 系統找不到指定的資源。/存取被拒。
				// IE 10 中，5: "存取被拒。"。same origin policy 下，即使是檔案存在，值一樣為
				// 5，因此無法以資判別。
				// (e.number & 0xFFFF) !== 5 &&
				_.is_WWW()
						&& (_.is_local() || ((object = path
								.match(/:(\/\/)?([^\/]+)/)) && object[2] !== window.location.hostname))) {
					// 八九不離十: no Cross-site scripting (XSS).
					if (_.is_debug()) {
						_
								.warn('get_file: '
										+ (_.is_local() ? '呼叫了上層 local file'
												: '所要求檔案之 domain ['
														+ object[2]
														+ '] 與所處之 domain ['
														+ window.location.hostname
														+ '] 不同')
										+ '！<br />\n您可能需要嘗試使用 '
										+ _.Class
										+ '.run()!\nSet up <a href="http://en.wikipedia.org/wiki/Same_origin_policy" accessdate="2012/12/2 18:19">same origin policy</a> flag.');
					}
					_.env.same_origin_policy = true;
					throw new Error('get_file: Different domain!');
				}

				object = _.require_netscape_privilege(e,
						[ get_file, arguments ]);
				if (false)
					_.debug('require_netscape_privilege return ['
							+ typeof (object) + ('] ' + object).slice(0, 200)
							+ ' ' + (e === object ? '=' : '!') + '== '
							+ 'error (' + e + ')');
				if (e === object)
					throw e;

				return object;
			}

			// workaround for Opera: Opera 11.50:
			// 不會 throw，但是 .responseText === ''。
			if (object.responseText === '' && is_Opera)
				throw new Error('get_file: Nothing get @ Opera');

			// 當在 local 時，成功的話 status === 0。失敗的話，除 IE 外，status 亦總是 0。
			// status was introduced in Windows Internet Explorer 7.
			// http://msdn.microsoft.com/en-us/library/ms534650%28VS.85%29.aspx
			// 因此，在 local 失敗時，僅 IE 可由 status 探測，其他得由 responseText 判別。
			if (false)
				_.debug('Get [' + path + '], status: [' + object.status + '] '
						+ object.statusText);

			// .responseXML
			return object.status === 400 ? [ object.status, object.responseText ]
					: object.responseText;
		}

		if (!_.get_file)
			_.get_file = get_file;

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		/**
		 * 較為安全的執行，可當作 JSON.parse()。<br />
		 * we only need simple JSON.parse @ .get_script_base_path
		 * 
		 * @param {String}text
		 *            string to evaluate
		 * @param {Boolean}cache_error
		 *            是否 cache error.<br />
		 *            Warning: deprecated. 請自行 cache.
		 * @param {Function}[filter]
		 *            callback/receiver to filter the value<br />
		 *            Warning: deprecated. Please use Object.filter () instead.
		 * 
		 * @returns evaluated value
		 */
		function eval_parse(text, cache_error, filter) {
			if (cache_error)
				try {
					return eval_parse(text, filter);
				} catch (e) {
					if (_.is_debug(2))
						_.error('eval_parse: SyntaxError: [' + text + ']');
					// throw e;
					return;
				}

			if (text)
				// borrow from Google, jQuery
				// TODO: 對 {String}text 只是做簡單處理，勢必得再加強。
				text = ((new Function("return({o:" + text + "\n})"))()).o;

			return text;
		}

		// see Array.from of dependency_chain.js
		function tag_list_default(tag, context) {
			// 必須考量輸入的可能是 document.styleSheets 的情況。
			// 須注意: @ IE8, false === CeL.is_NodeList(document.styleSheets);
			return tag
					&& Array.prototype.slice
							.call(typeof tag === 'string' ? (context || document)
									.getElementsByTagName(tag)
									: tag) || [];
		}
		function tag_list_compatible(tag, context) {
			var list = [], i = 0, nodes = typeof tag === 'string' ? (context || document)
					.getElementsByTagName(tag)
					: tag, length = nodes && nodes.length || 0;
			while (i < length)
				list.push(nodes[i++]);
			return list;
		}
		_// JSDT:_module_
		.
		// 代替 .getElementsByTagName(), get <tag> nodes, 並將之轉成不變化的 native Array.
		get_tag_list = _.is_WWW(1) ? function(tag, context) {
			var list;
			try {
				// 一般做法。
				list = tag_list_default(tag, context);
				_.get_tag_list = tag_list_default;
			} catch (e) {
				// Array.prototype.slice.call(document.getElementsByTagName('a'))
				// Array.prototype.slice.call(document.getElementsByTagName('a'),0)
				// get error @ IE8 (Script engine: JScript 5.8.18702):
				// Error 5014 [TypeError] (facility code 10): 必須要有 JScript 物件
				// @ IE8: typeof document.getElementsByTagName('a') === 'object'
				list = tag_list_compatible(tag, context);
				// 成功才設定。
				if ((e.number & 0xFFFF) === 5014) {
					_.debug('get_tag_list: 使用舊的實現方法。');
					_.get_tag_list = tag_list_compatible;
				}
			}
			return list;
		} : function() {
			_.warn('get_tag_list: No method availed!');
			return [];
		};

		_// JSDT:_module_
		.
		/**
		 * 得知 script file 之相對 base path
		 * 
		 * @param {String}
		 *            JSFN script file name (NOT path name)
		 * @returns {String} relative base path
		 * @example <code>
		<script type="text/javascript" src="../baseFunc.js"></script>
		// 引數為本.js檔名。若是更改.js檔名，亦需要同時更動此值！
		var base_path = CeL.get_script_base_path('baseFunc.js');

		const main_script_path = CeL.get_script_base_path(/\.js/i, module);

		# perl:
		use File::Basename;
		</code>
		 */
		get_script_base_path = function(JSFN, terminal_module) {
			if (terminal_module === undefined && typeof module === 'object')
				terminal_module = module;

			// alert('JSFN: ' + JSFN);
			if (!JSFN) {
				if (_.is_WWW()) {
					// window.location.pathname
					JSFN = window.location.href.replace(/#.*$/, '');
					try {
						JSFN = typeof decodeURI === 'function' ? decodeURI(JSFN)
								: unescape(JSFN);
					} catch (e) {
						// TODO: handle exception
					}
				} else if (typeof terminal_module === 'object') {
					// for node.js
					JSFN = terminal_module.filename;
				} else if (_.script_host) {
					JSFN = WScript.ScriptFullName;
				} else if (false && typeof WshShell === 'object') {
					// 用在把檔案拉到此檔上時不方便。
					JSFN = WshShell.CurrentDirectory;
				}
				return typeof JSFN === 'string' ? JSFN.replace(/[^\\\/]+$/, '')
						: '';
			}

			// ----------------------------------

			// TODO: using import.meta.url

			// console.log([ typeof require, typeof require.main ]);
			// console.trace(require.main);
			var filename, test_filename = function(module) {
				var path = module.filename;
				if (false) {
					console.log('get_script_base_path: ' + JSFN + ' @ ' + path);
				}
				if (path
				// 在 electron 中可能會是 index.html 之類的。
				// && /\.js/i.test(path)
				&& (_.is_RegExp(JSFN) ? JSFN.test(path)
				//
				: path.indexOf(JSFN) !== -1)) {
					filename = path;
				}
			};
			if (typeof require === 'function'
			// There is no `require.main` @ electron 9.2-
			&& typeof require.main === 'object') {
				// for node.js 14.7+
				var _module = require.main;
				filename = null;
				while (_module) {
					test_filename(_module);
					if (_module === terminal_module)
						break;
					_module = _module.children;
				}
				if (!filename && terminal_module)
					test_filename(terminal_module);
				if (filename)
					return filename;
			}

			// There is no `module.parent` @ node.js 14.7+
			if (typeof module === 'object') {
				// for electron
				var _module = module;
				filename = null;
				while (_module) {
					// Warning: 此處不計 `terminal_module`!
					test_filename(_module);
					_module = _module.parent;
				}
				if (filename)
					return filename;
			}

			// ----------------------------------

			// We don't use is_Object or so.
			// 通常會傳入的，都是已經驗證過的值，不會出現需要特殊認證的情況。
			// 因此精確繁複的驗證只用在可能輸入奇怪引數的情況。
			if (!_.is_WWW())
				return '';

			// form dojo: d.config.baseUrl = src.substring(0, m.index);
			var i = 0, node = document.getElementById(_.env.main_script_name),
			// TODO: 若是有 id，則以 id 為主。
			o = node ? [ node ] : _.get_tag_list('script'), l = o.length, j, base_path, index;
			// console.log('-----------------------------------');
			// console.log(o);

			for (; i < l; i++)
				try {
					// o[i].src 多是 full path, o[i].getAttribute('src')
					// 僅取得其值，因此可能是相對的。
					j = node = o[i];
					j = j.getAttribute && j.getAttribute('src') || j.src;

					index = j.lastIndexOf(JSFN);
					// alert(j + ',' + JSFN + ',' + I);
					if (index !== -1) {
						// 正規化: URL 使用 '/' 而非 '\'
						// TODO: 尚未完善。
						if (j.indexOf('/') === -1 && j.indexOf('\\') !== -1)
							j = j.replace(/\\/g, '/');

						/**
						 * 處理<code>
						<script type="text/javascript" src="path/to/ce.js">//{"run":"initializer"}</script>
						</code>
						 */
						if (setup_extension) {
							if (JSFN === _.env.main_script)
								setup_extension(_.env.script_extension, node);
							else if (JSFN === _.env.main_script_name)
								setup_extension(j.slice(index + JSFN.length),
										node);
						}

						base_path = j.slice(0, index);
						if (j.length === index + JSFN.length) {
							// test 是否以 JSFN 作為結尾。
							// 注意: 依照現行的實作方法，用loader來載入JSFN時，必須以 JSFN 作為結尾。
							break;
						}
					}
				} catch (e) {
				}

			// _.log()

			// base_path || './'
			return base_path || '';
		};
		if (false)
			console.log(_.get_tag_list('script').map(function(n) {
				return n.getAttribute('src')
			}));

		/**
		 * 處理<code>
		<script type="text/javascript" src="path/to/ce.js">//{"run":"initializer"}</script>
		</code>
		 * TODO: modify the dirty hack.
		 */
		var setup_extension = function(extension, node) {
			if (extension === _.env.script_extension
			// || extension === '.js' || extension === '.txt'
			) {
				// TODO: unload 時 delete .script_node
				// _.script_node = node;
				var env = _.env, config, matched;
				try {
					config = node.innerText || (config = node.firstChild)
							&& config.nodeValue;
					// IE8 沒有 .innerText || .nodeValue
					if (!config
							&& typeof (config = node.innerHTML) === 'string')
						config = (matched = config
								.match(/^[\s\n]*<!--(.+?)-->[\s\n]*$/)) ? matched[1]
								: config.replace(/<!--([\s\S]*?)-->/g, '');
					if (config) {
						// http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#inline-documentation-for-external-scripts
						// If there is a src attribute, the element must be
						// either empty or contain only script documentation
						// that also matches script content restrictions.
						if (matched = config.match(/\/\*([\s\S]+?)\*\//))
							config = matched[1];
						if (config = (JSON.parse || eval_parse)(config.replace(
								/[\s\r\n]*\/\//g, '')))
							env.script_config = config;
					}
				} catch (e) {
					_.error('setup_extension: Invalid configuration: ['
							+ node.outerHTML + ']');
					_.error(e);
				}

				env.main_script = env.main_script.replace(new RegExp('\\'
						+ env.script_extension + '$'), extension);
				env.script_extension = extension;

				// alert(env.main_script + '\n' + env.script_extension);

				// done.
				setup_extension = null;
			}
		};

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		_// JSDT:_module_
		.
		/**
		 * test 是否符合 module pattern.
		 * 
		 * TODO: improve
		 * 
		 * @param {String}
		 *            test_string string to test
		 * @returns {Boolean} 是否符合 module pattern
		 */
		is_module_pattern = function(test_string) {
			var env = _.env;
			var r = env.module_identifier_RegExp;
			if (!r) {
				// initial module_identifier_RegExp
				r = env.identifier_RegExp.source;
				r = env.module_identifier_RegExp = new RegExp('^' + r + '(\\.'
						+ r + ')*$');
			}

			return r.test(test_string);
		};

		_// JSDT:_module_
		.
		/**
		 * test function.request 的項目是否為 module.<br />
		 * 以 ./ 開頭可以確保必定是 path.
		 * 
		 * TODO: 現在還有很大問題!
		 * 
		 * @param {String}resource_String
		 *            resource to test
		 * @returns {Boolean} resource 是否為 module (true: is module, false: is
		 *          URL?)
		 */
		match_module_name_pattern = function match_module_name_pattern(
				resource_String) {
			return typeof resource_String !== 'string'
					|| resource_String.charAt(0) === '.'
					|| resource_String.charAt(0) === '/'
					|| resource_String.indexOf(':') !== -1
					// || resource_String.indexOf('%')!==-1
					|| /\.(js|css)$/i.test(resource_String) ? false : /\.$/
					.test(resource_String)
					|| _.is_module_pattern(resource_String);
		};

		_// JSDT:_module_
		.
		/**
		 * reduce path. 減縮 path. 轉化所有 /., /.., // 尚未處理：: * ?
		 * 
		 * @example <code>

		CeL.simplify_path('http://hostname.org/pp/../aaa/bbb/../ccc/../ddd');

		</code>
		 * 
		 * @param {String}path
		 *            欲轉化之 path
		 * @returns {String} path
		 * @since 2009/11/23 22:32:52
		 */
		simplify_path = function simplify_path(path, options) {
			_.debug('[' + typeof path + '] [' + path + ']', 8, 'simplify_path');
			if (false && typeof path !== 'string')
				return path;
			// path = '' + path;
			path = String(path);
			if (!path)
				return;
			if (/^"([^"]+)"$|^'([^']+)'$/.test(path)) {
				// JSON.parse(path);
				path = path.slice(1, -1);
			}

			// Windows environment variables 在真實 path 前,尚未測試！
			// Using function ExpandEnvironmentStrings(string) @
			// CeL.application.platform.nodejs instead!
			if (false && typeof WinEnvironment === 'object'
					&& (t = path.match(/%(.+)%/g))) {
				for ( var i in t)
					if (WinEnvironment[i])
						path.replace(new RegExp(i, "ig"), WinEnvironment[i]);
			}

			// 有 head 表示 is absolute
			var head, tail, is_URL;
			// 對於 URL 如：
			// https://web.archive.org/web/http://site.org
			// http://site.org?p=//\\#a/b/c
			// 由於有太多不可不可預測因素，因此需特別處理之。
			if (/[\w\-]:\/\//.test(path)) {
				// [ all, protocol + ://, path ]
				is_URL = path.match(/^((?:(?:file:\/|[\w\-]+:)?\/)?\/)(.*?)$/);
				if (is_URL) {
					// e.g.,
					// 'http://example.org/path/to/'
					// '//example.org/path/to/'
					// '/example.org/path/to/'
					head = is_URL[1];
					path = is_URL[2];
				} else {
					// e.g., '/path/to/http://example.org/path/to/'
				}
				is_URL = true;
				if (tail = path.match(/^([^#?]+)([#?].*?)$/) || '') {
					path = tail[1];
					tail = tail[2];
				}
				if (/\/$/.test(path)) {
					// 保存 path 最後的 '/'。
					path = path.slice(0, -1);
					tail = '/' + tail;
				}
				path = path.replace(/:\/\//g, encodeURIComponent(':/') + '/');
			} else {
				path = path.replace(
						/^(?:[a-zA-Z]:\\?|\\\\(?:[^\\\/]+)\\?|\\|\/)/,
						function($0) {
							head = $0;
							return '';
						})
				// 不應去除前後空白. TODO: use String.prototype.trim()
				// .replace(/\s+$|^\s+/g,'')
				// .replace(/\/\/+/g,'/')
				;
				if (tail = path.match(/^(.*?)([\\\/]+)$/))
					path = tail[1], tail = tail[2].charAt(0);
			}

			var separator_matched = path.match(/[\\\/]/) || tail
					&& tail.match(/^[\\\/]/);
			if (!separator_matched)
				return (head || '') + path + (tail || '') || '.';
			path = path.split(/[\\\/]+/);

			for (var i = 0, length = path.length; i < length; i++) {
				if (path[i] === '.') {
					// ./ → ''
					// /./ → /
					path[i] = '';

				} else if (path[i] === '..') {
					// xx/../ → ''
					var j = i;
					while (j > 0)
						if (path[--j] && path[j] !== '..') {
							// 找到第一個非 '', '..' 的以相消。
							path[i] = path[j] = '';
							break;
						}
				}
			}

			// '//path' → '/path', '///path' → '/path'
			while (path.length > 0 && !path[0]
			// '/../path' → '/path'
			|| path[0] === '..' && head)
				path.shift();
			while (path.length > 0 && !path[path.length - 1]) {
				// 因為有 separator 結尾的話，應該都放在 tail 了；因此此處能去掉所有的空結尾。
				path.pop();
			}

			path = path.join(separator_matched[0])
			// 對 archive.org 之類的網站，不可以簡化 '://'。
			// 若為了預防有些情況下需要保留 '//'，此條需要 comment out。
			// '//' → '/'
			.replace(/([\\\/])[\\\/]+/g, '$1')
			// .replace(head ? /^([\\\/]\.\.)+/g : /^(\.[\\\/])+/g, '')
			;

			// postfix
			if (is_URL)
				// recover. '%3A%2F': encodeURIComponent(':/')
				path = path.replace(/%3A%2F\//g, '://');
			if (head)
				path = head + path;
			else if (!path)
				path = '.';
			if (tail)
				path += tail;

			if (false && options && options.directory_only) {
				// 去除檔名，只餘目錄。如輸入 http://hostname.org/aaa/bbb/ccc，得到
				// http://hostname.org/aaa/bbb/
				// 假如輸入sss/ddd，會把ddd除去！需輸入sss/ddd/以標示ddd為目錄.
				path = path.replace(/[^\\\/]+$/, '');
			}

			_.debug('→ [' + path + ']', 8, 'simplify_path');
			return path;
		};

		_// JSDT:_module_
		.
		/**
		 * 將輸入的 string 分割成各 module 單元。已去除 library name。<br />
		 * need environment_adapter()<br /> ** 並沒有對 module 做完善的審核!
		 * 
		 * @param {String}
		 *            module_name module name
		 * @returns {Array} module unit array
		 */
		split_module_name = function(module_name) {
			if (false)
				_.debug('['
						+ module_name
						+ ']→['
						+ module_name.replace(/\.\.+|\\\\+|\/\/+/g, '.').split(
								/\.|\\|\/|::/) + ']');
			if (typeof module_name === 'string') {
				module_name = module_name
				// .replace(/\.\.+|\\\\+|\/\/+/g, '.')
				// '.': CeL.env.module_name_separator
				.replace(/[\\\/]+/g, '.').split(/[.\\\/]|::/);
			}

			if (Array.isArray(module_name) && module_name.length) {
				// 去除 library name。
				if (// module_name.length > 1 &&
				_.Class === module_name[0])
					module_name.shift();
				return module_name;
			} else
				return [ '' ];
		};

		_// JSDT:_module_
		.
		/**
		 * 取得 module 之 name。以 library name 起始。
		 * 
		 * @returns {String} module name start with library name
		 */
		to_module_name = function(module, separator) {
			if (_.is_Function(module))
				module = module.Class;
			else if (module === _.env.main_script_name)
				module = _.Class;

			if (typeof module === 'string')
				module = _.split_module_name(module);

			var name = '';
			if (Array.isArray(module)) {
				if (typeof separator !== 'string')
					separator = _.env.module_name_separator;
				if (module[0] !== _.Class)
					name = _.Class + separator;
				name += module.join(separator);
			}

			return name;
		};

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		_// JSDT:_module_
		.is_local = function() {
			// cache
			return (_.is_local = _.constant_function(!_.is_WWW()
					|| window.location.protocol === 'file:'))();
		};

		// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

		_.reset_env();

	}
	// 不用 apply()，因為比較舊的瀏覽器沒有 apply()。
	)(CeL);
}







if (typeof CeL === 'function')
	(function(library_namespace) {

		var
		/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
		NOT_FOUND = ''.indexOf('_');

		// ---------------------------------------------------------------------//
		// 為一些比較舊的版本或不同瀏覽器而做調適。

		// @see data.code.compatibility.

		// cache.
		var Array_slice = Array.prototype.slice;

		/**
		 * Function.prototype.apply();<br />
		 * apply & call: after ECMAScript 3rd Edition.<br />
		 * 不直接用 value undefined: for JS5.
		 * 
		 * 傳回某物件的方法，以另一個物件取代目前的物件。
		 * apply是將現在正在執行的function其this改成apply的引數。所有函數內部的this指針都會被賦值為oThis，這可實現將函數作為另外一個對象的方法運行的標的.
		 * xxx.apply(oThis,arrayArgs): 執行xxx，執行時以 oThis 作為 this，arrayArgs作為
		 * arguments.
		 * 
		 * @param apply_this_obj
		 * @param apply_args
		 * @returns apply 後執行的結果。
		 * @see http://msdn.microsoft.com/en-us/library/4zc42wh1(VS.85).aspx
		 *      http://www.cnblogs.com/sunwangji/archive/2007/06/26/791428.html
		 *      http://www.cnblogs.com/sunwangji/archive/2006/08/21/482341.html
		 *      http://msdn.microsoft.com/en-us/library/4zc42wh1(VS.85).aspx
		 *      http://www.interq.or.jp/student/exeal/dss/ejs/3/1.html
		 *      http://blog.mvpcn.net/fason/
		 *      http://d.hatena.ne.jp/m-hiyama/20051017/1129510043
		 *      http://noir.s7.xrea.com/archives/000203.html
		 *      http://www.tohoho-web.com/js/object.htm#inheritClass
		 * 
		 * @since 2011/11/20
		 */
		function apply(apply_this_obj, apply_args) {
			var temp_apply_key, _arg_list = [], r, i = 0, l = apply_args
					&& apply_args.length;

			if (apply_this_obj !== null
					&& typeof apply_this_obj !== 'undefined')
				try {
					apply_this_obj[temp_apply_key = 'temp_apply'] = this;
				} catch (e) {
					temp_apply_key = null;
				}

			if (l) {
				for (; i < l; i++)
					_arg_list[i] = 'apply_args[' + i + ']';
				if (!temp_apply_key)
					apply_this_obj = this;
				r = eval('apply_this_obj'
						+ (temp_apply_key ? '.' + temp_apply_key : '') + '('
						+ _arg_list.join(',') + ')');
			} else
				r = temp_apply_key ? apply_this_obj[temp_apply_key]() : this();

			if (temp_apply_key)
				delete apply_this_obj[temp_apply_key];
			return r;
		}

		/**
		 * Function.prototype.call();<br />
		 * call 方法是用來呼叫代表另一個物件的方法。call 方法可讓您將函式的物件內容從原始內容變成由 thisObj 所指定的新物件。
		 * 如果未提供 thisObj 的話，將使用 global 物件作為 thisObj。
		 * 
		 * @see http://msdn.microsoft.com/library/CHT/jscript7/html/jsmthcall.asp
		 * @since 2011/11/20
		 */
		function call(this_obj) {
			// 因 arguments 非 instanceof Array，
			// arguments.slice(sp) → Array.prototype.slice.call(arguments, sp).
			return this.apply(this_obj, Array_slice.call(arguments, 1));
		}

		function copy_properties_keys(from, to) {
			Object.keys(from).forEach(function(property) {
				to[property] = from[property];
			});
			return to;
		}
		var copy_properties = library_namespace.copy_properties = function copy_properties_old(
				from, to) {
			// TODO: using Object.getOwnPropertyNames() to copy others
			if (Object.keys) {
				copy_properties = library_namespace.copy_properties = copy_properties_keys;
				return copy_properties(from, to);
			}

			for ( var property in from)
				to[property] = from[property];
			return to;
		};
		// 有 Object.keys() 則使用 Object.keys()。
		copy_properties(Object.create(null), Object.create(null));

		/**
		 * Function.prototype.bind();
		 * 
		 * @since 2011/11/20
		 * @see <a
		 *      href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind"
		 *      accessdate="2012/2/4 16:39">bind</a>
		 */
		function bind(this_obj) {
			var func = this, args;
			if (arguments.length < 2)
				return this_obj === null || typeof this_obj === 'undefined' ? func
						: copy_properties(func, function() {
							if (false)
								library_namespace.debug('this_obj: ['
										+ this_obj + '],<br />\nfunction: ('
										+ typeof func + ') [' + func + ']', 1,
										'bind');
							return func.apply(this_obj, arguments);
						});

			args = Array_slice.call(arguments, 1);
			return copy_properties(func, function() {
				var counter = arguments.length, arg, i;
				if (!counter)
					return func.apply(this_obj, args);

				// TODO: TEST: 對於少量 arguments，將 arguments 添入於 .concat() 以加快速度。
				arg = args.concat();
				i = counter + args.length;
				while (counter--)
					arg[--i] = arguments[counter];
				return func.apply(this_obj, arg);
			});
		}

		// public interface.
		library_namespace.set_method(Function.prototype, {
			apply : apply,
			call : call,
			bind : bind
		});

		// ---------------------------------------------------------------------//
		// for Iterator

		// for the Iterator interface

		/**
		 * 
		 * @param object
		 *            object to iterate
		 * @param {String|Function}kind
		 *            kind (The possible values are: "key", "value",
		 *            "key+value"), or next function(index, Iterator, arguments)
		 */
		function create_list_iterator(object, kind, get_Array, use_origin) {
			var key, iterator;
			if (use_origin && Array.isArray(object))
				iterator = object;
			else
				for (key in (iterator = []))
					// delete any properties that can be iterated.
					delete iterator[key];
			// assert: Array.isArray(iterator)

			if (!kind && typeof kind !== 'function')
				kind = Array.isArray(object) ? 'value'
				// 當作 Object。視 for(in) 而定。
				: 'key';

			// define iterator
			if (typeof object.forEach === 'function')
				object.forEach(kind === 'value' ? function(value) {
					iterator.push(value);
				} : kind === 'key' ? function(value, key) {
					iterator.push(key);
				} : function(value, key) {
					iterator.push([ key, value ]);
				});
			else
				for (key in object)
					iterator.push(
					//
					kind === 'key' ? key
					//
					: kind === 'value' ? object[key]
					// "key+value"
					: [ key, object[key] ]);

			if (get_Array)
				return iterator;

			return new Array_Iterator(iterator, true);
		}

		// ---------------------------------------------------------------------//

		/**
		 * test code for Map, Set, Array.from():
		 * 
		 * TODO:<br />
		 * test: Array.from(Iterator, other arrayLike)
		 * 
		 * @example <code>

		// More examples: see /_test suite/test.js

		 * </code>
		 * 
		 */

		// Array.from()
		function from(items, mapfn, thisArg) {
			if (typeof items === 'undefined' || items === null) {
				throw new Error('Cannot convert undefined or null to object');
			}
			var array, i, iterator = items && !Array.isArray(items)
			// 測試是否有 iterator。
			&& (
			// items['@@iterator'] ||
			items.constructor === Set ? 'values'
			//
			: (items.entries ? 'entries' : items.values && 'values'));

			if (!iterator && typeof items.next === 'function') {
				// items itself is an iterator.
				iterator = items;
			}

			if (iterator) {
				array = [];

				// need test library_namespace.env.has_for_of
				// for(i of items) array.push(i);

				if (typeof iterator === 'function')
					iterator = iterator.call(items);
				else if (iterator && typeof items[iterator] === 'function')
					iterator = items[iterator]();
				else if (!iterator.next)
					throw new Error('Array.from: invalid iterator!');

				while (!(i = iterator.next()).done)
					array.push(i.value);
				return array;
			}

			if (typeof mapfn !== 'function') {
				try {
					// for IE, Array.prototype.slice.call('ab').join() !== 'a,b'
					return typeof items === 'string' ? items.split('')
							: Array_slice.call(items);
				} catch (e) {
					if ((e.number & 0xFFFF) !== 5014)
						throw e;
					mapfn = null;
				}
			}

			var length = items && items.length | 0;
			array = [];
			if (mapfn) {
				for (i = 0; i < length; i++) {
					array.push(thisArg ? mapfn.call(thisArg, items[i], i)
					// 不採用 .call() 以加速執行。
					: mapfn(items[i], i));
				}
			} else {
				while (i < length)
					array.push(items[i++]);
			}

			return array;
		}

		library_namespace.set_method(Array, {
			from : from
		});

		function Array_Iterator_next() {
			// this: [ index, array, use value ]
			library_namespace.debug(this.join(';'), 6, 'Array_Iterator.next');
			var index;
			while ((index = this[0]++) < this[1].length)
				if (index in this[1])
					return {
						value : this[2] ? this[1][index]
						//
						: [ index, this[1][index] ],
						done : false
					};

			// 已經 done 的不能 reuse。
			this[0] = NaN;
			return {
				value : undefined,
				done : true
			};
		}

		function Array_Iterator(array, use_value) {
			// library_namespace.debug(array);
			// reset index to next index.
			// define .next() function onto items.
			this.next = Array_Iterator_next.bind([ 0, array, use_value ]);
		}
		Array_Iterator.prototype.toString = function() {
			return "[object Array Iterator]";
		};

		// export.
		library_namespace.Array_Iterator = Array_Iterator;

		// ---------------------------------------------------------------------//
		// 測試是否具有標準的 ES6 Set/Map collections (ECMAScript 6 中的集合類型)。

		var is_Set, is_Map, has_native_Set, has_native_Map,
		//
		KEY_not_native = library_namespace.env.not_native_keyword,
		// use Object.defineProperty[library_namespace.env.not_native_keyword]
		// to test if the browser don't have native support for
		// Object.defineProperty().
		has_native_Object_defineProperty = !Object.defineProperty[KEY_not_native];

		try {
			has_native_Set = !!(new Set());
			has_native_Map = !!(new Map());

			// TODO: use library_namespace.type_tester()
			is_Set = function(value) {
				return Object.prototype.toString.call(value) === "[object Set]";
			};
			is_Map = function(value) {
				return Object.prototype.toString.call(value) === "[object Map]";
			};

			// (new Map()).entries();
			(new Map()).forEach();

		} catch (e) {

			// browser 非標準 ES6 collections。
			// 想辦法補強。

			// TODO: WeakMap 概念驗證碼:
			// var _WeakMap=function(v){return function(){return eval('v');};};
			// var a={s:{a:3}},g=_WeakMap(a.s);
			// delete a.s;/* .. */alert(g());
			// https://code.google.com/p/es-lab/source/browse/trunk/src/ses/WeakMap.js

			if (!has_native_Object_defineProperty || !has_native_Set
					|| !has_native_Map)
				(function() {
					library_namespace
							.debug('完全使用本 library 提供的 ES6 collections 實作功能。');

					// ---------------------------------------

					/**
					 * hash 處理。在盡可能不動到 value/object 的情況下，為其建立 hash。<br />
					 * 在 ES5 下，盡可能模擬 ES6 collections。<br />
					 * 在先前過舊的版本下，盡可能達到堪用水準。
					 * 
					 * @see <a
					 *      href="https://github.com/Benvie/harmony-collections/blob/master/harmony-collections.js"
					 *      accessdate="2012/12/12 17:0"
					 *      title="harmony-collections/harmony-collections.js at
					 *      master · Benvie/harmony-collections ·
					 *      GitHub">harmony-collections</a>
					 */
					var max_hash_length = 80,
					// operator
					ADD = 1, DELETE = 2,
					// id 註記。
					Map_id = 'Map id\n' + Math.random(),
					// Object.prototype.toString.call()
					get_object_type = library_namespace.get_object_type,
					// private operator, access/pass keys.
					// ** WARNING:
					// Should be Array (see forEach).
					// 只要是 object，會以 reference 傳遞，可以 "===" 判斷即可。
					OP_HASH = [],
					//
					OP_SIZE = [],
					//
					OP_KEYS = [], OP_VALUES = [], OP_ENTRIES = [],
					// 取得裸 Object (naked Object) 與屬性判別函數。
					new_hash_set = function new_hash_set() {
						var hash_map = Object.create(null);
						// [ hash_map, has_hash() ]
						return [ hash_map, function(key) {
							return key in hash_map;
						} ];
					};

					// 測試可否用 \0 作為 id。
					(function() {
						var o = {}, a = [], t = {}, id = '\0' + Map_id;
						o[id] = a[id] = t;
						if (o[id] === t && a[id] === t)
							Map_id = id;
					})();

					try {
						new_hash_set();

					} catch (e) {
						// 使用較原始的方法。
						new_hash_set = function() {
							var hash_map = {};
							return [ hash_map,
							// has_hash()
							Object.hasOwn ? function(key) {
								return Object.hasOwn(hash_map, key);
							} : Object.prototype.hasOwnProperty
							//
							? function(key) {
								return Object.prototype.hasOwnProperty
								//
								.call(hash_map, key);
							} : Object.prototype ? function(key) {
								return key in hash_map
								//
								&& hash_map[key] !== Object.prototype[key];
							} : function(key) {
								return key in hash_map;
							} ];
						};
					}

					/**
					 * 判別是否為 <a href="http://zh.wikipedia.org/wiki/-0"
					 * accessdate="2013/1/6 19:0" title="負零">−0</a>。
					 * 
					 * @see <a href="http://en.wikipedia.org/wiki/Signed_zero"
					 *      accessdate="2012/12/15 12:58">Signed zero</a>, <a
					 *      href="http://www.cnblogs.com/ziyunfei/archive/2012/12/10/2777099.html"
					 *      accessdate="2012/12/15 13:0">[译]JavaScript中的两个0 -
					 *      紫云飞 - 博客园</a>
					 */
					var is_negative_zero = Object.is && !Object.is(+0, -0)
					// Object.is() 採用 SameValue Algorithm。
					? function(value) {
						return Object.is(value, -0);
					}
					// 相容方法。
					: function(value) {
						return value === -0 && 1 / value === -Infinity;
					};
					library_namespace.is_negative_zero = is_negative_zero;

					/**
					 * 鍵值對。
					 * 
					 * TODO: comparator
					 * 
					 * @constructor
					 * 
					 * @see <a
					 *      href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Map"
					 *      accessdate="2012/12/10 7:48">Map - JavaScript | MDN</a>
					 */
					function Map(iterable, comparator) {
						if (this === null || this === undefined
								|| this === library_namespace.env.global) {
							// 採用 Map()，而非 new 呼叫。
							// called as a function rather than as a
							// constructor.
							return new Map(iterable, comparator);
						}

						var size,
						// {Object}map hash to key (object) Array.
						//
						// get hash map of (
						// hash → [value/object 1, value/object 2, ..]
						// )
						hash_map,
						// has this hash.
						has_hash,
						// {Object}value objects 的 id hash map。可用來維持插入順序。
						// value_of_id[
						// id: {String}hash + "_" + {ℕ⁰:Natural+0}index
						// ] = value.
						//
						// 在 Set 中 value_of_id={ id: key object }，
						// 因此可以更快的作 forEach()。
						value_of_id;

						// 快速處理法。
						Object.defineProperty(this, 'clear', {
							// enumerable : false,
							value : function clear() {
								// reset.
								var set = new_hash_set();
								hash_map = set[0];
								has_hash = set[1];
								value_of_id = Object.create(null);
								size = 0;
							}
						});
						// 初始化。
						this.clear();

						Object.defineProperty(this, 'size', {
							// enumerable : false,
							// configurable : false,
							get : function() {
								return size;
							},
							set : function(v) {
								if (Array.isArray(v) && v[1] === OP_SIZE)
									size = v[0];
							}
						});

						// 假扮的 interface（仮面）:
						// 借用標準 method 介面，
						// 若是傳入 OP_*，則表示為 private method，作出內部特殊操作。
						// 否則作出正常表現。
						//
						// 使用這方法以盡量減少多餘的 property 出現，
						// 並維持 private method 之私密特性。
						Object.defineProperty(this, 'values', {
							// enumerable : false,
							value : function values() {
								// arguments[0]: 隱藏版 argument。
								if (arguments[0] === OP_ENTRIES)
									// 傳入 OP_*，則表示為 private method。
									// 回傳 private property 以便操作。
									return [ hash_map, value_of_id ];
								if (arguments[0] === OP_VALUES)
									return create_list_iterator(value_of_id,
											'value', true);

								// 作出正常表現。
								return create_list_iterator(value_of_id,
										'value');
							}
						});

						// 為了能初始化 iterable，因此將設定函數放在 constructor 中。

						Object.defineProperty(this, 'has', {
							// enumerable : false,
							value : function has(key) {
								// arguments[1]: 隱藏版 argument。
								return arguments[1] === OP_HASH ?
								// 傳入 OP_HASH，則表示為 private method，回傳 has_hash()。
								has_hash(key) :
								// 作出正常表現。
								!!hash_of_key.call(this, key);
							}
						});

						if (iterable)
							// initialization. 為 Map 所作的初始化工作。
							try {
								if (Array.isArray(iterable)) {
									// "key+value"
									for (var index = 0; index < iterable.length; index++) {
										var entry = iterable[index];
										this.set(entry[0], entry[1]);
									}
								} else if (iterable.forEach) {
									var _this = this;
									iterable.forEach(function(v, k) {
										_this.set(k, v);
									});
								} else {
									throw 1;
									for ( var k in iterable)
										this.set(k, iterable[k]);
								}
							} catch (e) {
								if (false) {
									library_namespace.info('' + this.set);
									library_namespace.info(Array
											.isArray(iterable) ? 'isArray'
											: iterable.forEach ? 'forEach'
													: 'throw');
									library_namespace.error(e);
								}
								throw new TypeError(
								//
								'Map: Input value is not iterable: '
								//
								+ (library_namespace.is_Object(iterable)
								//
								? library_namespace.is_type(iterable)
								//
								: iterable));
							}
					}

					/**
					 * collections 之核心功能：get hash of specified value/object.<br />
					 * 所有對 hash_map 之變更皆由此函式負責。<br />
					 * 
					 * 本函式僅能以下列方式呼叫：<br />
					 * <code>
					 * hash_of_key.call(this, ..)
					 * </code>
					 * 
					 * TODO: hash collision DoS
					 * 
					 * @param key
					 *            key object
					 * @param {Integer}operator
					 *            操作
					 * @param value
					 *            value object
					 * 
					 * @private
					 * 
					 * @returns [ hash, index ]
					 */
					function hash_of_key(key, operator, value) {
						if (arguments.length === 0)
							return;

						var hash = this.values(OP_ENTRIES), type = typeof key, map = this,
						//
						hash_map = hash[0], value_of_id = hash[1],
						//
						add_size = has_native_Object_defineProperty ?
						// set inner 'size' property
						function(v) {
							map.size = [ map.size + v, OP_SIZE ];
						} : function(v) {
							map.size += v;
						},
						//
						add_value = function(no_size_change) {
							value_of_id[hash + '_' + index] = value;
							if (!no_size_change)
								add_size(1);
						},
						//
						delete_one = function() {
							delete value_of_id[hash + '_' + index];
							add_size(-1);
						};

						// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof
						switch (type) {

						case 'string':
							hash = key;
							break;

						case 'number':
							if (is_negative_zero(key)) {
								// 直接避免紛爭。
								//
								// 實際應使用 SameValue Algorithm。
								// 因為本處實作採用 Array.prototype.indexOf()，
								// 而 indexOf() 採用嚴格相等運算符(===)；
								// 實際上應該處理所有 "===" 判斷為相等，
								// 但以 SameValue Algorithm 並不相等的值。
								hash = '-0';
								break;
							}

						case 'boolean':
						case 'undefined':
							hash = String(key);
							break;

						// 對以上純量，無法判別個別 instance。

						case 'function':
							if (library_namespace.is_Function(key)) {
								// 若設定 function.toString，僅能得到 key.toString()。
								hash = String(key);
								// 盡量增加 hash 能取得的特徵。
								hash = hash.length + '|' + hash;
								break;
							}
						case 'object':
							try {
								if (!(hash = key[Map_id])) {
									// 對於 Object/Arrry，在更改內容的情況下，可能無法得到相同的特徵碼，
									// 因此還是加個 id 註記比較保險。
									hash = String(Math.random());
									Object.defineProperty(key, Map_id, {
										// configurable : true,
										// writable : false,
										// enumerable : false,
										value : hash
									});
									if (hash !== key[Map_id])
										throw new Error('無法設定 hash id: .['
												+ Map_id + ']');
								}
								break;
							} catch (e) {
								// TODO: handle exception
							}

							// 警告:採用不保險的方法。
							if (Array.isArray(key)) {
								hash = (2 * key.length < max_hash_length ? key
										: key.slice(0, max_hash_length / 2))
										.toString();
								break;
							}

							if (library_namespace.is_Object(key)) {
								hash = '{';
								var i;
								for (i in key) {
									hash += i + ':' + key[i] + ',';
									// 不須過長。
									if (hash.length > max_hash_length) {
										i = null;
										break;
									}
								}
								if (i !== null)
									// 已完結的時候，加個 ending mark。
									hash += '}';
								break;
							}

							// TODO:
							// test DOM, COM object.

							// case 'xml':
							// case 'date':

						default:
							try {
								hash = get_object_type(key) + key;
							} catch (e) {
								hash = '[' + type + ']' + key;
							}
							break;
						}

						// assert: typeof hash === 'string'

						// 正規化 hash。
						hash = hash.slice(0, max_hash_length).replace(
								/_(\d+)$/, '-$1');
						if (library_namespace.is_debug(6)
								&& library_namespace.is_WWW())
							library_namespace.debug('hash: [' + hash + ']', 0,
									'hash_of_key');

						if (this.has(hash, OP_HASH)) {
							var list = hash_map[hash],
							// 實際上應該以 SameValue Algorithm, Object.is() 判斷。
							// NaN 等於 NaN, -0 不等於 +0.
							index = list.indexOf(key);
							if (library_namespace.is_debug(6)
									&& library_namespace.is_WWW())
								library_namespace.debug('index: [' + index
										+ ']', 0, 'hash_of_key');

							if (index === NOT_FOUND) {
								// 測試是否為本身與本身不相等的特殊情形。

								// TODO:
								// 偵測 ELEMENT_NODE.isSameNode,
								// Array 之深度檢測等。

								// incase NaN. 可用 Number.isNaN().
								// 但不可用 isNaN(key), 因為 isNaN(非數字) === true.
								if (key !== key) {
									for (var i = 0, length = list.length; i < length; i++) {
										// 若具有所有可偵測的相同特徵(特徵碼相同+本身與本身不相等)，
										// 則判別為相同。
										if (list[i] !== list[i]) {
											index = i;
											break;
										}
									}
								}

							}

							if (index === NOT_FOUND) {
								if (operator === ADD) {
									if (library_namespace.is_debug(5)
											&& library_namespace.is_WWW())
										library_namespace.debug(
												'衝突(collision) : ' + type
														+ ' @ hash [' + hash
														+ '], index ' + index
														+ ' / ' + list.length,
												0, 'hash_of_key');

									index = list.push(key) - 1;
									add_value();
								} else
									hash = undefined;

							} else if (operator === DELETE) {
								if (library_namespace.is_debug(6)
										&& library_namespace.is_WWW())
									library_namespace.debug('remove key: ['
											+ hash + ']', 0, 'hash_of_key');
								if (list.length < 2)
									// assert: list.length ===1 && list[0] ===
									// key.
									delete hash_map[hash];
								else
									// assert: list[index] === key.
									delete list[index];
								delete_one();
								return true;
							} else if (operator === ADD) {
								if (library_namespace.is_debug(6)
										&& library_namespace.is_WWW())
									library_namespace.debug('modify key: ['
											+ hash + ']', 0, 'hash_of_key');
								add_value(true);
							}

						} else if (operator === ADD) {
							// add new one.
							hash_map[hash] = [ key ];
							index = 0;
							add_value();
						} else
							hash = undefined;

						return operator === DELETE ? false : hash
								&& [ hash, index ];
					}

					function forEach(callbackfn, thisArg) {
						var id, match, key = this.values(OP_ENTRIES), value,
						//
						hash_map = key[0], value_of_id = key[1],
						//
						use_call = thisArg !== undefined && thisArg !== null
								&& typeof callback.call === 'function',
						//
						list = Array.isArray(callbackfn)
								&& (callbackfn === OP_ENTRIES ? function(v, k) {
									list.push([ k, v ]);
								} : callbackfn === OP_KEYS && function(v, k) {
									list.push(k);
								});

						if (list)
							callbackfn = list, list = [];

						for (id in value_of_id) {
							match = id.match(/^([\s\S]*)_(\d+)$/);
							// assert: match succeed.
							key = hash_map[match[1]][match[2] | 0];
							value = value_of_id[id];
							if (use_call)
								callbackfn.call(thisArg, value, key, this);
							else
								callbackfn(value, key, this);
						}

						if (list) {
							// 這裡可以檢測 size。
							// assert: size === list.length
							return new Array_Iterator(list, true);
						}
					}

					// public interface of Map.
					Object.assign(Map.prototype, {
						set : function set(key, value) {
							hash_of_key.call(this, key, ADD, value);
						},
						get : function get(key) {
							var hash = hash_of_key.call(this, key);
							if (hash)
								return this.values(OP_ENTRIES)[1][hash
										.join('_')];
						},
						'delete' : function Map_delete(key) {
							return hash_of_key.call(this, key, DELETE);
						},
						keys : function keys() {
							return this.forEach(OP_KEYS);
						},
						entries : function entries() {
							return this.forEach(OP_ENTRIES);
						},
						forEach : forEach,
						toString : function() {
							// Object.prototype.toString.call(new Map)
							// === "[object Map]"
							return '[object Map]';
						},
						// place holder for Map.prototype.values()
						// will reset runtime
						values : function() {
						}
					});

					// ---------------------------------------

					/**
					 * 一個不包含任何重複值的有序列表。<br />
					 * 
					 * NOTE:<br />
					 * 為了維持插入順序，因此將 Set 作為 Map 之下層 (Set inherits
					 * Map)。副作用為犧牲（加大了）空間使用量。
					 * 
					 * @constructor
					 */
					function Set(iterable, comparator) {
						if (this === null || this === undefined
								|| this === library_namespace.env.global) {
							// 採用 Set()，而非 new 呼叫。
							// called as a function rather than as a
							// constructor.
							return new Set(iterable, comparator);
						}

						var map = new Map(undefined, comparator);

						Object.defineProperty(this, 'size', {
							// enumerable : false,
							// configurable : false,
							get : function() {
								return map.size;
							},
							set : function(v) {
								if (Array.isArray(v) && v[1] === OP_SIZE)
									map.size = v[0];
							}
						});

						this.values = has_native_Object_defineProperty ?
						//
						function values() {
							// arguments[0]: 隱藏版 argument。
							return arguments[0] === OP_VALUES ?
							//
							map[arguments[1]](arguments[2], arguments[3])
							// 作出正常表現。
							// 用 values 會比 keys 快些。
							: map.values();
						}
						// 先前過舊的版本。
						: function values() {
							// arguments[0]: 隱藏版 argument。
							if (arguments[0] === OP_VALUES) {
								var r = map[arguments[1]](arguments[2],
										arguments[3]);
								this.size = map.size;
								return r;
							}

							// 作出正常表現。
							// 用 values 會比 keys 快些。
							return map.values();
						};

						if (iterable)
							// initialization. 為 Set 所作的初始化工作。
							try {
								if (iterable.forEach) {
									iterable.forEach(function(v) {
										this.add(v);
									}, this);
								} else {
									for ( var i in iterable)
										this.add(iterable[i]);
								}
							} catch (e) {
								throw new TypeError(
								//
								'Set: Input value is not iterable: '
								//
								+ (library_namespace.is_Object(iterable)
								//
								? library_namespace.is_type(iterable)
								//
								: iterable));
							}
					}

					// public interface of Set.
					Object.assign(Set.prototype, {
						add : function add(value) {
							// 在 Set 中 value_of_id={ id: key object }，
							// 因此將 value 設成與 key 相同，可以更快的作 forEach()。
							return this.values(OP_VALUES, 'set', value, value);
						},
						// 對於 Map 已有的 function name，不能取相同的名稱。
						// 相同名稱的 function 在舊版 IE 會出問題：前面的會被後面的取代。
						// 因此無法使用 "function clear()"，
						// 僅能使用 "function Set_clear()"。
						// 餘以此類推。
						clear : function Set_clear() {
							return this.values(OP_VALUES, 'clear');
						},
						'delete' : function Set_delete(value) {
							return this.values(OP_VALUES, 'delete', value);
						},
						has : function Set_has(value) {
							return this.values(OP_VALUES, 'has', value);
						},
						entries : function Set_entries() {
							var entries = [];
							this.values(OP_VALUES, 'values', OP_VALUES)
									.forEach(function(value) {
										entries.push([ value, value ]);
									});
							return new Array_Iterator(entries, true);
						},
						// 在 JScript 10.0.16438 中，兩個 "function forEach()" 宣告，會造成
						// Map.prototype.forEach 也被設到 Set.prototype.forEach，但
						// Map.prototype.forEach !== Set.prototype.forEach。
						forEach : function Set_forEach(callbackfn, thisArg) {
							this.values(OP_VALUES, 'values', OP_VALUES)
									.forEach(callbackfn, thisArg);
						},
						toString : function() {
							// Object.prototype.toString.call(new Set)
							// === "[object Set]"
							return '[object Set]';
						},
						// place holder for Set.prototype.values()
						// will reset runtime
						values : function() {
						}
					});

					// ---------------------------------------

					// export.
					var global = library_namespace.env.global;
					(global.Set = library_namespace.Set = Set)[KEY_not_native] = true;
					(global.Map = library_namespace.Map = Map)[KEY_not_native] = true;

					if (false && Array.from === Array_from) {
						library_namespace
								.debug('做個標記，設定 Set.prototype[@@iterator]。');
						Set.prototype['@@iterator'] = 'values';
					}

					is_Set = function(value) {
						// value.__proto__ === Set.prototype
						return value && value.constructor === Set;
					};
					is_Map = function(value) {
						// value.__proto__ === Map.prototype
						return value && value.constructor === Map;
					};

				})();

			// ---------------------------------------------------------------------//

			// 現在只有 mozilla firefox 20 會執行到這。
			else if (library_namespace.env.has_for_of)

				// 現在只有 mozilla firefox 20 會需要這項補強。
				(function() {
					function collection_clear() {
						if (this.size > 0) {
							var list = [];
							this.forEach(function(v, k) {
								list.push(k);
							});
							list.forEach(function(k) {
								this['delete'](k);
							}, this);
							// last check.
							if (this.size > 0)
								library_namespace.warn(
								//
								'collection_clear: 仍有元素存在於 collection 中！');
						}
					}

					try {
						// 確定有 Set。
						var s = new Set(), a = [], Set_forEach;
						if (!s.forEach) {
							// shim (backward compatible) for
							// Set.prototype.forEach().
							// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Set

							// use eval() because for(..of..) is not supported
							// in current (2013) environment.
							eval('Set_forEach=function(callback,thisArg){var i,use_call=thisArg!==undefined&&thisArg!==null&&typeof callback.call==="function";for(i of this)if(use_call)callback.call(thisArg,i,i,this);else callback(i,i,this);}');
							s.add('2 ');
							s.add(1);
							Set_forEach.call(s, function(i) {
								a.push(i);
							});

							if (a.join('|') === '2 |1') {
								library_namespace
										.debug('採用 Set_forEach() 作為 Set.prototype.forEach()。');
								Object.defineProperty(Set.prototype, 'forEach',
										{
											// enumerable : false,
											value : Set_forEach
										});
							}
						}

						if (!Set.prototype.clear)
							Object.defineProperty(Set.prototype, 'clear', {
								// enumerable : false,
								value : collection_clear
							});

						if (typeof Set.prototype.size === 'function') {
							var Set_size = Set.prototype.size;
							Object.defineProperty(Set.prototype, 'size', {
								// enumerable : false,
								get : Set_size
							});
						}

					} catch (e) {
					}

					try {
						// 確定有 Map。
						var m = new Map(), a = [], Map_forEach;
						if (!m.forEach) {
							// use eval() because for(..of..) is not supported
							// in current (2013) environment.
							eval('Map_forEach=function(callback,thisArg){var k,v,use_call=thisArg!==undefined&&thisArg!==null&&typeof callback.call==="function";for([k,v] of this)if(use_call)callback.call(thisArg,v,k,this);else callback(v,k,this);}');
							m.set('1 ', 2);
							m.set(' 3', 4);
							Map_forEach.call(m, function(v, k) {
								a.push(k, v);
							});
							if (a.join('|') === '1 |2| 3|4') {
								library_namespace
										.debug('採用 Map_forEach() 作為 Map.prototype.forEach()。');
								Object.defineProperty(Map.prototype, 'forEach',
										{
											// enumerable : false,
											value : Map_forEach
										});
							}
						}

						if (!Map.prototype.clear)
							Object.defineProperty(Map.prototype, 'clear', {
								// enumerable : false,
								value : collection_clear
							});

						if (typeof Map.prototype.size === 'function') {
							var Map_size = Map.prototype.size;
							Object.defineProperty(Map.prototype, 'size', {
								// enumerable : false,
								get : Map_size
							});
						}

					} catch (e) {
					}

					// TODO: .size

				})();

		}

		// IE11 無法使用 new Set([ , ])，但 firefox 23 可以。
		var Set_from_Array = new Set([ 1, 2 ]);
		library_namespace.Set_from_Array = Set_from_Array =
		//
		Set_from_Array.size === 2 ? function(array) {
			return new Set(array);
		} : function(array) {
			var set = new Set;
			if (typeof array.forEach === 'function')
				array.forEach(function(value) {
					set.add(value);
				});
			else
				set.add(array);
			return set;
		};

		// e.g., IE 11 has no Set.prototype.values()
		if (typeof Set.prototype.values !== 'function'
		//
		&& typeof Set.prototype.forEach === 'function')
			Set.prototype.values = function Set_prototype_values() {
				var values = [];
				this.forEach(function(v) {
					values.push(v);
				});
				return new Array_Iterator(values, true);
			};

		library_namespace.is_Set = is_Set;
		library_namespace.is_Map = is_Map;

		// ---------------------------------------------------------------------//

		var
		// 計數用。
		CONST_COUNT = 0,

		// const: 程序處理方法。
		// {Integer} PARALLEL (平行處理), SEQUENTIAL (循序/依序執行, in order).
		PARALLEL = 0, SEQUENTIAL = 1,

		// const: major status of object.
		// UNKNOWN 不可為 undefined，會造成無法判別。
		UNKNOWN = 'unknown',
		// LOADING, INCLUDING, reloading, reincluding.
		// WORKING = ++CONST_COUNT,
		// 主要的兩種處理結果。
		// IS_OK = ++CONST_COUNT, IS_FAILED = ++CONST_COUNT,
		//
		PROCESSED = ++CONST_COUNT,

		// const: 詳細 status/detailed information of object.
		// LOADING = ++CONST_COUNT, LOAD_FAILED = ++CONST_COUNT,
		//
		INCLUDING = ++CONST_COUNT, INCLUDE_FAILED = ++CONST_COUNT;
		// included: URL 已嵌入/掛上/named source code registered/函數已執行。
		// INCLUDED = ++CONST_COUNT;

		// ---------------------------------------------------------------------//

		/**
		 * 程式碼主檔內建相依性(dependency chain)和關聯性處理 class。
		 * 
		 * @example <code>

		// More examples: see /_test suite/test.js

		 * </code>
		 * 
		 */
		function dependency_chain() {
			this.relations = new Map;
		}

		/**
		 * 取得指定 item 之 relation 結構。<br />
		 * TODO: 無此 item 時，預設不順便加入此 item。
		 * 
		 * @param [item]
		 *            指定 item。未指定 item 時，回傳所有 item 之 Array。
		 * @param {Boolean}[no_add]
		 *            無此 item 時，是否不順便加入此 item。
		 * @returns 指定 item 之 relation 結構。
		 */
		function dependency_chain_get(item, no_add) {
			var relations = this.relations, relation;
			if (arguments.length === 0)
				// 未指定 item 時，回傳所有 items。
				return relations.keys();

			if (!(relation = relations.get(item)) && !no_add)
				// initialization. 為 item 所作的初始化工作。
				relations.set(item, relation = {
					previous : new Set,
					next : new Set,
					// fallback
					item : item
				});

			return relation;
		}

		/**
		 * 將 previous → next (independent → dependent) 之相依性添加進 dependency chain。
		 * 
		 * @param previous
		 *            previous(prior) item.
		 * @param next
		 *            next item.
		 * @returns {dependency_chain} dependency chain
		 */
		function dependency_chain_add(previous, next) {
			if (0 < arguments.length
			//
			&& (previous !== undefined || (previous = next) !== undefined))
				if (previous === next || next === undefined) {
					// initialization. 為 previous 所作的初始化工作。
					this.get(previous);

				} else {
					// 維護雙向指標。
					this.get(previous).next.add(next);
					this.get(next).previous.add(previous);
				}

			return this;
		}

		/**
		 * 自 dependency chain 中，刪除此 item。
		 * 
		 * @param item
		 *            指定欲刪除之 item。
		 * @returns {Boolean} item 是否存在，且成功刪除。
		 */
		function dependency_chain_delete(item) {
			var relation, relations;
			if (!(relation = (relations = this.relations).get(item)))
				// 注意：此處與 ECMAScript [[Delete]] (P) 之預設行為不同！
				return false;

			if (library_namespace.is_debug() && relation.previous.size > 0)
				library_namespace.warn('刪除一個還有 ' + relation.previous.size
						+ ' 個 previous 的元素。循環相依？');

			// 維護雙向指標。
			relation.previous.forEach(function(previous) {
				var next_of_previous = relations.get(previous).next;

				// 維持/傳遞相依關聯性。
				relation.next.forEach(function(next) {
					// 維護雙向指標。

					// assert: previous, next 存在 relations 中。
					// 因此採取下列方法取代 <code>this.add(previous, next);</code> 以加快速度。
					next_of_previous.add(next);
					relations.get(next).previous.add(previous);
				});

				// 一一去除 previous 的關聯性。
				next_of_previous['delete'](item);
			});

			// 一一去除 next 的關聯性。
			relation.next.forEach(function(next) {
				relations.get(next).previous['delete'](item);
			});

			// delete self.
			relations['delete'](item);

			return true;
		}

		/**
		 * 取得需求鏈中獨立之元素 (get the independent one)，<br />
		 * 或者起碼是循環相依(循環參照, circular dependencies)的一員。
		 * 
		 * @param [item]
		 *            指定取得此 item 之上游。
		 * 
		 * @returns 獨立之元素/節點，或者起碼是循環相依的一員。
		 * 
		 * @see <a href="http://en.wikipedia.org/wiki/Loop_dependence_analysis"
		 *      accessdate="2012/12/10 8:54">Loop dependence analysis</a>
		 */
		function dependency_chain_independent(item) {
			var relations = this.relations, no_independent;
			if (relations.size > 0)
				try {
					if (!arguments.length) {
						library_namespace.debug('自 ' + relations.size
								+ ' 個元素中，隨便取得一個沒 previous 的元素。', 5,
								'dependency_chain.independent');
						// 用 for .. of 會更好。
						relations.forEach(function(declaration, _item) {
							library_namespace.debug('item [' + _item + ']', 6,
									'dependency_chain.independent');
							item = _item;
							if (declaration.previous.size === 0)
								throw 1;
						});

						if (library_namespace.is_debug())
							library_namespace
									.warn('dependency_chain.independent: 沒有獨立之元素!');
						no_independent = true;
					}

					var
					// 已經處理過的 item Set。
					chain = new Set,
					// 當前要處理的 item Set。
					current,
					// 下一個要處理的 item Set。
					next = new Set;

					next.add(item);
					item = undefined;

					while ((current = next).size > 0) {
						next = new Set;
						// 針對 item 挑一個沒 previous 的元素。
						current.forEach(function(_item) {
							var declaration = relations.get(_item);
							if (declaration.previous.size === 0) {
								item = _item;
								throw 2;
							}

							if (!chain.has(_item))
								chain.add(_item);
							else {
								// 否則最起碼挑一個在 dependency chain 中的元素。
								item = _item;
								if (no_independent)
									throw 3;
							}

							// 把所有未處理過的 previous 排入 next 排程。
							// 遍歷 previous，找出獨立之元素。
							declaration.previous.forEach(function(previous) {
								// assert: previous !== _item
								if (!chain.has(previous))
									next.add(previous);
								else if (no_independent) {
									item = previous;
									throw 4;
								}
							});

						});
					}
				} catch (e) {
					if (isNaN(e)) {
						library_namespace.warn('dependency_chain.independent: '
								+ e.message);
						library_namespace.error(e);
					}
				}

			return item;
		}

		// public interface of dependency_chain.
		Object.assign(dependency_chain.prototype, {
			get : dependency_chain_get,
			add : dependency_chain_add,
			// quote 'delete' for "必須要有識別項" @ IE8.
			'delete' : dependency_chain_delete,
			independent : dependency_chain_independent
		});

		// export.
		library_namespace.dependency_chain = dependency_chain;

		// ---------------------------------------------------------------------//
		// <b>named source code declaration</b> / <b>module controller</b> 之處理。

		/**
		 * named source code declaration.<br />
		 * named_code = { id : source code declaration }.<br />
		 * assert: is_controller(named_code 之元素) === true.<br />
		 * 
		 * cache 已經 include 了哪些 resource/JavaScript 檔（存有其路徑）/class(函式)。<br />
		 * 預防重複載入。
		 * 
		 * note:<br />
		 * named source code/module 定義: 具 id （預設不會重覆載入）、行使特殊指定功能之 source。<br />
		 * module 特性: 可依名稱自動判別 URL。 預設會搭入 library name-space 中。
		 * 
		 * @inner
		 * @ignore
		 * @type {Object}
		 */
		var named_code = Object.create(null),
		// modules_loaded 獲得的是依相依性先後，不會有 require 的順序。
		modules_loaded = new Set;

		/**
		 * @example <code>

		// Get all modules loaded
		Object.values(CeL.get_named_code()).map(declaration => declaration.id);
		</code>
		 */
		function get_named_code(id) {
			if (!id) {
				// TODO: return a duplicate.
				return named_code;
			}
			return named_code[id];
		}

		// const modules_loaded = CeL.get_modules_loaded();
		function get_modules_loaded() {
			return Array.from(modules_loaded);
		}

		// export.
		library_namespace.get_named_code = get_named_code;
		library_namespace.get_modules_loaded = get_modules_loaded;

		/**
		 * 在 module 中稍後求值，僅對 function 有效。<br />
		 * TODO: use get method. TODO: replace 變數.
		 */
		function load_later() {
			var name = String(this);
			if (library_namespace.is_debug()) {
				library_namespace.debug('load_later: 演算 [' + name + ']。', 5,
						'load_later');
				if (name !== this)
					library_namespace.warn('變數名與 "this" 不同！');
			}
			var method;
			try {
				method = library_namespace.value_of(name);
				if (!method || (typeof method !== 'function' &&
				// JScript 中，有些函式可能為object。
				typeof method !== 'object'))
					// 非函式，為常量？
					return method;
				return method.apply(
				// 處理 bind。
				library_namespace.value_of(name.replace(/\.[^.]+$/, '')),
						arguments);
			} catch (e) {
				library_namespace.error(e);
			}
			if (!method) {
				library_namespace.warn('load_later: 無法演算 [' + name + ']！');
				return method;
			}

			if (library_namespace.is_debug())
				library_namespace
						.warn('load_later: 可能是特殊 object，因無法 bind 而出錯。嘗試跳過 bind。');
			var length = arguments.length;
			try {
				if (length > 0)
					return method.apply(null, arguments);
			} catch (e) {
				if (library_namespace.is_debug())
					library_namespace.error(e);
			}

			if (library_namespace.is_debug())
				library_namespace
						.warn('load_later: 可能是特殊 object，因無法 apply 而出錯。嘗試跳過 apply。');
			try {
				switch (length) {
				case 0:
					return method();
				case 1:
					return method(arguments[0]);
				case 2:
					return method(arguments[0], arguments[1]);
				case 3:
					return method(arguments[0], arguments[1], arguments[2]);
				case 4:
					return method(arguments[0], arguments[1], arguments[2],
							arguments[3]);
				default:
					if (length > 5)
						library_namespace.warn('load_later: 共指派了 ' + length
								+ ' 個 arguments，過長。將僅取前 5 個。');
					return method(arguments[0], arguments[1], arguments[2],
							arguments[3], arguments[4]);
				}
			} catch (e) {
				library_namespace.error(e);
			}

			library_namespace.warn('load_later: 無法執行 [' + name
					+ ']！跳過執行動作，直接回傳之。');
			return method;
		}

		/**
		 * Get named source code declaration.<br />
		 * 注意：亦包括 URL/path!!見 check_and_run_normalize()。<br />
		 * 對相同 id 會傳回相同之 declaration。<br />
		 * 
		 * @param {String}name
		 *            source code (module) name/id, URL/path, variable name.
		 * @param {Object}[setup_declaration]
		 *            source code 之設定選項。
		 * 
		 * @return {Object} named source code declaration.
		 */
		function get_named(name, setup_declaration) {
			if (typeof name !== 'string' || !name)
				return name;

			// module declaration/controller.
			var declaration, id,
			// 看看是否為 named source code。
			is_module = library_namespace.match_module_name_pattern(name);

			// TODO:
			// 就算輸入 module path 亦可自動判別出為 module，而非普通 resource。

			// 先嘗試是否為變數/數值名。
			id = library_namespace.value_of(name);
			if (id !== undefined
					// 若存在此值，且並未載入過（載入過的皆應該有資料），才判別為變數/數值名。
					&& (!(declaration = library_namespace.to_module_name(name)) || !(declaration in named_code))) {
				library_namespace.is_debug('treat [' + name
						+ '] as variable name.', 2, 'get_named');
				return id;
			}

			// 再看看是否為 named source code。
			if (is_module) {
				// 正規化 name。登記 full module name。e.g., 'CeL.data.code'.
				id = declaration || library_namespace.to_module_name(name);
			} else if (!/^(?:[a-z\-]+:[\/\\]{2}|(?:[.]{2}[\/\\])+)?(?:[^.]+(?:\.[^.]+)*[\/\\])*[^.]+(?:\.[^.]+)*$/i
			// 最後看是否為 resource。
			.test(id = library_namespace.simplify_path(name))
					&& library_namespace.is_debug())
				library_namespace.warn('get_named: 輸入可能有誤的 URL/path: [' + id
						+ ']');

			if (!(declaration = named_code[id])) {
				if (!is_module
						|| !(declaration = named_code[library_namespace
								.get_module_path(id)])) {
					/**
					 * initialization. 為 declaration 所作的初始化工作。<br />
					 * 因為 URL 可能也具有 named code 功能，因此一視同仁都設定 full function。
					 */
					declaration = named_code[id] = {
						id : id,
						callback : new Set,
						error_handler : new Set,
						load_later : load_later,
						base : library_namespace,
						r : function require_variable(variable_name) {
							// require variable without eval()
							if (variable_name in declaration.variable_hash) {
								variable_name = declaration.variable_hash[variable_name];
							} else {
								library_namespace
										.warn('require_variable: unregistered variable ['
												+ variable_name
												+ '] @ module [' + id + '].');
							}
							return library_namespace.value_of(variable_name);
						}
					};

					/**
					 * note:<br />
					 * "use" 是 JScript.NET 的保留字。或可考慮 "requires"。<br />
					 * use -> using because of 'use' is a keyword of JScript.
					 */
					// declaration.use = use_function;
					if (is_module)
						// 判別 URL 並預先登記。但先不處理。
						named_code[library_namespace.get_module_path(id)] = declaration;
				}

				if (is_module) {
					library_namespace.debug('treat resource [' + name
							+ '] as module.', 5, 'get_named');
					// declaration.module = id;
					declaration.module_name = name;
					// 若是先 call URL，再 call module，這時需要補充登記。
					if (!(id in named_code))
						named_code[id] = declaration;
				} else {
					library_namespace.debug('treat resource [' + name
							+ '] as URL/path. 登記 [' + id + ']', 5, 'get_named');
					declaration.URL = id;
				}
			}
			if (false && declaration.module_name
					&& declaration.module_name !== declaration.id) {
				id = declaration.id = declaration.module_name;
			}

			if (library_namespace.is_Object(setup_declaration) &&
			// 已載入過則 pass。
			(!declaration.included || declaration.force)) {
				library_namespace.debug(
						'included' in declaration ? 'named source code [' + id
								+ '] 已經載入過，卻仍然要求再度設定細項。' : '設定 [' + id
								+ '] 之 source code 等 options。', 2, 'get_named');

				var setup_callback = function(name) {
					var i = setup_declaration[name];
					// TODO: 這種判斷法不好。
					if (i) {
						if (typeof i === 'function'
								&& typeof i.forEach !== 'function')
							i = [ i ];
						try {
							if (i && typeof i.forEach === 'function') {
								// 初始設定函式本身定義的 callback 應該先執行。
								// i = new Set(i);
								i = Set_from_Array(i);
								if (i.size > 0) {
									library_namespace.debug('[' + id
											+ '] 初始設定函式本身定義了 ' + i.size + ' 個 '
											+ name + '。', 2, 'get_named');
									declaration[name]
											.forEach(function(callback) {
												i.add(callback);
											});
									declaration[name] = i;
								}
							}
						} catch (e) {
							// TODO: handle exception
						}
					}
				};
				// 需要特別做處理的設定。
				setup_callback('callback');
				setup_callback('error_handler');
				// .finish 會直接設定，不經特別處理！
				if (typeof setup_declaration.extend_to === 'object'
						|| typeof setup_declaration.extend_to === 'function')
					declaration.extend_to = setup_declaration.extend_to;

				// 將 setup_declaration 所有 key of named_code_declaration 之屬性 copy
				// / overwrite 到 declaration。
				library_namespace.set_method(declaration, setup_declaration,
						function(key) {
							return !(key in named_code_declaration);
						}, {
							configurable : true,
							writable : true
						});
			}

			return declaration;
		}

		// {String|Array}name
		function is_included_assertion(name, assertion) {
			if (assertion)
				throw typeof assertion === 'string' ? assertion : new Error(
						'Please include module [' + name + '] first!');
			return false;
		}
		/**
		 * 判斷 module 是否已經成功載入。<br />
		 * 
		 * TODO<br />
		 * 以及檢測是否破損。<br />
		 * prefix.
		 * 
		 * @param {String|Array}name
		 *            resource/module name || name list
		 * @param {Boolean|String}[assertion]
		 *            throw the assertion if NOT included.
		 * 
		 * @returns {Boolean} 所指定 module 是否已經全部成功載入。<br />
		 *          true: 已經成功載入。<br />
		 *          false: 載入失敗。
		 * @returns undefined 尚未載入。
		 */
		function is_included(name, assertion) {
			if (Array.isArray(name)) {
				var i = 0, l = name.length, yet_included = [];
				for (; i < l; i++)
					if (!is_included(name[i]))
						yet_included.push(name[i]);
				if (yet_included.length > 0)
					return is_included_assertion(yet_included, assertion);
				return true;
			}

			if (is_controller(name) || is_controller(name = get_named(name)))
				return name.included;

			return is_included_assertion(name, assertion);
		}
		// export.
		library_namespace.is_included = is_included;

		/**
		 * 解析 dependency list，以獲得所需之 URL/path/module/variable name。<br />
		 * 
		 * note: URL paths 請在 code 中載入。
		 * 
		 * @param {controller}declaration
		 * 
		 * @returns {Array|Object} dependency sequence
		 * @returns {controller}declaration
		 */
		function parse_require(declaration) {
			/** {Array|String}dependency list */
			var code_required = typeof declaration.require === 'function'
			// WARNING: {Function}declaration.require必須能獨立執行，不能有其他依賴。
			// 並且在單次執行中，重複call時必須回傳相同的結果。
			// 一般來說，應該是為了依照執行環境includes相同API之不同實作時使用。
			// e.g.,
			// .write_file()在不同platform有不同實作方法，但對caller應該只需要includes同一library。
			? declaration.require(library_namespace) : declaration.require;

			if (false) {
				// TODO: 自 declaration.code 擷取出 requires。
				var matched, pattern = /=\s*this\s*\.\s*r\s*\(\s*["']\s*([^()"']+)\s*["']\s*\)/g;
				while (matched = pattern.exec(declaration.code)) {
					code_required.push(matched[1]);
				}
			}

			if (code_required) {
				library_namespace.debug('解析 [' + declaration.id
				//
				+ '] 之 dependency list，以獲得所需之 URL/path/module/variable name: ['
						+ code_required + ']。', 5, 'parse_require');

				if (typeof code_required === 'string')
					code_required = code_required.split('|');

				if (Array.isArray(code_required)) {
					// 挑出所有需要的 resources，
					// 把需要的 variable 填入 variable_hash 中，
					// 並去除重複。
					var require_resources = Object.create(null),
					// required variables.
					// variable_hash = {
					// variable name : variable full name
					// }.
					variable_hash = declaration.variable_hash = Object
							.create(null);

					code_required.forEach(function(variable) {
						// [ variable full name, module name, variable name ]
						var matched = variable.match(/^(.+)\.([^.]*)$/);
						if (matched && library_namespace
						//
						.match_module_name_pattern(matched[1])) {
							// module/variable name?
							// 類似 'data.split_String_to_Object' 的形式，為 function。
							// 類似 'data.' 的形式，為 module。
							if (matched[2])
								variable_hash[matched[2]]
								//
								= library_namespace.to_module_name(
								//
								matched[1], '.') + '.' + matched[2];
							require_resources[matched[1]] = null;
						} else {
							// URL/path?
							require_resources[variable] = null;
						}
					});

					// cache. 作個紀錄。
					declaration.require_resources = code_required = [];
					for ( var i in require_resources)
						code_required.push(i);

					// 處理完把待處理清單消掉。
					delete declaration.require;

				} else {
					// TODO: 此處實尚未規範，應不可能執行到。
					library_namespace.warn('parse_require: 無法解析 ['
							+ declaration.id + '] 之 dependency：['
							+ declaration.require + ']！');
				}
			}

			if (code_required && code_required.length > 0) {
				var require_now = [];
				code_required.forEach(function(item) {
					var declaration = get_named(item);
					// 確定是否還沒載入，必須 load。還沒載入則放在 require_now 中。
					if (is_controller(declaration)
							&& !('included' in declaration))
						require_now.push(item);
				});

				if (Array.isArray(require_now) && require_now.length > 0) {
					library_namespace.debug('檢查並確認 required module/URL，尚須處理 '
							+ require_now.length + ' 項: ['
							+ require_now.join('<b style="color:#47e;">|</b>')
							+ ']。', 5, 'parse_require');
					// 臨時/後續/後來新增
					return [
							SEQUENTIAL,
							require_now.length === 1 ? require_now[0]
									: require_now, declaration ];
				}
			}

			return declaration;
		}

		// ---------------------------------------------------------------------//
		// file loading 之處理。

		// cache
		var document_head, tag_of_type = Object.create(null), URL_of_tag = Object
				.create(null), TO_FINISH = Object.create(null),
		// 需要修補 load events on linking elements?
		no_sheet_onload = library_namespace.is_WWW(true) && navigator.userAgent,
		// external resources tester.
		external_RegExp = library_namespace.env.module_name_separator,
		// Node.js 有比較特殊的 global scope 處理方法。
		is_nodejs = library_namespace.platform.nodejs,
		// tag_map[tag name]=[URL attribute name, type/extension list];
		tag_map = {
			script : [ 'src', 'js' ],
			link : [ 'href', 'css' ],
			img : [ 'src', 'png|jpg|gif' ]
		};
		external_RegExp = new RegExp('(?:^|\\' + external_RegExp + ')'
				+ library_namespace.env.resources_directory_name + '\\'
				+ external_RegExp + '|^(?:' + library_namespace.Class + '\\'
				+ external_RegExp + ')?'
				+ library_namespace.env.external_directory_name + '\\'
				+ external_RegExp);

		if (no_sheet_onload)
			(function() {
				// Safari css link.onload problem:
				// Gecko and WebKit don't support the onload
				// event on link nodes.
				// http://www.zachleat.com/web/load-css-dynamically/
				// http://www.phpied.com/when-is-a-stylesheet-really-loaded/
				// http://stackoverflow.com/questions/2635814/javascript-capturing-load-event-on-link
				no_sheet_onload = no_sheet_onload.toLowerCase();

				// move from 'interact.DOM'.
				var is_Safari = no_sheet_onload.indexOf('safari') !== NOT_FOUND
						&& no_sheet_onload.indexOf('chrome') === NOT_FOUND
						&& no_sheet_onload.indexOf('chromium') === NOT_FOUND,
				//
				is_old_Firefox = no_sheet_onload.match(/ Firefox\/(\d+)/i);
				if (is_old_Firefox)
					is_old_Firefox = (is_old_Firefox[1] | 0) < 9;

				no_sheet_onload = is_Safari || is_old_Firefox;
				library_namespace.debug(
						'看似需要修補 load events on linking elements.', 5);
			})();

		// TODO: watchdog for link.onload
		// function link_watchdog() {}

		function all_requires_loaded(declaration) {
			var require_resources = declaration.require_resources;
			return !Array.isArray(require_resources)
			//
			|| require_resources.every(function(module_name) {
				var item = get_named(module_name);
				return item && item.included;
			});
		}

		/**
		 * 載入 named source code（具名程式碼: module/URL）。<br />
		 * Include / requires specified module.<br />
		 * 
		 * <p>
		 * 會先嘗試使用 .get_file()，以 XMLHttpRequest
		 * 同時依序(synchronously,會掛住,直至收到回應才回傳)的方式依序取得、載入 module。<br />
		 * 
		 * 若因為瀏覽器安全策略(browser 安全性設定, e.g., same origin policy)等問題，無法以
		 * XMLHttpRequest 取得、循序載入時，則會以異序(asynchronously,不同時)的方式並行載入 module。<br />
		 * 因為 module 尚未載入，在此階段尚無法判別此 module 所需之 dependency list。
		 * </p>
		 * 
		 * TODO:<br />
		 * unload module.<br />
		 * test: 若兩函數同時 require 相同 path，可能造成其中一個通過，一個未載入?<br />
		 * for <a href="http://en.wikipedia.org/wiki/JSONP"
		 * accessdate="2012/9/14 23:50">JSONP</a>
		 * 
		 * @param {String|Object}item
		 *            source code (module/URL/path) name/id.
		 * @param {Object}[options]
		 *            load options.
		 * @param {Function}[caller]
		 *            當以異序(asynchronously,不同時)的方式並行載入 module 時，將排入此 caller
		 *            作為回調/回撥函式。
		 * 
		 * @returns {Number} status.<br />
		 *          PROCESSED: done.<br />
		 *          INCLUDE_FAILED: error occurred. fault.<br />
		 *          INCLUDING: loading asynchronously,
		 *          以異序(asynchronously,不同時)的方式並行載入(in parallel with)。<br />
		 */
		function load_named(item, options, caller) {
			var id = typeof item === 'string' ? item : is_controller(item)
					&& item.id,
			//
			force = is_controller(item) && item.force,
			//
			declaration = id && named_code[id];
			if (!id || !is_controller(declaration)) {
				// 內部 bug？
				library_namespace.error('load_named: 沒有 [' + id + '] 的資料！');
				return PROCESSED;
			}

			// id 正規化(normalization)處理。
			id = declaration.id;
			// 預先定義/正規化，避免麻煩。
			if (!library_namespace.is_Object(options))
				options = Object.create(null);

			/**
			 * need waiting callback / handler: .finish() 回傳此值會使其中的 .run() 執行到了
			 * waiting 之後才繼續載入其他組件。
			 */
			function waiting() {
				return load_named(item, {
					finish_only : TO_FINISH
				}, caller);
			}

			function run_callback(name) {
				var callback = declaration[name], args, need_waiting = [];
				if (callback) {
					// 因為不能保證 callback 之型態，可能在 module 中被竄改過，
					// 因此需要預先處理。
					if (typeof callback === 'function'
							&& typeof callback.forEach !== 'function')
						callback = [ callback ];
					if (Array.isArray(callback)) {
						// callback = new Set(callback);
						callback = Set_from_Array(callback);
						declaration[name] = new Set;
					}

					// TODO: assert: callback 為 Set。
					if (callback.size > 0
					// && typeof callback.forEach === 'function'
					) {
						// 獲利了結，出清。
						library_namespace.debug('繼續完成 ' + callback.size
								+ ' 個所有原先 ' + name
								+ ' queue 中之執行緒，或是 named source code 所添加之函數。',
								5, 'load_named.run_callback');

						// 作 cache。
						// 需預防 arguments 可被更改的情況！
						args = Array.prototype.slice.call(arguments, 1);

						callback.forEach(library_namespace.env.no_catch
						//
						? function(callback) {
							if (typeof callback === 'function'
									&& callback.apply(declaration, args)
									//
									=== waiting)
								// callback 需要 waiting。
								need_waiting.push(callback);
						} : function(callback) {
							try {
								// 已經過鑑別。這邊的除了 named source code
								// 所添加之函數外，
								// 應該都是 {Function}
								// check_and_run.run。
								// TODO: using setTimeout?
								library_namespace.debug('run ' + name + ' of ['
										+ id + ']: [' + callback + ']', 5,
										'load_named.run_callback');
								if (typeof callback === 'function'
										&& callback.apply(declaration, args)
										//
										=== waiting)
									// callback 需要 waiting。
									need_waiting.push(callback);
							} catch (e) {
								library_namespace.error('執行 [' + id + '] 之 '
										+ name + ' 時發生錯誤！ ' + e.message);
								library_namespace.debug('<code>'
										+ ('' + callback).replace(/</g, '&lt;')
												.replace(/\n/g, '<br />')
										+ '</code>', 1,
										'load_named.run_callback');
							}
						});

						callback.clear();
					}
				}

				// Release memory. 釋放被占用的記憶體. 早點 delete 以釋放記憶體空間/資源。
				// assert: declaration.error_handler 為 Set。
				if (declaration.error_handler) {
					// @ work.hta
					// 有可能已經載入，因此 `delete declaration.error_handler;` 了。
					declaration.error_handler.clear();
				}

				if (need_waiting.length > 0) {
					need_waiting.forEach(function(cb) {
						callback.add(cb);
					});
					return true;
				}
			}

			if ('finish_only' in options)
				options.finish_only = options.finish_only === TO_FINISH;

			// 存在 .included 表示已經處理過（無論成功失敗）。
			// URL 已嵌入/含入/掛上/module registered/函數已執行。
			if (force || !('included' in declaration)) {
				if (!options.finish_only && declaration.is_waiting_now
				// 在網頁環境插入 <script> 時，可能因相依的模組尚未載入，先行跳出，但此時已具有
				// declaration.code。在所依賴的模組載入前，若另一個線程載入本模組，因為已有
				// declaration.code，若不檢查則可能直接就開始執行，造成依賴的函式不存在。
				//
				// e.g., CeL.application.net.wiki.namespace 需要
				// CeL.application.net，會先載入 CeL.application.net，並等待
				// CeL.application.net 依賴的模組載入。
				// 但 CeL.application.net.wiki 以 .finish + CeL.run() 載入
				// CeL.application.net.wiki.namespace ，此 CeL.run() 線程中
				// CeL.application.net.wiki.namespace 獨立，且已有
				// declaration.code，但實際上 CeL.application.net 尚未載入。
				&& !all_requires_loaded(declaration)) {
					if (caller)
						declaration.callback.add(caller);

					// 因無法即時載入，先行退出。
					return INCLUDING;

				} else if (declaration.code) {
					// ---------------------------------------
					// including code.
					// TODO: 拆開。

					library_namespace.debug(
							'準備嵌入 (include) [<b style="color:#F2a;background-color:#EF0;">'
									+ id + '</b>]。執行 module 初始設定函式。', 2,
							'load_named');
					modules_loaded.add(id);

					var initializer, error_Object;
					if (library_namespace.env.no_catch) {
						// {Function}declaration.code:
						// function module_code(library_namespace) {}
						initializer = declaration.code(library_namespace);
					} else {
						try {
							// 真正執行 module 初始設定函式 / class template。
							// 因為 module 常會用到 library，因此將之當作 argument。
							initializer = declaration.code(library_namespace);
						} catch (e) {
							error_Object = e;
							library_namespace.error('load_named: [' + id
									+ '] 之初始設定函式執行失敗！');
							library_namespace.error(e);
						}
					}

					if (Array.isArray(initializer)) {
						library_namespace.debug('初始設定函式回傳 Array，先轉成 Object。',
								1, 'load_named');
						var list = initializer;
						initializer = Object.create(null);
						list.forEach(function(method) {
							var name = typeof method === 'function'
									&& library_namespace
											.get_function_name(method);
							if (name) {
								library_namespace.debug('設定 method：[' + name
										+ ']。', 2, 'load_named');
								initializer[name] = method;
							} else {
								library_namespace
										.warn('load_named: 非函式之初始設定值：['
												+ method + ']！');
							}
						});
					}

					if (typeof initializer === 'function'
							|| library_namespace.is_Object(initializer)) {

						library_namespace.debug('預先一層一層定義、準備好 [' + id
								+ '] 之上層 name-space。', 2, 'load_named');
						var module_name_list = library_namespace
								.split_module_name(id),
						//
						i = 0, l = module_name_list.length - 1, name_space = library_namespace, name, sub_name_space;
						for (; i < l; i++) {
							sub_name_space = name_space[name = module_name_list[i]];
							if (!sub_name_space) {
								sub_name_space = name_space[name] = {
									null_constructor_name : library_namespace
											.to_module_name(module_name_list
													.slice(0, i + 1))
								};
								library_namespace.debug('創建 name-space ['
										+ sub_name_space.null_constructor_name
										+ ']', 2, 'load_named');
							}
							name_space = sub_name_space;
						}
						// assert: name_space 這時是 module 的 parent module。
						name = module_name_list[l];
						if (name_space[name]) {
							if (name_space[name].null_constructor_name) {
								library_namespace.debug(
										'可能因下層 module 先被載入，已預先定義過 [' + id
												+ ']。將把原先的 member 搬過來。', 2,
										'load_named');

								delete name_space[name].null_constructor_name;
								// ** WARNING:
								// 這邊可能出現覆寫基底 method 之情形！
								// e.g., application.debug.log @
								// application.debug

								// ** WARNING:
								// 須注意是否因 name_space 為 function，預設會當作 function
								// 處理，而出問題！
								Object.assign(initializer, name_space[name]);
							} else {
								library_namespace.warn(
								//
								'load_named: 已存在 name-space [' + id + ']！');
							}
						} else {
							// 尚未被定義或宣告過。
						}

						// TODO: alias

						library_namespace.debug('[' + id
								+ '] 順利執行到最後，準備作 hook 設定。', 3, 'load_named');
						name_space[name] = initializer;

						// 載入 module 時執行 extend 工作。
						var no_extend,
						/**
						 * 擴充標的基底。extend to what name-space。<br />
						 * Extend to specified name-space that you can use
						 * [name_space]._func_ to run it.
						 */
						extend_to = 'extend_to' in declaration
						//
						? declaration.extend_to
						/**
						 * 預設會 extend 到 library 本身之下。<br />
						 * extend to root of this library.<br />
						 * 
						 * e.g., call CeL._function_name_ and we can get the
						 * specified function.
						 */
						: library_namespace;

						if (extend_to) {
							library_namespace.debug(
							//
							'設定完 name space。執行擴充 member 的工作。'
							//
							+ (extend_to === library_namespace
							//
							? '將 extend 到 library 本身之下。' : ''),
							//
							2, 'load_named');

							// 可以 no_extend 設定不匯出的子函式。
							// 所有無特殊名稱的 sub-module 皆應設定 `no_extend : 'this,*'`，
							// 避免本身被 extend 到 library namespace 下，汙染如 CeL.data。
							// e.g., application.net.wiki.* ,
							// application.net.work_crawler.*
							if (no_extend = declaration[library_namespace.env.not_to_extend_keyword]) {
								if (typeof no_extend === 'string')
									no_extend = no_extend.split(',');
								if (Array.isArray(no_extend)) {
									l = Object.create(null);
									no_extend.forEach(function(i) {
										l[i] = 1;
									});
									no_extend = l;
								}
							}

							if (!library_namespace.is_Object(no_extend))
								no_extend = Object.create(null);

							// 去掉 function 預設可列舉的成員。
							// Firefox/3.0.19 中，.prototype 亦可列舉。
							// TODO: how to cache.
							(l = function() {
							}).prototype = Object.create(null);
							for (i in l)
								no_extend[i] = 1;

							if (!('this' in no_extend)) {
								library_namespace.debug('擴充 module 本身到標的基底下。',
										2, 'load_named');
								l = extend_to[name];
								// 只處理雙方皆為 Object 的情況。
								if (typeof l === 'object'
										&& typeof initializer === 'object') {
									library_namespace.debug('標的基底 [' + l.Class
											+ '] 已有 [' + name + ']，將合併/搬移成員。',
											1, 'load_named');
									// 若沒有重新架構，之後的搬移動作可能汙染原先之 name-space!
									if (!('reconstructed' in l))
										extend_to[name] = l = Object.assign({
											reconstructed : true
										}, l);
									for (i in initializer) {
										if (i in l)
											library_namespace.debug(
											//
											'標的基底 [' + name + '] 已有 [' + i
													+ ']，將取代之。', 1,
													'load_named');
										l[i] = initializer[i];
									}

								} else {
									if (l && l.Class
											&& library_namespace.is_debug())
										library_namespace.warn(
										// 標的基底已有 (l)，將直接以新的 module (id) 取代之。
										'load_named: 將以 ('
										// 未來 extend_to[name] 將代表 (id).
										+ (typeof initializer) + ') [' + id
												+ '] 取代擴充標的基底之同名 module ('
												+ (typeof l) + ') ['
												+ (l.Class || name) + ']。');
									extend_to[name] = initializer;
								}
							}

							if (!('*' in no_extend))
								for (i in initializer) {
									if ((i in no_extend)
											|| extend_to[i] === initializer[i])
										continue;

									if ((i in extend_to)
											&& library_namespace.is_debug())
										library_namespace.warn(
										//
										'load_named: 將以 [' + id + '.' + i
										//
										+ '] 取代擴充標的基底之同名 property'
										//
										+ (library_namespace.is_debug(2) ? ' ['
										//
										+ extend_to[i] + ']' : '') + '。');

									extend_to[i] = initializer[i];
								}
						} else
							library_namespace.debug('跳過擴充 member 之工作。', 5,
									'load_named');

						// 對 name-space 做有必要的操作。
						/**
						 * @see <a
						 *      href="http://developer.51cto.com/art/200907/134913.htm"
						 *      accessdate="2012/12/11 20:51"
						 *      title="JavaScript类和继承：constructor属性 -
						 *      51CTO.COM">JavaScript类和继承：constructor属性</a>
						 */
						if (typeof initializer === 'function') {
							if (!initializer.prototype.constructor)
								initializer.prototype.constructor = initializer;
						}
						if (!initializer.Class)
							initializer.Class = id;

						if (false)
							initializer.toString = function() {
								return '[class ' + name + ']';
							};

						// 設定登記 module 已載入。
						// TODO:
						// 若某 module 很快就 loaded，則剩下的應當亦可很快 loaded。
						// 除非是其他 domain 的。
						declaration.included = true;

					} else if (initializer === library_namespace.env.not_to_extend_keyword) {
						// assert: module 本身已經做好相關設定。目的僅在執行 module_code。
						// e.g., CeL.application.net.wiki.admin
						library_namespace
								.debug(
										{
											T : [
													'不設定(hook) module [%1] 之 namespace，僅執行 module code。',
													id ]
										}, 1, 'load_named');
						// 設定登記 module 已載入。
						declaration.included = true;

					} else {
						if (!error_Object)
							library_namespace.error(error_Object = new Error(
									'load_named: [' + id
											+ '] 之初始設定函式執行成功，但回傳無法處理之值：['
											+ initializer + ']！'));
						declaration.included = false;
						// error callback 僅在每次真正嘗試過後才執行。
						run_callback('error_handler', error_Object);
						if (!item.skip_error)
							return INCLUDE_FAILED;
					}

				} else {

					var file_contents,
					// URL is `skip_loading_modules` here.
					// 只是為了省下一個變數而重複利用。
					URL = library_namespace.get_old_namespace();
					URL = URL && URL.skip_loading_modules;
					if (Array.isArray(URL) && (URL.includes(id)
					// id 為相對路徑。
					|| id.slice(0, library_base_path.length)
					//
					=== library_base_path
					//
					&& URL.includes(id.slice(library_base_path.length)))) {
						library_namespace.debug('Skip loading module/path: '
								+ id);
						return PROCESSED;
					}

					// ---------------------------------------
					// loading code.
					// TODO: 拆開。

					URL = declaration.URL
							|| library_namespace.get_module_path(id);
					// external_directory_name 下可以放置外部 library/resource files.
					var is_external = function(failed) {
						var external = external_RegExp.test(id);
						if (external) {
							declaration.included = !failed;
							library_namespace.debug(
							//
							'由於引用的是 library 外部檔案，自動將之設定為 included '
									+ (declaration.included ? '成功' : '失敗')
									+ '。', 5, 'load_named.is_external');
						}
						return external;
					};

					library_namespace.debug(
					//
					'準備載入 (load) [<a style="color:#ef0;background-color:#018;" href="'
							+ encodeURI(URL) + '">' + id + '</a>]。', 5,
							'load_named');

					// ---------------------------------------
					// loading code: 採用循序/依序執行的方法。

					if (!library_namespace.env.same_origin_policy
							&& !library_namespace.env.no_eval
							&& /\.js$/i.test(URL))
						try {
							// 對 .js 先試試 .get_file()。
							file_contents = library_namespace.get_file(URL);
							if (library_namespace.is_debug(2)
									&& library_namespace.is_WWW())
								if (typeof file_contents === 'string')
									library_namespace.debug('取得檔案內容: ('
									//
									+ file_contents.length + ' bytes) ['
									//
									+ file_contents.slice(0, 200)
									//
									.replace(/ /g, '&nbsp;')
									//
									.replace(/\n/g, '<br />') + ']'
									//
									+ (file_contents.length > 200 ? '...'
									//
									: ''), 5, 'load_named');
							if (file_contents) {
								// 對 cscript/wscript，若 /^var variable =
								// /.test(file_contents)，會造成 global 無法設定此
								// variable。
								if (library_namespace.script_host
										//
										&& typeof library_namespace.pre_parse_local_code === 'function')
									file_contents = library_namespace
											.pre_parse_local_code(
													file_contents, URL, id);

								if (is_nodejs) {
									if (typeof require === 'function') {
										// console.trace(URL);
										declaration.result = require(
										// Using require() in node.js
										library_namespace.platform.Windows
												&& /^\/[a-z]:\//i.test(URL)
										// @see CeL..get_file() @ module.js
										? URL.slice(1) : URL);
									} else {
										// Node.js 有比較特殊的 global scope 處理方法。
										eval(file_contents);
									}
								} else {
									// eval @ global. 這邊可能會出現 security 問題。
									// TODO: do not use eval. 以其他方法取代 eval 的使用。
									library_namespace.eval_code(file_contents);
								}
								// Release memory. 釋放被占用的記憶體.
								file_contents = !!file_contents;
								if (!declaration.module_name)
									declaration.included = true;

							} else {
								declaration.included = false;
								library_namespace.warn('Get no result from ['
										+ id + ']! Some error occurred?');
							}

							// 以 .get_file() 成功依序載入結束。
							// console.trace(URL);
							declaration.URL = URL;

							if (!('included' in declaration) && !is_external())
								library_namespace.warn(
								//
								'load_named: 雖已處理完 [<a href="'
								//
								+ encodeURI(URL) + '">' + id + '</a>] ，'
								//
								+ '但程式碼並未使用所規範的方法來載入，導致 included flag 未被設定！');

							if (declaration.included) {
								library_namespace.debug(
								//
								'已 include [<a href="' + encodeURI(URL) + '">'
										+ id + '</a>]。', 5, 'load_named');
								return PROCESSED;
							}

							// Date.now();
							declaration.last_call = new Date();

							// error callback 僅在每次真正嘗試過後才執行。
							run_callback('error_handler');
							if (!item.skip_error)
								return INCLUDE_FAILED;

						} catch (e) {

							// 若為 local，可能是因為瀏覽器安全策略被擋掉了。
							if (!library_namespace.is_local()
									|| library_namespace.is_debug(2)) {
								// http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html
								// http://reference.sitepoint.com/javascript/DOMException
								if (library_namespace
										.is_type(e, 'DOMException')
										&& e.code === 1012) {
									library_namespace.error(
									//
									'load_named:\n' + e.message + '\n'
									//
									+ URL + '\n\n程式可能呼叫了一個'
									//
									+ (library_namespace.is_local()
									//
									? '不存在的，\n或是繞經上層目錄' : 'cross domain')
									//
									+ '的檔案？\n\n請嘗試使用相對路徑，\n或 call .run()。');
								} else if (
								// 系統找不到指定的資源/存取被拒。
								library_namespace.is_type(e, 'Error')
										&& (e.number & 0xFFFF) === 5
										|| library_namespace.is_type(e,
												'XPCWrappedNative_NoHelper')
										&& ('' + e.message)
												.indexOf('NS_ERROR_FILE_NOT_FOUND') !== NOT_FOUND) {
									if (library_namespace.is_debug())
										library_namespace.error(
										//
										'load_named: 檔案可能不存在或存取被拒？\n['
										//
										+ URL + ']' + (
										//
										library_namespace.get_error_message
										//
										? ('<br />' + library_namespace
										//
										.get_error_message(e))
										//
										: '\n' + e.message));
								} else if (library_namespace.is_debug())
									library_namespace.error(
									//
									'load_named: Cannot load [<a href="'
									//
									+ encodeURI(URL) + '">' + id + '</a>]!' + (
									//
									library_namespace.get_error_message
									//
									? ('<br />' +
									//
									library_namespace.get_error_message(e)
									//
									+ '<br />') : '\n[' + (e.constructor)
									//
									+ '] '
									//
									+ (e.number ? (e.number & 0xFFFF) : e.code)
									//
									+ ': ' + e.message + '\n')
									// 對於encode之類問題，reload不能解決。
									+ (e.type === 'encode'
									//
									? '往後將改採用插入 HTML tag 的替代方式載入。'
									//
									: '抱歉！在載入其他網頁時發生錯誤，有些功能可能失常。\n'
									//
									+ '重新讀取(reload)，或是過段時間再嘗試或許可以解決問題。'));
							}

							// 不能直接用
							// .get_file()，得採用異序(asynchronously,不同時)的方式並行載入。
							library_namespace.debug('Cannot load [' + id
							//
							+ ']! 以 .get_file() 依序載入的方法失敗：' + e.message
									+ (id === URL ? '' : ' (' + URL + ')'), 2,
									'load_named');
							if (is_nodejs
									&& (e instanceof SyntaxError || library_namespace
											.is_debug())) {
								console.error(e);
							}

							// 除非為 eval 錯誤，否則不設定 .included。
							if (!library_namespace.env.same_origin_policy) {
								// 執行 code 時出問題。
								declaration.included = false;
								// error callback 僅在每次真正嘗試過後才執行。
								run_callback('error_handler', e);
								if (!item.skip_error)
									return INCLUDE_FAILED;
							}
						}

					// ---------------------------------------
					// loading code:
					// 循序/依序執行的方法失敗，採用異序(asynchronously,不同時)的方式並行載入。

					// 若之前已嘗試取得過 code，則即使失敗也不再使用異序(asynchronously,不同時)的方式並行載入。
					if (!file_contents)
						if (library_namespace.is_WWW()) {
							// 動態載入 / Dynamic Loading / Including other
							// JavaScript/CSS
							// files asynchronously.
							// TODO: http://headjs.com/#theory
							// http://code.google.com/apis/ajax/documentation/#Dynamic
							// http://en.wikipedia.org/wiki/Futures_and_promises

							var type = declaration.type, use_write = item.use_write, node, timeout_id = 'L',
							//
							clean = function(failed) {
								if (timeout_id !== 'L')
									clearTimeout(timeout_id);
								timeout_id = 0;
								onload = null;

								if (type === 'js')
									// callback 完自動移除 .js。
									// 隨即移除會無效。
									// 移除 .css 會失效。
									setTimeout(function() {
										document_head.removeChild(node);
										node = null;
									}, 0);

								if (node) {
									try {
										delete node.onload;
									} catch (e) {
										// error on IE5–9: Error: "Object
										// doesn't support this action".
										node.onload = null;
									}
									try {
										delete node.onreadystatechange;
									} catch (e) {
										// error on IE5–9: Error: "Object
										// doesn't support this action".
										node.onreadystatechange = null;
									}
								}

								// 有可能本次載入失敗，但之前已成功過；
								// 這情況下不設定 declaration.included。
								if (!declaration.included) {
									if (!declaration.module_name) {
										// 為 URL/path，只要載入就算成功。
										declaration.included = !failed;
									} else if (!is_external(failed)) {
										if (failed) {
											// 載入卻沒設定 included，算失敗。
											declaration.included = false;
										} else if (!declaration.variable_hash) {
											library_namespace.warn(
											//
											'load_named: [<a href="'
											//
											+ encodeURI(URL) + '">' + id
											//
											+ '</a>] 的程式碼似乎並未使用所規範的方法來載入？');
											// IE 8 中，當測試不存在的檔案時，
											// 會藉 .readyState ===
											// 'complete'，執行到這邊。
											// 因此除了藉由載入時間，無法分辨檔案到底存不存在。
											declaration.included = UNKNOWN;
										} else {
											declaration.is_waiting_now = true;
											if (library_namespace.is_debug(2)) {
												library_namespace
														.warn('load_named: 未能直接載入 (load) ['
																+ id
																+ ']！可能因為 code 還有其他未能掌控，且尚未載入的相依性。');
											}
										}
									}

									if (('included' in declaration)
											&& !declaration.included) {
										// error callback 僅在每次真正嘗試過後才執行。
										// 預防還有沒處理的 error callback。
										run_callback('error_handler');
									}
								}

								if ((declaration.included || item.skip_error)
								// 若無 callback 就少耗點資源，別再 call load_named() 了。
								&& declaration.callback
										&& declaration.callback.size > 0)
									// module 若設定了 included 時，
									// 回調/回撥函式應該由 named source code 本身收拾。
									// 這邊不做處理。
									//
									// 這邊呼叫 load_named() 主要是為了利用 load_named()
									// 最後收尾程序的部分。
									load_named(item, options, caller);
							},
							//
							onload = function(e) {
								var r;
								// navigator.platform === 'PLAYSTATION 3' 時僅用
								// 'complete'? from requireJS
								if (timeout_id
										&& (!(r =
										// 'readyState' in this ?
										// this.readyState : e.type !== 'load'
										this.readyState) || r === 'loaded' || r === 'complete'))
									clean();
							};

							try {
								if (type) {
									if (typeof type === 'string')
										type = type.toLocaleLowerCase();
								} else if (type = URL.match(/[^.\\\/]+$/))
									type = type[0].toLocaleLowerCase();

								if (!(node = tag_of_type[type])) {
									library_namespace.warn('無法判別 [' + id
											+ '] 之類型!');
									throw 1;
								}

								if (use_write || type !== 'js'
										&& type !== 'css')
									throw 0;

								// HTML5: document.head ===
								// document.getElementsByTagName('head')[0]
								if (document_head === undefined) {
									if (!(document_head = document.head
											|| document
													.getElementsByTagName('head')[0]))
										(document.body.parentNode || document.body)
												.appendChild(document_head = document
														.createElement('head'));
									if (!document_head)
										document_head = null;
								}
								if (!document_head) {
									library_namespace
											.warn('無法判別 tag &gt;head>!');
									throw 2;
								}

								// TODO: use document.createElementNS()
								// TODO:某些舊版 Firefox 使用 createElement('script')
								// 不被接受，因此可能需要用寫的。
								node = document.createElement(node);
								node.width = node.height = 0;

								// http://www.developer.nokia.com/Community/Wiki/JavaScript_Performance_Best_Practices
								// ** onload 在 local 好像無效?
								// TODO:
								// http://www.xdarui.com/articles/66.shtml
								// 使用 attachEvent 註冊事件，然後用
								// detachEvent。在ie6上就算把onreadystatechange重置為null了，但只是把引用給斷開了，而回調還存在內存之中，只是無法訪問了而已，有可能造成內存的溢出。
								node.onload = node.onreadystatechange = onload;

								switch (type) {
								case 'js':
									node.type = 'text/javascript';
									/**
									 * TODO:<br />
									 * see jquery-1.4a2.js: globalEval<br />
									 * if (is_code) s.text = path;<br />
									 * 
									 * http://www.lampblog.net/2010/12/html5%E4%B8%ADscript%E7%9A%84async%E5%B1%9E%E6%80%A7%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BDjs/<br />
									 * 如果 async 屬性為
									 * true，則腳本會相對於文檔的其餘部分異步執行，這樣腳本會可以在頁面繼續解析的過程中來執行。<br />
									 * 如果 async 屬性為 false，而 defer 屬性為
									 * true，則腳本會在頁面完成解析時得到執行。<br />
									 * 如果 async 和 defer 屬性均為
									 * false，那麼腳本會立即執行，頁面會在腳本執行完畢繼續解析。<br />
									 * 
									 * http://www.cnblogs.com/darrel/archive/2011/08/02/2124783.html<br />
									 * 當script的 async 屬性被置為 true
									 * 時，腳本的執行序為異步的。即不按照掛載到 Dom 的序順執行 ，相反如果是
									 * false 則按掛載的順序執行。<br />
									 */
									node.async = true;
									// node.setAttribute('src', URL);
									node.src = URL;
									// timeout for giving up.
									if (options.timeout > 0)
										timeout_id = setTimeout(function() {
											// 失敗！
											if (!options.skip_error
													|| library_namespace
															.is_debug())
												library_namespace.warn([
												//
												'load_named: ', {
													// gettext_config:{"id":"load-failed"}
													T : 'Load failed'
												}, ' (', {
													T : 'timeout'
												}, ' ' + options.timeout
												//
												+ ' ms): [' + id + ']' ]);
											clean(true);
										}, options.timeout);
									break;

								case 'css':
									node.type = 'text/css';
									// .css 移除會失效。
									// CSS 不設定 timeout。
									// node.media = 'all',//'print'
									node.rel = 'stylesheet';
									// https://developer.mozilla.org/en-US/docs/HTML/Element/link#Stylesheet_load_events
									node.onerror = onload;
									node.href = URL;
									break;

								default:
								}

								library_namespace.debug('插入 .' + type + ' ['
										+ URL + ']', 2, 'load_named');

								// 在 IE 10 中，當 .appendChild() 時，
								// 會先中斷，執行所插入 node 的內容。
								// 因此必須確保在 .appendChild() 前，便已設定好 callback！
								if (caller)
									declaration.callback.add(caller);

								/**
								 * from jquery-1.4a2.js:<br />
								 * Use insertBefore instead of appendChild to
								 * circumvent an IE6 bug when using globalEval
								 * and a base node is found.<br />
								 * This arises when a base node is used (#2709).<br />
								 * 
								 * 不過這會有問題: 後加的 CSS file 優先權會比較高。因此，可以的話還是用
								 * appendChild。
								 * 
								 * @see http://github.com/jquery/jquery/commit/d44c5025c42645a6e2b6e664b689669c3752b236<br />
								 */
								if (false)
									document_head.insertBefore(node,
											document_head.firstChild);
								if (false)
									document_head.parentNode.insertBefore(node,
											document_head);
								document_head.appendChild(node);

								// TODO: This is a ugly hack/workaround.
								if (no_sheet_onload && type === 'css') {
									var test_img = document
											.createElement('img');
									test_img.onerror = function() {
										onload && onload.call(this);
										test_img = null;
									};
									test_img.src = URL;
								}

								declaration.last_call = new Date();

								library_namespace.debug('[' + declaration.id
										+ ']: need asynchronous. 登記完後直接休眠。', 5,
										'load_named');

								// 因無法即時載入，先行退出。
								return INCLUDING;

							} catch (e) {
								if (typeof e !== 'number') {
									declaration.callback['delete'](caller);
									library_namespace.error(e);
								}
								use_write = true;
							}

							if (use_write
							// && TODO: 正在 load 頁面
							) {
								if (library_namespace.is_debug(2)
										&& library_namespace.is_WWW())
									library_namespace
											.debug('直接寫入，Writing code for ['
													+ URL + '].');

								if (!library_namespace.onload_queue)
									library_namespace.onload_queue = [];
								var onload = library_namespace.onload_queue.length, encode_URL = encodeURI(URL);
								// TODO: Not Yet Tested! test callback..
								library_namespace.onload_queue[onload] = function() {
									clean();
								};
								onload = ' onload="' + library_namespace.Class
										+ '.onload_queue[' + onload + ']()"';

								// TODO: 若在 window.onload 之後使用 document.write()
								// 會清空頁面!
								document.write(type === 'js'
								//
								? '<script type="text/javascript" src="'
										+ encode_URL
										// language="JScript"
										+ '"' + onload + '><\/script>'
										: type === 'css' ?
										// TODO: security concern: 對
										// path 作 filter。
										'<link type="text/css" rel="stylesheet" href="'

										+ encode_URL + '"' + onload
												+ '><\/link>'
										//
										: '<img src="' + encode_URL + '" />');
							}

						} else if (library_namespace.is_debug(2)) {
							library_namespace.warn(
							// 誤在非 HTML 環境執行，卻要求 HTML 環境下的 resource？
							'load_named: No method availed!'
									+ ' 沒有可以載入 resource 的方法！');
						}

					if (!declaration.included
					// 在 web 環境才警告 web 資源檔載入問題。
					// 此時 type 尚未設定。
					&& (library_namespace.is_WWW() || !/\.css/i.test(id)))
						library_namespace.warn(
						//
						'load_named: 載入 [' + id + '] 失敗！');
				}

				// force 僅使用一次。
				// delete item.force;

			} else {
				library_namespace.debug('之前已處理過 [' + id + '] 之載入程序：'
						+ (declaration.included ? '成功' : '無法') + '載入。', 5,
						'load_named');
			}

			// ---------------------------------------
			// 最後收尾程序。
			if (declaration.included || item.skip_error
			//
			|| options.finish_only) {

				if (options.finish_only) {
					if (library_namespace.is_debug(2)
							&& library_namespace.is_WWW())
						library_namespace.debug('[' + id
								+ '].finish() 已執行完畢。執行回調/回撥函式…', 5,
								'load_named');
				} else {
					// TODO: 將 callback 納入 dependency chain。
					if (library_namespace.is_debug(2)
							&& library_namespace.is_WWW())
						library_namespace.debug('[' + id + '] 已'
								+ (declaration.included ? '成功' : '')
								+ '載入完畢。執行回調/回撥函式…', 5, 'load_named');

					// force 僅使用一次。
					// if (is_controller(item) && item.force) delete item.force;

					// 初始設定函式本身定義的 callback，.finish() 應該先執行。
					if (run_callback('finish',
					// 傳入 module name space。
					library_namespace.value_of(id), waiting,
					//
					function sub_modules_to_full_module_path(sub_modules) {
						if (Array.isArray(sub_modules)) {
							return sub_modules
									.map(sub_modules_to_full_module_path);
						}
						// library_namespace.get_module_path(...)
						return id + library_namespace.env.module_name_separator
								+ sub_modules;
					})) {
						if (library_namespace.is_debug(2)
								&& library_namespace.is_WWW()) {
							library_namespace.debug('[' + id
									+ '].finish() 需要 waiting。等待其執行完畢…', 5,
									'load_named');
						}
						// 因無法即時載入，先行退出。
						return INCLUDING;
					}
				}

				run_callback('callback',
				// 傳入 id。
				id);

				if (library_namespace.is_debug(2) && library_namespace.is_WWW())
					library_namespace.debug('[' + id
							+ '] 之善後/收尾工作函式已執行完畢，清除 cache/stack…', 5,
							'load_named');
				// Release memory. 釋放被占用的記憶體. delete cache, 早點 delete
				// 以釋放記憶體空間/資源。
				// 預防出現問題，如 memory leak 等。
				delete declaration.code;
				delete declaration.finish;
				delete declaration.last_call;
				delete declaration.require_resources;
				delete declaration.variable_hash;
				delete declaration.callback;
				delete declaration.error_handler;
				delete declaration.is_waiting_now;
				// delete declaration.use;

				// TODO: destroy item。

				// declaration.status = PROCESSED;
				if (!declaration.included)
					return INCLUDE_FAILED;

			} else if ('included' in declaration) {
				// error callback 僅在每次真正嘗試過後才執行。
				// 這邊不再 run_callback('error_handler');
				return INCLUDE_FAILED;

			} else if (library_namespace.is_debug(2)
					&& library_namespace.is_WWW())
				library_namespace
						.debug(
								'module ['
										+ module
										+ '] is <b>NOT YET</b> loaded。通常為 module code 或呼叫 code 之問題。',
								2, 'load_named');

			library_namespace.debug('[' + id + '] 處理完畢。', 5, 'load_named');
			return PROCESSED;
		}

		// ---------------------------------------------------------------------//

		/**
		 * module_declaration.
		 */
		var named_code_declaration = {
			/**
			 * 本 module 之 module name/id。<br />
			 * TODO: 不設定時會從呼叫時之 path 取得。
			 * 
			 * @type String
			 * @constant
			 * @inner
			 * @ignore
			 */
			name : 'module name',

			// dependency. function name, module name.
			require : 'module_name.required_function|module_name.',

			/**
			 * 執行成功後，最後階段收拾善後/收尾工作之函式。post action.<br />
			 * 可處理在 module setup/設定 時尚無法完成的工作，例如 including external resources。
			 * 
			 * 因為需要經過特別處理，本設定不可直接匯入！
			 */
			finish : function() {
				// @see this.finish = function() below
			},
			/**
			 * 執行失敗後之異常/例外處理函式。<br />
			 * error handler, errorcallback, callback on error.<br />
			 * 
			 * 因為需要經過特別處理，本設定不可直接匯入！
			 */
			// error_handler : function(error_Object) { this === declaration; },
			/**
			 * 擴充標的基底。extend to what name-space。<br />
			 * 預設 extend 到哪個 name space。<br />
			 * 
			 * 若有設定，但不為真值，則完全不 extend。
			 * 
			 * 因為需要經過特別處理，本設定不可直接匯入！
			 */
			// extend_to : '',
			/**
			 * 不 extend 到 extend_to 下的 member (property, method) 列表。<br />
			 * '*': 不 extend 所有 member.<br />
			 * this: 連 module 本身都不 extend 到 extend_to 下。
			 * 
			 * @type String
			 * @type Array
			 * @ignore
			 */
			no_extend : 'this,*,no_extend_member',

			/**
			 * 初始設定函式。<br />
			 * 欲 include 整個 module 時，需囊括之 source code。
			 * 
			 * @param {Function}library_namespace
			 *            namespace of library. 通常即 CeL。<br />
			 *            亦可以 this.base 取得。
			 * 
			 * @type Function
			 */
			code : function(library_namespace) {
				/**
				 * full module name starts with library name
				 * `library_namespace.Class` (CeL).
				 * 
				 * If you want module name without library name prefix in module
				 * code, using `this.module_name` instead.
				 * 
				 * @type {String}
				 */
				var module_name = this.id,
				/**
				 * 呼叫初始設定函式時，採用之初始設定 options/arguments。
				 */
				load_option = this.load_option,
				/**
				 * 預先宣告本模組需要用到的變數名稱。<br />
				 * list of dependency function/module/variable required.<br />
				 * module 須以 CeL.env.module_name_separator ('.') 結尾。<br />
				 * 若輸入 String，則以 (TODO:separator 或) '|' 分割。
				 * 
				 * @type {Array|String}
				 * 
				 * @see parse_require()
				 */
				required_function = this.r('required_function');

				// 初始設定本模組需要用到的變數。
				// 2016/5/7 11:42:45: 為了避免使用 eval()，已改成 this.r()。
				// eval(this.use());

				// or...
				// nothing required.
				// 本 module 為許多 module 所用，應盡可能勿 requiring 其他 module。

				// 宣告暴露到外部的變量和函數。
				var to_export = function() {
					// null module constructor
				};

				var private_value = 1;
				function get_value() {
					return private_value;
				}

				to_export.method = function() {
					required_function(1, 2, 3);
				};

				// for inherit.
				to_export.grant = function(subclass) {
				};

				// 收尾工作。
				this.finish = function(name_space, waiting,
						sub_modules_to_full_module_path) {
					// in this scope, this === declaration;

					var sub_modules = [ 'sub_module_1', 'sub_module_2' ];
					var sub_sub_modules = [ 'sub_module.sub_sub_module' ];

					// 若 return waiting 表示需要等待，例如 asynchronous。
					// 這時*必須*在完成操作最後自行呼叫 waiting() 以喚醒剩下的作業！
					library_namespace.run(
							sub_modules_to_full_module_path(sub_modules),
							sub_modules_to_full_module_path(sub_sub_modules),
							waiting);
					// need waiting
					return waiting;
				};

				return to_export;
			}
		};

		// 本段落接下來為 comments.
		if (false) {
			var named_code_declaration_auto_filled = {

				// 執行完後 callback 原先的執行緒/function。
				callback : new Set,

				// 以下在 setup named source code 時設定。
				base : CeL,
				// for import.
				use : use_function,
				URL : 'path',

				// 載入後設定。
				status : 'included, failed,..',
				included : false
			};

			// code style @_named_code_.js.

			// 'use strict';

			// 若 library base 尚未 load 或本 module 已經 loaded，
			// 則預設會跳過載入。
			typeof CeL === 'function' && CeL.run(named_code_declaration);

			//
			// 載入 module 之方法。
			code.call(module_declaration);
			// Release memory. 釋放被占用的記憶體. 早點 delete 以釋放記憶體空間/資源。
			// 預防出現問題，如 memory leak 等。
			delete module_declaration.code;
			delete module_declaration.finish;

			//
			// inherit inside children code.
			var children = parent_code.grant();
		}

		// ---------------------------------------------------------------------//

		/**
		 * 是否為 check_and_run 之 controller。
		 * 
		 * @constant
		 * @private
		 * @inner
		 * @ignore
		 */
		var is_controller = library_namespace.is_Object;

		var
		/**
		 * 可允許被複製的 options。預防不該出現的也被複製了。<br />
		 * 
		 * @constant
		 * @private
		 * @inner
		 * @ignore
		 */
		check_and_run_options = {
			/**
			 * 欲 include 之 module name/id。
			 * 
			 * @type String
			 */
			name : 'module name',
			/**
			 * 欲 include 之 URL/path。
			 * 
			 * @type String
			 */
			URL : 'URL/path',
			/**
			 * not parallel.<br />
			 * Array 之預設 options 為平行處理。
			 * 
			 * @type Boolean
			 */
			sequential : '循序/依序執行',
			/**
			 * 載入 resource 之時間限制 (millisecond)。
			 * 
			 * @type Integer
			 */
			timeout : '載入 resource 之時間限制。',
			/**
			 * 呼叫初始設定函式時，採用之初始設定 options/arguments。
			 */
			load_option : '呼叫初始設定函式時，採用之初始設定 options/arguments。',
			/**
			 * 保證上次 item 執行至此次 item 一定會等超過這段時間 → change .start_time。 TODO
			 * 
			 * @type Integer
			 */
			interval : '時間間隔',
			/**
			 * resource 之 type: 'js', 'css', 'img'.<br />
			 * 未設定則由 extension 自動判別。
			 * 
			 * @type String
			 */
			type : 'MIME type',
			/**
			 * use document.write() instead of insert a element to <head>.
			 * 
			 * @type Boolean
			 */
			use_write : 'use document.write()',
			/**
			 * option 之作用方法。有 'once', 'reset'。
			 * 
			 * @type String
			 */
			operate : 'option 之作用方法。',
			/**
			 * 強制重新加載當前文檔。
			 * 
			 * @type Boolean
			 */
			force : "force reload even it's included.",
			/**
			 * 忽略所有錯誤。<br />
			 * ignore error.
			 * 
			 * @type Boolean
			 */
			skip_error : 'NO stop on error'
		};

		// 全 library 共用之相依關係。這會在外部資源以 .run() 載入時登錄。
		// 因為外部資源的載入除了本身的註記外無法探知。
		// var relation_map = new dependency_chain;

		// ---------------------------------------------------------------------//

		/**
		 * 主要處理程序之內部 front end。<br />
		 * TODO: 為求相容，不用 .bind()。
		 * 
		 * @param {Array}initial_Array
		 *            初始設定 items.
		 * @param {Object}options
		 *            初始設定 options.
		 * 
		 * @returns {check_and_run}
		 */
		function check_and_run(initial_Array, options) {
			// initialization. 初始化工作。
			this.status = new Map;
			// 紀錄 **正在 load** 之 sequence 所需之 dependency list。
			this.relation_map = new dependency_chain;
			this.run = check_and_run_run.bind(this);

			if (library_namespace.is_debug()) {
				check_and_run.count = (check_and_run.count || 0) + 1;
				var debug_id = 'check_and_run<b style="color:#d42;background-color:#ff4;">['
						+ check_and_run.count
						+ ': %/'
						+ initial_Array.length
						+ ']</b>';
				if (has_native_Object_defineProperty)
					Object.defineProperty(this, 'debug_id', {
						// enumerable : false,
						// configurable : false,
						get : function() {
							return debug_id.replace(/%/,
									this.relation_map.relations.size);
						}
					});
				else
					this.debug_id = debug_id;
				if (library_namespace.is_debug(5))
					library_namespace.log(this.debug_id + ': 初始登記：('
							+ initial_Array.length + ') [' + initial_Array
							+ ']。');
			}

			// 設定好 options。
			this.set_options(options, true);

			// @see function check_and_run_register()
			this.register(initial_Array);
		}

		/**
		 * use strict mode.<br />
		 * 這得要直接貼在標的 scope 內才有用。
		 */
		function use_strict() {
			var v, i = 0;
			try {
				// find a undefined variable name.
				while (true)
					eval(v = 'tmp_' + i++);
			} catch (i) {
			}

			try {
				// OK 表示在 eval 中可以設定 var.
				// 若是 'use strict'; 則不可在 eval() 中置新 var.
				eval(v + '=1;delete ' + v);
				return false;
			} catch (i) {
			}
			return true;
		}

		/**
		 * module 中需要 include function/module/variable 時設定 local variables 使用。<br />
		 * 本函數將把所需 function extend 至當前 namespace 下。
		 * 
		 * TODO: auto test strict.
		 * 
		 * @example <code>
		//	requires (inside module)
		//	事先定義 @ 'use strict';
		var split_String_to_Object;
		//	之所以需要使用 eval 是因為要 extend 至當前 namespace 下。
		//	若無法 load CeL.data，將會 throw
		eval(this.use());
		//	use it
		split_String_to_Object();

		//TODO
		//	不用 eval 的方法 1: function 預設都會 extend 至當前 library_namespace 下。
		library_namespace.use_function(this, 'data.split_String_to_Object');
		library_namespace.use_function(this, 'data.split_String_to_Object', false);
		//	若無法 load CeL.data，將會 throw
		//	use it
		library_namespace.split_String_to_Object();

		//TODO
		//	不用 eval 的方法 2: 設定 extend_to
		var o={};
		//	若無法 load CeL.data，將會 throw
		library_namespace.use_function(this, 'data.split_String_to_Object', o);
		//	use it
		o.split_String_to_Object();
		</code>
		 * 
		 * @param {Function|Object}extend_to
		 *            把 variable extend 至 name-space extend_to
		 * 
		 */
		function use_function(extend_to, no_strict) {
			if (!is_controller(this)) {
				library_namespace.error('No "this" binded!');
				return '';
			}

			if (no_strict)
				no_strict = [];

			var eval_code = [], variable_name, value, full_name,
			/**
			 * 要 extend 到 extend_to 下的 variables。<br />
			 * function/module/variable required.<br />
			 * 
			 * variable_hash[variable name] = variable full name, <br />
			 * 包括所在 module name。
			 * 
			 * @see check_and_run_normalize()
			 */
			variable_hash = this.variable_hash;

			if (library_namespace.is_Object(variable_hash)) {
				for (variable_name in variable_hash) {
					value = library_namespace
							.value_of(full_name = variable_hash[variable_name]);
					if (extend_to) {
						extend_to[variable_name] = value === undefined ? this.load_later
								.bind(full_name)
								: value;
					} else {
						no_strict && no_strict.push(variable_name);
						eval_code.push('try{' + variable_name + '='
								+ (value === undefined ?
								// 有些 module 尚未載入。
								// 可能因為循環參照(circular dependencies)，
								// 事實上 required 並未 loaded。
								'this.load_later.bind("' + full_name + '")' :
								/**
								 * escaped variable name.<br />
								 * 預防有保留字，所以用 bracket notation。 <br />
								 * 例如 Chrome 中會出現 'Unexpected token native'。
								 * 
								 * @see <a
								 *      href="http://www.dev-archive.net/articles/js-dot-notation/"
								 *      accessdate="2012/12/14 22:58">Dot
								 *      Notation and Square Bracket Notation in
								 *      JavaScript</a>
								 */
								full_name.replace(/\.([a-z\d_]+)/gi, '["$1"]'))
								// throw 到這邊，較可能是因為尚未定義 variable_name。
								// 因此不再嘗試用 load_later。
								+ ';}catch(e){}');
					}
				}
			}

			// 應注意 module_name 為保留字之類的情況，會掛在這邊 return 後的 eval。
			return extend_to
					|| (Array.isArray(no_strict) && no_strict.length > 0 ? 'var '
							+ no_strict.join(',') + ';'
							: '') + eval_code.join('');
		}

		/**
		 * 正規化之前置作業:用於將 item 全部轉為 {Object} controller。
		 * 
		 * @param item
		 *            正規化此 item。
		 * 
		 * @returns 正規化後之 item。
		 */
		function check_and_run_normalize(item) {

			if (item === PARALLEL || item === SEQUENTIAL)
				item = item === SEQUENTIAL;

			var name;

			switch (typeof item) {

			case 'boolean':
				return {
					// 循序/依序執行, one by one. in order / sequentially.
					// successively.
					sequential : item
				};

			case 'number':
				return {
					timeout : item > 0 ? item | 0 : 0
				};

			case 'function':
				// 注意:對 function 有特殊行為，
				// 不 return {Object} controller。
				return item;

			case 'string':
				// 包括 module/URL/path/變數/數值名。
				if (is_controller(name = get_named(item))
						|| typeof name === 'function') {
					return name;
				}
				name = undefined;
				break;

			case 'object':
				if (name = is_controller(item)
						&& (item.id || item.name || item.URL)) {
					// 測試是否處於 named source code 中。 item.code 為程式碼(function)。
					// 即使不處於 named source code 中，也應該是有特殊 option 的設定塊。
					// 因此還是得過個 get_named() 正規化一下 .id。
					var is_setup_declaration = typeof item.code === 'function',
					//
					declaration = get_named(name, item);

					if (declaration) {
						if (is_setup_declaration)
							return (declaration.force || !('included' in declaration)) ? parse_require(declaration)
									: declaration;
						library_namespace.debug('正規化載入 id [' + declaration.id
								+ '] 的 controller。', 5,
								'check_and_run_normalize');
						// 將 declaration.{id,name,URL} copy 至 item。
						if (false)
							library_namespace.extend({
								id : 1,
								name : 1,
								URL : 1
							}, item, declaration, 'string');
						library_namespace.set_method(item, declaration, [
								function(key) {
									return typeof declaration[key] !== 'string'
								}, 'id', 'name', 'URL' ]);
					}
				}

			}

			// Array.isArray() 的頻率最高。
			if (Array.isArray(item) || name)
				return item;

			// 其他都將被忽略!
			if (item) {
				library_namespace
						.warn('check_and_run.normalize: Unknown item: ('
								+ (typeof item) + ') [' + item + ']!');
			}

		}

		/**
		 * 預設 options。
		 */
		check_and_run.options = {
			// default timeout (millisecond) after options.interval.
			// 若短到 3s， 在大檔案作 auto_TOC() 會逾時。
			timeout : library_namespace.is_local() ? 20000 : 60000
		};

		/**
		 * 設定功能選項。
		 * 
		 * @param {Object}options
		 *            功能選項。
		 * @param {Boolean}reset
		 *            是否重置功能選項。
		 */
		function check_and_run_set_options(options, reset) {
			if (reset)
				Object.assign(this.options = Object.create(null),
						check_and_run.options);

			if (library_namespace.is_Object(options)) {
				if (false)
					library_namespace.extend(check_and_run_options,
							this.options, options);

				// TODO: .extend() 預設會 overwrite check_and_run_options.*。
				var i, this_options = this.options;
				for (i in options)
					if (i in check_and_run_options)
						this_options[i] = options[i];
			}
		}

		/**
		 * 登記/注冊整個 array 之元素與相依性。<br />
		 * 增加項目至當前的工作組。
		 * 
		 * @param {Array}array
		 *            欲注冊之 Array。
		 * 
		 * @returns {Number} status.
		 */
		function check_and_run_register(array, previous) {

			// library_namespace.assert(Array.isArray(array));

			// 因為可能動到原 Array，因此重製一個。
			// array = Array.prototype.slice.call(array);
			// 若是在後面還出現與前面相同的元素，則可能造成循環參照(circular dependencies)，此時僅取前面一個相依姓，。
			// array = (new Set(array)).values();

			var i = 0, j, length = array.length, sequential, item, next = array, something_new, relation_map = this.relation_map, status = this.status, _this = this;
			if (length === 0) {
				status.set(array, PROCESSED);
				if (previous !== undefined)
					// 需登記相依性之 array。
					relation_map.add(previous, array);
				return PROCESSED;
			}
			if (status.get(array) === PROCESSED)
				return PROCESSED;

			for (; i < length; i++)
				// 正規化 arguments。
				if ((item = check_and_run_normalize(array[i]))
						&& status.get(item) !== PROCESSED) {

					if (Array.isArray(item)) {
						if (item.length === 0
								|| _this.register(item, previous) === PROCESSED)
							continue;
					} else if (typeof item !== 'function'
							&& (!is_controller(item) || ('included' in item)
									&& !item.force))
						continue;

					if (!is_controller(item) || item === array[i]) {
						// 若輸入的是純量 option，會造成每次都創建新的 Object。
						// 這會讓此 Array 總是有 something_new。
						something_new = true;
					}

					if (previous !== undefined)
						// 需登記相依性之 array 至 relation map。
						relation_map.add(previous, item);

					// 在中途設定執行次序(running sequence)。
					if (is_controller(item) && ('sequential' in item)
							&& sequential !== (j = !!item.sequential))
						if (sequential = j)
							library_namespace.debug('自 ' + (i + 1) + '/'
									+ length
									+ ' 起依序載入：將元素一個接一個，展開至 relation map。', 5,
									this.debug_id + '.register');
						else {
							// 找出下一個所有平行載入元素都載入完後，才能開始的元素。
							j = i;
							while (++j < length)
								// TODO: cache.
								if (is_controller(next = check_and_run_normalize(array[j]))
										&& next.sequential)
									break;
							if (j === length)
								next = array;
							library_namespace.debug((i + 1) + '-' + j + '/'
									+ length + ' 平行載入：所有 ' + (j - i)
									+ ' 個元素皆 loaded 之後，才算是處理完了 Array。', 5,
									this.debug_id + '.register');
						}

					if (sequential)
						previous = item;
					else
						relation_map.add(item, next);
				}

			if (!something_new) {
				// 沒東西。skip.
				return PROCESSED;
			}

			if (sequential) {
				// array 的每個元素都載入後，才能處理陣列本身。
				relation_map.add(previous, array);
			}
		}

		/**
		 * check_and_run 之實際載入程序。
		 * 
		 * @returns {Number} status.
		 */
		function check_and_run_run() {
			var item, relation_map = this.relation_map;

			// 解決庫存的工作：
			// 開始測試是否有獨立 object 可直接處理/解決。
			// 對每一項都先找出獨立不依賴它者的，先處理。
			while ((item = relation_map.independent()) || item === 0) {
				// 開始處理當前的 item。

				// 所有加入 relation_map 的應該都已經 normalize 過。
				// item = check_and_run_normalize(item);

				if (typeof item === 'function') {
					library_namespace.debug(
							'直接執行 function ['
									+ (library_namespace
											.get_function_name(item) || item)
									+ ']。', 5, this.debug_id + '.run');
					if (library_namespace.env.no_catch)
						// 當 include 程式碼，執行時不 catch error 以作防範。
						item();
					else
						try {
							// TODO: 可否加點 arguments?
							item();
						} catch (e) {
							library_namespace.error(
							//
							'check_and_run.run: Error to run function: '
									+ e.message);
							if (library_namespace.env.has_console) {
								// console.trace(e);
								console.error(e);
							}
							library_namespace.debug('<code>'
									+ ('' + item).replace(/</g, '&lt;')
											.replace(/\n/g, '<br />')
									+ '</code>', 5, this.debug_id + '.run');
							return INCLUDE_FAILED;
						}

				} else if (Array.isArray(item)) {
					library_namespace.debug('登記 Array(' + item.length + ') ['
							+ item + ']。', 5, this.debug_id + '.run');
					if (this.register(item) !== PROCESSED)
						// 不清除。繼續處理 Array。
						item = null;

				} else if (is_controller(item)) {
					library_namespace.debug('處理 controller [' + item.id + ']。',
							5, this.debug_id + '.run');

					// import controller.
					// 先處理 options 再載入。
					var options = this.options;
					if (item.operate === 'once')
						options = item;
					else
						this.set_options(item, item.operate === 'reset');

					if (item.id)
						// 若是已處理過則跳過。
						// 因為 item 不一定為 named_code[] 之 declaration，因此只能以
						// is_included() 來判別是否 included。
						if (!item.force && is_included(item.id) !== undefined) {
							library_namespace.debug(
									(is_included(item.id) ? '已經 included'
											: '之前曾 include 失敗')
											+ ': [' + item.id + ']!', 5,
									this.debug_id + '.run');
						} else {
							if (library_namespace.is_debug(2)
									&& library_namespace.is_WWW())
								library_namespace.debug('嘗試'
										+ (is_included(item.id) ? '重新' : '')
										+ '載入 '
										+ (item.module_name ? 'module'
												: 'resource') + ' [' + item.id
										+ ']。', 5, this.debug_id + '.run');
							// include module/URL resource.
							var result = load_named(item, options, this.run);
							// force 僅使用一次。預防已經重複處理。
							if (item.force)
								delete item.force;
							if (result === INCLUDING) {
								if (false)
									// 在 IE 10 中，當 .appendChild() 時，
									// 會先中斷，執行所插入 node 的內容。
									// 因此必須確保在 .appendChild() 前，便已設定好 callback！
									item.callback.add(this.run);

								// item.status = INCLUDING;

								library_namespace.debug('正等待 loading ['
										+ item.id
										+ '] 中。推入排程開始蟄伏，waiting for callback。',
										5, this.debug_id + '.run');
								// 因無法即時載入，先行退出。
								return result;
							} else if (result === INCLUDE_FAILED)
								library_namespace.debug('Error to include ['
										+ item.id + ']', 5, this.debug_id
										+ '.run');
							else
								// assert: PROCESSED
								library_namespace.debug('[' + item.id
										+ ']: included.', 5, this.debug_id
										+ '.run');
						}

				} else
					library_namespace.warn('check_and_run.run: Unknown item: ['
							+ item + ']!');

				if (item !== null) {
					// current item is done. 本載入組已全部載入。
					library_namespace.debug('已處理過'
							+ (item.id ? ' [' + item.id + ']' : '此 '
									+ library_namespace.is_type(item))
							+ '，消除其相依關係。', 5, this.debug_id + '.run');
					this.status.set(item, PROCESSED);
					// 執行完清除 relation map 中之登錄。
					relation_map['delete'](item);
				}

				// 移到下一 group/工作組。
			}

			if (relation_map.relations.size > 0) {
				// 確認沒有其他在 queue 中的。
				library_namespace.warn('check_and_run.run: 已無獨立元素，卻仍有 '
						+ relation_map.relations.size + ' 個元素未處理！');
			}

			// destroy this.relation_map。
			// delete this.relation_map;
			library_namespace.debug('本次序列已處理完畢。', 5, this.debug_id + '.run');
		}

		// public interface of check_and_run.
		Object.assign(check_and_run.prototype, {
			// TODO: 警告：由於 set_options 之故，
			// 在 module code 的 scope 內，options 已被定義，而非 undefined!
			// 一般會得到 options={timeout: 20000}
			set_options : check_and_run_set_options,
			register : check_and_run_register
		});

		// ---------------------------------------------------------------------//
		// for module 操作.

		/**
		 * library 相對於 HTML file 的 base path。<br />
		 * 同目錄時，應為 "./"。
		 * 
		 * @example <code>

		 // 在特殊環境下，設置 library base path。
		 var CeL = { library_path : 'path/to/ce.js' };

		 * </code>
		 */
		var library_base_path,
		/**
		 * 設定 library base path，並以此決定 module path。
		 */
		setup_library_base_path = function() {
			if (!library_base_path) {
				// 當執行程式為 library base (ce.js)，則採用本執行程式所附帶之整組 library；
				if (false) {
					console.log([ library_namespace.env.script_name,
							library_namespace.env.main_script_name,
							library_namespace.env.registry_path ]);
				}

				var old_namespace = library_namespace.get_old_namespace();
				// 採用已經特別指定的路徑。
				if (library_namespace.is_Object(old_namespace)
						&& (library_base_path = old_namespace.library_path)) {
					// e.g., require() from electron
					// /path
					// C:\path
					if (!/^([A-Z]:)?[\\\/]/i.test(library_base_path)) {
						// assert: library_base_path is relative path
						// library_namespace.debug(library_namespace.get_script_full_name());
						library_base_path = library_namespace
								.simplify_path(library_namespace
										.get_script_full_name().replace(
												/[^\\\/]*$/, library_base_path));
					}
					library_base_path = library_namespace.simplify_path(
							library_base_path).replace(/[^\\\/]*$/, '');
				}

				// 否則先嘗試存放在 registry 中的 path。
				if (!library_base_path
						&& library_namespace.env.script_name !== library_namespace.env.main_script_name) {
					library_base_path = library_namespace.env.registry_path;
				}

				// 盡可能先檢查較具特徵、比較長的名稱: "ce.js"→"ce"。
				if (!library_base_path) {
					library_base_path = library_namespace
							.get_script_base_path(library_namespace.env.main_script)
							|| library_namespace
									.get_script_base_path(library_namespace.env.main_script_name)
							|| library_namespace.get_script_base_path();
				}

				if (library_base_path) {
					setup_library_base_path = function() {
						return library_base_path;
					};
					library_namespace.debug('library base path: [<a href="'
							+ encodeURI(library_base_path) + '">'
							+ library_base_path + '</a>]', 2,
							'setup_library_base_path');
				} else {
					library_namespace
							.warn('setup_library_base_path: Cannot detect the library base path!');
				}
			}

			library_namespace.env.library_base_path = library_base_path;
			// console.log(library_base_path);
			return library_base_path;
		};

		/**
		 * get the path of specified module.<br />
		 * 外部程式使用時，通常用在 include 相對於 library / module 本身路徑固定的 resource 檔案。<br />
		 * 例如 file_name 改成相對於 library 本身來說的路徑。
		 * 
		 * @example <code>

		// 存放 data 的 path path =
		library_namespace.get_module_path(this, '');

		 * </code>
		 * 
		 * @param {String}[module_name]
		 *            module name.<br />
		 *            未提供則設成 library base path，此時 file_name 為相對於 library
		 *            本身路徑的檔案。
		 * @param {String}[file_name]
		 *            取得與 module 目錄下，檔名為 file_name 之 resource file path。<br />
		 *            若填入 '' 可取得 parent 目錄。
		 * 
		 * @returns {String} module path
		 */
		function get_module_path(module_name, file_name) {
			// module_name = get_module_name(module_name);

			library_namespace.debug('test [' + module_name + ']', 4,
					'get_module_path');
			var file_path = library_base_path || setup_library_base_path(),
			//
			separator = file_path.indexOf('\\') === NOT_FOUND ? '/' : '\\';

			file_path += library_namespace.split_module_name(module_name).join(
					separator)
					+ (typeof file_name === 'string' ? (module_name ? separator
							: '')
							+ file_name : (module_name ? ''
							: library_namespace.env.main_script_name)
							+ library_namespace.env.script_extension);

			if (library_namespace.getFP)
				file_path = library_namespace.getFP(file_path, 1);

			library_namespace.debug('Path of module [' + module_name
					+ '] / file [' + file_name + ']: [<a href="'
					+ encodeURI(file_path) + '">' + file_path + '</a>]', 2,
					'get_module_path');

			return file_path;
		}

		// export.
		library_namespace.get_module_path = get_module_path;

		// check from newer to older
		if (has_native_Set
		// node 10.19.0 does not has `globalThis`
		&& typeof globalThis !== 'undefined' && globalThis
		//
		&& globalThis.globalThis === globalThis
		//
		&& typeof Promise === 'function'
		// node 10.19.0 does not has Promise.allSettled()
		&& typeof Promise.allSettled === 'function'
		// node 7.9 does not has String.prototype.trimStart()
		&& String.prototype.trimEnd && String.prototype.padEnd
		// node 6.2.2 does not has Object.values(), Object.entries()
		&& Object.entries
		// node 4 does not has Array.prototype.includes()
		// node 16 does not has Array.prototype.at()
		&& Array.prototype.at
		// Chrome/73.0.3683.20, Firefox/67.0 has .matchAll(),
		// node 11.9 DO NOT has .matchAll().
		&& String.prototype.matchAll) {
			library_namespace.debug(
			//		
			'已經有近代的執行環境特性，跳過 shim、相容性 test 專用的 functions。');
			console.log("TESTET");
			get_named('data.code.compatibility', true).included = true; //MODIFIED
		}

		/**
		 * (module 中)模擬繼承時使用。<br />
		 * クラスを継承する。
		 * 
		 * TODO:<br />
		 * thread-safe<br />
		 * initial_arguments 繼承時的 initial arguments。<br />
		 * initializer
		 * 
		 * @param child
		 *            繼承的子類別。
		 * @param parent
		 *            繼承的親類別。
		 * 
		 * @see <a
		 *      href="http://en.wikipedia.org/wiki/Inheritance_(computer_science)"
		 *      accessdate="2012/12/18 18:54">Inheritance</a>,<br />
		 *      <a href="http://fillano.blog.ithome.com.tw/post/257/17355"
		 *      accessdate="2010/1/1 0:6">Fillano's Learning Notes |
		 *      物件導向Javascript - 實作繼承的效果</a>,<br />
		 *      <a href="http://www.crockford.com/javascript/inheritance.html"
		 *      accessdate="2010/1/1 0:6">Classical Inheritance in JavaScript</a>,<br />
		 *      <a href="http://phrogz.net/JS/classes/OOPinJS.html"
		 *      accessdate="2012/12/18 19:16">OOP in JS, Part 1 : Public/Private
		 *      Variables and Methods</a>
		 * 
		 */
		function inherit(child, parent) {
			var i = 1, j, prototype;
			/**
			 * normalize parent.
			 */
			function normalize() {
				if (typeof parent === 'string') {
					library_namespace.debug(
							'get the module namespace of specific parent module name ['
									+ parent + '].', 2, 'inherit');
					parent = library_namespace.value_of(library_namespace
							.to_module_name(parent));
				}
				if (library_namespace.is_Function(parent))
					return parent;
				library_namespace.error('inherit: 無法判別出合理之 parent[' + i + ']！');
			}

			if (!normalize())
				return;

			/**
			 * copy the prototype properties using new.<br />
			 * 另可在 constructor 中: parent.call(this, argument);
			 * 
			 * @see <a
			 *      href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_Revisited"
			 *      accessdate="2012/12/18 18:59">Inheritance revisited</a>
			 */
			try {
				// Object.setPrototypeOf(prototype, parent.prototype);
				prototype = new parent;
			} catch (e) {
				prototype = parent;
			}
			// TODO
			if (false)
				if (Object.create)
					prototype = Object.create(prototype);

			if (typeof child === 'function')
				// 搬回原先 child 的原型。
				for (j in child.prototype)
					prototype[j] = child.prototype[j];
			else if (!child)
				child = function() {
				};

			(child.prototype = prototype).constructor = child;

			// 處理其他 parent 的 prototype。
			for (var parent_prototype, length = arguments.length; ++i < length;) {
				parent = arguments[i];
				if (normalize()) {
					parent_prototype = parent.prototype;
					for (j in parent_prototype)
						prototype[j] = parent_prototype[j];
				}
			}

			return child;
		}

		// export.
		library_namespace.inherit = inherit;

		// ---------------------------------------------------------------------//

		/**
		 * control/setup source codes to run.<br />
		 * 基本上使用異序(asynchronously,不同時)的方式，<br />
		 * 除非所需資源已經載入，或是有辦法以 {@link XMLHttpRequest} 取得資源。<br />
		 * 
		 * 本函數實為 DOM 載入後，正常 .run 載入處理程序之對外 front end。<br />
		 * 
		 * @param running_sequence
		 * 
		 * running sequence:<br />
		 * {Integer} PARALLEL (平行處理), SEQUENTIAL (循序/依序執行, in order).<br />
		 * {ℕ⁰:Natural+0} timeout (ms): 載入 resource 之時間限制 (millisecond)。<br />
		 * {Array} 另一組動作串 (required sequence): [{String|Function|Integer}, ..] →
		 * 拆開全部當作 PARALLEL loading.<br />
		 * {String} library module name to import, resource (URL/file path)
		 * (e.g., JavaScript/CSS/image) to import.<br />
		 * {Function} function to run/欲執行之 function。<br />
		 * {Object} options: loading with additional config. See
		 * check_and_run_options.
		 * 
		 * @example <code>
		 * </code>
		 * 
		 * 正確:<br />
		 * <code>
		CeL.run('code.log', function() {
			CeL.warn('WARNING message');
		});
		</code>
		 * 
		 * 錯誤:<br />
		 * <code>
		CeL.run('code.log');
		//	注意：以下的 code 中，CeL.warn() 不一定會被執行（可能會、可能不會），因為執行時 log 可能尚未被 include。
		//	在已經 included 的情況下有可能直接就執行下去。
		//	此時應該改用 CeL.run();
		CeL.warn('WARNING message');
		</code>
		 * 
		 * TODO:<br />
		 * 進度改變時之 handle：一次指定多個 module 時可以知道進度，全部 load 完才 callback()。
		 * 
		 */
		function normal_run() {
			if (arguments.length > 1 || arguments[0]) {
				if (library_namespace.is_debug(2) && library_namespace.is_WWW()) {
					library_namespace.debug('初始登記/處理 ' + arguments.length
							+ ' items。', 2, 'normal_run');
				}
				var to_run = Array.prototype.slice.call(arguments);
				if (to_run.length > 1) {
					// 預設 options 為依序處理。（按順序先後，盡可能同時執行。）
					to_run.unshift(SEQUENTIAL);
				}

				// 注意: 每次執行 CeL.run() 都會創出新的1組 check_and_run() 與
				// dependency_chain
				to_run = new check_and_run(to_run);

				library_namespace.debug('做完初始登記，開始跑程序。', 2, 'normal_run');
				return to_run.run();
			}

			library_namespace.debug('未輸入可處理之序列！', 3, library_namespace.Class
					+ 'run', 'normal_run');
		}

		/**
		 * check included resources. 檢查已載入的資源檔，預防重複載入。
		 * 
		 * @param {String}tag
		 *            tag name to check.
		 * @param {String}URL_attribute
		 *            attribute name of the tag.
		 */
		function check_resources(tag, URL_attribute) {
			if (URL_attribute || (URL_attribute = URL_of_tag[tag])) {
				library_namespace.get_tag_list(tag).forEach(function(node) {
					var URL = node[URL_attribute];
					if (typeof URL === 'string' && URL && is_controller(URL
					//
					= get_named(URL.replace(/#[^#?]*$/, '')))) {
						library_namespace.debug(
						//
						'add included: [' + URL.id + ']',
						//
						2, 'check_resources');
						URL.included = true;
					}
				});
			} else {
				library_namespace.warn(
				//
				'check_resources: 無法判別 tag [' + tag + '] 之 URL attribute！');
			}
		}

		// export.
		library_namespace.check_resources = check_resources;

		/**
		 * 設定 library 之初始化程序。
		 */
		var library_initializer = function() {

			setup_library_base_path();

			if (library_namespace.is_WWW()) {
				for ( var tag in tag_map) {
					URL_of_tag[tag] = tag_map[tag][0];
					tag_map[tag][1].split('|').forEach(function(type) {
						tag_of_type[type] = tag;
					});
				}
				[ 'script', 'link' ].forEach(function(tag) {
					check_resources(tag);
				});
			}

			/**
			 * 初始化 user 設定: 處理在 <script> 中插入的初始設定。
			 * 
			 * TODO: 若是設定: <code>

			<script type="text/javascript" src="lib/JS/ce.js">// {"run":["css.css","js.js"]}</script>

			 * </code> 則 .css 後的 .js 可能執行不到，會被跳過。
			 */
			var queue = library_namespace.env.script_config;
			if (library_namespace.is_Object(queue) && (queue = queue.run))
				library_initializer.queue.push(queue);
			queue = library_initializer.queue;

			// 已處理完畢，destroy & set free。
			library_initializer = function() {
				library_namespace.log('library_initializer: 已處理完畢。');
			};

			// use CeL={initializer:function(){}}; as callback
			var old_namespace = library_namespace.get_old_namespace(), initializer;
			if (library_namespace.is_Object(old_namespace)
					&& (initializer = old_namespace.initializer)) {
				if (Array.isArray(initializer))
					Array.prototype.push.call(queue, initializer);
				else
					queue.push(initializer);
			}

			// 處理積存工作。
			// export .run().
			return (library_namespace.run = normal_run)(queue);
		};
		library_initializer.queue = [];

		if (false) {
			console.log('is_WWW: ' + library_namespace.is_WWW()
					+ ', document.readyState: ' + document.readyState);
			console.log(library_namespace.get_tag_list('script').map(
					function(n) {
						return n.getAttribute('src')
					}));
		}
		// 需要確定還沒有 DOMContentLoaded
		// https://stackoverflow.com/questions/9457891/how-to-detect-if-domcontentloaded-was-fired
		if (!library_namespace.is_WWW() || document.readyState === "complete"
				|| document.readyState === "loaded"
				|| document.readyState === "interactive") {
			library_initializer();

		} else {
			// 先檢查插入的<script>元素，預防等檔案載入完之後，<script>已經被移除。
			setup_library_base_path();
			library_namespace.run = function pre_loader() {
				if (!library_initializer)
					// 已初始化。這是怕有人不用 .run()，而作了 cache。
					return normal_run.apply(null, arguments);

				// onload, 推入queue，以等待程式庫載入之後執行。
				library_initializer.queue.push(Array.prototype.slice
						.call(arguments));
			};

			/**
			 * 以 event listener 確保初始化程序被執行。
			 * 
			 * @see http://w3help.org/zh-cn/causes/SD9022<br />
			 *      統一為 window 對象的 onload 事件綁定函數，避免在 Firefox 中產生
			 *      document.body.onload 事件理解歧義。<br />
			 *      統一使用 DOM 規範的事件監聽方法（或 IE 專有事件綁定方法）為 IFRAME 標記綁定 onload
			 *      事件處理函數。
			 */
			if (document.addEventListener) {
				// https://developer.mozilla.org/en/Gecko-Specific_DOM_Events
				document.addEventListener("DOMContentLoaded",
						library_initializer, false);
			} else if (window.attachEvent) {
				window.attachEvent("onload", library_initializer);
			} else {
				library_namespace
						.warn('No event listener! Using window.onload.');
				if (!window.onload) {
					window.onload = library_initializer;
				} else {
					(function() {
						var old_onload = window.onload;
						window.onload = function() {
							old_onload();
							library_initializer();
						};
					})();
				}
			}
		}

		// ---------------------------------------------------------------------//

	})(CeL);






// args.append(['turnCode.js']);
// args=args.concat(['turnCode.js']);
// --------------------------------------------------------------------------------------------------------------------
// 不作 initialization
// CeL.no_initialization = false;
if (typeof CeL === 'function' && !CeL.no_initialization) {
	if (CeL.env.script_name === CeL.env.main_script_name)
		// 僅僅執行 ce.js 此檔時欲執行的程序。
		(function(_) {

			// WScript.Echo(_.env.script_name);
			// _.debug(_.env.script_name);

			// _.set_debug(2);
			_
					.run([ 'application.OS.Windows',
							'application.OS.Windows.registry' ]);
			// _.debug(_.reg);
			if (!_.reg) {
				// 會到這邊，表示所有可用的 path 都無法利用；
				// registry 的 path，或是本 include 的附屬 module 都有問題。
				// 像是 library base 造成的問題，不該出現於此。
				WScript.Echo('無法載入 module，您可能需要手動檢查 registry，看看是否設定到了錯誤的路徑？');
				return;
			}

			// 將 path 寫入 registry
			var path_key_name = _.env.registry_path_key_name,
			// 此時 script 即為 main_script
			library_base_path = _.env.script_base_path, path_in_registry = _.reg
					.getValue(path_key_name)
					|| '(null)';
			// WScript.Echo('registry:\n' + path_in_registry + '\npath now:\n' +
			// library_base_path);
			if (path_in_registry !== library_base_path) {
				// 執行程式之 path 與 registry 所列 path 不同，且 registry 所列 path 有問題或不被使用。
				// registry 所列 path !== 執行程式之 path
				// Change library base path.
				WScript
						.Echo('Change the base path of [' + _.Class
								+ '] from:\n' + path_in_registry + '\n to\n'
								+ library_base_path + '\n\nkey name:\n'
								+ path_key_name);
				_.reg.setValue.cid = 1;
				_.reg.setValue(path_key_name, library_base_path, 0, 0, 1);
				_.reg.setValue(_.env.registry_base + 'main_script',
						library_base_path + _.env.script_name
								+ _.env.script_extension, 0, 0, 1);
				_.reg.setValue.cid = 0;
			}

			// TODO
			// 拖曳檔案到本檔案上面時之處置。
			// initialization_WScript_Objects();
			if (
			// args instanceof Array
			typeof args === 'object') {
				// getEnvironment();
				// alert('Get arguments ['+args.length+']\n'+args.join('\n'));
				if (args.length) {
					var i = 0, p, enc, f, backupDir = dBasePath('kanashimi\\www\\cgi-bin\\program\\log\\');
					if (!fso.FolderExists(backupDir)) {
						try {
							fso.CreateFolder(backupDir);
						} catch (e) {
							backupDir = dBasePath('kanashimi\\www\\cgi-bin\\game\\log\\');
						}
					}
					if (!fso.FolderExists(backupDir)) {
						try {
							fso.CreateFolder(backupDir);
						} catch (e) {
							if (2 === alert('無法建立備份資料夾[' + backupDir
									+ ']！\n接下來的操作將不會備份！', 0, 0, 1 + 48))
								WScript.Quit();
							backupDir = '';
						}
					}
					// addCode.report=true; // 是否加入報告
					for (; i < args.length; i++) {
						if ((f = parse_shortcut(args[i], 1))
								.match(/\.(js|vbs|hta|[xs]?html?|txt|wsf|pac)$/i)
								&& isFile(f)) {
							p = alert(
									'是否以預設編碼['
											+ ((enc = autodetectEncode(f)) === simpleFileDformat ? '內定語系('
													+ simpleFileDformat + ')'
													: enc) + ']處理下面檔案？\n' + f,
									0, 0, 3 + 32);
							if (p === 2)
								break;
							else if (p === 6) {
								if (backupDir)
									fso.CopyFile(f, backupDir + getFN(f), true);
								addCode(f);
							}
						}
					}
				} else if (1 === alert('We will generate a reduced ['
						+ _.env.script_name + ']\n  to [' + _.env.script_name
						+ '.reduced.js].\nBut it takes several time.', 0, 0,
						1 + 32))
					reduceScript(0, _.env.script_name + '.reduced.js');
			}// else window.onload=init;

			// _._iF=undefined;

		})(CeL);
}

// test WinShell
// http://msdn.microsoft.com/en-us/library/bb787810(VS.85).aspx
if (false) {
	alert(WinShell.Windows().Item(0).FullName);

	var i, cmd, t = '', objFolder = WinShell.NameSpace(0xa), objFolderItem = objFolder
			.Items().Item(), colVerbs = objFolderItem.Verbs(); // 假如出意外，objFolder==null
	for (i = 0; i < colVerbs.Count; i++) {
		t += colVerbs.Item(i) + '\n';
		if (('' + colVerbs.Item(i)).indexOf('&R') != -1)
			cmd = colVerbs.Item(i);
	}
	objFolderItem.InvokeVerb('' + cmd);
	alert('Commands:\n' + t);

	// objShell.NameSpace(FolderFrom).CopyHere(FolderTo,0); // copy folder
	// objFolderItem=objShell.NameSpace(FolderFrom).ParseName("clock.avi");objFolderItem.Items().Item().InvokeVerb([動作]);
	// objShell.NameSpace(FolderFromPath).Items.Item(mName).InvokeVerb();

	// Sets or gets the date and time that a file was last modified.
	// http://msdn.microsoft.com/en-us/library/bb787825(VS.85).aspx
	// objFolderItem.ModifyDate = "01/01/1900 6:05:00 PM";
	// objShell.NameSpace("C:\Temp").ParseName("Test.Txt").ModifyDate =
	// DateAdd("d", -1, Now()) CDate("19 October 2007")

	// Touch displays or sets the created, access, and modified times of one
	// or more files. http://www.stevemiller.net/apps/
}

// 測試可寫入的字元:0-128,最好用1-127，因為許多編輯器會將\0轉成' '，\128又不確定
if (false) {
	var t = '', f = 'try.js', i = 0;
	for (; i < 128; i++)
		t += String.fromCharCode(i);
	if (simpleWrite(f, t))
		alert('Write error!\n有此local無法相容的字元?');
	else if (simpleRead(f) != t)
		alert('內容不同!');
	else if (simpleWrite(f, dQuote(t) + ';'))
		alert('Write error 2!\n有此local無法相容的字元?');
	else if (eval(simpleRead(f)) != t)
		alert('eval內容不同!');
	else
		alert('OK!');
}








}



// data.native
/**
 * @name CeL function for native (built-in) objects.
 * @fileoverview 本檔案包含了 native objects 的擴充功能。
 * 
 * http://www.hunlock.com/blogs/Ten_Javascript_Tools_Everyone_Should_Have
 * 
 * @see https://github.com/andrewplummer/Sugar
 * @since
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

typeof CeL === 'function' && CeL.run({
	// module name
	name : 'data.native',

	// require : '',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	/**
	 * null module constructor
	 * 
	 * @class native objects 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// cache
	var set_method = library_namespace.set_method,
	// https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
	SUPERSCRIPT_NUMBER = superscript_integer.map = (superscript_integer.digits = '⁰¹²³⁴⁵⁶⁷⁸⁹')
			.split(''),
	//
	SUBSCRIPT_NUMBER = subscript_integer.map = (subscript_integer.digits = '₀₁₂₃₄₅₆₇₈₉')
			.split('');

	SUPERSCRIPT_NUMBER['+'] = '⁺';
	SUPERSCRIPT_NUMBER['-'] = '⁻';
	SUBSCRIPT_NUMBER['+'] = '₊';
	SUBSCRIPT_NUMBER['-'] = '₋';

	function superscript_integer() {
		var v = [];
		this.digits().forEach(function(i) {
			v.push(SUPERSCRIPT_NUMBER[i]);
		});
		return v.join('');
	}

	function subscript_integer() {
		var v = [];
		this.digits().forEach(function(i) {
			v.push(SUBSCRIPT_NUMBER[i]);
		});
		return v.join('');
	}

	/**
	 * padding / fill. 將 string 以 character 補滿至長 length。
	 * 
	 * @see Number.prototype.toLocaleString()
	 *      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
	 * 
	 * TODO: 效能測試:與 "return n > 9 ? n : '0' + n;" 相較。
	 * 
	 * @example <code>

	 // More examples: see /_test suite/test.js

	 * </code>
	 * 
	 * @param {String}string
	 *            基底 string。
	 * @param {Integer}length
	 *            補滿至長 length (maxLength)。
	 * @param {String}fillString
	 *            以 fillString 補滿。
	 * @param {Boolean}from_start
	 *            補滿方向。基本為 5 → ' 5'，設定 from_start 時，為 5 → '5 '。
	 * 
	 * @since 2012/3/25 19:46:42
	 * 
	 * @returns {String} padding 過後之 string
	 */
	function pad(string, length, fillString, from_start) {
		// 為負數作特殊處理。
		// e.g., pad(-9, 3) === '-09'
		if (typeof string === 'number' && string < 0
		//
		&& !from_start && (!fillString || fillString === 0))
			return '-' + pad(-string, length - 1, '0');

		string = String(string);

		// 差距。
		var gap = length - string.length;
		if (gap > 0) {
			// library_namespace.debug(gap + ' [' + fillString + ']');
			if (!fillString || typeof fillString !== 'string') {
				fillString = typeof fillString === 'number' ? String(fillString)
						: string === '' || isNaN(string) ? ' ' : '0';
			}
			// assert: {String}fillString

			var l = fillString.length,
			/**
			 * TODO: binary extend.<br />
			 * .join() is too slow.
			 */
			fill = new Array(l > 1 ? Math.ceil(gap / l) : gap);
			// library_namespace.debug('fill.length = ' + fill.length);

			if (from_start) {
				fill[0] = string;
				fill.length++;
				string = fill.join(fillString);
				if (string.length > length)
					string = string.slice(0, length);
			} else if (l > 1) {
				fill.length++;
				string = fill.join(fillString).slice(0, gap) + string;
			} else {
				fill.push(string);
				string = fill.join(fillString);
			}
		}
		return string;
	}

	_.pad = pad;

	/**
	 * <code>
	function經ScriptEngine會轉成/取用'function'開始到'}'為止的字串

	用[var thisFuncName=parse_function().funcName]可得本身之函數名
	if(_detect_)alert('double run '+parse_function().funcName+'() by '+parse_function(arguments.callee.caller).funcName+'()!');

	You may use this.constructor


	TODO:
	to call: parse_function(this,arguments)
	e.g., parent_func.child_func=function(){var name=parse_function(this,arguments);}

	bug:
	函數定義 .toString() 時無法使用。
	</code>
	 */

	_// JSDT:_module_
	.
	/**
	 * 函數的文字解譯/取得函數的語法
	 * 
	 * @param {Function|String}
	 *            function_name function name or function structure
	 * @param flags
	 *            =1: reduce
	 * @return
	 * @example parsed_data = new parse_function(function_name);
	 * @see http://www.interq.or.jp/student/exeal/dss/ref/jscript/object/function.html,
	 *      Syntax error:
	 *      http://msdn.microsoft.com/library/en-us/script56/html/js56jserrsyntaxerror.asp
	 * @_memberOf _module_
	 * @since 2010/5/16 23:04:54
	 */
	parse_function = function parse_function(function_name, flags) {
		if (!function_name)
			try {
				function_name = parse_function.caller;
				if (typeof function_name !== 'function')
					return;
			} catch (e) {
				return;
			}
		if (typeof function_name === 'string'
				&& !(function_name = library_namespace
						.get_various(function_name)))
			return;

		var fs = String(function_name), m = fs
				.match(library_namespace.PATTERN_function);
		library_namespace.debug(typeof function_name + '\n' + fs + '\n' + m, 6);

		// detect error, 包含引數
		// 原先：functionRegExp=/^\s*function\s+(\w+) ..
		// 因為有function(~){~}這種的，所以改變。
		if (!m) {
			// JScript5 不能用 throw!
			// http://www.oldversion.com/Internet-Explorer.html
			// Syntax error!
			// gettext_config:{"id":"syntax-error"}
			throw new Error(1002, '語法錯誤！');
		}

		if (function_name != m[1]) {
			// Function name unmatched.
			library_namespace.warn({
				// gettext_config:{"id":"function-name-unmatched"}
				T : '函數名稱不相符，可能是用了 reference？'
			});
		}

		library_namespace.debug('function ' + m[1] + '(' + m[2] + '){\n' + m[3]
				+ '\n}', 9);

		return {
			string : fs,
			name : m[1],
			// 去除前後空白
			arguments : m[2].replace(/[\s\n]+/g, '').split(','),
			code : m[3]
		};
	};

	// 補強 String.fromCharCode()
	function fromCharCode(c) {
		if (!isNaN(c))
			return String.fromCharCode(c);
		try {
			// 直接最快
			return eval('String.fromCharCode(' + c + ');');
		} catch (e) {
		}

		// comments
		if (typeof c == 'string') {
			// c=c.split(','); 後者可以通過審查
			return eval('String.fromCharCode(' + n + ')');
		}
		if (typeof c == 'object') {
			var t = '', d, i, a, n = [];
			if (c.length)
				a = c;
			else {
				a = [];
				for (i in c)
					a.push(c[i]);
			}
			for (i = 0; i < a.length; i++)
				if (!isNaN(c = a[i]) || !isNaN(c = ('' + a[i]).charCodeAt(0)))
					// 跳過無法判讀的值
					n.push(c);
			// n.join(',') 這樣較快
			return eval('String.fromCharCode(' + n + ')');
		}
	}

	_// JSDT:_module_
	.
	/**
	 * ASCII_code_at, 對付有時 charCodeAt 會傳回 >256 的數值。 若確定編碼是 ASCII (char code 是
	 * 0~255) 即可使用此函數替代 charCodeAt。
	 * 
	 * @param text
	 *            string
	 * @param position
	 *            at what position
	 * @return
	 * @since 2008/8/2 10:10:49
	 * @see http://www.alanwood.net/demos/charsetdiffs.html
	 * @_memberOf _module_
	 */
	toASCIIcode = function(text, position) {
		var _f = arguments.callee, c;

		if (!_f.t) {
			// initialize
			var i = 129, t = _f.t = [], l = {
				8364 : 128,
				8218 : 130,
				402 : 131,
				8222 : 132,
				8230 : 133,
				8224 : 134,
				8225 : 135,
				710 : 136,
				8240 : 137,
				352 : 138,
				8249 : 139,
				338 : 140,
				381 : 142,
				8216 : 145,
				8217 : 146,
				8220 : 147,
				8221 : 148,
				8226 : 149,
				8211 : 150,
				8212 : 151,
				732 : 152,
				8482 : 153,
				353 : 154,
				8250 : 155,
				339 : 156,
				382 : 158,
				376 : 159
			};
			for (; i < 256; i += 2)
				t[i] = i;
			for (i in l) {
				library_namespace.debug(i + ' = ' + l[i], 6);
				t[i | 0] = l[i];
			}
		}

		if (position < 0 && !isNaN(text))
			c = text;
		else
			c = text.charCodeAt(position || 0);

		return c < 128 ? c : (_f.t[c] || c);
	};

	/**
	 * <code>	2008/8/2 9:9:16
	encodeURI, encodeURIComponent 僅能編成 utf-8，對於其他 local 編碼可使用本函數。

	e.g.,
	f.src='http://www.map.com.tw/search_engine/searchBar.asp?search_class=address&SearchWord='+encodeUC(q[0],'big5')


	perl
	#use Encode qw(from_to);
	use Encode;

	my $tEnc='utf-8';

	$t="金";

	$t=Encode::decode($t,'big5');

	Encode::from_to($t,$lEnc,$outEnc);

	Encode::from_to

	@b=split(//,$a);

	for($i=0;$i<scalar(@b);$i++){
	$r.=sprintf('%%%X',ord($b[$i]));
	};


	</code>
	 */
	// encodeUC[generateCode.dLK]='toASCIIcode';
	function encodeUC(u, enc) {
		if (!enc || enc == 'utf8')
			return encodeURI(u);

		var i = 0, c = new ActiveXObject("ADODB.Stream"), r = [];
		// adTypeText;
		c.Type = 2;
		c.Charset = enc;
		c.Open();
		c.WriteText(u);
		c.Position = 0;
		c.Charset = 'iso-8859-1';
		u = c.ReadText();
		c.Close();

		for (; i < u.length; i++)
			r.push((c = u.charCodeAt(i)) < 0x80 ? u.charAt(i) : '%'
					+ toASCIIcode(c, -1).toString(0x10).toUpperCase());

		return r.join('').replace(/ /g, '+');
	}

	/**
	 * String pattern (e.g., "/a+/g") to RegExp pattern.<br />
	 * escape RegExp pattern，以利作為 RegExp source 使用。<br />
	 * cf. qq// in perl.
	 * 
	 * <code>
	 * String.prototype.to_RegExp_pattern = function(f) { return to_RegExp_pattern(this.valueOf(), f); };
	 * </code>
	 * 
	 * @param {String}pattern
	 *            pattern text.
	 * @param {RegExp}[escape_pattern]
	 *            char pattern need to escape.
	 * @param {Boolean|String}[RegExp_flags]
	 *            flags when need to return RegExp object.
	 * 
	 * @return {String|RegExp} escaped RegExp pattern or RegExp object.
	 */
	function to_RegExp_pattern(pattern, escape_pattern, RegExp_flags) {
		pattern = pattern
		// 不能用 $0。
		.replace(escape_pattern || /([.*?+^$|()\[\]\\{}])/g, '\\$1')
		// 這種方法不完全，例如對 /^\s+|\s+$/g
		.replace(/^([\^])/, '\\^').replace(/(\$)$/, '\\$');

		return RegExp_flags === undefined ? pattern : new RegExp(pattern,
				_.PATTERN_RegExp_flags.test(RegExp_flags) ? RegExp_flags : '');
	}
	_// JSDT:_module_
	.to_RegExp_pattern = to_RegExp_pattern;

	// CeL.ignore_first_char_case('abc') === '[Aa]bc'
	function ignore_first_char_case(pattern) {
		// pattern 無特殊字元！否則應該出警告。
		var lower_case = pattern.charAt(0),
		//
		upper_case = lower_case.toUpperCase();
		if (upper_case !== lower_case
		//
		|| upper_case !== (lower_case = upper_case.toLowerCase()))
			pattern = '[' + upper_case + lower_case + ']' + pattern.slice(1);
		return pattern;
	}
	_// JSDT:_module_
	.ignore_first_char_case = ignore_first_char_case;

	// CeL.ignore_case_pattern('abc') === '[Aa][Bb][Cc]'
	function ignore_case_pattern(pattern, only_first_char) {
		pattern = pattern.split('');
		// pattern 無特殊字元！否則應該出警告。
		pattern.forEach(function(lower_case, index) {
			var upper_case = lower_case.toUpperCase();
			if (upper_case !== lower_case
			//
			|| upper_case !== (lower_case = upper_case.toLowerCase()))
				pattern[index] = '[' + upper_case + lower_case + ']';
		})
		return pattern.join('');
	}
	_// JSDT:_module_
	.ignore_case_pattern = ignore_case_pattern;

	// pattern.replace(string)
	// 警告: 必須自行檢查 string! 否則會出現 pattern.replace(undefined) === 'undefined'
	function pattern_replace(string) {
		// assert: {RegExp}this pattern
		// assert: pattern has .replace_to
		return String(string).replace(this, this.replace_to);
	}

	if (false) {
		pattern = '/move from/g'.to_RegExp();
		pattern = '/move from/replace to/g'.to_RegExp({
			allow_replacement : true
		});
		pattern.replace('*move from*') === '*replace to*';
	}

	/**
	 * 將 String pattern (e.g., "/a+/g") 轉成 RegExp。<br />
	 * TODO:<br />
	 * and, or, not.<br />
	 * (?:(^|\s*\|)\s*(!)?(\/(?:[^\/]+|\\\/)(\/([a-z]*))?|\\(\S+)|\S+))+<br />
	 * {Object|Array}preprocessor<br />
	 * 
	 * cf. CeL.to_RegExp_pattern()
	 * 
	 * @param {String}pattern
	 *            欲轉換成 RegExp 的 pattern text。
	 * @param {Object}[options]
	 *            附加參數/設定特殊功能與選項 options = {<br />
	 *            {String}flags : RegExp 的 flags。<br />
	 *            {Function|String}error_handler : 當遇到不明 pattern 時的處理程序。<br /> }
	 * 
	 * @returns {RegExp} RegExp object。
	 * 
	 * @since 2012/10/13 10:22:20
	 */
	function String_to_RegExp(pattern, options) {
		// 前置作業。
		if (typeof options === 'string' && _.PATTERN_RegExp_flags.test(options)) {
			options = {
				flags : options
			};
		} else if (typeof options === 'function') {
			options = {
				error_handler : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		if (typeof pattern === 'string') {
			if (typeof String_to_RegExp.preprocessor === 'function')
				pattern = String_to_RegExp.preprocessor(pattern);

			if (typeof pattern === 'string' && pattern.length > 1)
				// pattern.trim()
				if (pattern.charAt(0) === '/') {
					library_namespace.debug({
						// gettext_config:{"id":"treat-$1-as-regexp"}
						T : [ 'Treat [%1] as RegExp.', pattern ]
					}, 3, 'String_to_RegExp');
					var matched = pattern.match(_.PATTERN_RegExp), replace_to;
					if (!matched && options.allow_replacement
					//
					&& (matched = pattern.match(_.PATTERN_RegExp_replacement))) {
						replace_to = matched[2];
						// matched[2] = matched[3];
						matched.splice(2, 1);
					}
					// 設定 flags。
					var flags = _.PATTERN_RegExp_flags.test(options.flags)
							&& options.flags
							|| (matched ? matched[2]
									: String_to_RegExp.default_flags);

					try {
						try {
							pattern = new RegExp(matched ? matched[1] : pattern
									.slice(1), flags);
						} catch (e) {
							try {
								if (matched) {
									// 設定絕對可接受的 flags，或完全不設定。
									pattern = new RegExp(matched[1]);
									library_namespace.warn([
									//
									'String_to_RegExp: ', {
										// gettext_config:{"id":"invalid-flags-$1"}
										T : [ 'Invalid flags: [%1]', flags ]
									} ]);
								} else
									throw true;
							} catch (e) {
								library_namespace.warn([
								// Illegal pattern: /%1/
								'String_to_RegExp: ', {
									// gettext_config:{"id":"illegal-pattern-$1"}
									T : [ 'Illegal pattern: [%1]', matched[1] ]
								} ]);
							}
						}
					} catch (e) {
						library_namespace.debug({
							// gettext_config:{"id":"conversion-mode-$1-error-invalid-regexp?-$2"}
							T : [ '轉換模式 [%1] 出錯：並非 RegExp？ %2', pattern,
									e.message ]
						}, 2, 'String_to_RegExp');
					}

					if (replace_to) {
						pattern.replace_to = replace_to;
						if (false) {
							pattern.replace = function replace(string) {
								return string.replace(pattern, replace_to);
							};
						}
						pattern.replace = pattern_replace;
					}

				} else if (pattern.charAt(0) === '\\'
						&& typeof library_namespace.wildcard_to_RegExp === 'function') {
					library_namespace.debug({
						T : [
						// gettext_config:{"id":"treat-pattern-$1-as-windows-wildcard-search-string"}
						'Treat pattern [%1] as Windows wildcard search string.'
						//
						, pattern ]
					}, 3, 'String_to_RegExp');
					pattern = new RegExp(library_namespace
							.wildcard_to_RegExp(pattern));
				}

			if (typeof pattern === 'string')
				try {
					pattern = typeof options.error_handler === 'function'
					// default unknown handler.
					? options.error_handler(pattern) : new RegExp(pattern
					// .replace(/,/g, '|')
					);
				} catch (e) {
					library_namespace.debug({
						// gettext_config:{"id":"unable-to-convert-mode-$1"}
						T : [ '無法轉換模式 [%1]！', pattern ]
					}, 3, 'String_to_RegExp');
				}
		}

		return pattern;
	}

	String_to_RegExp.default_flags = 'i';

	// 前置處理。
	String_to_RegExp.preprocessor = function(pattern) {
		var m;
		if (pattern.length < 800
				&& (m = pattern
						.match(/^／((?:＼／|[^\\\/|?*":<>／\0-\x1f]+)+)／([a-z]*)(?:\.[^.]+)?$/)))
			try {
				/**
				 * @see application.net.to_file_name()
				 */
				library_namespace.debug('因為 pattern [' + pattern
						+ '] 以 "／" 起首，可能是以 directory name / file name'
						+ ' 充當 pattern，嘗試將之還原為 regular pattern。', 2,
						'String_to_RegExp.preprocessor');

				pattern = new RegExp(m[1]
				// functional characters
				.replace(/＼/g, '\\').replace(/／/g, '/').replace(/｜/g, '|')
				//
				.replace(/？/g, '?').replace(/＊/g, '*')
				//
				.replace(/((?:^|[^\\])(?:\\\\)*)\\([\\\/|?*])/g,
				//
				function($0, $1, $2) {
					return $1 + '[\\$2' + {
						'\\' : '＼',
						'/' : '／',
						'|' : '｜',
						'?' : '？',
						'*' : '＊'
					}[$2] + ']';
				})

				// normal characters
				.replace(/＂/g, '["＂]').replace(/：/g, '[:：]').replace(/＜/g,
						'[<＜]').replace(/＞/g, '[>＞]')

				// control characters
				.replace(/_/g, '[_\\r\\n\\t\\f\\v]'), m[2]);

			} catch (e) {
			}

		return pattern;
	};

	/**
	 * 將 string 轉成 search pattern，並回傳是否 matched。
	 * 
	 * @param {String}pattern
	 *            欲轉換成 RegExp 的 pattern。
	 * @param {String}[text]
	 *            欲測試的 text。
	 * @param {Function}[unknown_handler]
	 *            當遇到不明 pattern 時的處理程序。
	 * @returns 是否 matched。
	 * 
	 * @since 2012/10/13 10:22:20
	 * 
	 * @see CeL.data.fit_filter()
	 */
	function is_matched(pattern, text, unknown_handler) {
		pattern = String_to_RegExp(pattern, unknown_handler);

		if (typeof text !== 'string')
			if (typeof text === 'undefined' || text === null)
				return pattern;
			else
				text = String(text);

		return library_namespace.is_RegExp(pattern) ? text.match(pattern)
				: text.indexOf(String(pattern)) !== NOT_FOUND;
	}

	_.is_matched = is_matched;

	var RegExp_flags = /./g.flags === 'g'
	// get RegExp.prototype.flags
	? function(regexp) {
		return regexp.flags;
	} : function(regexp) {
		// regexp = RegExp.prototype.toString.call(regexp);
		// return ('' + regexp).match(/[^\/]*$/)[0];
		regexp = '' + regexp;
		return regexp.slice(regexp.lastIndexOf('/') + 1);

		var flags = [];
		for ( var flag in RegExp_flags.flags)
			if (regexp[flag])
				flags.push(RegExp_flags.flags[flag]);
		return flags.join('');
	};

	library_namespace.RegExp_flags = RegExp_flags;

	// RegExp.prototype.flags
	// 注意: 本 shim 實際上應放置於 data.code.compatibility。惟其可能會被省略執行，因此放置於此。
	if (!('flags' in RegExp.prototype)
	//
	&& !Object.defineProperty[library_namespace.env.not_native_keyword])
		Object.defineProperty(RegExp.prototype, 'flags', {
			get : function() {
				return RegExp_flags(this);
			}
		});

	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags
	RegExp_flags.flags = {
		// Proposed for ES6
		// extended : 'x',
		global : 'g',
		ignoreCase : 'i',
		multiline : 'm',
		dotAll : 's',
		unicode : 'u',
		sticky : 'y',
		// https://github.com/tc39/proposal-regexp-match-indices
		indices : 'd'
	};

	if (Object.values) {
		_.PATTERN_RegExp_flags = Object.values(RegExp_flags.flags);
	} else {
		// e.g., @ WSH (Windows Script Host)
		_.PATTERN_RegExp_flags = [];
		(function() {
			for ( var flag in RegExp_flags.flags)
				_.PATTERN_RegExp_flags.push(RegExp_flags.flags[flag]);
		})();
	}
	// TODO: flags 只能出現一次!
	_.PATTERN_RegExp_flags = _.PATTERN_RegExp_flags.join('');
	// CeL.PATTERN_RegExp
	// [ all, pattern source, flags ]
	_.PATTERN_RegExp = new RegExp(
	// /^\/(.+)\/([iugms]*)$/
	// /^\/((?:\\[\s\S]|[^\/])+)\/([gimsuy]*)$/
	/^\/((?:\\[\s\S]|[^\/])+)\/([flags]*)$/.source.replace('flags',
			_.PATTERN_RegExp_flags));

	// CeL.PATTERN_RegExp_replacement
	// e.g., '/只/隻/i'
	_.PATTERN_RegExp_replacement = new RegExp(
	// [ all, pattern source, replace to, flags ]
	/^\/((?:\\[\s\S]|[^\/])+)\/((?:\\[\s\S]|[^\/])*)\/([flags]*)$/.source.replace(
			'flags', _.PATTERN_RegExp_flags));

	// CeL.PATTERN_RegExp_flags
	_.PATTERN_RegExp_flags = new RegExp(/^[flags]+$/.source.replace('flags',
			_.PATTERN_RegExp_flags));

	/**
	 * <code>

	use (new RegExp(regexp.source, flags)) instead.
	or even (new RegExp(regexp, flags)):
	RexExp constructor no longer throws when the first argument is a RegExp and the second argument is present. Instead it creates a new RegExp using the same patterns as the first arguments and the flags supplied by the second argument.

	</code>
	 */

	/**
	 * 重新設定 RegExp object 之 flags. change the flags of a RegExp instances.
	 * 
	 * @param {RegExp}regexp
	 *            RegExp object to set
	 * @param {String}flags
	 *            flags of RegExp
	 * @return {RegExp}
	 * @example <code>

	// 附帶 'g' flag 的 RegExp 對相同字串作 .test() 時，第二次並不會重設。
	// 因此像下面的 expression 兩次並不會得到相同結果。
	var r = /,/g, t = 'a,b';
	WScript.Echo(r.test(t) + ',' + r.test(t));

	// 改成這樣就可以了：
	var r = /,/g, t = 'a,b', s = renew_RegExp_flags(r, '-g');
	WScript.Echo(s.test(t) + ',' + s.test(t));

	// 這倒沒問題：
	r = /,/g, a = 'a,b';
	if (r.test(a))
		library_namespace.debug(a.replace(r, '_'));

	// delete r.lastIndex; 無效，得用 r.lastIndex = 0; 因此下面的亦可：
	if (r.global)
		r.lastIndex = 0;
	if (r.test(a)) {
		// ...
	}

	</code>
	 * 
	 * @see http://msdn.microsoft.com/zh-tw/library/x9h97e00(VS.80).aspx,
	 *      如果規則運算式已經設定了全域旗標，test 將會從 lastIndex 值表示的位置開始搜尋字串。如果未設定全域旗標，則 test
	 *      會略過 lastIndex 值，並從字串之首開始搜尋。
	 *      http://www.aptana.com/reference/html/api/RegExp.html
	 * @_memberOf _module_
	 */
	function renew_RegExp_flags(regexp, flags) {
		// 未指定 flags: get flags
		if (!flags) {
			flags = '';
			for ( var i in RegExp_flags.flags)
				if (regexp[i])
					flags += RegExp_flags.flags[i];
			return flags;
		}

		var a = flags.charAt(0), F = '', m;
		a = a === '+' ? 1 : a === '-' ? 0 : (F = 1);

		if (F) {
			// 無 [+-]
			F = flags;
		} else {
			// f: [+-]~ 的情況，parse flags
			for ( var i in RegExp_flags.flags)
				if ((m = flags.indexOf(RegExp_flags.flags[i], 1) !== NOT_FOUND)
						&& a || !m && regexp[i])
					F += RegExp_flags.flags[i];
		}

		// for JScript<=5
		try {
			return new RegExp(regexp.source, F);
		} catch (e) {
			// TODO: handle exception
		}
	}

	_// JSDT:_module_
	.renew_RegExp_flags = renew_RegExp_flags;

	// ---------------------------------------------------------------------//

	// Unicode category

	// 使用例之說明：
	// @see CeL.data.native for Unicode category (e.g., \p{Cf})

	if (false) {
		var
		/**
		 * 振り仮名 / 読み仮名 の正規表現。
		 * 
		 * @type {RegExp}
		 * @see [[d:Property:P1814|假名]]
		 */
		PATTERN_読み仮名 = CeL.RegExp(/^[\p{Hiragana}\p{Katakana}ー・ 　]+$/, 'u');
	}

	// https://github.com/slevithan/xregexp/blob/master/tools/output/categories.js
	// http://stackoverflow.com/questions/11598786/how-to-replace-non-printable-unicode-characters-javascript
	var Unicode_category = {
		// Control
		Cc : '\0-\x1F\x7F-\x9F',
		// Format
		Cf : '\xAD\u0600-\u0605\u061C\u06DD\u070F\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
		// Unassigned
		Cn : '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5-\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C80\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D4F-\u0D56\u0D58-\u0D5E\u0D64\u0D65\u0D76-\u0D78\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C80-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFB\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FB-\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E43-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AE\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C5-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
		// Private_Use
		Co : '\uE000-\uF8FF',
		// Surrogate
		Cs : '\uD800-\uDFFF',
		// Other
		C : '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5-\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C80\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D4F-\u0D56\u0D58-\u0D5E\u0D64\u0D65\u0D76-\u0D78\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C80-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFB\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FB-\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E43-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AE\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C5-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',

		// 振り仮名 / 読み仮名
		// http://www.unicode.org/charts/PDF/U3040.pdf
		Hiragana : '\u3041-\u3096\u309D-\u309F',
		Katakana : '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D'
	};

	if (!('unicode' in RegExp.prototype)) {
		Unicode_category.C = Unicode_category.C.replace('\uD7FC',
		// exclude surrogate pair control characters
		// (surrogate code point, \uD800-\uDFFF)
		'\uD7FC-\uD7FF\uE000');
	}

	// invalid characters @ wikitext, XML.
	Unicode_category.invalid = Unicode_category.C.replace('\0',
	// 去除 \t\n\r
	'\0-\x08\x0B\x0C\x0E');

	/**
	 * 可以使用 /\p{C}/u 之類的 RegExp。
	 * 
	 * @param {String|RegExp}source
	 *            source of RegExp instance.
	 * @param {String}[flags]
	 *            flags of RegExp instance.
	 * 
	 * @returns {RegExp}RegExp instance.
	 */
	function new_RegExp(source, flags) {
		if (has_Unicode_flag) {
			try {
				return new RegExp(source, flags);
			} catch (e) {
				// e.g., 自行設定了 Unicode_category
			}
		}

		if (library_namespace.is_RegExp(source)) {
			if (flags === undefined)
				flags = source.flags;
			source = source.source;
		}

		if (typeof flags === 'string' && flags.includes('u')) {
			if (!has_Unicode_flag)
				flags = flags.replace(/u/g, '');

			// 後處理 Unicode category。
			source = source.replace(/\\p{([A-Z][A-Za-z_]*)}/g, function(all,
					category) {
				return Unicode_category[category] || all;
			});
		}

		return new RegExp(source, flags);
	}

	new_RegExp.category = Unicode_category;

	var has_Unicode_flag;
	try {
		if (has_Unicode_flag = ('unicode' in RegExp.prototype)
				&& new RegExp(/\p{C}/, 'u')) {
			has_Unicode_flag = has_Unicode_flag.test('\u200E')
					&& has_Unicode_flag.unicode
					&& has_Unicode_flag.flags === 'u';
		}
	} catch (e) {
		has_Unicode_flag = false;
	}
	_.RegExp = new_RegExp;

	// ---------------------------------------------------------------------//

	/**
	 * <code>	2004/5/27 16:08
	將 MS-DOS 萬用字元(wildcard characters)轉成 RegExp, 回傳 pattern
	for search

	usage:
	p=new RegExp(wildcard_to_RegExp('*.*'))


	flags&1	有變化的時候才 return RegExp
	flags&2	add ^$


	萬用字元經常用在檔名的置換。
	 * 代表任意檔案名稱
	如：ls * 表示列出所有檔案名稱。
	? 則代表一個字元
	如: ls index.??? 表示列出所有 index.三個字元 的檔案名稱
	[ ] 代表選擇其中一個字元
	[Ab] 則代表 A 或 b 二者之中的一個字元
	如: ls [Ab]same 為 Asame 或 bsame
	[! ] 代表除外的一個字元
	[!Ab] 則代表 不是 A 且 不是 b 的一個字元
	如: [!0-9] 表不是數字字元
	如: *[!E] 表末尾不是 E 的檔名

	memo:
	檔案名稱不可包含字元	** 不包含目錄分隔字元 [\\/]:
	/:*?"<>|/

	</code>
	 */

	// 萬用字元 RegExp source, ReadOnly
	// wildcard_to_RegExp.w_chars = '*?\\[\\]';
	wildcard_to_RegExp.w_chars = '*?';

	function wildcard_to_RegExp(pattern, flags) {

		if (library_namespace.is_RegExp(pattern))
			return pattern;
		if (!pattern || typeof pattern !== 'string')
			return;

		var ic = wildcard_to_RegExp.w_chars, r;
		if ((flags & 1) && !new RegExp('[' + ic + ']').test(pattern))
			return pattern;

		ic = '[^' + ic + ']';
		if (false) {
			// old: 考慮 \
			r = pattern.replace(/(\\*)(\*+|\?+|\.)/g, function($0, $1, $2) {
				var c = $2.charAt(0);
				return $1.length % 2 ? $0 : $1
						+ (c === '*' ? ic + '*' : c === '?' ? ic + '{'
								+ $2.length + '}' : '\\' + $2);
			})
		}

		r = pattern

		// 處理目錄分隔字元：多轉一，'/' → '\\' 或相反
		.replace(/[\\\/]+/g, library_namespace.env.path_separator)

		// 在 RegExp 中有作用，但非萬用字元，在檔名中無特殊作用的
		.replace(/([().^$\-])/g, '\\$1')

		// * 代表任意檔案字元
		.replace(/\*+/g, '\0*')

		// ? 代表一個檔案字元
		.replace(/\?+/g, function($0) {
			return '\0{' + $0.length + '}';
		})

		// [ ] 代表選擇其中一個字元
		// pass
		.replace(/([\[\]])/g, '\\$1')

		// [! ] 代表除外的一個字元
		// pass
		// .replace(/\[!([^\]]*)\]/g, '[^$1]')

		// translate wildcard characters
		.replace(/\0+/g, ic)

		;

		// console.trace(r);

		// 有變化的時候才 return RegExp
		if (!(flags & 1) || pattern !== r) {
			try {
				pattern = new RegExp(flags & 2 ? '^' + r + '$' : r, 'i');
			} catch (e) {
				// 輸入了不正確的 RegExp：未預期的次數符號等
			}
		}

		return pattern;
	}

	_.wildcard_to_RegExp = wildcard_to_RegExp;

	function remove_Object_value(object, value) {
		for ( var i in object)
			if (object[i] === value)
				delete object[i];
	}

	_// JSDT:_module_
	.remove_Object_value = remove_Object_value;

	// string & Number 處理 -----------------------------------------------

	var PATTERN_SPACES = /[ _]+/g,
	// Punctuation marks 無實際意義的標點符號
	PUNCTUATION_MARKS = /[ _,.;:?'"`~!@#$%^&*()\/\-\[\]<>]+/g;

	// String.covers(string_1, string_2, options)
	// string_1.covers(string_2, options)
	// @see Knuth–Morris–Pratt algorithm
	/**
	 * @return true: 兩者相同, false: 兩者等長但不相同,<br />
	 *         1: str2為str1之擴展 (str2涵蓋str1), -1: str1為str2之擴展, 2: 兩者等價, 0: 皆非
	 */
	function String_covers(string_1, string_2, options) {
		// 前置作業。
		options = library_namespace.setup_options(options);

		// 預先處理函數. e.g., 是否忽略大小寫
		if (options && typeof options.preprocessor === 'function') {
			string_1 = options.preprocessor(string_1);
			string_2 = options.preprocessor(string_2);
		}

		// ignore punctuation marks
		if (options.ignore_marks) {
			string_1 = string_1.replace(PATTERN_PUNCTUATION_MARKS, '');
			string_2 = string_2.replace(PATTERN_PUNCTUATION_MARKS, '');
		} else if (options.ignore_spaces) {
			// assert: PATTERN_PUNCTUATION_MARKS including PATTERN_SPACES
			string_1 = string_1.replace(PATTERN_SPACES, '');
			string_2 = string_2.replace(PATTERN_SPACES, '');
		}

		if (string_1.length === string_2.length) {
			if (string_1 === string_2)
				return true;
			if (!options || !options.force
					|| typeof options.equals !== 'function')
				// 就算兩者等長但不相同，還是有可能等價。
				return false;
		}

		var result = 1;
		// swap: string_2 轉成長的。 (短,長)
		if (string_1.length > string_2.length) {
			result = string_2, string_2 = string_1, string_1 = result;
			result = -1;
		}

		// string_1 = string_1.replace(/\s+/g, ' ');

		string_1 = string_1.chars(true);
		string_2 = string_2.chars(true);

		var string_1_index = 0, string_2_index = 0, character_1 = string_1[0],
		// comparer
		equals = options && typeof options.equals === 'function' ? options.equals
				: String_covers.equals;

		string_2.some(function(character_2, index) {
			if (equals(character_1, character_2))
				if (++string_1_index === string_1.length) {
					string_2_index = index;
					return true;
				} else
					character_1 = string_1[string_1_index];
		});

		return string_1_index === string_1.length ? result : 0;
	}

	String_covers.equals = function(a, b) {
		return a === b;
	};

	// compare file name. 比較檔名是否相同。str2 為 str1 添加字元後的擴展？表示兩檔名等價
	String_covers.file_name_equals = function(a, b) {
		return a === b || /^[ ・.]+$/.test(a + b) || /^[-～]+$/.test(a + b)
				|| /^[［\[]+$/.test(a + b) || /^[］\]]+$/.test(a + b);
	};

	set_method(String, {
		covers : String_covers,
		similarity : similarity_coefficient
	});

	function split_String_by_length_(s, l, m) {
		var
		// less than
		lt, lt2,
		// great than
		gt,
		// index
		i = 0,
		// left count index(left length now)
		c = l,
		// text now
		t = '',
		// text index
		I = 0;
		while (I < s.length) {
			// 將lt,gt定在下一label之首尾,i為下一次搜尋起點.label定義:/<.+?>/
			if (i !== NOT_FOUND)
				if ((lt = s.indexOf('<', i)) !== NOT_FOUND) {
					if ((gt = s.indexOf('>', lt + 1)) === NOT_FOUND)
						i = lt = NOT_FOUND;
					else {
						i = gt + 1;
						while (lt !== NOT_FOUND
								&& (lt2 = s.indexOf('<', lt + 1)) !== NOT_FOUND
								&& lt2 < gt)
							lt = lt2;
					}
				} else
					i = lt = NOT_FOUND;
			if (false && s.indexOf('') !== NOT_FOUND)
				alert(i + ',' + lt + ',' + gt + ';' + l + ',' + c + '\n' + t);
			if (lt === NOT_FOUND)
				gt = lt = s.length;
			// 未來:考慮中英文大小，不分隔英文字。前提:'A'<'z'..或許不用
			while (I + c <= lt) {
				t += s.substr(I, c) + (m ? '\n' : '<br />');
				I += c;
				c = l;
			}
			t += s.slice(I, gt + 1);
			c -= lt - I;
			I = gt + 1;
		}
		return t;
	}
	/*
	 * 將字串以長l分隔, split String by fixed length. m==0: html用, 1:text.
	 */
	// split_String_by_length[generateCode.dLK]='split_String_by_length_';
	function split_String_by_length(l, m) {
		var s = this.valueOf(), t = [], sp = '<br />';
		if (!s || !l || l < 1
		// ||!String.charCodeAt: for v5.5
		|| !String.fromCharCode)
			return m ? s.gText() : s;
		// (m):這樣就不用再費心思了.不過既然都作好了,就留著吧..不,還是需要
		s = s.turnU(m);
		if (s.length <= l)
			return s;
		if (!m)
			s = s.replace(/<w?br([^>]*)>/gi, sp);

		// deal with line
		s = s.split(sp = m ? '\n' : sp);
		try {
			// 預防JS5不能push
			for (var i = 0; i < s.length; i++)
				t.push(split_String_by_length_(s[i], l, m));
		} catch (e) {
			return this.valueOf();
		}
		return t.join(sp);
	}

	/**
	 * 將字串以長 size 切割。
	 * 
	 * @param {Integer}size
	 *            切割大小。可以 ((.length / count) | 0 ) 取得。
	 * @returns {Array} chunks
	 * 
	 * @see <a
	 *      href="http://stackoverflow.com/questions/7033639/javascript-split-large-string-in-n-size-chunks"
	 *      accessdate="2015/3/2 23:27">regex - javascript: Split large string
	 *      in n-size chunks - Stack Overflow</a>
	 */
	function chunk(size) {
		if ((size |= 0) < 1)
			return [ this ];

		var index = 0, length = this.length, result = [];
		for (; index < length; index += size)
			result.push(this.substr(index, size));

		return result;
	}

	// ---------------------------------------------------------------------//

	var no_string_index;
	// for IE 6. Or use .chars(), .split(''), .charAt()
	try {
		no_string_index = '01';
		no_string_index = !(no_string_index[1] === '1');
	} catch (e) {
		// e.g., IE 6
		no_string_index = true;
	}

	// To test if RegExp.prototype has unicode flag:
	// if ('unicode' in RegExp.prototype) {}
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

	var has_spread_syntax;
	try {
		has_spread_syntax = eval("[...'ab'].join(',')==='a,b'");
	} catch (e) {
	}

	var PATTERN_char, PATTERN_char_with_combined, split_by_code_point;
	try {
		// using [\s\S] or [^] or /./s
		// @see https://github.com/tc39/proposal-regexp-dotall-flag
		// tested @ Edge/12.10240
		PATTERN_char = new RegExp(/[\s\S]/.source, 'ug');
		// 注意:因為/./u會切分[[en:Combining character#Unicode ranges]]，
		// 因此對組合字符，得要另外處理。
		PATTERN_char_with_combined = new RegExp(
				/[\s\S][\u0300-\u036F\uFE20-\uFE2F\u20D0-\u20FF\u1DC0-\u1DFF\u1AB0-\u1AFF]*/.source,
				'ug');

		/**
		 * 對於可能出現 surrogate pairs 的字串，應當以此來取代 .split('')！<br />
		 * handling of surrogate pairs / code points
		 * 
		 * TODO: 利用.split('')增進效率。
		 * 
		 * @see https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B10000_to_U.2B10FFFF
		 *      http://teppeis.hatenablog.com/entry/2014/01/surrogate-pair-in-javascript
		 */
		split_by_code_point = function(with_combined) {
			// if (has_spread_syntax && !with_combined) return [...this];
			return this.match(with_combined ? PATTERN_char_with_combined
					: PATTERN_char)
					|| [];
			// show HEX:
			// .map(function(char){return
			// char.codePointAt(0).toString(0x10).toUpperCase();});
		};
	} catch (e) {
		// 舊版。
		var PATTERN_surrogate = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
		PATTERN_char = /[\uD800-\uDBFF][\uDC00-\uDFFF]|[\s\S]/g;
		PATTERN_char_with_combined = /(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\s\S])[\u0300-\u036F\uFE20-\uFE2F\u20D0-\u20FF\u1DC0-\u1DFF\u1AB0-\u1AFF]*/g;
		split_by_code_point = function(with_combined) {
			return with_combined // || !PATTERN_surrogate
					|| PATTERN_surrogate.test(this) ? this
					.match(with_combined ? PATTERN_char_with_combined
							: PATTERN_char)
					|| [] : this.split('');
		};
	}

	// String.prototype.codePoints()
	// http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#codePoints--
	function codePoints() {
		return split_by_code_point.call(this)
		// need data.code.compatibility!
		.map(function(char) {
			return char.codePointAt(0);
		});
	}

	/**
	 * get string between head and foot.<br />
	 * 取得 text 中，head 與 foot 之間的字串。不包括 head 與 foot。<br />
	 * 可以 [3] last index 是否回傳 NOT_FOUND (-1) 檢測到底是有找到，只是回傳空字串，或是沒找到。
	 * 
	 * TODO: {RegExp}head, {RegExp}foot
	 * 
	 * @example <code>

	 // More examples: see /_test suite/test.js

	 * </code>
	 * 
	 * @param {Array}data [
	 *            text 欲篩選字串, head 首字串, foot 尾字串, start index ]
	 * 
	 * @returns [ 0: text 欲篩選字串, 1: head 首字串, 2: foot 尾字串, 3: last index, 4:
	 *          head 與 foot 之間的字串 ]
	 * 
	 * @since 2014/8/4 21:34:31
	 */
	function get_intermediate_Array(data) {
		if (data && data[0]
		// = String(data[0])
		) {
			// start index of intermediate.
			var index;
			if (!data[1])
				index = 0;
			else if ((index = data[0].indexOf(data[1], data[3])) !== NOT_FOUND)
				index += data[1].length;
			// library_namespace.debug('head index: ' + index, 4);

			if ((data[3] = index) !== NOT_FOUND
					&& (!data[2] || (data[3] = data[0].indexOf(data[2], index)) !== NOT_FOUND))
				data[4] = data[2] ? data[0].slice(index, data[3])
				//
				: index ? data[0].slice(index)
				//
				: data[0];
		}
		return data;
	}

	/**
	 * get string between head and foot.<br />
	 * 取得 text 中，head 與 foot 之間的字串。不包括 head 與 foot。<br />
	 * 回傳 undefined 表示沒找到。只是回傳空字串表示其間為空字串。
	 * 
	 * TODO: lastIndexOf()
	 * 
	 * @example <code>

	 // More examples: see /_test suite/test.js

	 * </code>
	 * 
	 * @param {String}text
	 *            欲篩選字串。
	 * @param {String}[head]
	 *            首字串。 TODO: RegExp
	 * @param {String}[foot]
	 *            尾字串。 TODO: RegExp
	 * 
	 * @returns head 與 foot 之間的字串。undefined 表示沒找到。
	 * 
	 * @since 2014/7/26 11:28:18
	 */
	function get_intermediate(text, head, foot, index, return_data) {
		if (text
		// = String(text)
		) {
			// start index of intermediate.
			if (!head) {
				index = 0;
			} else if ((index = text.indexOf(head, index | 0)) !== NOT_FOUND) {
				index += head.length;
			}
			library_namespace.debug('head index: ' + index, 4);

			if (index !== NOT_FOUND && (!foot || (foot = foot.tail
			// 可以用 {tail:'foot'} 來從結尾搜尋。from tail
			? text.lastIndexOf(foot.tail)
			// 正常:從頭搜尋。
			: text.indexOf(foot, index)) !== NOT_FOUND)) {
				head = foot ? text.slice(index, foot) : index > 0 ? text
						.slice(index) : text;
				return return_data ?
				// [ last index, head 與 foot 之間的字串 ]
				[ foot || text.length, head ] : head;
			}
		}

		if (return_data) {
			return [ NOT_FOUND, ];
		}
	}

	_.get_intermediate = get_intermediate;

	/**
	 * <code>

	// 推薦 use .find_between(), 見下一段例
	var data = html.find_between('>', '<'), text;

	text = data.search().search().search().toString();

	while (data.next()) {
		text = data.toString();
	}

	// method 1:
	while (term = terms.next()) {
		term.toString();
	}

	// method 2:
	while (typeof (text = data.search()) === 'string') {
		;
	}

	</code>
	 */
	function next_intermediate(index) {
		if (this[3] !== NOT_FOUND) {
			var data = get_intermediate(this[0], this[1], this[2], this[3],
					true);
			library_namespace.debug('Get [' + data + ']', 4);
			if ((this[3] = data[0]) !== NOT_FOUND) {
				this[4] = data[1];
				return this;
			}
		}
	}
	// find out next
	// 為避免 overwrite Array.prototype.find()，因此改名為 search。
	function search_intermediate(index) {
		this.next();
		return this;
	}
	function intermediate_result() {
		return this[3] !== NOT_FOUND && this[4] || '';
	}
	function intermediate_between() {
		return String.prototype.between.apply(this.toString(), arguments);
	}
	// 2017/1/3 13:48:21 API change:
	// set_intermediate()→find_between()
	// WARNING: 請盡可能採用find_between()，勿使用deprecated_find_between()。
	// 要用此函數，不如直接採用RegExp.prototype.exec()比較快。
	function deprecated_find_between(head, foot, index) {
		var data = [ this, head, foot, index | 0 ];
		data.next = next_intermediate;
		data.search = search_intermediate;
		data.toString = intermediate_result;
		// data.between = intermediate_between;
		return data;
	}

	/**
	 * 2017/2/15 16:5:0 API change: rename to .find_between<br />
	 * all_between()→find_between()
	 * 
	 * TODO:<br />
	 * return {Iterator} of all between
	 * 
	 * @see http://jsrocks.org/cn/2015/09/javascript-iterables-and-iterators/
	 *      http://es6.ruanyifeng.com/#docs/symbol
	 * 
	 * <code>

	// 推薦用法
	var get_next_between = html.find_between('>', '<'), text;

	while ((text = get_next_between()) !== undefined) {
		text;
	}

	</code>
	 */

	// 採用String.prototype.indexOf()以增進速度，超越RegExp.prototype.exec()。
	// @see /_test suite/test.js
	function find_between(head, foot, index) {
		// start index
		index |= 0;
		// assert: !!head && !!foot
		// && typeof head === 'string' && typeof foot === 'string'
		var text = this, head_length = head.length, foot_length = foot.length;

		function get_next_between() {
			if (index !== NOT_FOUND
					&& (index = text.indexOf(head, index)) !== NOT_FOUND) {
				var foot_index = text.indexOf(foot, index += head_length);
				if (foot_index !== NOT_FOUND) {
					var token = text.slice(index, foot_index);
					// +foot_length: search next starts from end of foot
					index = foot_index + foot_length;
					return token;
				}
				// 接下來皆無foot，則即使再存有head亦無效。
				index = NOT_FOUND;
			}
			// return undefined;
		}

		return get_next_between;
	}

	// return {Array}all matched
	function all_between(head, foot, index) {
		// start index
		index |= 0;
		// assert: !!head && !!foot
		// && typeof head === 'string' && typeof foot === 'string'
		var matched = [], head_length = head.length, foot_length = foot.length;

		while (index !== NOT_FOUND
				&& (index = this.indexOf(head, index)) !== NOT_FOUND) {
			var foot_index = this.indexOf(foot, index += head_length);
			if (foot_index === NOT_FOUND) {
				// 接下來皆無foot，則即使再存有head亦無效。
				break;
			}
			matched.push(this.slice(index, foot_index));
			// +foot_length: search next starts from end of foot
			index = foot_index + foot_length;
		}

		return matched;
	}

	// callback(token, index, foot_index);
	// 沒有輸入foot的話，則會把head拿來當作foot。
	// TODO: {RegExp}head, foot
	function each_between(head, foot, callback, thisArg, index) {
		if (Array.isArray(head) && typeof foot === 'function') {
			// shift arguments.
			index = thisArg;
			thisArg = callback;
			callback = foot;
			// for head: [head, foot]
			if (Array.isArray(head) && head.length === 2) {
				foot = head[1];
				head = head[0];
			} else {
				if (typeof head === 'string') {
					// 每個head切一段?
					library_namespace
							.error('If you needs cut string into small pieces, please using string.split().slice(1).forEach() !');
				}
				throw new TypeError('Invalid head type');
			}
		}

		// this.all_between(head, foot, index).forEach(callback, thisArg);

		// start index
		index |= 0;
		// assert: !!head && !!foot
		// && typeof head === 'string' && typeof foot === 'string'
		var head_length = head ? head.length : 0, foot_length = foot ? foot.length
				: 0, foot_index;

		if (!thisArg) {
			thisArg = this;
		}

		while (foot || !(foot_index > 0) ? index !== NOT_FOUND
		// allow null header
		&& (!head || (index = this.indexOf(head, index)) !== NOT_FOUND)
				: (index = foot_index) < this.length) {
			foot_index = this.indexOf(foot || head, index += head_length);
			if (foot_index === NOT_FOUND) {
				// 接下來皆無(foot||head)，則即使再存有head亦無效。
				if (foot) {
					break;
				}
				foot_index = this.length;
			}
			callback.call(thisArg, this.slice(index, foot_index), index,
					foot_index);
			// +foot_length: search next starts from end of foot
			index = foot_index + foot_length;
		}
	}

	// =====================================================================================================================

	function set_bind(handler, need_meny_arg) {
		if (typeof need_meny_arg !== 'boolean')
			need_meny_arg = handler.length > 1;

		return need_meny_arg ? function(args) {
			if (arguments.length < 2)
				return handler(this, args);

			// Array.from()
			args = Array.prototype.slice.call(arguments);
			args.unshift(this);
			return handler.apply(handler, args);
		} : function(args) {
			return handler(this, args);
		};
	}

	function set_bind_valueOf(handler, need_meny_arg) {
		var ReturnIfAbrupt = function(v) {
			// 尚有未竟之處。
			switch (library_namespace.is_type(v)) {
			case 'Boolean':
			case 'Number':
			case 'String':
				v = v.valueOf();
			}
			return v;
		};
		return need_meny_arg ? function(args) {
			if (arguments.length < 2)
				return handler(ReturnIfAbrupt(this), args);

			// Array.from()
			args = Array.prototype.slice.call(arguments);
			args.unshift(ReturnIfAbrupt(this));
			return handler.apply(handler, args);
		} : function(args) {
			return handler(ReturnIfAbrupt(this), args);
		};
	}

	// ReturnIfAbrupt
	var need_valueOf = false;
	String.prototype.test_valueOf = (function() {
		return function() {
			if (typeof this !== 'string')
				if (this && typeof this.valueOf() === 'string')
					need_valueOf = true;
				else
					library_namespace.error('set_bind: 無法判別是否該使用 .valueOf()！');
		};
	})();
	'.'.test_valueOf();
	try {
		delete String.prototype.test_valueOf;
	} catch (e) {
		String.prototype.test_valueOf = undefined;
	}

	_.set_bind = need_valueOf ? set_bind_valueOf : set_bind;

	/**
	 * 
	 * @param {Array}array
	 * @param {Function}[comparator]
	 * @returns
	 */
	function unique_and_sort_Array(array, comparator) {
		if (comparator) {
			array.sort(comparator);
		} else {
			array.sort();
		}

		var i = 1, j = -1;
		for (; i < array.length; i++)
			if (array[i] === array[i - 1]) {
				if (j < 0)
					j = i;
			} else if (j >= 0)
				array.splice(j, i - j), i = j, j = -1;

		if (j >= 0)
			array.splice(j, i - j);
		return array;
	}

	// -------------------------------------------
	var type_index = {
		string : 0,
		number : 1,
		boolean : 2,
		'undefined' : 3
	};
	function deprecated_unique_Array(sorted) {
		var array = [];

		if (sorted) {
			var last;
			this.forEach(function(element) {
				if (last !== element)
					array.push(element);
				last = element;
			});

		} else {
			// 以 hash 純量 index 加速判別是否重複。
			var hash = Object.create(null);
			this.forEach(function(element) {
				var type = typeof element;
				// 能確保順序不變。
				if (type in type_index) {
					// TODO: -0
					if (!(element in hash)
							|| !(type_index[type] in hash[element])) {
						array.push(element);
						(hash[element] = [])[type_index[type]] = null;
					}
				} else if (array.indexOf(element) === NOT_FOUND)
					array.push(element);
			});
		}

		return array;
	}
	// -------------------------------------------

	// @see cardinal_1()
	function unique_sorted_Array(get_key) {
		var latest_key, configured;
		var unique_array = this.filter(function(element) {
			var key = get_key ? get_key(element) : element;
			var is_different = configured ? !Object.is(latest_key, key)
					: (configured = true);
			latest_key = key;
			return is_different;
		});

		return unique_array;
	}

	/**
	 * 取交集 array_1 ∩ array_2
	 * 
	 * @param {Array}array_1
	 *            array 1
	 * @param {Array}array_2
	 *            array 2
	 * @param {Function}[key_of_item]
	 *            Function to get key of item.
	 * @param {Boolean}[sorted]
	 *            true: array_1, array_2 are sorted.
	 * 
	 * @returns {Array}intersection of array_1 and array_2
	 */
	function Array_intersection(array_1, array_2, key_of_item, sorted) {
		if (key_of_item === true) {
			sorted = true;
			key_of_item = null;
		}
		if (!sorted) {
			var sort_function = typeof key_of_item === 'function' ? function(
					_1, _2) {
				return general_ascending(key_of_item(_1), key_of_item(_2));
			} : general_ascending;
			array_1 = array_1.clone().sort(sort_function);
			array_2 = array_2.clone().sort(sort_function);
		}
		// console.log([array_1, array_2]);

		var index_of_array_1 = 0, index_of_array_2 = 0,
		// Object.create(array_1)
		result = [];
		for (; index_of_array_1 < array_1.length
				&& index_of_array_2 < array_2.length; index_of_array_1++) {
			var item = array_1[index_of_array_1];
			if (key_of_item)
				item = key_of_item(item);

			do {
				var item_2 = array_2[index_of_array_2];
				if (key_of_item)
					item_2 = key_of_item(item_2);
				if (item_2 < item) {
					index_of_array_2++;
					continue;
				}
				if (item_2 === item) {
					// 相同元素最多取 array_1, array_2 之最小個數。
					index_of_array_2++;
					result.push(item);
				}
				break;
			} while (index_of_array_2 < array_2.length);
		}
		return result;
	}

	var has_native_Map = !Map[library_namespace.env.not_native_keyword];
	// 警告: 相同的 key 只會留下一個 item！
	function Array_intersection_Map(array_1, array_2, key_of_item, sorted) {
		if (key_of_item === true) {
			sorted = true;
			key_of_item = null;
		}
		if (sorted)
			return Array_intersection(array_1, array_2, key_of_item, sorted);

		// @see function unique_Array()
		var map = new Map;
		function set_item(item) {
			var key = key_of_item ? key_of_item(item) : item;
			if (!map['has'](key))
				map['set'](key, /* item */null);
		}
		array_1.forEach(set_item);
		var result = array_2.filter(function(item) {
			var key = key_of_item ? key_of_item(item) : item;
			return map['has'](key);
		});
		return result;
	}

	/**
	 * Count occurrence of $search in string.<br />
	 * 計算 string 中出現 search 之次數。<br />
	 * 
	 * 用 s/// 亦可 @ perl
	 * 
	 * @param {String}string
	 *            在 string 中搜尋。
	 * @param {String|RegExp}search
	 *            搜尋對象。
	 * @param {Integer}[position]
	 *            開始搜尋的位置(start index)。
	 * 
	 * @returns {Integer} string 中出現 search 之次數。
	 * 
	 * @see http://jsperf.com/count-string-occurrence-in-string,
	 *      http://jsperf.com/count-the-number-of-occurances-in-string
	 *      http://stackoverflow.com/questions/881085/count-the-number-of-occurences-of-a-character-in-a-string-in-javascript
	 * 
	 * @since 2013/2/13 11:12:38 重構
	 * @since 2014/8/11 12:54:34 重構
	 */
	function count_occurrence(string, search, position) {
		// 正規化 position 成 index (0, 1, ..)。
		// 注意:過大的 position 在 |0 時會變成負數!
		if (isNaN(position) || (position |= 0) < 0)
			position = 0;

		if (position > 0)
			string = string.slice(position);

		return string.split(search).length - 1;

		// 以下放棄。

		if (library_namespace.is_RegExp(search))
			return (string = (position > 0 ? string.slice(position) : string)
					.match(search)) ? string.length : 0;

		// 正規化 search。
		if (!search || !(search = String(search)))
			return 0;

		// 使用 String.prototype.indexOf (searchString, position)
		var count = 0, length = search.length;

		while ((position = string.indexOf(search, position)) !== NOT_FOUND)
			count++, position += length;

		return count;
	}

	function determine_line_separator(text) {
		var matched, PATTERN = /\r?\n|\r/g, rn = 0, r = 0, n = 0;
		while (matched = PATTERN.exec(text)) {
			if (matched[0] === '\r\n')
				rn++;
			else if (matched[0] === '\n')
				n++;
			else
				r++;
		}

		if (rn > n && rn > r) {
			return '\r\n';
		}
		if (n > r && n > rn) {
			return '\n';
		}
		if (r > n && r > rn) {
			return '\r';
		}

		return library_namespace.env.line_separator;
	}

	_.determine_line_separator = determine_line_separator;

	/**
	 * 取至小數 digits 位， 肇因： JScript即使在做加減運算時，有時還是會出現 3*1.6=4.800000000000001,
	 * 2.4/3=0.7999999999999999 等數值。此函數可取至 1.4 與 0.1。 c.f., round()
	 * 
	 * @see Number.prototype.toLocaleString()
	 *      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
	 * 
	 * @param {Number}[decimals]
	 *            1,2,...: number of decimal places shown
	 * @param {Number}[max]
	 *            maximum decimals. max===0:round() else floor()
	 * 
	 * @return {Number}取至小數 digits 位後之數字。
	 * 
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=5856
	 *      IEEE754の丸め演算は最も報告されるES3「バグ」である。 http://www.jibbering.com/faq/#FAQ4_6
	 *      http://en.wikipedia.org/wiki/Rounding
	 * 
	 * @example <code>
	 * var d=new Date,v=0.09999998,i=0,a;
	 * for(;i<100000;i++)a=v.to_fixed(2);
	 * alert(v+'\n→'+a+'\ntime:'+format_date(new Date-d));
	 * </code>
	 * 
	 * @_memberOf _module_
	 */
	function slow_to_fixed(decimals, max) {
		var value = this.valueOf(), i, negative;

		if (isNaN(value))
			return value;

		if (isNaN(decimals) || (decimals = Math.floor(decimals)) < 0) {
			// TODO: using Number.EPSILON

			// 內定：10位
			decimals = 10;
		} else if (decimals > 20)
			// 16: Math.ceil(Math.abs(Math.log10(Number.EPSILON)))
			decimals = 16;

		if (!max && Number.prototype.toFixed) {
			// 去掉末尾的0。必須預防 `(49.5).to_fixed(0)`。
			return parseFloat(value.toFixed(decimals).replace(/\.0+$/, ''));
		}

		if (value < 0)
			// 負數
			negative = true, value = -value;

		value = value.toString(10);
		i = value.indexOf('e');
		if (i !== NOT_FOUND) {
			// e-\d: 數字太小.
			return value.charAt(i + 1) === '-' ? 0 : value;
		}

		library_namespace.debug(value, 2);
		// TODO: using +.5 的方法
		// http://clip.artchiu.org/2009/06/26/%E4%BB%A5%E6%95%B8%E5%AD%B8%E7%9A%84%E5%8E%9F%E7%90%86%E8%99%95%E7%90%86%E3%80%8C%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5%E3%80%8D/
		i = value.indexOf('.');
		if (i !== NOT_FOUND && i + 1 + decimals < value.length) {
			if (max) {
				value = '00000000000000000000' + Math.round(
				//
				value.slice(0, i++) + value.substr(i, decimals)
				//
				+ '.' + value.charAt(i + decimals)).toString(10);
				if (value != 0)
					library_namespace.debug(value + ',' + value.length + ','
							+ decimals + ','
							+ value.substr(0, value.length - decimals) + ','
							+ value.substr(max), 2);
				max = value.length - decimals;
				value = value.slice(0, max) + '.' + value.substr(max);
			} else
				value = value.slice(0, i + 1 + decimals);
		}

		return value ? parseFloat((negative ? '-' : '') + value) : 0;
	}

	// (15*1.33).to_fixed()===19.95

	// old:very slow
	function deprecated_to_fixed(d, m) {
		var v = this.valueOf(), i;
		if (isNaN(v))
			return v;
		if (isNaN(d) || d < 0)
			d = 8; // 內定：8位
		if (!m) {
			v = Math.round(Math.pow(10, d) * v);
			v = v < 0 ? '-' + '0'.repeat(d) + (-v) : '0'.repeat(d) + v;
			v = v.slice(0, i = v.length - d) + '.' + v.substr(i);
		} else if (i = (v = '' + v).indexOf('.') + 1)
			v = v.slice(0, i + (d ? d : d - 1));
		return parseFloat(v || 0);
	}

	if (false) {
		var addDenominationSet = {
			a : ',,,,'.split(',')
		},
		// 增添單位
		addDenomination = function addDenomination(a, b) {
			TODO;
		};
	}

	/**
	 * 取至小數 digits 位，<br />
	 * 肇因： JScript即使在做加減運算時，有時還是會出現 3*1.6=4.800000000000001,<br />
	 * 2.4/3=0.7999999999999999 等數值。此函數可取至 1.4 與 0.1，避免 <a
	 * href="http://en.wikipedia.org/wiki/Round-off_error" accessdate="2012/9/19
	 * 22:21" title="Round-off error">round-off error</a>。<br />
	 * c.f., Math.round()
	 * 
	 * @param {Number}[decimals]
	 *            1,2,..: number of decimal places shown.
	 * @return 取至小數 digits 位後之數字。
	 * 
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=5856
	 *      IEEE754の丸め演算は最も報告されるES3「バグ」である。 http://www.jibbering.com/faq/#FAQ4_6
	 *      http://en.wikipedia.org/wiki/Rounding
	 * 
	 * @example <code>
	var d = new Date, v = 0.09999998, i = 0, a;
	for (; i < 100000; i++)
		a = v.to_fixed(2);
	alert(v + '\n→' + a + '\ntime:' + format_date(new Date - d));
	 * </code>
	 * 
	 * @_memberOf _module_
	 */
	function native_to_fixed(decimals) {
		// (21.1*2006).toFixed(11) === "42326.60000000001"
		// (21.1*200006).toFixed(9)==="4220126.600000001"
		// 256738996346789.1.toFixed(10)==="256738996346789.0937500000"
		return decimals <= 0 ? Math.round(this) : parseFloat(this
				.toFixed(decimals || 12));
	}

	var to_fixed = slow_to_fixed;
	_.to_fixed = slow_to_fixed;

	/**
	 * non-negative modulo, positive modulo. 保證 modulo 結果 >=0。 轉成最接近 0 之正 index。
	 * 
	 * @param {Number}dividend
	 *            被除數。
	 * @param {Number}divisor
	 *            除數。
	 * 
	 * @returns {Number}remainder 餘數
	 */
	function non_negative_modulo(dividend, divisor) {
		if (false)
			return ((dividend % divisor) + divisor) % divisor;

		if ((dividend %= divisor) < 0)
			dividend += divisor;
		return dividend;
	}

	/**
	 * <code>
	var sourceF=WScript.ScriptName,targetF='test.js';simpleWrite('tmp.js',alert+'\n'+simpleRead+'\n'+simpleWrite+'\nvar t="",ForReading=1,ForWriting=2,ForAppending=8\n,TristateUseDefault=-2,TristateTrue=-1,TristateFalse=0\n,WshShell=WScript.CreateObject("WScript.Shell"),fso=WScript.CreateObject("Scripting.FileSystemObject");\nt='+'data.native'(simpleRead(sourceF),80)+';\nsimpleWrite("'+targetF+'",t);//eval(t);\nalert(simpleRead("'+sourceF+'")==simpleRead("'+targetF+'")?"The same (test dQuote OK!)":"Different!");');//WshShell.Run('"'+getFolder(WScript.ScriptFullName)+targetF+'"');

	//	determine quotation mark:輸入字串，傳回已加'或"之字串。
	dQuote.qc=function(c,C){
	return c<32?'\\'+c:C;
	};

	TODO:
	use JSON.stringify()

	</code>
	 * 
	 * @see JSON.stringify()
	 */
	// string,分割長度(會採用'~'+"~"的方式),separator(去除末尾用)
	function dQuote(s, len, sp) {
		var q;
		s = String(s);
		if (sp)
			// 去除末尾之sp
			s = s.replace(new RegExp('[' + sp + ']+$'), '');
		if (isNaN(len) || len < 0)
			len = 0;
		if (len) {
			var t = '';
			for (; s;)
				t += '+' + dQuote(s.slice(0, len))
				// '\n':line_separator
				+ '\n', s = s.substr(len);
			return t.substr(1);
		}

		// test用
		if (false && len) {
			var t = '';
			for (; s;)
				t += 't+=' + dQuote(s.slice(0, len)) + '\n', s = s.substr(len);
			return t.substr(3);
		}

		s = s.replace(/\\/g, '\\\\').replace(/\r/g, '\\r')
		//
		.replace(/\n/g, '\\n')
		// \b,\t,\f

		// 轉換控制字符
		.replace(/([\0-\37\x7f\xff])/g, function($0, $1) {
			var c = $1.charCodeAt(0);
			return c < 8 * 8 ? '\\' + c.toString(8) : '\\x'
			//
			+ (c < 0x10 ? '0' : '') + c.toString(0x10);
		})
		// .replace(/([\u00000100-\uffffffff])/g, function($0, $1) {})
		;
		if (false) {
			q = s.length;
			while (s.charAt(--q) == sp)
				;
			s = s.slice(0, q + 1);
		}
		if (s.indexOf(q = "'") !== NOT_FOUND)
			q = '"';
		if (s.indexOf(q) !== NOT_FOUND) {
			library_namespace.debug(
			//
			"Can't determine quotation mark, the resource may cause error.\n"
					+ s);
			s = s.replace(new RegExp(q = "'", 'g'), "\\'");
		}
		return q + s + q;
	}

	_.dQuote = dQuote;

	// ----------------------------------------------------
	// 可以處理 circular 的 JSON.stringify()，以及可以復原的 JSON.parse()。

	// 盡量找不會用到，又不包含特殊字元的字串作為識別碼。
	var default_KEY_reference = 'REF|';

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
	// https://github.com/WebReflection/circular-json/blob/master/src/circular-json.js

	// https://stackoverflow.com/questions/11616630/json-stringify-avoid-typeerror-converting-circular-structure-to-json
	function create_reference_map(object, recover_value, KEY_reference) {
		if (KEY_reference === undefined) {
			KEY_reference = default_KEY_reference;
		}

		// e.g., reference_map[{k:0}] = 'REF|0'
		// reference_list = [ {k:0}, ... ]
		var reference_map = new Map, reference_hash = Object.create(null), index = 0;

		return JSON.stringify(object, function(key, value) {
			// console.log([ this, key, value ]);

			// only objects may circular
			if (typeof value === 'object') {
				// return a reference to the value if it had beed processed
				if (reference_map.has(value))
					return reference_map.get(value);

				// record the value

				// find a key that is not in reference_hash or we will be
				// confused if there are duplicate keys
				while ((key = KEY_reference + index++) in reference_hash) {
					if (recover_value) {
						throw new Error('create_reference_map: Invalid index '
								+ key + '. It should not happen.');
					}
				}
				// assert: typeof key!=='object', or will be traversed by
				// JSON.stringify()

				reference_hash[key] = value;
				reference_map.set(value, key);

			} else if (typeof value !== 'object' && recover_value
					&& (value in reference_hash)) {
				// recover value
				this[key] = reference_hash[value];

			} else if (typeof value === 'string' && !recover_value
					&& value.startsWith(KEY_reference)) {
				throw new Error('create_reference_map: '
				//
				+ 'You should specify another KEY_reference instead of '
						+ JSON.stringify(KEY_reference) + '. Confused value: '
						+ value);
			}

			return value;
		});
	}

	// KEY_reference: Any value of object wont starts with KEY_reference
	// 若是有任何一個value包含了 default_KEY_reference + 數字的格式，則需要另外指定 KEY_reference。
	function stringify_circular(object, KEY_reference) {
		return create_reference_map(object, false, KEY_reference);
	}

	function parse_circular(json_string, KEY_reference) {
		var parsed = JSON.parse(json_string);
		// stringify again, using the same algorithm as JSON.stringify() in
		// JSON.stringify_circular().
		create_reference_map(parsed, true, KEY_reference);

		return parsed;
	}

	// old JScript engine do not have JSON
	if (typeof JSON === 'object' && typeof JSON.parse === 'function') {
		set_method(JSON, {
			stringify_circular : stringify_circular,
			parse_circular : parse_circular
		});
	}

	// ----------------------------------------------------

	_// JSDT:_module_
	.
	/**
	 * check input string send to SQL server
	 * 
	 * @param {String}
	 *            string input string
	 * @return {String} 轉換過的 string
	 * @since 2006/10/27 16:36
	 * @see from lib/perl/BaseF.pm (or program/database/BaseF.pm)
	 * @_memberOf _module_
	 */
	checkSQLInput = function(string) {
		if (!string)
			return '';

		// 限制長度 maximum input length
		if (maxInput && string.length > maxInput)
			string = string.slice(0, maxInput);

		return string
		// for \uxxxx
.replace(/\\u([\da-f]{4})/g, function($0, $1) {
			return String.fromCharCode($1);
		}).replace(/\\/g, '\\\\')

		// .replace(/[\x00-\x31]/g,'')
		.replace(/\x00/g, '\\0')

		// .replace(/\x09/g,'\\t')
		// .replace(/\x1a/g,'\\Z')

		// .replace(/\r\n/g,' ')
		.replace(/\r/g, '\\r').replace(/\n/g, '\\n')

		// .replace(/"/g,'\\"')
		.replace(/'/g, "''");
	};

	_// JSDT:_module_
	.
	/**
	 * 轉換字串成數值，包括分數等。分數亦將轉為分數。
	 * 
	 * @param {String}
	 *            number 欲轉換之值。
	 * @return
	 * @_memberOf _module_
	 */
	parse_number = function(number) {
		var m = typeof number;
		if (m === 'number')
			return number;
		if (!number || m !== 'string')
			return NaN;

		number = number.replace(/(\d),(\d)/g, '$1$2');
		if (m = number.match(/(-?[\d.]+)\s+([\d.]+)\/([\d.]+)/)) {
			var p = parseFloat(m[1]), q = parseFloat(m[2]) / parseFloat(m[3]);
			return p + (m[1].charAt(0) === '-' ? -q : q);
		}
		if (m = number.match(/(-?[\d.]+)\/([\d.]+)/))
			// new quotient(m[1],m[2])
			return parseFloat(m[1]) / parseFloat(m[2]);

		if (false) {
			try {
				return isNaN(m = parseFloat(number)) ?
				// TODO: security hole
				eval(number) : m;
			} catch (e) {
				return m;
			}
		}
	};

	/**
	 * filter object. .map() of {Object}<br />
	 * for Object.filter()
	 * 
	 * @param {Object}object
	 *            object to filter
	 * @param {Function}filter
	 *            callback/receiver to filter the value. <br />
	 *            filter(value, key, object) is true: will be preserved.
	 * 
	 * @returns filtered object
	 */
	function Object_filter(object, filter) {
		if (typeof filter !== 'function' || typeof object !== 'object')
			return object;

		var key, delete_keys = [];
		for (key in object) {
			if (!filter(object[key], key, object))
				// 在這邊 delete object[key] 怕會因執行環境之不同實作方法影響到 text 的結構。
				delete_keys.push(key);
		}

		if (delete_keys.length > 0)
			delete_keys.forEach(function(key) {
				delete object[key];
			});
	}

	var has_spread_operator, clone_Object;
	try {
		has_spread_operator = eval('clone_Object=function(object){return {...object};};');
	} catch (e) {
		// TODO: handle exception
	}

	/**
	 * clone object.<br />
	 * for Object.clone()
	 * 
	 * @param {Object}object
	 *            object to clone
	 * @param {Boolean}deep
	 *            deep clone / with trivial
	 * 
	 * @returns {Object}cloned object
	 * 
	 * @see clone() @ CeL.data
	 * @see https://www.bram.us/2018/01/10/javascript-removing-a-property-from-an-object-immutably-by-destructuring-it/
	 * @see `return {...object}` :
	 *      https://juejin.im/post/5b2a186cf265da596d04a648
	 */
	var Object_clone = function clone(object, deep, copy_to) {
		if (!object || typeof object !== 'object') {
			// assert: object is 純量。
			return object;
		}

		// for read-only??
		// return Object.create(object);

		if (deep) {
			// @see
			// http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-an-object
			return JSON.parse(JSON.stringify(object));
		}

		if (!copy_to) {
			if (Array.isArray(object)) {
				// for {Array}
				return object.clone();
			}

			if (clone_Object) {
				return clone_Object(object);
			}
		}

		// shallow clone Object.
		return Object.assign(copy_to || Object.create(
		// copy prototype
		Object.getPrototypeOf(object)), object);
	};

	/**
	 * Test if no property in the object.<br />
	 * for Object.is_empty(), Object.isEmpty()
	 * 
	 * for ArrayLike, use .length instead. This method includes non-numeric
	 * property.
	 * 
	 * @param {Object}object
	 *            object to test
	 * 
	 * @returns {Boolean}the object is empty.
	 * 
	 * @see CeL.is_empty_object()
	 * @see http://stackoverflow.com/questions/3426979/javascript-checking-if-an-object-has-no-properties-or-if-a-map-associative-arra
	 */
	function Object_is_empty(object) {
		if (object !== null)
			for ( var key in object) {
				if (!Object.hasOwn || Object.hasOwn(object, key)) {
					return false;
				}
			}
		return true;
	}

	// Object.clean() 從 object 中移除所有項目。
	// 通常用於釋放記憶體。 Usually used to release memory.
	// cf. array.truncate()
	// {Boolean|Natural}deepth=1: 清理到 object 底下底幾層。
	function Object_clean(object, deepth) {
		if (!object || typeof object !== 'object')
			return;

		if (deepth > 0 && deepth !== true)
			deepth--;

		Object.keys(object).forEach(function(key) {
			// 當有引用重要物件時，不應該採用 deep。
			if (deepth)
				Object_clean(object[key], deepth);
			delete object[key];
		});
	}

	// Object.reverse_key_value({a:b}) → {b:a}
	function Object_reverse_key_value(object) {
		var new_object = Object.create(null);
		if (!object)
			return new_object;

		for ( var key in object) {
			if (!Object.hasOwn || Object.hasOwn(object, key)) {
				new_object[object[key]] = key;
			}
		}
		return new_object;
	}

	/**
	 * Count properties of the object.<br />
	 * for Object.size()
	 * 
	 * for ArrayLike, use .length instead. This method will count non-numeric
	 * properties.
	 * 
	 * @param {Object}object
	 *            object to count properties
	 * 
	 * @returns {Boolean}properties count
	 * 
	 * @see http://stackoverflow.com/questions/5223/length-of-a-javascript-object-that-is-associative-array
	 */
	function Object_size(object) {
		if (object === null)
			return 0;
		var count = 0;
		for ( var key in object) {
			if (!Object.hasOwn || Object.hasOwn(object, key)) {
				count++;
			}
		}
		return count;
	}

	function the_same_content(value_1, value_2) {
		if (value_1 === value_2)
			return true;
		// @see Object.is()
		// check NaN. May use Number.isNaN() as well.
		if (value_1 !== value_1 && value_2 !== value_2)
			return true;
		if (typeof value_1 !== 'object' || typeof value_2 !== 'object')
			return false;

		// TODO: adapt for Map, Set, ...

		var keys_1 = Object.keys(value_1), keys_2 = Object.keys(value_2);
		if (keys_1.length !== keys_2.length)
			return false;

		for (var index = 0; index < keys_1.length; index++) {
			var key = keys_1[index];
			if (!(key in value_2)
					|| !the_same_content(value_1[key], value_2[key]))
				return false;
		}

		return true;
	}

	set_method(Object, {
		filter : Object_filter,
		clone : Object_clone,
		is_empty : Object_is_empty,
		the_same_content : the_same_content,
		clean : Object_clean,
		reverse_key_value : Object_reverse_key_value,
		size : Object_size
	});

	// 非 deep, 淺層/表面 clone/copy: using Array.from().
	var Array_clone = Array.prototype.slice;
	Array_clone = Array_clone.call.bind(Array_clone);
	(function() {
		var a = [ 2, 3 ], b = Array_clone(a);
		if (b.join(',') !== '2,3')
			Array_clone = function clone() {
				// Array.prototype.slice.call(array);
				// library_namespace.get_tag_list():
				// Array.prototype.slice.call(document.getElementsByTagName(tagName));
				return this.slice(0);
			};
	})();
	// or use Array.from(): https://kknews.cc/zh-tw/code/x625ppg.html
	// Array.prototype.clone = function() { return Array.from(this); };

	// 將 element_toPush 加入 array_pushTo 並篩選重複的（本來已經加入的並不會變更）
	// array_reverse[value of element_toPush]=index of element_toPush
	function pushUnique(array_pushTo, element_toPush, array_reverse) {
		if (!array_pushTo || !element_toPush)
			return array_pushTo;
		var i;
		if (!array_reverse)
			for (array_reverse = new Array, i = 0; i < array_pushTo; i++)
				array_reverse[array_pushTo[i]] = i;

		if (typeof element_toPush != 'object')
			i = element_toPush, element_toPush = new Array, element_toPush
					.push(i);

		var l;
		for (i in element_toPush)
			if (!array_reverse[element_toPush])
				// array_pushTo.push(element_toPush),array_reverse[element_toPush]=array_pushTo.length;
				array_reverse[array_pushTo[l = array_pushTo.length] = element_toPush[i]] = l;

		return array_pushTo;
	}

	/**
	 * append/merge to original Array.<br />
	 * Array.prototype.concat does not change the existing arrays, it only
	 * returns a copy of the joined arrays.
	 * 
	 * @param {Array}array
	 *            添加至此 Array list.
	 * @param {Array}list
	 *            欲添加的 Array list. TODO: 若非Array，則會當作單一元素 .push()。
	 * @param {Integer}index
	 *            從 list[index] 開始 append。
	 * 
	 * @returns this
	 */
	function append_to_Array(list, index) {
		if (Array.isArray(list) && (index ? 0 < (index = parseInt(index))
		// TODO: for index < 0
		&& index < list.length : list.length > 0)) {
			if (index > 0) {
				list = Array.prototype.slice.call(list, index);
			}
			// 警告: 當 list 太大時可能產生 RangeError: Maximum call stack size exceeded
			try {
				Array.prototype.push.apply(this, list);
			} catch (e) {
				while (index < list.length)
					Array.prototype.push.call(this, list[index++]);
			}
			// return this.concat(list);
			// return Array.prototype.concat.apply(this, arguments);
		}

		return this;
	}

	// count elements that has something
	if (false) {
		Array.prototype.count_things = function() {
			return this.reduce(function(count, e) {
				return e ? count + 1 : count;
			}, 0);
		};
	}

	// Array.prototype.frequency()
	// values count, 發生率
	function array_frequency(select_max, target) {
		var count = 0;
		if (target !== undefined) {
			this.forEach(library_namespace.is_RegExp(pattern) ? function(item) {
				if (target.test(item))
					count++;
			} : function(item) {
				if (item === target)
					count++;
			});
			return count;
		}

		// new Map()
		var hash = Object.create(null);
		if (!select_max) {
			this.forEach(function(item) {
				if (item in hash) {
					hash[item]++;
				} else
					hash[item] = 1;
			});
			return hash;
		}

		var max_count = 0, max_index;
		this.forEach(function(item, index) {
			var count;
			if (item in hash) {
				count = ++hash[item];
			} else
				count = hash[item] = 1;
			if (select_max === true) {
				if (max_count < count) {
					max_count = count;
					max_index = index;
				}
			} else if (max_count <= count) {
				if (max_count < count
				// select_max = 1: maximum case 也選擇較大的 item
				// select_max = -1: min case 選擇較小的item
				|| !(select_max < 0
				//
				? this[max_index] < (isNaN(item) ? item : +item)
				//
				: this[max_index] > (isNaN(item) ? item : +item)))
					max_index = index;
				max_count = count;
			}
		}, this);
		// hash[this[max_index]] === max_count
		return {
			hash : hash,
			value : this[max_index],
			count : max_count,
			index : max_index
		};
	}

	/**
	 * <code>

	// to inherit from native object:

	function Child() {
		// Parent: native object
		var instance = new Parent;

		// do something need to apply arguments
		;

		// The same as `instance.__proto__ = Child.prototype;`
		Object.setPrototypeOf(instance, Child.prototype);
		// ↑ ** if there is no prototype chain, we should copy the properties manually.

		// do something need to initialize
		;

		return instance;
	}

	// setup inheritance: only works for prototype chain.
	// The same as `Child.prototype = new Parent;`
	Object.setPrototypeOf(Child.prototype, Parent.prototype);

	// setup Child.prototype.attributes
	Child.prototype.property = property;
	Child.prototype.method = function () { };


	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create

	</code>
	 */

	// subclass and inherit from Array
	// 注意: 此處的繼承重視原生 Array 之功能，因此 instance instanceof SubArray 於 IE8 等舊版中不成立。
	function new_Array_instance(array_type, no_proto, items) {
		var instance;
		// 除 Array 外，其他 TypedArray，如 Uint32Array 有不同行為。
		// 此處僅處理 constructor。
		if (array_type === Array)
			if (items && 1 < items.length)
				// 將 items copy 至 this instance。
				Array.prototype.push.apply(instance = new Array, items);
			else
				instance = new Array(items && items.length ? items[0] : 0);
		else
			instance = items ? new array_type(items[0]) : new array_type();

		if (no_proto)
			// if there is no prototype chain, we should copy the properties
			// manually.
			// TODO: 此方法極無效率！此外，由於並未使用 .prototype，因此即使採用 delete
			// instance[property]，也無法得到預設值，且不能探測是否為 instance 特有 property。
			set_method(instance, this.prototype, null);
		else {
			Object.setPrototypeOf(instance, this.prototype);
			// TODO: NG:
			// instance.prototype = Object.create(this.prototype);
		}

		return instance;
	}

	function Array_derive(sub_class, array_type) {
		if (!array_type)
			array_type = Array;

		Object.setPrototypeOf(sub_class.prototype, array_type.prototype);
		// TODO: NG:
		// sub_class.prototype = Object.create(array_type.prototype);

		return new_Array_instance.bind(sub_class, array_type, false);
	}

	function Array_derive_no_proto(sub_class, array_type) {
		// e.g., IE8
		return new_Array_instance.bind(sub_class, array_type || Array, true);
	}

	/**
	 * 
	 * @example<code>

	function SubArray() {
		var instance = SubArray.new_instance(arguments);

		// do something need to initialize
		;

		return instance;
	}
	// setup inheritance
	SubArray.new_instance = Array.derive(SubArray);
	// setup SubArray.prototype
	SubArray.prototype.property = property;
	SubArray.prototype.method = function () { };


	// manually test code

	// setup

	// see data.code.compatibility.
	if (!Object.setPrototypeOf && typeof {}.__proto__ === 'object')
		Object.setPrototypeOf = function (object, proto) { object.__proto__ = proto; return object; };

	Array.derive = Object.setPrototypeOf ? Array_derive : Array_derive_no_proto;


	// main test code

	function SubArray() {
		var instance = new_instance(arguments);

		// do something need to initialize
		;

		return instance;
	}
	// setup inheritance
	var new_instance = Array.derive(SubArray);
	// setup SubArray.prototype
	SubArray.prototype.last = function () { return this.at(-1); };

	var a = new SubArray(2, 7, 4), b = [4]; a[6] = 3; a.push(8);
	if (Object.setPrototypeOf && !(a instanceof SubArray) || !(a instanceof Array) || a[1] !== 7 || a.length !== 8 || a.last() !== 8 || b.last) console.error('failed');



	function SubUint32Array() {
		var instance = SubUint32Array.new_instance(arguments);

		// do something need to initialize
		;

		return instance;
	}
	// setup inheritance
	SubUint32Array.new_instance = Array.derive(SubUint32Array, Uint32Array);
	// setup SubUint32Array.prototype
	SubUint32Array.prototype.last = function () { return this.at(-1); };

	var a = new SubUint32Array(8, 7, 4), b = new Uint32Array(4); a[6] = 3; a[7] = 5; a[8] = 4;
	if (Object.setPrototypeOf && !(a instanceof SubUint32Array) || !(a instanceof Uint32Array) || a[8] || a[6] !== 3 || a.length !== 8 || a.last() !== 5 || b.last) console.error('failed');


	</code>
	 */

	set_method(Array, {
		// for data.clone()
		clone : Array_clone,
		derive : Object.setPrototypeOf ? Array_derive : Array_derive_no_proto,
		intersection : has_native_Map ? Array_intersection_Map
				: Array_intersection
	});

	// ------------------------------------
	// comparator, compare_function, sort_function for array.sort()

	// 用於由小至大升序序列排序, ascending, smallest to largest, A to Z。
	// 注意：sort 方法會在原地排序 Array 物件。
	// @see std::less<int>()
	function general_ascending(a, b) {
		// '12/34', '56/78' 可以比大小，但不能相減。
		// 但這對數字有問題: '1212'<'987'
		// 若對一般物件，採用 .sort() 即可。
		return a < b ? -1 : a > b ? 1 : 0;
	}

	function general_descending(a, b) {
		return a < b ? 1 : a > b ? -1 : 0;
	}

	function Number_ascending(a, b) {
		// 升序序列排序: 小→大
		return a - b;

		// '12/34', '56/78' 可以比大小，但不能相減。
		// 但這對數字有問題: '1212'<'987'
		// 若對一般物件，採用 .sort() 即可。
		return a < b ? -1 : a > b ? 1 : 0;

		return _1 - _2;
		return Math.sign(a - b);
	}

	function Number_descending(a, b) {
		// 降序序列排序: 大→小
		return b - a;

		return a < b ? 1 : a > b ? -1 : 0;
	}

	_.general_ascending = general_ascending;
	_.general_descending = general_descending;
	_.ascending = Number_ascending;
	_.descending = Number_descending;

	/**
	 * 以二分搜尋法(binary search)搜尋已排序的 array。<br />
	 * binary search an Array.<br /> ** 注意：使用前須先手動將 array 排序！<br />
	 * TODO: 依資料分布:趨近等差/等比/對數等，以加速搜尋。
	 * 
	 * cf. Array.prototype.search()
	 * 
	 * @param {Array}array
	 *            由小至大已排序的 array。
	 * @param value
	 *            value to search.
	 * @param {Object}[options]
	 *            附加參數/設定特殊功能與選項 options = {<br />
	 *            found : found_callback(index, not_found:
	 *            closed/is_near/未準確相符合，僅為趨近、近似),<br />
	 *            near : not_found_callback(較小的 index, not_found),<br />
	 *            start : start index,<br />
	 *            last : last/end index,<br />
	 *            length : search length.<br />
	 *            <em>last 與 length 二選一。</em><br /> }
	 * 
	 * @returns default: 未設定 options 時，未找到為 NOT_FOUND(-1)，找到為 index。
	 * 
	 * @since 2013/3/3 19:30:2 create.<br />
	 */
	function search_sorted_Array(array, value, options) {
		if (library_namespace.is_RegExp(value)
				&& (!options || !options.comparator)) {
			// 處理搜尋 {RegExp} 的情況: 此時回傳最後一個匹配的 index。欲找首次出現，請用 first_matched()。
			if (value.global) {
				library_namespace
						.error('search_sorted_Array: 當匹配時，不應採用 .global！ '
								+ value);
			}
			if (!options) {
				options = Object.create(null);
			}
			options.comparator = function(v) {
				return value.test(v) ? -1 : 1;
			};
			if (!('near' in options)) {
				options.near = true;
			}
		} else if (!options
		//
		&& (typeof value === 'object' || typeof value === 'function')) {
			options = value;
			value = undefined;
		}

		if (typeof options === 'function') {
			options = {
				comparator : options
			};
		} else if (typeof options === 'boolean' || Array.isArray(options)) {
			options = {
				found : options
			};
		} else if (library_namespace.is_digits(options)) {
			options = {
				start : options
			};
		} else if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		var callback, comparison, not_found = true,
		//
		comparator = options.comparator
				|| (typeof array[0] === 'number' ? Number_ascending
						: search_sorted_Array.default_comparator),
		//
		start = (options.start | 0) || 0, small = start, index = start,
		//
		big = (options.last | 0)
				|| (options.length ? options.length | 0 + start - 1
						: array.length - 1);

		// main comparare loop
		// http://codereview.stackexchange.com/questions/1480/better-more-efficient-way-of-writing-this-javascript-binary-search
		while (true) {
			if (small > big) {
				if (comparison > 0 && index > start)
					// 修正成較小的 index。
					// 除非是 [2,3].search_sorted(1.5,{found:1})，
					// 否則 assert: big + 1 === start === index
					index--;
				break;

			} else {
				// 首引數應該採用最多資訊者，因此array[]擺在value前。
				comparison = comparator(array[index = (small + big) >> 1],
						value
				// , index
				);

				// 若下一 loop 跳出，則此時之狀態為
				// start = index = big; value 介於 array[index±1]。
				// 或
				// start = index, big; value 介於兩者間。

				if (comparison > 0) {
					// 往前找
					big = index - 1;
					// 若下一 loop 跳出，則此時之狀態為
					// big, start = index
					// value 介於兩者間。

				} else if (comparison < 0) {
					// 往後找
					small = index + 1;
					// 若下一 loop 跳出，則此時之狀態為
					// index = big, small
					// value 介於兩者間。

				} else {
					not_found = false;
					break;
				}
			}
		}

		// 挑一個可用的。
		callback = not_found && options.near || options.found;
		// console.log([ not_found, callback, index ]);

		return Array.isArray(callback)
		// treat options.found as mapper
		? callback[index]
		//
		: typeof callback === 'function' ? callback.call(array, index,
				not_found)
		//
		: not_found && (!callback
		// 當 library_namespace.is_RegExp(value) 時，callback 僅表示匹不匹配。
		|| library_namespace.is_RegExp(value)
		// assert: 此時 index === 0 or array.length-1
		// 這樣會判別並回傳首個匹配的。
		&& (index === 0 && comparator(array[index]) > 0)) ? NOT_FOUND
		// default: return index of value
		: index;
	}

	search_sorted_Array.default_comparator = general_ascending;

	_.search_sorted_Array = search_sorted_Array;

	// return first matched index.
	// assert: array 嚴格依照 mismatched→matched，有個首次出現的切分點。
	function first_matched(array, pattern, get_last_matched) {
		if (!array || !pattern) {
			return NOT_FOUND;
		}
		var first_matched_index = array.length;
		if (first_matched_index === 0) {
			return NOT_FOUND;
		}
		var is_RegExp = library_namespace.is_RegExp(pattern), is_Function = !is_RegExp
				&& library_namespace.is_Function(pattern),
		//
		last_mismatched_index = 0;
		if (is_RegExp && pattern.global) {
			library_namespace.error('first_matched: 當匹配時，不應採用 .global！ '
					+ pattern);
		}

		var matched;
		while (last_mismatched_index < first_matched_index) {
			// binary search
			var index = (last_mismatched_index + first_matched_index) / 2 | 0;
			matched = is_RegExp ? pattern.test(array[index])
					: is_Function ? pattern(array[index]) : array[index]
							.includes(pattern);
			if (false && matched && is_RegExp) {
				library_namespace.log(last_mismatched_index + '-[' + index
						+ ']-' + first_matched_index + '/' + array.length
						+ ': ' + matched + ' ' + pattern);
				console.log(array[index].match(pattern));
			}
			if (get_last_matched ? !matched : matched) {
				first_matched_index = index;
			} else if (last_mismatched_index === index) {
				break;
			} else {
				last_mismatched_index = index;
			}
		}

		if (get_last_matched) {
			if (last_mismatched_index === 0 && !matched) {
				library_namespace.debug('Not found.', 3, 'first_matched');
				return NOT_FOUND;
			}
			library_namespace.debug('return ' + last_mismatched_index, 3,
					'first_matched');
			return last_mismatched_index;
		}

		return first_matched_index === array.length ? NOT_FOUND
				: first_matched_index;
	}

	_.first_matched = first_matched;

	/**
	 * merge / combine string with duplicated characters.<br />
	 * merge 2 array by order, without order change<br />
	 * 警告: 此法僅於無重複元素時有效。
	 * 
	 * @param {Array}sequence_list
	 *            sequence list to merge
	 * 
	 * @returns {Array}merged chain
	 * 
	 * @see find duplicate part of 2 strings<br />
	 *      https://en.wikipedia.org/wiki/String_metric
	 *      https://en.wikipedia.org/wiki/Shortest_common_supersequence_problem
	 *      http://codegolf.stackexchange.com/questions/17127/array-merge-without-duplicates
	 *      https://en.wikipedia.org/wiki/Topological_sorting
	 */
	function merge_unduplicated_sequence(sequence_list) {
		var map = Object.create(null);

		function add_node(element, index) {
			var chain = map[element];
			if (!chain)
				chain = map[element]
				// [ 0: possible backward, 1: possible foreword ]
				= [ Object.create(null), Object.create(null) ];
			if (index > 0)
				// 登記前面的。
				chain[0][this[index - 1]] = true;
			if (index + 1 < this.length)
				// 登記前面的。
				chain[1][this[index + 1]] = true;
			return;
			// 不必記太多，反而稱加操作複雜度。上面的相當於把 'abc' 拆成 'ab', 'bc'
			var i = 0;
			for (; i < index; i++)
				// 登記前面的。
				chain[0][this[i]] = true;
			// i++: skip self
			for (i++; i < this.length; i++)
				// 登記後面的。
				chain[1][this[i]] = true;
		}

		sequence_list.forEach(function(sequence) {
			if (typeof sequence === 'string')
				sequence = sequence.split('');
			if (typeof sequence.forEach === 'function'
			// && Array.isArray(sequence)
			) {
				sequence.forEach(add_node, sequence);
			} else {
				library_namespace.warn(
				//
				'merge_unduplicated_sequence: Invalid sequence: [' + sequence
						+ ']');
			}
		});

		// 此法僅於無重複時有效。
		/**
		 * result chain / sequence.<br />
		 * result = [ start of chain, ends of chain ]
		 * 
		 * @type {Array}
		 */
		var result = [ [], [] ];
		while (true) {
			/** {Array}temporary queue */
			var queue = [ [], [] ],
			/** {Array}elements added */
			added = [];
			for ( var element in map) {
				if (element in added)
					continue;
				// 先考慮添入起首，再考慮結尾。
				if (Object.is_empty(map[element][0])) {
					queue[0].push(element);
					// 登記。
					added.push(element);
					continue;
				}
				if (Object.is_empty(map[element][1])) {
					queue[1].push(element);
					// 登記。
					added.push(element);
					continue;
				}
			}

			if (added.length === 0)
				// nothing can do.
				// e.g., a ring / cycle, 有重複。
				break;

			if (queue[0].length === 1)
				result[0].push(queue[0][0]);
			else if (queue[0].length > 0) {
				// 有多重起頭。
				throw new Error('Invalid starts: ' + queue[0]);
			}
			if (queue[1].length === 1)
				result[1].unshift(queue[1][0]);
			else if (queue[1].length > 0) {
				// 有多重結尾。
				throw new Error('Invalid ends: ' + queue[1]);
			}

			// remove node.
			added.forEach(function(element) {
				var data = map[element];
				for ( var node in data[0])
					delete map[node][1][element];
				for ( var node in data[1])
					delete map[node][0][element];
				delete map[element];
			});
		}

		result = result[0].concat(result[1]);
		return result;
	}

	_.merge_sequence = merge_unduplicated_sequence;

	// ------------------------------------

	// TODO: add `Promise` version

	/**
	 * 依照順序從 index 至 last 執行 for_each。
	 * 
	 * @examples <code>

	function for_item(run_next, index, index, list) {
		// do something
		run_next();
	}
	CeL.run_serial(for_item, last_NO, first_NO, function() { 'done'; });

	function for_item(run_next, item, index, list) {
		// do something
		run_next();
	}
	CeL.run_serial(for_item, list, function() { 'done'; });

	 * </code>
	 * 
	 * @param {Function}for_each
	 *            run for_each(run_next, item, index, list[, get_status]) for
	 *            every elements. Must handle exception yourself.
	 *            {Object}function get_status(): 狀態探測函數。
	 * @param {Integer|Array}last
	 *            last index or {Array}list
	 * @param {Integer|Array}[index]
	 *            start index or [start index, last index].<br />
	 *            default: starts from 0.
	 * @param {Function}[callback]
	 *            Will run after all elements executed
	 * @param {Object}[_this]
	 *            passed to for_each
	 * @param {Boolean}[parallelly]
	 *            run parallelly
	 * 
	 * @see CeL.data.code.thread
	 */
	function run_serial_asynchronous(for_each, last, index, callback, _this,
			parallelly) {
		var list;
		// initialization
		if (Array.isArray(last)) {
			list = last;
			last = list.length;
		}
		if (typeof index === 'function') {
			// shift arguments.
			parallelly = _this;
			_this = callback;
			callback = index;
			index = 0;
		} else if (Array.isArray(index)) {
			last = index[1];
			index = index[0];
		} else {
			// default: starts from 0.
			index |= 0;
		}

		// console.log([ for_each, last, index, callback, _this, parallelly ]);

		// ----------------------------------------------------------
		// main loop for serial
		function run_next() {
			// 預留可變動 list 的空間。
			if (list ? index === list.length : index > last) {
				// done.
				typeof callback === 'function' && callback.call(_this);
				return;
			}

			library_namespace.debug(index + '/' + last, 3,
					'run_serial_asynchronous');
			// 先增加 index，預防 callback 直接 call run_next()。
			var _index = index++;
			var _arguments = [ run_next, list ? list[_index] : _index, _index,
					list ];
			if (_this && _this.run_interval >= 0) {
				library_namespace.log_temporary(index + '/' + last
						+ ' Waiting ' + _this.run_interval + ' ms to run');
				setTimeout(function() {
					for_each.apply(_this, _arguments);
				}, _this.run_interval);
			} else {
				for_each.apply(_this, _arguments);
			}
		}

		if (!parallelly
		// parallelly 在這情況下不會執行 callback。
		|| !(index <= last)) {
			run_next();
			return;
		}

		// ----------------------------------------------------------
		// parallelly

		function get_status() {
			return {
				left : left
			};
		}

		var check_left = function(exit_loop) {
			if (--left === 0 || exit_loop === 'quit') {
				// run once only
				check_left = library_namespace.null_function;
				typeof callback === 'function' && callback.call(_this);
				return;
			}
			library_namespace.debug(left + ' left...', 3,
					'run_parallel_asynchronous');
		};

		if (_this) {
			for_each = for_each.bind(_this);
		}

		var left = 0;
		if (list) {
			if (list.length === 0) {
				setImmediate(check_left, 'quit');
			} else {
				list.forEach(function(item, index) {
					left++;
					setImmediate(for_each, check_left, item, index, list,
							get_status);
				});
			}
			return;
		}

		for (; index <= last; index++, left++) {
			setImmediate(for_each, check_left, index, index, list, get_status);
		}

	}

	_.run_serial = run_serial_asynchronous;

	// 警告: 採用非同步的方法，獲得網址的順序不一定。因此不能採用 .push()，而應採用 [index] 的方法來記錄。
	function run_parallel_asynchronous(for_each, last, index, callback, _this) {
		run_serial_asynchronous(for_each, last, index, callback, _this, true);
	}

	_.run_parallel = run_parallel_asynchronous;

	// ---------------------------------------------------------------------//

	if (false) {
		CeL.edit_distance('from A', 'from B');
	}

	// Levenshtein distance (edit distance)
	// @see LCS()
	// https://en.wikipedia.org/wiki/Levenshtein_distance#Iterative_with_two_matrix_rows
	// http://www.codeproject.com/Articles/13525/Fast-memory-efficient-Levenshtein-algorithm
	// http://locutus.io/php/strings/levenshtein/
	// https://github.com/component/levenshtein/blob/master/index.js
	// https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance
	// http://jsperf.com/levenshtein-distance-2
	function Levenshtein_distance(string_1, string_2) {
		string_1 = (string_1 || '').chars(true);
		string_2 = (string_2 || '').chars(true);

		var length_1 = string_1 && string_1.length || 0, length_2 = string_2
				&& string_2.length || 0;
		// degenerate cases
		if (length_1 === 0) {
			return length_2;
		}
		if (length_2 === 0) {
			return length_1;
		}
		if (length_1 === length_2 && string_1 === string_2) {
			return 0;
		}

		// create two work vectors of integer distances
		var vector_1 = new Array(length_2 + 1), i = 0;
		// initialize vector_1 (the previous row of distances)
		// this row is A[0][i]: edit distance for an empty string_1
		// the distance is just the number of characters to delete from string_2
		for (; i <= length_2; i++) {
			vector_1[i] = i;
		}

		for (i = 0; i < length_1; i++) {
			// calculate vector_2 (current row distances) from the previous row
			// vector_1

			// use formula to fill in the rest of the row
			for (var j = 0,
			// first element of vector_2 is A[i+1][0]
			// edit distance is delete (i+1) chars from string_1 to match empty
			// string_2
			last_vector_2 = i + 1, vector_2 = [ last_vector_2 ]; j < length_2; j++) {
				last_vector_2 = Math.min(
				// The cell immediately above + 1
				last_vector_2 + 1,
				// The cell immediately to the left + 1
				vector_1[j + 1] + 1,
				// The cell diagonally above and to the left plus the cost
				vector_1[j] + (/* cost */string_1[i] === string_2[j] ? 0 : 1));
				vector_2.push(last_vector_2);
			}

			// copy vector_2 (current row) to vector_1 (previous row) for next
			// iteration
			vector_1 = vector_2;
		}

		return vector_2[length_2];
	}

	_.edit_distance = Levenshtein_distance;

	// ------------------------------------

	/**
	 * Get LCS length / trace array
	 * 
	 * @param {Array}from
	 * @param {Array}to
	 * 
	 * @returns {Array}
	 * 
	 * @since 2017/4/5 10:0:36
	 * 
	 * @see https://en.wikipedia.org/wiki/Longest_common_subsequence_problem
	 *      https://github.com/GerHobbelt/google-diff-match-patch
	 */
	function LCS_length(from, to, get_trace_array) {
		if (typeof from === 'string')
			from = from.chars(true);
		if (typeof to === 'string')
			to = to.chars(true);
		// assert: Array.isArray(from) && Array.isArray(from)

		// console.trace([ from.length, to.length ]);
		var get_length_only = !get_trace_array,
		//
		from_length = from.length, to_length = to.length,
		// TODO: 當文件有過多行時的處置方式。
		trace_Array = from_length * (get_length_only ? 2 : to_length);
		trace_Array = typeof Uint16Array === 'function' ? new Uint16Array(
				trace_Array) : new Array(trace_Array).fill(0);

		// loop of ↓
		for (var to_index = 0, trace_index = 0, last_trace_index = trace_index
				- from_length; to_index < to_length; to_index++) {
			if (get_length_only) {
				if (to_index % 2 === 0) {
					last_trace_index = 0;
					// assert: 已經 = from_length
					// trace_index = from_length;
				} else {
					// assert: 已經 = from_length
					// last_trace_index = from_length;
					trace_index = 0;
				}
			}
			// loop of →
			for (var to_element = to[to_index], from_index = 0; from_index < from_length; from_index++, trace_index++, last_trace_index++) {
				// @see LCS function
				if (to_element === from[from_index]) {
					// to[to_index] === from[from_index]
					trace_Array[trace_index] =
					// 這條件也保證了 last_trace_index > 0
					from_index > 0 && to_index > 0 ? trace_Array[last_trace_index - 1] + 1
							: 1;
				} else {
					// to[to_index] !== from[from_index]
					trace_Array[trace_index] = from_index > 0 ? trace_Array[trace_index - 1]
							: 0;
					if (last_trace_index >= 0
							&& trace_Array[trace_index] < trace_Array[last_trace_index]) {
						trace_Array[trace_index] = trace_Array[last_trace_index];
					}
				}
			}
		}

		if (get_length_only) {
			return trace_Array[trace_index - 1];
		}

		if (library_namespace.is_debug(3)) {
			library_namespace.debug('to\\f\t' + from.join('\t') + '\n'
					+ '-'.repeat(8 * (from.length + 2)));
			for (var to_index = 0; to_index < to_length; to_index++) {
				library_namespace.debug(to[to_index]
						+ '\t'
						+ trace_Array.slice(to_index * from_length,
								(to_index + 1) * from_length).join('\t'));
			}
			library_namespace.debug('-'.repeat(8 * (from.length + 3)));
		}

		// trace_Array.LCS_length = trace_Array[trace_index - 1];
		return trace_Array;
	}

	_.LCS_length = LCS_length;

	if (false) {
		diff_list = CeL.LCS(old_text, new_text, {
			// line : true,
			diff : true
		});

		diff_list.forEach(function(diff_pair) {
			// added_text === inserted_text
			// const [removed_text, added_text] = diff;
			var removed_text = diff_pair[0], added_text = diff_pair[1];
		});
	}

	if (false) {
		diff_list = CeL.LCS('from A', 'from B', {
			diff : true
		});

		diff_list = CeL.LCS('from A', 'from B', {
			with_diff : true
		});
	}

	/**
	 * Get LCS / diff
	 * 
	 * Longest Common Subsequence 最長公共子序列
	 * 
	 * 警告：在 line_mode，"A \n"→"A\n" 的情況下，"A" 會同時出現在增加與刪除的項目中，此時必須自行檢測排除。
	 * 
	 * @param {Array|String}from
	 *            from text
	 * @param {Array|String}to
	 *            to text
	 * @param {Object|String}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Array|String}
	 */
	function LCS(from, to, options) {
		// 前置作業。
		options = library_namespace.setup_options(options);

		var treat_as_String = 'treat_as_String' in options ? options.treat_as_String
				: typeof from === 'string' && typeof to === 'string',
		// options.line : 強制採用行模式，連輸入{String|Array}都會以'\n'結合。
		line_mode = 'line' in options ? options.line : treat_as_String
				&& (from.includes('\n') || to.includes('\n')),
		//
		separator = options.separator || (line_mode ? '\n' : '');
		if (false) {
			library_namespace.debug('separator: ' + JSON.stringify(separator)
					+ (line_mode ? '，採用行模式。' : ''), 3, 'LCS');
		}
		if (typeof from === 'string') {
			from = separator ? from.split(separator) : from.chars(true);
		} else if (!from) {
			from = [];
		}
		if (typeof to === 'string') {
			to = separator ? to.split(separator) : to.chars(true);
		} else if (!to) {
			to = [];
		}
		// assert: Array.isArray(from) && Array.isArray(from)

		var from_length = from.length, from_index = from_length - 1, to_index = to.length - 1,
		// Completed LCS Table
		trace_Array = options.trace_Array || LCS_length(from, to, true),
		// 獨特/獨有的 exclusive 元素列表。
		diff_list = [], from_unique, to_unique,
		// flags
		get_all = !!options.all,
		// get index instead of contents
		get_index = options.index || get_all,
		// get diff as well
		get_diff = !!(options.diff || options.with_diff),
		// get diff ONLY
		diff_only = get_diff && !get_all && !options.with_diff;

		// ---------------------------------------
		// 工具函數。

		function unique(list) {
			return list.map(function(result_Array) {
				// assert: .join() 與 .split() 採用的是 result_Array 不包含的字串。
				return result_Array.join('\0');
			}).unique().map(function(result_Array) {
				return result_Array.split('\0');
			});
		}

		function normalize_unique(_unique, _this) {
			if (!Array.isArray(_unique)) {
				// return '';
				// return;
				return treat_as_String ? '' : _unique;
				// return [];
			}

			// _unique = [ from index, to index ]
			if (options.diff_line) {
				return _unique;
			}

			var index = _unique[0];
			if (index === _unique[1]) {
				if (_unique === from_unique) {
					from_unique = [ index, index ];
				} else {
					to_unique = [ index, index ];
				}
				// return _this[index];
			}

			_unique = _this.slice(index, _unique[1] + 1);

			return treat_as_String ? _unique.join(separator) : _unique;
		}

		function add_to_diff_list(from_index, to_index) {
			if (!get_diff || (!from_unique && !to_unique)) {
				// assert: 連續相同元素時
				return;
			}

			if (false) {
				library_namespace.debug(JSON.stringify([ from_index, to_index,
						from_unique, to_unique ]), 3, 'add_to_diff_list');
			}

			var diff_pair = [ normalize_unique(from_unique, from),
					normalize_unique(to_unique, to) ];
			if (false && to_unique) {
				diff_pair.push(normalize_unique(to_unique, to));
			}
			// Array.isArray(to_unique) && from_unique===undefined 代表本段落為新增文字。
			// diff_pair.index = [ from_index, to_index ];
			// _index = [ start_index, end_index ]
			// .indexes
			diff_pair.index = [ from_unique, to_unique ];
			// diff_pair.last_index: 上一個相同元素的 index。
			// 警告: diff_pair.last_index 在 _unique 最初的一個 index 可能不準確!
			diff_pair.last_index = [ from_index, to_index ];
			diff_list.unshift(diff_pair);
			// reset indexes.
			from_unique = to_unique = undefined;
		}

		// backtrack subroutine
		function backtrack(from_index, to_index, all_list) {
			// 因為函數 backtrack() 中呼叫自己，可能出現：
			// RangeError: Maximum call stack size exceeded
			// 因此必須採用非遞迴呼叫(recursive call)版本。
			while (true) {
				if (false) {
					library_namespace.debug(String([ from_index, to_index ]),
							3, 'LCS.backtrack');
					library_namespace.debug(String([ from_unique, to_unique,
							diff_list ]), 6, 'LCS.backtrack');
				}
				if (from_index < 0 || to_index < 0) {
					if (false) {
						library_namespace.debug('→ '
								+ JSON.stringify([ from_index, to_index,
										from_unique, to_unique ]), 3);
					}
					if (from_index === -1 && to_index === -1) {
						// assert: from_index === -1 && to_index === -1
						if (false) {
							library_namespace.debug(
							//
							'LCS starts from the first element of each list, '
									+ JSON.stringify([ from_index, to_index,
											from[0], to[0] ]), 3,
									'LCS.backtrack');
						}
					} else if (to_index === -1) {
						if (false) {
							library_namespace.debug('因為 ' + from_index + ',0→('
									+ from_index + '|' + (from_index - 1)
									+ '),-1 時不會處理到 from_unique，只好補處理。', 3,
									'LCS.backtrack');
						}
						if (Array.isArray(from_unique)) {
							// e.g., CeL.LCS('abc123', 'def123', 'diff')
							from_unique[0] = 0;
						} else {
							// e.g., CeL.LCS('a0', 'b0', 'diff')
							// e.g., CeL.LCS('a0', '0b', 'diff')
							from_unique = [ 0, from_index ];
						}
					} else if (from_index === -1) {
						if (false) {
							library_namespace.debug('因為 0,' + to_index
									+ ',0→-1,(' + to_index + '|'
									+ (to_index - 1)
									+ ') 時不會處理到 to_unique，只好補處理。', 3,
									'LCS.backtrack');
						}
						if (Array.isArray(to_unique)) {
							to_unique[0] = 0;
						} else {
							// e.g., CeL.LCS('a1b2', '1a2b', 'diff')
							to_unique = [ 0, to_index ];
						}
					} else {
						library_namespace
								.warn('LCS.backtrack: Invalid situation!');
					}
					add_to_diff_list(from_index, to_index);
					return;
				}

				if (from[from_index] === to[to_index]) {
					// 此元素為 LCS 之一部分。
					if (false) {
						library_namespace.debug('相同元素 @ '
								+ [ from_index, to_index ] + ': '
								+ from[from_index], 3, 'LCS.backtrack');
					}
					if (!diff_only) {
						// get_index = 1: from_index, 2: to_index
						var common = get_index ? get_index === 2 ? to_index
								: from_index : from[from_index];
						if (get_all) {
							all_list.forEach(function(result_Array) {
								result_Array.unshift(common);
							});
						} else {
							all_list[0].unshift(common);
						}
					}
					add_to_diff_list(from_index, to_index);

					// 常常出現 Maximum call stack size exceeded 錯誤的地方...
					// backtrack(from_index - 1, to_index - 1, all_list);
					// return;

					// 採用 iteration
					from_index--;
					to_index--;
					continue;
				}

				var trace_index;
				if (from_index > 0
				// ↑ 預防 trace_Array[trace_index - 1] 取到範圍外的值。
				&& (trace_index = to_index * from_length + from_index) > 0
				// trace_Array[trace_index]
				// = max( trace_Array[trace_index - 1], [上面一階])
				&& trace_Array[trace_index] === trace_Array[trace_index - 1]) {
					if (false) {
						library_namespace.debug('trace_index: ' + trace_index,
								3, 'LCS.backtrack');
						library_namespace.debug('trace: '
								+ trace_Array[trace_index - 1] + ' → '
								+ trace_Array[trace_index], 3);
					}

					var _all_list;
					if (get_all
					// 如此亦保證 to_index > 0
					&& trace_index >= from_length && trace_Array[trace_index]
					//
					=== trace_Array[trace_index - from_length]) {
						if (false) {
							library_namespace.debug(trace_Array[trace_index]
									+ ': ' + all_list, 3, 'LCS.backtrack');
						}
						_all_list = all_list.map(function(result_Array) {
							return result_Array.clone();
						});
						backtrack(from_index, to_index - 1, _all_list);
					}

					if (false) {
						library_namespace.debug('檢測前一個。 '
								+ [ from_index, to_index ], 3, 'LCS.backtrack');
					}
					if (get_diff) {
						if (Array.isArray(from_unique)) {
							from_unique[0] = from_index;
						} else {
							from_unique = [ from_index, from_index ];
						}
						if (false) {
							library_namespace.debug(
							//
							'from_index: ' + [ from_index,
							//
							JSON.stringify(from_unique) ], 3, 'LCS.backtrack');
						}
					}
					// TODO: 對於比較長的結構，這裡常出現
					// RangeError: Maximum call stack size exceeded
					// workaround: 現在只能以重跑程式、跳過這篇文章繞過。
					backtrack(from_index - 1, to_index, all_list);

					if (get_all) {
						if (false) {
							library_namespace.debug('merge: '
									+ [ all_list, _all_list ], 3);
						}
						all_list = unique(all_list.append(_all_list));
					}
					return;

				} else {
					if (false) {
						library_namespace.debug('檢測上一排。 '
								+ [ from_index, to_index ], 3, 'LCS.backtrack');
					}
					if (get_diff) {
						if (to_unique) {
							to_unique[0] = to_index;
						} else {
							to_unique = [ to_index, to_index ];
						}
						if (false) {
							library_namespace.debug('to_index: '
									+ [ to_index, JSON.stringify(to_unique) ],
									3, 'LCS.backtrack');
						}
					}

					// backtrack(from_index, to_index - 1, all_list);

					// 採用 iteration
					to_index--;
				}
			}
		}

		// ---------------------------------------

		// 取得所有 LCS，而不僅是其中之一。
		var all_list = [ [] ];

		// 主要作業。
		if (isNaN(from_index) || isNaN(to_index)) {
			library_namespace.error('LCS: isNaN(from:' + from_index
					+ ') || isNaN(' + to_index + ')');
			throw new Error('LCS: isNaN(from_index) || isNaN(to_index)');
		}
		try {
			backtrack(from_index, to_index, all_list);
		} catch (e) {
			throw new RangeError(
					'Maximum call stack size exceeded @ backtrack()');
		}

		// 以下為後續處理。
		if (get_all) {
			// 去掉重複的 LCS。
			all_list = unique(all_list);
		}

		if (treat_as_String || !get_index) {
			all_list = all_list
			// index → 元素
			.map(function(result_Array) {
				if (get_index) {
					result_Array = result_Array.map(function(index) {
						return get_index === 2 ? to[index] : from[index];
					});
				}
				return treat_as_String && !options.index
				// 特別指定 options.index 時，即使輸入{String}亦保持index，不轉換為{String}。
				? result_Array.join(separator) : result_Array;
			});
		}

		if (get_diff && !diff_only) {
			// 應為 treat_as_String
			if (treat_as_String) {
				// 為了能設定 .diff。
				// assert: diff_list 設定在 all_list[0] 上，
				// 且不因前面 unique(all_list) 而改變。
				all_list[0] = new String(all_list[0]);
			}
			all_list[0].diff = diff_list;
		}

		if (!get_all) {
			all_list = diff_only ? diff_list : all_list[0];
		}
		if (options.with_list) {
			if (typeof all_list !== 'object') {
				all_list = new String(all_list);
			}
			all_list.from = from;
			all_list.to = to;
		}

		/**
		 * <code>

		all_list = diff_only ? diff_list : all_list[0];

		{Array}diff_list
			= [ diff_pair 1, diff_pair 2, ...,
			// need options.with_list
			from: [ 'diff from source' ], to: [ 'diff to source' ]
			]

		{Array}diff_pair =
			// 若僅有 from_diff_unique 或 to_diff_unique 則另一方會是 undefined。
			// 兩者皆有則表示為變更/modify。
			[ {Array}from_diff_unique, {Array}to_diff_unique,
			$**deprecated** [ {Array|String|Undefined}from_diff_unique, {Array|String|Undefined}to_diff_unique,

			// diff_pair.index = [ from_index, to_index ];
			// _index = [ start_index, end_index ]
			index:
				[ {Array}from_unique_indexes, {Array}to_unique_indexes ],

			// diff_pair.last_index: 上一個相同元素的 index。
			// 警告: diff_pair.last_index 在 _unique 最初的一個 index 可能不準確!
			last_index: [ {Integer}index of from, {Integer}index of to ]
			]

		{Array|Undefined}from_unique_indexes, to_unique_indexes
			= [ {Integer}start_index, {Integer}end_index ]
			or = undefined (insert / delete only)
			$**deprecated** or = {Integer}start index

		{Array}from_diff_unique, to_diff_unique
			= [ {String}diff_unique_line, {String}diff_unique_line, ...  ]
			$**deprecated** or = {String}diff_unique_line
			$**deprecated** or = undefined

		</code>
		 */
		return all_list;
	}

	_.LCS = LCS;

	/**
	 * <code>

	from	*    *   *        *
	index	012345678 9 10 11 12 13 14
	text	_0123_456 7 8  9  a
	text	 0123 456_7 8  9
	index	 0123 45678 9  10    11 12
	to

	</code>
	 */

	// 取得 to 之與 from 相對應的索引。
	// from[index_of_from] 相對應於
	// to[CeL.LCS.corresponding_index(diff_list, index_of_from_text)]
	function get_corresponding_index(diff_list, index_of_from_text,
			is_index_of_to) {
		if (diff_list.length === 0)
			return index_of_from_text;

		var FROM_INDEX = is_index_of_to ? 1 : 0, TO_INDEX = 1 - FROM_INDEX;
		var diff_list_index = 0, latest_offset_delta = 0;
		while (true) {
			var diff_pair = diff_list[diff_list_index++];
			var from_indexes = diff_pair.index[FROM_INDEX];
			if (!from_indexes) {
				from_indexes = diff_pair.last_index[FROM_INDEX] + 1;
				from_indexes = [ from_indexes, from_indexes ];
			}

			if (index_of_from_text > from_indexes[1]) {
				if (diff_list_index < diff_list.length) {
					continue;
				}
				from_indexes = diff_pair.index[FROM_INDEX];
				var to_indexes = diff_pair.index[TO_INDEX];
				latest_offset_delta = (to_indexes ? to_indexes[1]
						: diff_pair.last_index[TO_INDEX])
						- (from_indexes ? from_indexes[1]
								: diff_pair.last_index[FROM_INDEX]);
				break;
			}

			if (index_of_from_text < from_indexes[0]) {
				latest_offset_delta = diff_pair.last_index[TO_INDEX]
						- diff_pair.last_index[FROM_INDEX];
				break;
			}

			var to_indexes = diff_pair.index[TO_INDEX];
			if (!to_indexes) {
				to_indexes = diff_pair.last_index[TO_INDEX] + 1;
				to_indexes = [ to_indexes, to_indexes ];
			}

			if (from_indexes[1] === from_indexes[0]
					|| to_indexes[1] === to_indexes[0]) {
				return diff_pair.index[FROM_INDEX] ? to_indexes[0]
						: to_indexes[1] + 1;
			}

			return to_indexes[0] + (index_of_from_text - from_indexes[0])
					* (to_indexes[1] - to_indexes[0])
					/ (from_indexes[1] - from_indexes[0]);

		}

		return index_of_from_text + latest_offset_delta;
	}

	LCS.corresponding_index = get_corresponding_index;

	// unfinished
	function diff_with_Array(to, options) {
		function append(array, item, item_index) {
			if (item) {
				if (Array.isArray(item_index)) {
					item_index = item_index[0];
				}
				if (Array.isArray(item)) {
					array.append(item.filter(function(i, index) {
						if (i) {
							array.index.push(item_index + index);
							return true;
						}
					}));
				} else {
					array.index.push(item_index);
					array.push(item);
				}
			}
		}

		var diff = LCS(this || [], to || [], Object.assign({
			diff : true
		}, options)), from_added = [], to_added = [],
		// 避免經過重排後，已經無法回溯至原先資料。
		from_added_index = from_added.index = [], move_to = Object.create(null);
		to_added.index = [];

		// TODO: diff其中有undefined

		diff.forEach(function(pair) {
			append(from_added, pair[0], pair.index[0]);
			append(to_added, pair[1], pair.index[1]);
		});

		function scan_list(from_item, from_index) {
			// assert: {String}item
			var index = to_added.indexOf(from_item);
			// 去掉完全相同的行。
			if (index !== NOT_FOUND) {
				move_to[from_added.index[from_index]] = to_added.index[index];
				to_added.index.splice(index, 1);
				to_added.splice(index, 1);
				from_added.index.splice(from_index, 1);
				from_added[from_index] = false;
				return;
			}

			if (typeof from_item === 'string') {
				from_item = from_item.chars(true);
			}
			// use LCS() again
			var max_LCS_length = 0,
			// ↑ = Math.max(20, from_item.length / 2 | 0)
			max_LCS_data;
			to_added.forEach(function(to_item, to_index) {
				// assert: from_item, to_item 皆無 "\n"
				// console.log(to_item);
				if (typeof to_item === 'string') {
					to_item = to_item.chars(true);
				}
				var trace_Array = LCS_length(from_item, to_item, true),
				// const
				this_LCS_length = trace_Array.at(-1);
				if (max_LCS_length < this_LCS_length) {
					max_LCS_length = this_LCS_length;
					max_LCS_data = [ to_index, trace_Array, to_item ];
				}
			});

			if (!max_LCS_data) {
				return;
			}

			var diff = from_item.diff_with(max_LCS_data[2], {
				trace_Array : max_LCS_data[1]
			});
			if (diff[1]) {
				to_added[max_LCS_data[0]] = diff[1];
			} else {
				to_added.splice(max_LCS_data[0], 1);
			}
			from_added[from_index] = from_item = diff[0];
			if (from_item) {
				// 經過變更之後，可能需要再掃描一次。
				scan_list(from_item, from_index);
			}
		}
		// 檢查是否有被移到前方的，確保回傳的真正是 unique 的。在只有少量增加時較有效率。
		from_added.forEach(scan_list);

		from_added = from_added.filter(function(item) {
			return !!item;
		});

		if (from_added.length === 0) {
			from_added = [];
		} else {
			// 將item轉為{String}
			from_added = [ from_added.map(function(line) {
				return Array.isArray(line) ? line.join('') : line;
			}) ];
		}

		if (to_added.length > 0) {
			// 將item轉為{String}
			to_added = to_added.map(function(line) {
				return Array.isArray(line) ? line.join('') : line;
			});
			from_added[1] = to_added;
		}

		from_added.index = from_added_index;
		from_added.moved = move_to;
		return from_added;
	}

	function diff_with_String(to, options) {
		return diff_with_Array.call((this || '').split('\n'),
				Array.isArray(to) ? to : (to || '').split('\n'), options);
	}

	// ---------------------------------------------------------------------//

	if (false) {
		styled_list = CeL.coloring_diff('a b c d', 'a a c c', {
			headers : [ 'header 1: ', 'header 2: ' ],
			print : true
		});
	}

	// 為 diff 著色。
	function coloring_diff(from, to, options) {
		options = library_namespace.new_options(options);
		var diff_list = library_namespace.LCS(from, to, {
			diff : true
		});
		from = [ from /* , { reset : true } */];
		to = [ to /* , { reset : true } */];
		var diff, normal_style = options.normal_style || {
			// bold : false,
			fg : 'white',
			bg : 'black'
		}, diff_style = options.diff_style || {
			// bold : true,
			fg : 'red',
			bg : 'white'
		},
		// 用在多出來的文字的格式。
		insertion_style = options.insertion_style || {
			// bold : true,
			fg : 'white',
			bg : 'green'
		};

		function add_diff(styled_list, diff_index, is_insertion) {
			if (!diff_index) {
				// e.g., 只有義方有多東西。
				return;
			}

			var next_index = diff_index[1] + 1, this_slice = styled_list
					.shift();
			styled_list.unshift(this_slice.slice(0, diff_index[0]),
					is_insertion ? insertion_style : diff_style, this_slice
							.slice(diff_index[0], next_index), normal_style,
					this_slice.slice(next_index));
		}

		while (diff = diff_list.pop()) {
			var from_index = diff.index[0], to_index = diff.index[1];
			// console.trace([ from, from_index, to, to_index ]);
			add_diff(from, from_index, !to_index);
			add_diff(to, to_index, !from_index);
		}

		var headers = Array.isArray(options.headers) ? options.headers : [];
		from.unshift(headers[0] || '', normal_style);
		to.unshift(headers[1] || '', normal_style);
		if (options.header_style) {
			from.unshift('', options.header_style);
			to.unshift('', options.header_style);
		}

		if (options.print) {
			library_namespace.slog(from);
			library_namespace.slog(to);
		}
		// 注意: from.length 不一定等於 to.length
		return [ from, to ];
	}

	_.coloring_diff = coloring_diff;

	// ---------------------------------------------------------------------//

	/**
	 * Find the longest common starting substring in a set of strings
	 * 
	 * TODO: 可以嘗試先分割words整個字比對
	 * 
	 * @param {Array}string_list
	 *            array of strings
	 * @returns {ℕ⁰:Natural+0} longest common starting substring length
	 * 
	 * @see https://stackoverflow.com/questions/1916218/find-the-longest-common-starting-substring-in-a-set-of-strings/1917041#1917041
	 */
	function longest_common_starting_length(string_list) {
		string_list = string_list.filter(function(string) {
			return typeof string === 'string';
		});
		if (string_list.length <= 1) {
			return string_list[0] ? string_list[0].length : 0;
		}

		var char_index = 0;
		for (var last = string_list[0].length; char_index < last; char_index++) {
			var char_now = string_list[0].charAt(char_index);
			for (var index = 1; index < string_list.length; index++) {
				if (char_now !== string_list[index].charAt(char_index)) {
					return char_index;
				}
			}
		}
		return char_index;
	}

	_.longest_common_starting_length = longest_common_starting_length;

	// ---------------------------------------------------------------------//
	// https://en.wikipedia.org/wiki/Letter_case#Headings_and_publication_titles
	// http://adminsecret.monster.com/training/articles/358-what-to-capitalize-in-a-title
	// http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript
	// to_title_case()
	// Capitalize the first letter of string
	// also use CSS: text-transform:capitalize;
	// @see Camel_to_underscore() @ data.code
	/**
	 * 轉成標題用之格式。基本上即將每個字的第一個字母轉成大寫。
	 * 
	 * @param {Boolean}to_lower_first
	 *            將要轉換的文字先全部轉換成小寫。
	 * 
	 * @returns {String}標題用之格式文字。
	 * 
	 * @see function upper_case_initial(words) @ CeL.application.net.wiki
	 */
	function toTitleCase(to_lower_first) {
		// 要轉換的文字。
		var title = this.trim();
		if (to_lower_first)
			title = title.toLowerCase();
		return title.replace(/(^|\s)((\w)(\w*))/g,
		//
		function($0, $1, $2, $3, $4) {
			// console.log($0);
			return $2 in toTitleCase.lower ? $0
			//
			: $2 in toTitleCase.upper ? $0.toUpperCase()
			//
			: ($1 ? ' ' : '') + $3.toUpperCase() + $4;
		})
		// capitalize the first and last word of the title itself.
		// in case title === ''
		.replace(/^\w/, function($0) {
			return $0.toUpperCase();
		}).replace(/\s(\w)([\w\-]*)$/, function($0, $1, $2) {
			return ' ' + $1.toUpperCase() + $2;
		});
	}

	/**
	 * add exception words
	 * 
	 * @param {String|Array}words
	 *            exception words
	 */
	toTitleCase.add_exception = function(words, upper) {
		// initialize
		if (!toTitleCase.lower)
			toTitleCase.lower = Object.create(null);
		if (!toTitleCase.upper)
			toTitleCase.upper = Object.create(null);

		var target = upper ? toTitleCase.upper : toTitleCase.lower;

		if (typeof words === 'string')
			words = words.split(',');

		if (Array.isArray(words))
			words.forEach(function(word) {
				target[word] = true;
			});
		else
			Object.assign(target, words);
	};

	toTitleCase
			.add_exception('at,by,down,for,from,in,into,like,near,of,off,on,onto,over,past,to,upon,with,and,but,or,yet,for,nor,so,as,if,once,than,that,till,when,to,a,an,the');
	toTitleCase.add_exception(
			'id,tv,i,ii,iii,iv,v,vi,vii,viii,ix,x,xi,xii,xiii', true);

	if (false) {
		// 警告:這將使 node.js 6.2.2 卡住。
		/\[\[(?:[^\[\]]+|\[[^\[]|\][^\]])*\]\]/
				.test("[[                                     [[ ]] [[ ]] [[ ]] ]]");
	}

	if (false) {
		// 若要消除 "'''" 與 "''"，應將長的置於前面。
		wikitext = wikitext.remove_head_tail("'''", 0, ' ').remove_head_tail(
				"''", 0, ' ');
	}

	/**
	 * 去除首尾。這或許該置於 CeL.data.native...
	 * 
	 * @param {String}text
	 *            指定的輸入字串。
	 * @param {String}head
	 *            欲移除之首字串。
	 * @param {String}[tail]
	 *            欲移除之尾字串。
	 * @param {String}[insert_string]
	 *            將首尾以((insert_string))取代。 有設定 insert_string 時，會保留內容物。未設定
	 *            insert_string 時，會將內容物連同首尾一同移除。
	 * 
	 * @returns {String}replaced text. 變更/取代後的結果。
	 */
	function remove_head_tail(text, head, tail, insert_string) {
		var head_eq_tail, index_start, index_end;
		if (!tail) {
			tail = head;
			head_eq_tail = true;
		} else {
			head_eq_tail = head === tail;
		}

		var head_length = head.length, tail_length = tail.length;

		while (true) {

			if (head_eq_tail) {
				// 改採自前面搜尋模式。
				index_start = text.indexOf(head);
				if (index_start === NOT_FOUND) {
					// 無首
					return text;
				}
				index_end = text.indexOf(tail, index_start + head_length);
				if (index_end === NOT_FOUND) {
					// 有首無尾
					return text;
				}

			} else {
				index_end = text.indexOf(tail);
				if (index_end === NOT_FOUND) {
					// 無尾
					return text;
				}
				// 須預防中間包含 head / tail 之字元。
				index_start = text.lastIndexOf(head, index_end - head_length);
				if (index_start === NOT_FOUND) {
					// 有尾無首
					return text;
				}
			}

			text = text.slice(0, index_start)
			// 未設定 insert_string 時，會將內容物連同首尾一同移除。
			+ (insert_string === undefined ? '' : insert_string
			// 有設定 insert_string 時，會保留內容物。
			+ text.slice(index_start + head_length, index_end) + insert_string)
					+ text.slice(index_end + tail_length);
		}
	}

	/**
	 * 持續執行 .replace()，直到處理至穩定平衡無變動為止。
	 * 
	 * @param {String}text
	 *            指定的輸入字串。
	 * @param {RegExp}pattern
	 *            要搜索的正規表示式/規則運算式模式。
	 * @param {String|Function}replace_to
	 *            用於替換的字串。
	 * 
	 * @returns {String}replaced text. 變更/取代後的結果。
	 */
	function replace_till_stable(text, pattern, replace_to) {
		if (false)
			library_namespace.debug('pattern: ' + pattern, 6,
					'replace_till_stable');
		for (var original; original !== text;) {
			original = text;
			text = original.replace(pattern, replace_to);
			if (false)
				library_namespace.debug('[' + original + '] '
						+ (original === text ? 'done.' : '→ [' + text + ']'),
						6, 'replace_till_stable');
		}
		return text;
	}

	/**
	 * 當欲變更/取代文字前後的文字符合要求時，才執行取代。
	 * 
	 * @param {String}text
	 *            指定的輸入字串。
	 * @param {RegExp}pattern
	 *            要搜索的正規表示式/規則運算式模式。
	 * @param {String|Function}replace_to
	 *            用於替換的字串。
	 * @param {Function|Undefined}[match_previous]
	 *            filter match_previous(previous token) return true if it's OK
	 *            to replace, false if it's NOT OK to replace.
	 * @param {Function|Undefined}[match_following]
	 *            filter match_following(next token) return true if it's OK to
	 *            replace, false if it's NOT OK to replace.
	 * 
	 * @returns {String}replaced text. 變更/取代後的結果。
	 */
	function replace_check_near(text, pattern, replace_to, match_previous,
			match_following) {
		var matched, results = [], last_index = 0;
		if (!pattern.global) {
			library_namespace.debug("The pattern doesn't has 'global' flag!",
					2, 'replace_check_near');
		}

		while (matched = pattern.exec(text)) {
			library_namespace.debug(pattern + ': ' + matched, 5,
					'replace_check_near');
			var previous_text = text.slice(last_index, matched.index),
			//
			_last_index = matched.index + matched[0].length;
			if ((!match_previous || match_previous(previous_text))
			// context 上下文 前後文
			// 前面的 foregoing paragraphs, see above, previously stated, precedent
			// 後面的 next; behind rearwards;back;posteriority;atergo;rearward
			&& (!match_following || match_following(text.slice(_last_index)))) {
				last_index = pattern.lastIndex;
				library_namespace.debug(previous_text + ',' + matched[0] + ','
						+ matched[0].replace(pattern, replace_to), 5,
						'replace_check_near');
				results.push(
				//
				previous_text, matched[0].replace(pattern, replace_to));
				// restore lastIndex.
				pattern.lastIndex = last_index;
				last_index = _last_index;
			}
			if (!pattern.global) {
				// 僅執行此一次。
				break;
			}
		}

		// 收尾。理想的 pattern 應該用 /([\s\S]*?)(delimiter|$)/g 之類，如此則無須收尾。
		if (last_index < text.length) {
			if (last_index === 0)
				// 完全沒相符的。
				return text;
			results.push(text.slice(last_index));
		}
		return results.join('');
	}

	var PATTERN_bigrams = /.{2}/g;

	/**
	 * Get Sørensen index, or Dice's coefficient.
	 * 
	 * String.similarity()
	 * 
	 * @param {String}string_1
	 *            sequence 1
	 * @param {String}string_2
	 *            sequence 2
	 * 
	 * @returns {Number}index (or named coefficient)
	 * 
	 * @see https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient
	 */
	function similarity_coefficient(string_1, string_2) {
		var count = 0,
		//
		bigrams_1 = string_1.match(PATTERN_bigrams).concat(
				string_1.slice(1).match(PATTERN_bigrams)),
		//
		bigrams_2 = string_2.match(PATTERN_bigrams).concat(
				string_2.slice(1).match(PATTERN_bigrams));

		bigrams_1.forEach(function(bigram) {
			if (bigrams_2.includes(bigram))
				count++;
		});

		// 0–1
		return 2 * count / (bigrams_1.length + bigrams_2.length);
	}

	function Array_truncate(length) {
		length = Math.max(0, length | 0);
		// This is faster than ((this.length = 0))
		while (this.length > length) {
			this.pop();
		}
		return this;
	}

	// ------------------------------------

	// 傳回字串於等寬字型monospaced font的寬度。螢幕對齊用。
	// 對fullwidth全形字元, width應算2
	// http://hyperrate.com/topic-view-thread.php?tid=3322
	// TODO: 警告:本函數尚未完善
	// @see http://unicode.org/Public/UNIDATA/EastAsianWidth.txt
	function String_display_width(string, font) {
		// 須注意:不同的字型對不同字元的規範可能不同!如'→'可能為2或1

		// @see [[en:Arrow (symbol)]]
		string = String(string).replace(/[\u2190-\u21FF]/g, '  ');

		// @see http://www.allenkuo.com/genericArticle/view1299.aspx
		// @see [[zh:全形和半形]]
		return string.replace(/[\u3000-\uFF5E]/g, '  ').length;
	}

	var DEFAULT_DISPLAY_WIDTH = 80;
	// 螢幕寬度多少字元。
	function screen_display_width() {
		return library_namespace.platform.nodejs && process.stdout.columns
		// process.stdout.columns 可能被設定為0。 e.g., at Travis CI
		|| DEFAULT_DISPLAY_WIDTH;
	}
	if (false) {
		library_namespace.debug('screen_display_width: '
				+ screen_display_width());
	}

	// CLI 螢幕顯示對齊用。e.g., 對比兩者。
	// left justification, to line up in correct
	function display_align(lines, options) {
		// 前置作業。
		options = library_namespace.setup_options(options);

		if (library_namespace.is_Object(lines)) {
			// pairs/lines={key:value,key:value,...}
			lines = Object.entries(lines);
		}
		var use_display_width = options.display_width || screen_display_width();
		library_namespace.debug('display width: ' + use_display_width, 3);
		var key_display_width = [], line_separator = String('line_separator' in options ? options.line_separator
				// '\n'
				: determine_line_separator()), force_using_new_line = line_separator === '\r\n' ? '\n'
				: line_separator;
		var some_has_new_line = lines.some(function(line) {
			var key = String(line[0]), value = String(line[1]);
			// assert: key.includes(line_separator) === false
			if ((value.length > use_display_width)
					|| value.includes(force_using_new_line)) {
				return true;
			}
			key_display_width.push(String_display_width(key));
		});

		var key_style = options.key_style,
		// e.g., value_style : { color : 'green' }
		value_style = options.value_style,
		// 採用醒目多色彩的顯示方式。
		using_style = !!('using_style' in options ? options.using_style
				: key_style || value_style),
		//
		display_lines = [], max_key_display_width = !some_has_new_line
				&& Math.max.apply(null, key_display_width);
		lines.forEach(function(line) {
			var key = String(line[0]), value = line[1];
			if (some_has_new_line) {
				key = key.trim();
				value = String(value);
				if (using_style) {
					value = [ key_style ? {
						T : key,
						S : key_style
					} : key, line_separator, value_style ? {
						T : value,
						S : value_style
					} : value ];
				} else {
					value = key + line_separator + value;
				}
			} else {
				// 可能沒有 key.padStart()!
				key = key.pad(key.length + max_key_display_width
				// assert: String_display_width(' ') === 1
				- key_display_width.shift(), options.to_fill || ' ',
						options.from_start);
				if (using_style) {
					value = [ key_style ? {
						T : key,
						S : key_style
					} : key, value_style ? {
						T : value,
						S : value_style
					} : value ];
				} else {
					value = key + value;
				}
			}
			if (using_style) {
				if (display_lines.length > 0) {
					// 前面有東西就先跳一行。
					display_lines.push(line_separator);
				}
				display_lines.append(value);
			} else {
				display_lines.push(value);
			}
		});
		return using_style ? display_lines : display_lines.join(line_separator);
	}

	_.display_align = display_align;

	// ------------------------------------

	var has_native_Math_imul = Math.imul
			&& !Math.imul[library_namespace.env.not_native_keyword];

	// ------------------------------------

	set_method(String.prototype, {
		covers : function(string) {
			return this.length >= string.length
			//
			&& !!String_covers(string, this);
		},

		count_of : set_bind(count_occurrence, true),
		// gText : getText,
		// HTML_to_Unicode : HTML_to_Unicode,

		// split_by : split_String_by_length,
		chunk : chunk,

		// 對於可能出現 surrogate pairs 的字串，應當以此來取代 .split('')！
		chars : split_by_code_point,
		codePoints : codePoints,

		remove_head_tail : set_bind(remove_head_tail, true),

		// repeatedly replace till stable
		replace_till_stable : set_bind(replace_till_stable, true),
		replace_check_near : set_bind(replace_check_near, true),

		pad : set_bind(pad, true),
		// 2021/5/4: ''.toRegExp() remane to → ''.to_RegExp()
		to_RegExp : set_bind(String_to_RegExp, true),
		toTitleCase : toTitleCase,
		between : function(head, foot, index, return_data) {
			// 確保可用 string.between().between() 的方法來作簡易篩選。
			/**
			 * <code>
			var data = get_intermediate([ this, head, foot, index ]);
			return data[3] !== NOT_FOUND && data[4] || '';
			</code>
			 */
			return get_intermediate(this, head, foot, index,
			//
			return_data) || '';
		},
		find_between : find_between,
		all_between : all_between,
		each_between : each_between,

		edit_distance : set_bind(Levenshtein_distance),
		diff_with : diff_with_String,

		display_width : set_bind(String_display_width),

		// https://docs.oracle.com/javase/10/docs/api/java/lang/String.html#hashCode()
		hashCode : has_native_Math_imul
		// https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0
		? function hashCode_imul() {
			var hash = 0;
			for (var index = 0, length = this.length; index < length; index++) {
				hash = (Math.imul(31, hash) + this.charCodeAt(index))
				// Convert to 32bit integer
				| 0;
			}
			return hash;
		}
		// https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
		// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript
		: function hashCode_left_shift() {
			var hash = 0;
			for (var index = 0, length = this.length; index < length; index++) {
				hash = ((hash << 5) - hash + this.charCodeAt(index))
				// Convert to 32bit integer
				| 0;
			}
			return hash;
		}
	});

	set_method(Number.prototype, {
		// 'super' 於 IE 為保留字。
		to_super : superscript_integer,
		to_sub : subscript_integer,
		to_fixed : to_fixed,
		mod : set_bind(non_negative_modulo),
		pad : set_bind(pad, true)
	});

	set_method(RegExp.prototype, {
		clone : function() {
			// TODO: using Object.getOwnPropertyNames() to copy others
			return new RegExp(this.source, this.flags);
		},
		reflags : set_bind(renew_RegExp_flags)
	});

	set_method(library_namespace.env.global, {
		// 在 old IE 中 typeof alert==='object'
		// alert : JSalert,

		// https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate
		// https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js
		// TODO: window.postMessage can be used to trigger an immediate but
		// yielding callback.
		setImmediate : function setImmediate(callback) {
			var args = arguments;
			// 因為 setTimeout(callback, 0) 可能使 callback 傳入未規範的 arguments，因此不在外面處理
			// callback。
			return setTimeout(function() {
				if (args.length === 0) {
					callback();
					return;
				}
				args = Array.from(args);
				args.shift();
				callback.apply(null, args);
			}, 0);
		},
		clearImmediate : function clearImmediate(id) {
			return clearTimeout(id);
		}
	});

	// 建議不用，因為在for(in Array)時會...
	set_method(Array.prototype, {
		// Array.prototype.clone
		clone : function() {
			// TODO: using Object.getOwnPropertyNames() to copy others
			return this.slice();
		},
		remove_once : function(value) {
			var index = this.indexOf(value);
			if (index !== NOT_FOUND)
				return this.splice(index, 1);
		},
		// remove all. https://esdiscuss.org/topic/array-prototype-remove-item
		// value 很多的話，應該用 Set, 或 delete + 去除 blank。
		remove : function(value) {
			var index = 0;
			while ((index = this.indexOf(value, index)) !== NOT_FOUND)
				this.splice(index, 1);
		},
		// TODO: should use Array.prototype.reduce()
		// e.g., array.reduce((p,e)=>p+e)
		// Array.prototype.sum()
		sum : function(using_index) {
			// total summation
			// ABSORBING_ELEMENT
			var sum = 0;
			this.forEach(using_index ? function(e, i) {
				sum += i;
			} : function(e) {
				sum += +e;
			});
			return sum;
		},
		// Array.prototype.product()
		product : function(using_index) {
			// MULTIPLICATIVE_IDENTITY
			var product = 1;
			this.every(using_index ? function(e, i) {
				return product *= i;
			} : function(e) {
				return product *= +e;
			});
			return product;
		},
		// TODO: Object.revert_key_value(array, get_key, hash)
		//
		// Array.prototype.to_hash()
		// ['1e3',5,66]→{'1e3':0,'5':1,'66':2}
		// {Function}[get_key]
		to_hash : function(get_key, hash) {
			if (false) {
				return Object.assign(hash || Object.create(null),
				//
				Object.fromEntries(this.map(function(value, index) {
					if (get_key)
						value = get_key(value);
					if (typeof value === 'object')
						value = JSON.stringify(value);
					return [ value, index ];
				})));
			}

			if (!hash) {
				hash = Object.create(null);
			}
			// TODO: 衝突時處理。
			this.forEach(get_key ? function(value, index) {
				value = get_key(value);
				hash[typeof value === 'object' ? JSON.stringify(value)
				//
				: value] = index;
			} : function(value, index) {
				hash[typeof value === 'object' ? JSON.stringify(value)
				//
				: value] = index;
			});
			return hash;
		},
		// Array.prototype.frequency()
		frequency : array_frequency,
		// clone: Array.prototype.slice,
		append : append_to_Array,
		unique_sorted : unique_sorted_Array,
		/**
		 * 去掉已排序，或最起碼將相同元素集在一起之 Array 中重複的 items。
		 * 
		 * 應能確保順序不變。
		 */
		unique : function unique_Array(sorted, get_key) {
			if (typeof sorted === 'function') {
				// shift arguments.
				get_key = sorted;
				sorted = false;

			} else if (sorted) {
				return this.unique_sorted(get_key);
			} else if (typeof get_key !== 'function') {
				return Array.from(new Set(this));
			}

			// @see function Array_intersection_Map()
			var map = new Map;
			function set_item(item) {
				if (!map['has'](item))
					map['set'](get_key(item), item);
			}
			this.forEach(set_item);
			return Array.from(map.values());
		},
		// Check if there is only one unique/single value in the array.
		// 集合中包含不重複的元素的個數=1
		cardinal_1 : function cardinal_1() {
			var configured, value;
			value = this.every(function(element) {
				if (configured) {
					return Object.is(element, value);
				}
				value = element;
				return configured = true;
			});
			return !!(configured && value);
		},
		// Array.prototype.search_sorted
		search_sorted : set_bind(search_sorted_Array, true),
		// Array.prototype.first_matched
		first_matched : set_bind(first_matched, true),

		diff_with : diff_with_Array,

		// warpper
		run_serial :
		// [].run_serial(for_each(run_next, item, index, list), callback, _this)
		function Array_run_serial_asynchronous(for_each, callback, _this) {
			run_serial_asynchronous(for_each, this, callback, _this);
		},
		// [].run_parallel(for_each(run_next, item, index, list, get_status),
		// callback, _this)
		run_parallel : function Array_run_parallel_asynchronous(for_each,
				callback, _this) {
			run_serial_asynchronous(for_each, this, callback, _this, true);
		},

		truncate : Array_truncate,
		// empty the array. 清空 array. truncate
		// Array.prototype.clear()
		clear : Array_truncate
	});

	// ---------------------------------------------------------------------//

	/**
	 * patch: parse ISO date String for IE.<br />
	 * for this function, you should also include 'data.code.compatibility' for
	 * toISOString().
	 * 
	 * @example <code>

	CeL.log((new Date).toISOString());
	CeL.log('' + CeL.ISO_date((new Date).toISOString()));

	 * </code>
	 * 
	 * @param {String}ISO_date_String
	 * 
	 * @returns {Date} date
	 * 
	 * @since 2014/7/26 11:56:1
	 */
	function IE_ISO_date(ISO_date_String) {
		return new Date(IE_ISO_date.parse(ISO_date_String));
	}

	// 應測試是否可正確 parse。
	if (isNaN(Date.parse('0000-01-01T00:00:00.000Z'))) {
		// IE8?
		IE_ISO_date.offset = (new Date).getTimezoneOffset();

		IE_ISO_date.parse = function(ISO_date_String) {
			if (false) {
				library_namespace.debug(ISO_date_String
						.replace(/\.\d{3}Z$/, '').replace(/-/, '/'));
				library_namespace.debug(Date.parse(ISO_date_String.replace(
						/\.\d{3}Z$/, '').replace(/-/, '/')));
			}
			return Date.parse(ISO_date_String.replace(/\.\d{3}Z$/, '').replace(
					/-/, '/'))
					+ IE_ISO_date.offset;
		};
	} else {
		// normal.
		IE_ISO_date.parse = Date.parse;
	}

	_.ISO_date = IE_ISO_date;

	set_method(Date.prototype, {
		clone : function() {
			// TODO: using Object.getOwnPropertyNames() to copy others
			return new Date(this.getTime());
		}
	});

	// ---------------------------------------------------------------------//

	var fulfilled = Object.create(null);
	// assert: needs Promise.race()!
	//
	// status_handler(value is fulfilled && ('not thenable' || 'resolved' ||
	// 'rejected'), value: this_thenable)
	//
	// return promise to wait for the result
	function status_of_thenable(value, status_handler) {
		// Promise.isPromise()
		if (!library_namespace.is_thenable(value)) {
			status_handler('not thenable', value);
			return;
		}

		// https://stackoverflow.com/questions/30564053/how-can-i-synchronously-determine-a-javascript-promises-state
		// https://github.com/kudla/promise-status-async/blob/master/lib/promiseState.js
		/**
		 * <code>
		Promise.race([value, fulfilled]).then(v => { status = v === t ? "pending" : "fulfilled" }, () => { status = "rejected" });
		</code>
		 */
		return Promise.race([ value, fulfilled ])
		//
		.then(function(first_fulfilled) {
			var result = first_fulfilled !== fulfilled && 'resolved';
			status_handler(result, value);
			return result;
		}, function(error_reason) {
			// assert: first_fulfilled !== fulfilled
			// 因為 fulfilled 不會 throw
			var result = 'rejected';
			status_handler(result, value);
			return result;
		});
	}

	_.status_of_thenable = status_of_thenable;

	// ---------------------------------------------------------------------//

	// reverse key and value, 改成 value → key
	function Map__reverse_key_value(options) {
		// 前置處理。
		options = library_namespace.setup_options(options);
		var preserve_older = options.preserve_older,
		// original key is number
		key_is_number = options.key_is_number,
		//
		ignore_null_value = options.ignore_null_value;

		// if (library_namespace.env.has_for_of)
		var reversed_Map = new Map;
		this.forEach(preserve_older === false ? function(key, value) {
			if (ignore_null_value && !key)
				return;
			if (key_is_number)
				value = +value;
			// newer will overwrite older
			reversed_Map.set(key, value);
		} : function(key, value) {
			if (ignore_null_value && !key)
				return;
			if (key_is_number)
				value = +value;
			if (reversed_Map.has(key)) {
				if (!preserve_older) {
					// ignore exists
					return;
				}
				library_namespace
						.warn('Map__reverse_key_value: duplicated key [' + key
								+ ']: ' + reversed_Map.get(key) + '→' + value);
			}
			reversed_Map.set(key, value);
		});
		return reversed_Map;
	}

	set_method(Map.prototype, {
		reverse_key_value : Map__reverse_key_value
	});

	// ------------------------------------

	return (_// JSDT:_module_
	);
}

});
// data.code
/**
 * @name CeL function for source code.
 * @fileoverview 本檔案包含了處理 source code/text 的 functions。
 * @since
 */

// More examples: see /_test suite/test.js
'use strict';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'data.code',

	// .set_bind()
	require : 'data.native.',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// nothing required

	/**
	 * null module constructor
	 * 
	 * @class 處理 source code 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// CamelCase to embedded_underscore/Snake case (underscore-based style) or
	// even hyphenated name
	function Camel_to_underscore(identifier, separator) {
		if (!separator)
			separator = '_';
		return identifier.replace(new RegExp('[\\' + separator + ']', 'g'),
				separator + separator).replace(/[A-Z]/g, function($0) {
			return separator + $0.toLowerCase();
		});
	}

	_.to_underscore = Camel_to_underscore;

	// underscore-based style to CamelCase
	function underscore_to_CamelCase(identifier, separator) {
		if (!separator)
			separator = '_';
		return identifier.replace(
				new RegExp('\\' + separator + '([a-zA-Z])', 'g'),
				function($0, $1) {
					return $1.toUpperCase();
				}).replace(new RegExp('[\\' + separator + ']{2}', 'g'),
				separator);

	}

	library_namespace.set_method(String.prototype, {
		to_underscore : library_namespace.set_bind(Camel_to_underscore),
		to_Camel : library_namespace.set_bind(underscore_to_CamelCase)
	});

	// @see to_hyphenated() @ interact.DOM

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	/**
	 * 類似 sprintf，處理 escape sequence 字串之 function。
	 * 
	 * TODO: http://numeraljs.com/
	 * 
	 * @example <code>
	 * 
	 * </code>
	 * 
	 * @param {String}string
	 *            欲格式化之字串 / source text.
	 * @param {Object|String|Function}[options]
	 *            附加參數/設定選擇性/特殊功能與選項: {<br />
	 *            {character}escape: escape character,<br />
	 *            {Object}escape_length: escape sequence length,<br />
	 *            {Function}handler: 處理 source text (非 escape sequence) 之
	 *            function,<br />
	 *            {Function}escape_handler: 處理 escape sequence 之 function.<br /> }
	 * 
	 * @returns {Array} source text list:<br />
	 *          [source text, escape sequence, source text, escape sequence, ..]
	 */
	function parse_escape(string, options) {
		var
		/**
		 * 搜索到匹配之部分。
		 */
		matched,
		/**
		 * 搜索之 pattern。
		 * 
		 * @type {RegExp}
		 */
		parse_RegExp,
		/**
		 * 下次檢索的起始點。
		 * 
		 * @type {Integer}
		 */
		last_index = 0,
		/**
		 * escape_character
		 * 
		 * @see <a href="http://en.wikipedia.org/wiki/Escape_character"
		 *      accessdate="2012/3/24 11:16" title="Escape character">escape
		 *      character</a>
		 * 
		 * @type {character}
		 */
		e_c = '\\',
		/**
		 * escape sequence length.<br />
		 * default: 1.<br />
		 * 為處理不定長 escape sequence. 這裡僅列出需要特別注意的。
		 * 
		 * @type {Object}
		 */
		e_l = {
			// TODO: [\d],
			u : 4,
			U : 8,
			x : 2
		},
		/**
		 * handle function.<br />
		 * 處理 source text (非 escape sequence) 之 function。
		 * 
		 * @type {Function}
		 */
		handler = undefined,
		/**
		 * Single Character Escape Sequences
		 * 
		 * !see https://en.wikipedia.org/wiki/Escape_sequences_in_C
		 * 
		 * @type {Object}
		 */
		escape_sequences = {
			u : to_char,
			U : to_char,
			x : to_char,
			// '"' : '\"', "'" : "\'", '\\' : '\\',
			b : '\b',
			t : '\t',
			n : '\n',
			v : '\v',
			f : '\f',
			r : '\r'
		},
		/**
		 * escape sequence handle function.<br />
		 * 處理 escape sequence 之 function.
		 * 
		 * @type {Function}
		 */
		e_s_handler = function(s, a) {
			library_namespace.debug(s + ': additional [' + a + '], ', 6);
			if (s in escape_sequences) {
				var f = escape_sequences[s];
				s = typeof f === 'function' ? f(s, a) : f;
			}
			return s;
		},
		/**
		 * 回傳之 source text list:<br />
		 * [source text, escape sequence, source text, escape sequence, ..]
		 * 
		 * @type {Array}
		 */
		source_text_list = [];

		/**
		 * Unicode to character.
		 * 
		 * @param {character}c
		 *            escape sequence 的種類: x, u, U, ..
		 * @param {String}x
		 *            hexadecimal digits /[\da-f]/i
		 * 
		 * @returns {character} character
		 */
		function to_char(c, x) {
			library_namespace.debug('U+' + x + ': ['
					+ String.fromCharCode(parseInt(x, 16)) + ']', 6);
			return String.fromCharCode(parseInt(x, 16));
		}

		/**
		 * 處理匹配之部分:<br />
		 * [source text, escape sequence]
		 * 
		 * @param {String}s
		 *            source text
		 * @param {String}e_s
		 *            escape sequence
		 */
		function handle_slice(s, e_s) {
			library_namespace.debug(last_index + ': [' + s + ']<em>|</em>'
					+ (e_s || ''), 6);
			if (s && handler)
				s = handler(s);
			if (e_s) {
				var l, e = '';
				if (e_s in e_l) {
					e = string.substr(last_index, l = e_l[e_s]);
					library_namespace.debug('(' + l + ') [' + e_s + e + ']', 6);
					parse_RegExp.lastIndex = (last_index += l);
				}
				if (e_s_handler)
					e_s = e_s_handler(e_s, e);
				else if (e !== '')
					e_s += e;
				source_text_list.push(s, e_s);
			} else if (s)
				source_text_list.push(s);
		}

		// 前置處理。
		if (typeof options === 'string')
			e_c = options;
		else if (typeof options === 'function')
			handler = options;
		else if (library_namespace.is_Object(options)) {
			if (typeof options.escape === 'string')
				e_c = options.escape;
			if (typeof options.escape_length === 'object')
				e_l = options.escape_length;
			if (typeof options.handler === 'function')
				handler = options.handler;
			if (typeof options.escape_handler === 'function')
				e_s_handler = options.escape_handler;
		}

		if (e_c.length !== 1)
			throw new Error('The escape character [' + e_c
					+ '] is not single character!');

		parse_RegExp = new RegExp('([\\s\\S]*?)\\' + e_c + '(.)', 'g');

		library_namespace.debug('[' + string + ']', 6);
		while (matched = parse_RegExp.exec(string)) {
			last_index = parse_RegExp.lastIndex;
			handle_slice(matched[1], matched[2]);
		}
		// 處理剩下未匹配之部分。
		handle_slice(string.slice(last_index));

		return handler ? source_text_list.join('') : source_text_list;
	}

	_// JSDT:_module_
	.parse_escape = parse_escape;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	if (false) {
		'2A1B' === CeL.extract_literals('${a}A${b}B', {
			a : 2,
			b : 1
		});
	}

	/**
	 * 模仿樣板字面值（Template literals）
	 * 
	 * TODO: extract_literals('${ ({$:1})["$"] }')
	 * 
	 * @param {String}template_string
	 *            樣板字串（template strings）
	 * @param {Object}key_value_pairs
	 *            變數值 {key:value}
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
	 */
	function extract_literals(template_string, key_value_pairs, options) {
		if (library_namespace.gettext)
			template_string = library_namespace.gettext(template_string);

		template_string = template_string.replace_till_stable(/\${([^{}]+?)}/,
		//
		function(all, expression) {
			expression = expression.trim();
			if (expression in key_value_pairs) {
				return key_value_pairs[expression];
			}
			return all;
		});

		return template_string;
	}

	_// JSDT:_module_
	.extract_literals = extract_literals;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// TODO

	// format (escape sequence / conversion specifications) parser
	// functional keyword,
	function format_parser(escape_character, command_set, options) {
		if (typeof escape_character !== 'string' || !escape_character
				|| !library_namespace.is_Object(command_set))
			return;

		function get_pattern() {
			var pattern = [];
			for ( var i in command_set) {
				pattern.push(command_set[i] && command_set[i].pattern || i);
			}
			return pattern.join('|');
		}

		var search;
		if (options) {
			if (!library_namespace.is_Object(this.options = options))
				options = {
					search : options
				};
			search = options.search;
		} else
			this.options = false;

		if (!search) {
			// RegExp punctuators, reserved words
			escape_character = escape_character.replace(
					/([!?:.*+-^${}()\\\-\[\]])/g, '\\$1');
			search = new RegExp('((?:[^' + escape_character + ']+|'
					+ escape_character + '{2})+)(' + escape_character + ')('
					+ get_pattern() + ')', 'g');
		} else if (!library_namespace.is_type(search, 'RegExp')) {
			search = new RegExp(('' + search)
					.replace(/pattern/g, get_pattern()), 'g');
		}

		this.search = search;
		return format_parser.default_parser.bind(this);
	}

	// parser|parser array
	format_parser.default_parser = function(object, format, usage) {
		var search = this.search, command_set = this.command_set, options = this.options,
		// 處理整段 matched 的函數。
		parse_matched = options.parser,
		// 處理一般字串的函數。
		normal_parser = options.normal_parser,
		// main-loop 所需。
		matched, last_index = 0, command, result = [];

		// 為了 g 初始化. 或者設定 .lastIndex = 0 ?
		search.exec('');
		while (matched = search.exec(format)) {
			last_index = search.lastIndex;
			if (parse_matched)
				result.push(parse_matched.call(this, object, matched, usage));
			else {
				// matched = [matched slice (normal + escape sequence), normal,
				// escape character, format pattern, format command];
				// 處理一般字串。
				result.push(normal_parser ? normal_parser(object, matched[1],
						usage) : matched[1]);
				// 處理一般 format。
				command = matched[4] || matched[3];
				result.push(command in command_set ? command_set[command].call(
						object, matched[3]) : matched[2] + matched[3]);
			}
		}
		// 加入最後一段。
		matched = format.slice(last_index);
		result.push(normal_parser ? normal_parser(object, matched, usage)
				: matched);

		return result.join('');
	};
	format_parser.default_parser.constructor = format_parser;

	format_parser.prototype.concat = function(parser) {
		// TODO
		throw new Error(1,
				'format_parser.prototype.concat: Not Yet Implemented!');
	};

	format_parser.prototype.extend = function() {
		var new_parser = new format_parser(this);
	};

	function hex_to_Unicode() {
		// TODO
		throw new Error(1, 'hex_to_Unicode: Not Yet Implemented!');
	}

	if (false) {
		// backslash escape sequence parser
		var backslash_parser = new format_parser('\\', {
			u : {
				pattern : /[\da-z]{4}/i,
				handler : hex_to_Unicode
			},
			U : {
				pattern : /[\da-z]{8}/i,
				handler : hex_to_Unicode
			},
			x : {
				pattern : /[\da-z]{2}/i,
				handler : hex_to_Unicode
			},
			// '"' : '\"', "'" : "\'", '\\' : '\\',
			b : '\b',
			t : '\t',
			n : '\n',
			v : '\v',
			f : '\f',
			r : '\r'
		});

		// sprintf-like format parser. % conversion specifications
		var sprintf = new format_parser('%', {
			// 數字
			d : function() {
				return parseInt(this.valueOf());
			},
			s : function() {
				return String(this.valueOf());
			}
		}, {
			// replace '[.]'
			search : /%([+\-]?)(\d{0,3})(?:\.(\d{1,2}))([.])/,
			// pre-parser
			normal_parser : backslash_parser
		});

		var extend_sprintf = sprintf.extend('%', {
			// 數字
			z : function() {
			}

		}, {
			// replace '[.]'
			search : /%([+\-]?)(\d{0,3})(?:\.(\d{1,2}))([.])/
		});

	}

	function set_toString(Class, format_parser, special_condition) {
		if (!Class || typeof format_parser !== 'function')
			return;

		// 以指定 format 轉換 Class 之內容成 string。
		var old_toString = Class.prototype.toString;
		// format 用途：i18n|不同領域、不同產業採用不同 format
		Class.prototype.toString = function(format, usage) {
			if (!argument.length)
				return old_toString.call(this);
			if (typeof format === 'number' && special_condition)
				format = typeof special_condition === 'object' ? special_condition[format]
						: typeof special_condition === 'function' ? special_condition(format)
								: format;
			return format_parser.call(this, format, usage);
		};
		return old_toString;
	}

	if (false) {

		set_toString(Date, backslash_parser.extend('%', {
			// 完整年份(四位數的數字，如2000)
			Y : function() {
				return this.getFullYear();
			},
			// 月份 (1-12)。
			m : function() {
				return 1 + this.getMonth();
			}

		}, {
			search : /%([+\-]?)(\d{0,3})(?:\.(\d{1,2}))([.])/
		}));

		set_toString(Number);
		set_toString(library_namespace.quotient, backslash_parser.extend('%', {
			// numerator
			n : function() {
				return this.n;
			},
			// denominator
			d : function() {
				return this.d;
			}
		}, {
			search : /%([+\-]?)(\d{0,3})(?:\.(\d{1,2}))([.])/
		}));

	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	var is_controller = library_namespace.is_Object;

	// 處理非巢式嵌套格式處理器。
	// 2013/1/27 20:9:34
	function unnested_formatter(parameters, start, end) {
		var formatter = {
			start : typeof start === 'function' ? start : start ? function() {
				return start;
			} : function(values) {
				return values.join('');
			},
			parameters : parameters
		};
		if (typeof end === 'function')
			formatter.end = end;
		else if (end)
			formatter.end = function() {
				return end;
			};
		return unnested_formatter_convert.bind(formatter);
	}

	// 將改變 status，不改變 controller, parameters.
	function unnested_formatter_change_status(status, controller, _this,
			controller_is_status) {
		var type, value, parameter, parameter_result, changed_value = typeof _this.end === 'function' ? []
				: false, changed_to_value = [];

		for (type in controller)
			if ((value = controller[type]) !== undefined
					&& (parameter = _this.parameters[type])) {
				parameter_result = controller_is_status ? value
				//
				: typeof parameter === 'function' ? parameter(value, type)
						: parameter + value;
				if (parameter_result != status[type]) {
					// 僅處理有改變的值。
					changed_value && changed_value.push(type);
					changed_to_value.push(status[type] = parameter_result);
				}
			}

		// start
		parameter_result = changed_to_value.length ? _this
				.start(changed_to_value) : '';

		return changed_value && changed_value.length ?
		// close + start
		String(_this.end(changed_value)) + parameter_result
		// start only.
		: parameter_result;
	}

	function unnested_formatter_convert_Array(format_Array, _this, meta_status,
			item_processor) {
		var index = 0, length = format_Array.length, formatted_result = [], item,
		//
		status_now = Object.create(null),
		// 囤積的 controller。
		controller, cloned;

		if (meta_status)
			// duplicate meta_status.
			Object.assign(status_now, meta_status);

		for (; index < length; index++) {
			item = format_Array[index];
			// 先讓 item_processor 處理一下。
			if (item_processor && typeof item !== 'object')
				item = item_processor(item);

			if (is_controller(item)) {
				if (controller) {
					if (!cloned) {
						controller = cloned = Object.assign(
								Object.create(null), controller);
						// cloned = true;
					}
					Object.assign(controller, item);
				} else
					// 不直接 clone，減少 copy 次數。
					controller = item;

			} else {
				// 連續的 controller 只有在必要時（最後一個），才處理。
				if (controller) {
					formatted_result.push(unnested_formatter_change_status(
							status_now, controller, _this));
					controller = cloned = false;
				}

				// need test if item === null, undefined?
				formatted_result
						.push(Array.isArray(item) ? unnested_formatter_convert_Array(
								item, _this, status_now)
								: item);
			}
		}

		// 回復狀態至進入前。
		if (meta_status)
			formatted_result.push(unnested_formatter_change_status(status_now,
					meta_status, _this, true));

		return formatted_result.join('');
	}

	// front-end.
	function unnested_formatter_convert(format_structure, initial_controller,
			item_processor) {
		if (!Array.isArray(format_structure))
			return typeof format_structure === 'string' ? format_structure
					: format_structure || format_structure === 0 ? ''
							+ format_structure : '';

		return unnested_formatter_convert_Array(format_structure, this,
				initial_controller
						&& unnested_formatter_change_status(
								Object.create(null), initial_controller, this),
				typeof item_processor === 'function' && item_processor);
	}

	_.unnested_formatter = unnested_formatter;

	// ---------------------------------------------------------------------//

	/**
	 * create instence
	 * 
	 * @see<a href="http://docs.aegisub.org/manual/ASS_Tags"
	 *      accessdate="2012/4/21 13:16">ASS Tags - Aegisub Manual</a>, <a
	 *      href="http://www20.atwiki.jp/ass_advancedssa/" accessdate="2012/4/21
	 *      13:16">ASS(Advanced SubStation Alpha)@wiki - トップページ</a>
	 */
	var ass_tag = new unnested_formatter({
		italics : function(value) {
			return '\\i' + (value ? 1 : 0);
		},
		bold : function(value) {
			return '\\b' + (isNaN(value) ? value ? 1 : 0 : value);
		},
		underlined : function(value) {
			return '\\u' + (value ? 1 : 0);
		},
		// striked out
		striked : function(value) {
			return '\\s' + (value ? 1 : 0);
		},

		// Border size
		border : '\\bord',
		border_x : '\\xbord',
		border_y : '\\ybord',

		// TODO: shad,xshad,yshad,Blur edges,Letter spacing,Text rotation,Text
		// shearing,alpha,Karaoke effect,Wrap style,position,Movement,Rotation
		// origin,Fade,Animated transform,Clip,Drawing tags

		font_name : '\\fn',
		font_size : '\\fs',
		font_scale_x : '\\fscx',
		font_scale_y : '\\fscy',
		font_encoding : '\\fe',

		color : function(value) {
			return '\\1c&H' + value + '&';
		},
		border_color : function(value) {
			return '\\3c&H' + value + '&';
		},
		shadow_color : function(value) {
			return '\\4c&H' + value + '&';
		},

		// Line alignment:
		// 789
		// 456
		// 123
		align : '\\an'
	}, function(array) {
		return '{' + array.join('') + '}';
	});

	ass_tag.reduce = function(tag) {
		return tag && typeof tag === 'string' ? tag.replace(/}{\\/g, '\\')
				.replace(/{[^{}]+\\r([}\\])/g, '{\\r$1').replace(
						/(\n[^{}\n]*){\\r}/g, '$1').replace(
						/\s*{\\r}(\s*\r?\n)/g, '$1').replace(
						/(\\r}[^{]*){\\r}/g, '$1').replace(
						/(\\r}[^{]*){\\r\\/g, '$1{') : tag;
	};

	_.ass_tag = ass_tag;

	// test: "{\1c&HEEFFEE&}colored text"
	// var tag = CeL.ass_tag([ { color : 'EEFFEE' }, 'colored text' ]);

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// https://en.wikipedia.org/wiki/Tree_traversal
	// traversal algorithm

	// @see traversal_DOM_backward() @ CeL.interact.DOM
	function traversal(start_node, action, options) {
		// no for_node action: just get {Array}list
		action = function(node) {
			return exit;
		};
		options = {
			// https://en.wikipedia.org/wiki/Depth-first_search
			// pre-order, in-order and post-order depth-first traversal
			// https://en.wikipedia.org/wiki/Breadth-first_search
			type : 'breadth',
			// direction: forward, backward
			backward : true,
			start_node_is_root : true,
			terminate_node : node,
			// get next node
			next_node : function(node_now, index, parent) {
				return node;
			},
			filter : function(node) {
				return true;
			},
			// final action
			last : function() {
			}
		};
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	return (_// JSDT:_module_
	);
}

});
// data.date
/**
 * @name CeL function for date / time operations.
 * @fileoverview 本檔案包含了 date / time 的功能。
 * 
 * TODO: http://momentjs.com/
 * @see Moment.js https://momentjs.com/
 * @since
 */

'use strict';
// 'use asm';

// More examples: see /_test suite/test.js

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'data.date',
	// includes() @ CeL.data.code.compatibility.
	require : 'data.code.compatibility.'

	// for gettext()
	// + '|application.locale'

	+ '|data.native.set_bind|data.code.parse_escape|data.native.pad',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var set_bind = this.r('set_bind'), parse_escape = this.r('parse_escape'), pad = this
			.r('pad');

	/**
	 * null module constructor
	 * 
	 * @class date objects 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	if (false) {
		(function() {
			/*
			 * opposite of toUTCString() 尚不成熟！假如是type=='date'，不如用new Date()!
			 * string大部分可用new Date(Date.parse(str))代替!
			 * http://www.comsharp.com/GetKnowledge/zh-CN/TeamBlogTimothyPage_K742.aspx
			 */
			var UTCDay, UTCMonth;
			set_Object_value('UTCDay', 'Sun,Mon,Tue,Wed,Thu,Fri,Sat', 1);
			set_Object_value('UTCMonth',
					'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec', 1);
			// 0:[Mon, 9 Aug 2004 12:05:00 GMT],1:[Thu Sep 30
			// 18:12:08 UTC+0800 2004],2:[Sat Jun 26 18:19:46 2004]
			var fromUTCStringFormat = [ [ 0, 3, 2, 1, 4 ], [ 0, 5, 1, 2, 3 ],
					[ 0, 4, 1, 2, 3 ] ];
			function fromUTCString(str, format) {
				var s = '' + str, f;
				if (!s)
					return;
				if (typeof format == 'undefined')
					if (f = Date.parse(s))
						return new Date(f);
					else
						return 'Unknown format!';// format=0;
				if (!isNaN(format) && format < fromUTCStringFormat.length)
					f = fromUTCStringFormat[format];
				else
					return 'Yet support this kind of format[' + format
							+ ']!\nWe support to ' + fromUTCStringFormat.length
							+ '.';
				if (!f[0])
					f[0] = ' ';
				s = s.replace(new RegExp(f[0] + '+', 'g'), f[0]).split(f[0]);
				if (s.length < f.length)
					return 'The item length of data: ' + s.length
							+ ' is less then format[' + format + ']: '
							+ f.length + '!\n' + s.join(',');// new
				// Date
				if (f.length == 5)
					s[f[4]] = s[f[4]].split(':');
				else if (f.length == 7)
					s[f[4]] = [ s[f[4]], s[f[5]], s[f[6]] ];
				else
					return 'Illegal date format!';
				if (format == 1 && s[4].match(/([+-]\d{2})/))
					s[f[4]][0] = parseInt(s[f[3]][0]) + parseInt(RegExp.$1);
				library_namespace.debug(str + '\n' + s[f[1]] + ',' + s[f[2]]
						+ '(' + UTCMonth[s[f[2]]] + '),' + s[f[3]] + ','
						+ s[f[4]][0] + ',' + s[f[4]][1] + ',' + s[f[4]][2]);
				// check, 可以包括星期
				if (!(s[f[2]] = UTCMonth[s[f[2]]])
						|| !(s = new Date(s[f[1]], s[f[2]], s[f[3]],
								s[f[4]][0], s[f[4]][1], s[f[4]][2]))) // Date.UTC()
					s = 'Input data error!';
				return s;
			}
		});
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	var is_Date = library_namespace.is_Date,
	//
	UTC_PATTERN = /UTC(?:\s*([+-]?\d{1,2})(:\d{1,2})?)?/i,
	// assert: isNaN(DEFAULT_TIME_ZONE) === true
	// isNaN(Object.create(null)) will throw @ Chrome/36
	// (Cannot convert object to primitive value),
	// therefore we can't use Object.create(null) here.
	DEFAULT_TIME_ZONE = {
		timezone : 'default'
	};

	// 嘗試 UTC+08:00 之類的標準表示法。
	function get_minute_offset(date_string) {
		var matched = date_string.match(UTC_PATTERN);
		if (matched) {
			return 60 * (matched[1] | 0) + (matched[2] | 0);
		}
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// basic constants. 定義基本常數。

	/** {Number}一整天的 time 值。should be 24 * 60 * 60 * 1000 = 86400000. */
	var ONE_DAY_LENGTH_VALUE = new Date(0, 0, 2) - new Date(0, 0, 1),
	// ONE_DAY_LENGTH_VALUE = CeL.date.to_millisecond('1D')
	// 3 * ONE_DAY_LENGTH_VALUE === CeL.date.to_millisecond('3D')

	/** {Number}一分鐘的 time 值(in milliseconds)。should be 60 * 1000 = 60000. */
	ONE_MINTE_LENGTH_VALUE = new Date(0, 0, 1, 0, 2) - new Date(0, 0, 1, 0, 1),
	/** {Number}一整時辰的 time 值。should be 2 * 60 * 60 * 1000 = 7200000. */
	ONE_時辰_LENGTH_VALUE = new Date(0, 0, 0, 2) - new Date(0, 0, 0, 0),

	// e.g., UTC+8: -8 * 60 = -480
	present_local_minute_offset = (new Date).getTimezoneOffset() || 0;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// for Julian date. 期能不使用內建 Date 以快速計算日期。
	// @see https://en.wikipedia.org/wiki/Julian_day#Calculation
	// 適用範圍: 4717/3/1 BCE 0:0 之後。

	/**
	 * Get Julian day number (JDN) of date.<br />
	 * If type of date is Date, we'll treat date as local date.<br />
	 * 因為得出的是 UTC+0 12:0 之 JDN，UTC+0 0:0 之 JD = JDN - .5。
	 * 
	 * JDN = Math.round(JD);
	 * 
	 * @param {String|Date|Number}date
	 *            {Date}date or date value
	 * @param {Boolean}type
	 *            calendar type. true: Gregorian, false: Julian, 'CE': Common
	 *            Era
	 * @param {Boolean}no_year_0
	 *            no year 0
	 * @param {Boolean}get_remainder
	 *            Will return [ {Number} Julian day number (JDN), {Number}
	 *            remainder ].<br />
	 *            remainder / ONE_DAY_LENGTH_VALUE = day.
	 * 
	 * @returns {Number} Julian day number (JDN)
	 */
	function Julian_day(date, type, no_year_0, get_remainder) {
		if (typeof date === 'string') {
			var matched = date
			// parse '1/1/1'
			.match(/(-?\d{1,4})[\/\-](\d{1,2})[\/\-](\d{1,2})/);
			if (matched) {
				return Julian_day.from_YMD(matched[1] | 0, matched[2] | 0,
						matched[3] | 0, type, no_year_0);
			}

			if (-4716 < date && date < 9999) {
				// treat as year
				return Julian_day.from_YMD(date | 0, 1, 1, type, no_year_0);
			}

			if (matched = date.match(/(-?\d{1,4})[\/\-](\d{1,2})/)) {
				return Julian_day.from_YMD(matched[1] | 0, matched[2] | 0, 1,
						type, no_year_0);
			}

			// throw new Error('Julian_day: Cannot parse [' + date + ']');
			if (library_namespace.is_debug(2)) {
				library_namespace.error('Julian_day: 無法解析 [' + date + ']！');
			}
			return;
		}

		if (!isNaN(date)) {
			// offset: convert local to UTC+0.
			var offset;
			if (is_Date(date)) {
				offset = date.getTimezoneOffset() * ONE_MINTE_LENGTH_VALUE;
				date = date.getTime();
			} else {
				offset = Julian_day.default_offset;
			}

			// treat ((date)) as date value. So it's Gregorian.
			type = true;
			date -= offset
			// epoch 為 12:0，需要將之減回來以轉成 midnight (0:0)。
			+ Julian_day.epoch - ONE_DAY_LENGTH_VALUE / 2;
			var remainder;
			if (get_remainder) {
				remainder = date % ONE_DAY_LENGTH_VALUE;
				if (remainder < 0) {
					remainder += ONE_DAY_LENGTH_VALUE;
				}
			}
			date = Math.floor(date / ONE_DAY_LENGTH_VALUE);
			return get_remainder ? [ date, remainder ] : date;
		}

		if (Array.isArray(date)) {
			var JD = Julian_day.from_YMD(date[0], date[1], date[2], type,
					no_year_0);
			return get_remainder ? [ JD, date.length > 3
			//
			? Julian_day.from_HMS(date[3], date[4], date[5]) - .5 : 0 ] : JD;
		}
	}

	/**
	 * Get JDN of (year, month, date).<br />
	 * input MUST latter than -4716/3/1 (4717/3/1 BCE)!!
	 * 
	 * <code>

	JDN = CeL.Julian_day.from_YMD(year, month, date, 'CE');

	</code>
	 * 
	 * @param {Integer}year
	 *            year >= -4716
	 * @param {Natural}month
	 *            1–12
	 * @param {Natural}date
	 *            1–31
	 * @param {Boolean}type
	 *            calendar type. true: Gregorian, false: Julian, 'CE': Common
	 *            Era
	 * @param {Boolean}no_year_0
	 *            no year 0
	 * 
	 * @returns {Number} JDN
	 */
	Julian_day.from_YMD = function(year, month, date, type, no_year_0) {
		if (Array.isArray(year)) {
			return Array.isArray(month)
			// month = [H,M,S]
			? Julian_day.from_YMD(year[0], year[1], year[2], date, type) - .5
					+ Julian_day.from_HMS(month[0], month[1], month[2])
			//
			: Julian_day.from_YMD(year[0], year[1], year[2], month, date);
		}
		if (no_year_0 && year < 0) {
			// no year 0. year: -1 → 0
			year++;
		}
		if (type === 'CE') {
			type = year > 1582
			// Julian calendar（儒略曆）1582年10月4日的下一日為
			// Gregorian calendar（格里高利曆）1582年10月15日。
			|| year == 1582 && (month > 10 || month == 10 && date >= 15);
		}

		// method: 自 3月起算。
		if (false) {
			if (month < 3) {
				year = +year + 4800 - 1 | 0;
				month = +month + 12 - 3 | 0;
			} else {
				year = +year + 4800 | 0;
				month = +month - 3 | 0;
			}
		}
		// a=1: 1–2月, a=0: 3–12月
		// var a = (14 - month) / 12 | 0;
		var a = month < 3 ? 1 : 0;
		year = +year + 4800 - a | 0;
		month = +month + 12 * a - 3 | 0;
		// assert: year, month are integers. month >= 0

		// 3–7月:153日
		return +date + ((153 * month + 2) / 5 | 0)
		//
		+ 365 * year + Math.floor(year / 4) -
		// for Gregorian calendar
		(type ? 32045 + Math.floor(year / 100) - Math.floor(year / 400)
		// for Julian calendar
		: 32083);
	};

	/**
	 * Get day value from hour, minute, second.<br />
	 * TODO: microsecond µs, nanosecond ns
	 * 
	 * @param {Number}[hour]
	 *            hour
	 * @param {Number}[minute]
	 *            minute
	 * @param {Number}[second]
	 *            second
	 * @param {Number}[millisecond]
	 *            millisecond
	 * 
	 * @returns {Number}day value
	 */
	Julian_day.from_HMS = function(hour, minute, second, millisecond) {
		// initialization, milliseconds to seconds
		var time = millisecond ? millisecond / 1000 : 0;
		if (second) {
			time += +second;
		}
		// to minutes
		time /= 60;
		if (minute) {
			time += +minute;
		}
		// to hours → to days
		return (time / 60 + (+hour || 0)) / 24;
	};

	/**
	 * Get (year, month, date) of JDN.
	 * 
	 * @param {Number}JDN
	 *            Julian date number
	 * @param {Boolean}type
	 *            calendar type. true: Gregorian, false: Julian, 'CE': Common
	 *            Era.
	 * @param {Boolean}no_year_0
	 *            no year 0
	 * 
	 * @returns {Array} [ year, month, date ]
	 * 
	 * @see https://en.wikipedia.org/wiki/Julian_day#Julian_or_Gregorian_calendar_from_Julian_day_number
	 *      algorithm by Richards 2013
	 */
	Julian_day.to_YMD = function(JDN, type, no_year_0) {
		var f = JDN + 1401 | 0;
		if (type && (type !== 'CE' || JDN >= Gregorian_reform_JDN)) {
			// to proleptic Gregorian calendar
			f += ((((4 * JDN + 274277) / 146097 | 0) * 3) / 4 | 0) - 38;
		} else {
			// to proleptic Julian calendar with year 0
		}

		var e = 4 * f + 3 | 0,
		//
		g = (e % 1461) / 4 | 0,
		//
		h = 5 * g + 2,
		//
		date = ((h % 153) / 5 | 0) + 1,
		//
		month = (((h / 153 | 0) + 2) % 12) + 1,
		//
		year = (e / 1461 | 0) - 4716 + ((12 + 2 - month) / 12 | 0);

		if (no_year_0 && year < 1) {
			// no year 0. year: 0 → -1
			year--;
		}

		// TODO: time
		return [ year, month, date ];
	};

	/**
	 * JD to YMDHMS. Get (year, month, date, hour, minute, second) of JD.
	 * 
	 * @param {Number}JD
	 *            Julian date
	 * @param {Number}zone
	 *            local time zone. 0 if is UTC+0 (default), 8 if is UTC+8.
	 * @param {Boolean}type
	 *            calendar type. true: Gregorian, false: Julian, 'CE': Common
	 *            Era.
	 * @param {Boolean}no_year_0
	 *            no year 0
	 * 
	 * @returns {Array} [ year, month, date, hour, minute, second ]
	 */
	Julian_day.to_YMDHMS = function(JD, zone, type, no_year_0) {
		// +.5: input JD instead of JDN
		// 1e-16 (days): for error. e.g., CeL.Julian_day.to_YMDHMS(.6, 8)
		// 2451544.5 is 2000/1/1 0:0 UTC+12, 1999/12/31 12:0 UTC+0
		// → 2451545 is 2000/1/1 12:0 UTC+0
		// 0 is -4712/1/1 12:0 UTC+0, -4712/1/2 0:0 UTC+12
		var JDN = Julian_day.to_YMD(JD += .5 + 1e-16 + (zone | 0) / 24, type,
				no_year_0);
		// to local time
		JDN.push((JD = JD.mod(1) * 24) | 0, (JD = (JD % 1) * 60) | 0,
				(JD = (JD % 1) * 60) | 0);
		// milliseconds 去除 error。
		// 4e-11:
		// 1e-16*86400 ≈ 1e-11
		// (-Math.log10((1/2-1/3-1/6)*86400)|0) → 1e-11
		// So we use 1e-11 + 1e-11 = 2e-11.
		// But for CeL.Julian_day.to_YMDHMS(.6, 8), it seems still not enough.
		// We should use 4e-11 at least.
		if ((JD %= 1) > 4e-11) {
			// 8.64e-9 = 1e-16 * 86400000: 將之前加的 error 修正補回來。
			// 約精確到 1e-7 ms
			JDN.push(JD * 1000 - 8.64e-9);
		} else {
			// 當作 error。
		}
		return JDN;
	};

	/**
	 * Get the local midnight date of JDN.<br />
	 * 傳回 local midnight (0:0)。
	 * 
	 * <code>

	date = CeL.Julian_day.to_Date(JDN);

	</code>
	 * 
	 * @param {Integer}JDN
	 *            input {Integer}JDN or {Number}JD.
	 * @param {Boolean}is_JD
	 *            The JDN is JD.
	 * @param {Boolean}get_value
	 *            get {Number} date value instead of {Date}.
	 * 
	 * @returns {Date} local midnight date
	 */
	Julian_day.to_Date = function(JDN, is_JD, get_value, offset) {
		if (!is_JD) {
			// epoch 為 12:0，需要將之減回來以轉成 midnight (0:0)。
			JDN -= .5;
		}
		JDN = JDN * ONE_DAY_LENGTH_VALUE + Julian_day.epoch
		//
		+ (isNaN(offset) ? Julian_day.default_offset : offset);
		return get_value ? JDN : new Date(JDN);
	};

	Julian_day.YMD_to_Date = function(year, month, date, type, get_value,
			no_year_0) {
		var JDN = Julian_day.from_YMD(year, month, date, type, no_year_0);
		// 當作 JD 才方便 date.format() 得到正確結果。
		return Julian_day.to_Date(JDN, true, get_value);
	};

	/**
	 * Get Julian date (JD) of date.
	 * 
	 * @param {String|Date|Number}date
	 *            date or date value
	 * @param {Boolean}type
	 *            calendar type. true: Gregorian, false: Julian, 'CE': Common
	 *            Era
	 * @param {Boolean}no_year_0
	 *            no year 0
	 * 
	 * @returns {Number} Julian date
	 */
	Julian_day.JD = function(date, type, no_year_0) {
		if (is_Date(date))
			return Date_to_JD(date);
		date = Julian_day(date, type, no_year_0, true);
		return date[0] + date[1] / ONE_DAY_LENGTH_VALUE;
	};

	/**
	 * default offset (time value)
	 * 
	 * @type {Integer}
	 */
	Julian_day.default_offset = present_local_minute_offset
			* ONE_MINTE_LENGTH_VALUE;

	// Get the epoch of Julian date, i.e., -4713/11/24 12:0
	(function() {
		var date = new Date(0),
		// [ -4713, 11, 24 ]
		JD0 = Julian_day.to_YMD(0, true);
		// set the date value of Julian date 0
		date.setUTCHours(12, 0, 0, 0);
		date.setUTCFullYear(JD0[0] | 0, (JD0[1] | 0) - 1, JD0[2] | 0);
		Julian_day.epoch = date.getTime();
		// Julian_day.epoch = -210866760000000;
	})();

	/**
	 * Gregorian reform JDN.
	 * 
	 * @type {Integer}
	 */
	var Gregorian_reform_JDN = Julian_day.from_YMD(1582, 10, 15);

	/**
	 * Get weekday index of JD.
	 * 
	 * @param {Number}JD
	 *            Julian date
	 * @param {Boolean}to_ISO
	 *            to ISO type.
	 * 
	 * @returns {Integer} weekday index.
	 * 
	 * @see https://en.wikipedia.org/wiki/Zeller's_congruence
	 */
	Julian_day.weekday = function(JD, to_ISO) {
		return to_ISO ? (Math.floor(JD) % 7) + 1
		// Sunday: 0, Monday: 1, ...
		: (Math.floor(JD) + 1) % 7;
	};

	_.Julian_day = Julian_day;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// Unix time (a.k.a. POSIX time or Epoch time)
	function Unix_time(date) {
		return ((date || Date.now()) - Unix_time.epoch) / 1000;
	}

	_.Unix_time = Unix_time;

	// Unix epoch '1970-01-01T00:00:00Z', 0 @ most systems
	Unix_time.epoch = Date.parse('1970/1/1 UTC');

	Unix_time.to_Date = function(time_value) {
		return new Date(1000 * time_value + Unix_time.epoch);
	};

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// The 1900 Date System
	// 序列值 1 代表 1/1/1900 12:00:00 a.m。
	// 數字 32331.06 代表日期和時間 7/7/1988年 1:26:24 a.m。
	var Excel_1900_epoch = Date.parse('1900/1/1') - ONE_DAY_LENGTH_VALUE,
	// The 1904 Date System
	// 依預設，Excel for Mac 使用 1904 日期系統，而 Excel for Windows 使用 1900 日期系統。這表示當您在
	// Excel for Mac 中輸入序列值 1 並將其格式化為日期，Excel 會將其顯示為 1/2/1904 12:00 a.m。Excel
	// for Windows 則會將序列值 1 顯示為 1/1/1900 12:00 a.m。
	// Date.parse('1904/1/2') - ONE_DAY_LENGTH_VALUE
	Excel_1904_epoch = Date.parse('1904/1/1');

	function Excel_Date(date_value, is_Mac, get_value) {
		// 0會被轉成 1900/1/0，已經不正常。
		if (date_value >= 1) {
			// 這邊採用與 function Date_to_Excel() 相對應的判別式。
			if (!is_Mac && !(date_value < 60)) {
				date_value--;
			}
			date_value = (is_Mac ? Excel_1904_epoch : Excel_1900_epoch)
					+ ONE_DAY_LENGTH_VALUE * date_value;
		} else {
			date_value = NaN;
		}
		return get_value ? date_value : new Date(date_value);
	}

	_.Excel_Date = Excel_Date;

	if (false) {
		Excel_Date.error_value = {
			valueOf : function() {
				return NaN;
			},
			toString : function() {
				return '#VALUE!';
			}
		};
	}
	// Excel 2010 會將錯誤值顯示為'#VALUE!'，但負數或過大值則會以'#'填滿格子(e.g., "#########")。
	Excel_Date.error_value = '#VALUE!';

	if (false) {
		// to show Excel date
		(date = date.to_Excel()) && date.toFixed(2)
				|| CeL.Excel_Date.error_value;
	}

	// http://support.microsoft.com/kb/214094
	// Excel for Mac uses the 1904 date system and
	// Excel for Windows uses the 1900 date system.
	function Date_to_Excel(date, is_Mac) {
		date = date.getTime() - (is_Mac ? Excel_1904_epoch : Excel_1900_epoch);
		return date >= 1 ?
		// Excel 有 1900/2/29 (60)，但現實中沒有這天。因此一般轉換時，不應出現60之值。
		// Mac 系統以 1904 CE 起始，迴避了這個問題。
		// 0: 1900/1/0
		// https://en.wikipedia.org/wiki/Year_1900_problem
		// 60: 1900/2/29 (nonexistent date)
		// 61: 1900/3/1
		(date /= ONE_DAY_LENGTH_VALUE) < 60 || is_Mac ? date : date + 1
		// or use Excel_Date.error_value
		: NaN;
	}

	// ----------------------------------------------------------------------------

	// 2016/8/22 22:1:51

	/**
	 * <code>
	 https://msdn.microsoft.com/en-us/library/system.datetime.tofiletime.aspx
	 (long) DateTime.ToFileTime Method ()
	 A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file.
	 </code>
	 */
	VS_file_time.epoch = Date.parse('1601-01-01T00:00:00Z');

	// https://msdn.microsoft.com/en-us/library/system.datetime.fromfiletime.aspx
	// DateTime.FromFileTime Method (Int64)
	// Converts the specified Windows file time to an equivalent local time.
	function VS_file_time(file_time, return_Date) {
		var date_value = VS_file_time.epoch + file_time / (1e-3 / (1e-9 * 100));
		return return_Date ? new Date(date_value) : date_value;
	}

	_.VS_file_time = VS_file_time;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// ISO 8601
	var PATTERN_ISO_DATE = /^-?\d{4,8}-[01]\d-[0-3]\d(T[012]\d:[0-6]\d:[0-6]\d(\.\d{3})?(Z|[+\-][012]\d:\d{2}))?$/;

	/**
	 * convert the string to Date object.
	 * 
	 * TODO: parse /([今昨明]|大?[前後])天/, '01-03' (相對於當前),
	 * /\d+(分[鐘钟]?|小[時时]|毫?秒|[日天週年]|星期|[禮礼]拜|[個个]月)([前後])/; 相對於
	 * options.base_date . also see indicate_date_time()
	 * 
	 * @example <code>
	 * '2003/1-4 12:53:5.45PM'.to_Date('CST').format();
	 * '12:53:5.45PM 2003/1-4'.to_Date('CST').format();
	 * </code>
	 * 
	 * @param {String}date_string
	 *            date string
	 * @param {Object}options {
	 *            <br />
	 *            {String|RegExp}format: the format used.<br />
	 *            {Function}parser: the parser used. if set to unrecognized
	 *            (e.g., null) parser, it will use Date.parse() ONLY.<br />
	 *            {String|Number}zone: 設定 date_string 之 time zone or country
	 *            (e.g., 'CST', 'TW') || 時差 in hour (例如 TW: UTC+8 → 8, 可使用.5).<br />
	 *            {Date}reform: 對某些特殊 paser，如 CE，需要特別設定改曆日期時用。<br />
	 *            <br />
	 *            {Boolean}period_end:<br />
	 *            將指定內容視為一時段，並取得此期間之結束（終結）時間，因此 parse 後將得到第一個不屬於此範圍之時刻。<br />
	 *            e.g., '2000/5' → 2000/6/1 0:0:0<br />
	 *            e.g., '5/3' → 5/4 0:0:0<br />
	 *            e.g., '5/3 12:' → 5/4 13:0:0<br />
	 *            e.g., '5/3 12:50' → 5/4 12:51:0<br /> }
	 * 
	 * @returns {Date} new Date
	 * @since 2012/3/22 23:58:38 重構並測試。
	 * @see <a href="http://msdn.microsoft.com/zh-tw/library/t5580e8h.aspx"
	 *      accessdate="2012/3/23 23:26">JScript Date 物件</a>
	 * @see wikitext: {{#time:Y年n月j日|+1 day}}
	 */
	function String_to_Date(date_string, options) {
		// 檢測輸入引數(arguments)，將之正規化(normalization)，處理、轉換為規範之標準型態。
		library_namespace.debug('parse (' + typeof date_string + ') ['
				+ date_string + ']', 3, 'String_to_Date');

		if (typeof date_string === 'date') {
			// 應對在 Excel 等外部程式會出現的東西。
			return new Date(date_string);
		}
		if (is_Date(date_string)) {
			return date_string;
		}

		date_string = date_string.trim();
		if (!date_string) {
			// this.toString();
			// date_string = this.valueOf();
			return;
		}

		if (PATTERN_ISO_DATE.test(date_string)) {
			// 對於有明確指定之 UTC date 如 .toISOString() 之產出或 ISO 8601，
			// 應當不管 time zone 如何設定，直接回傳。
			return new Date(date_string);
		}

		var tmp, matched, minute_offset;

		if (library_namespace.is_RegExp(options)) {
			// 將 options 當作 pattern。
			options = {
				pattern : options
			};
		} else if (!library_namespace.is_Object(options)) {
			// 前置處理。
			tmp = options;
			options = Object.create(null);
			if (tmp) {
				if (tmp in String_to_Date.parser) {
					options.parser = String_to_Date.parser[tmp];
				} else if ((tmp in String_to_Date.zone) || !isNaN(tmp)) {
					options.zone = tmp;
				} else {
					// 判斷是否為正規 format。
					options.format = tmp;
				}
			}
		}

		// console.trace(date_string);
		if (library_namespace.is_RegExp(options.pattern)
		//
		&& (matched = date_string.match(options.pattern))) {
			// 依照 matched 匹配的來正規化/設定年月日。
			// e.g., new Date('1234/5/6')
			// === '1234年5月6日'.to_Date(/(\d+)年(\d+)月(\d+)日/)
			// ===
			// '5/6/1234'.to_Date({pattern:/(\d+)\/(\d+)\/(\d+)/,pattern_matched:[3,1,2]})
			tmp = Array.isArray(options.pattern_matched) ? options.pattern_matched
					: [ 1, 2, 3 ];
			date_string = tmp.map(function(processor) {
				return typeof processor === 'function'
				//
				? processor(matched) : matched[processor];
			}).join(
			// 長度3時當作年月日，否則當作自訂處理。
			tmp.length === 3 ? '/' : '');
		}
		// console.trace(date_string);

		// 設定指定 time zone 之 offset in minutes.
		tmp = options.zone;
		library_namespace.debug('設定 time zone / offset hours: ' + tmp, 2);
		// TODO: for Daylight Saving Time (DST) time zones, etc.
		if (tmp in String_to_Date.zone) {
			tmp = String_to_Date.zone[tmp];
		}
		if (library_namespace.is_Function(tmp)) {
			tmp = tmp();
		}
		if (typeof tmp !== 'string'
				|| isNaN(minute_offset = get_minute_offset(tmp))) {
			minute_offset =
			// 測試純數字小時。
			-12 <= tmp && tmp <= 14 ? 60 * tmp
			// 再測試純數字分鐘。
			: isNaN(tmp)
			//
			? DEFAULT_TIME_ZONE : +tmp;
		}
		library_namespace.debug('最終設定 offset '
				+ (minute_offset === DEFAULT_TIME_ZONE ? '(default　= '
						+ String_to_Date.default_offset + ')' : minute_offset)
				+ ' minutes.', 2);

		// 判別 parser。
		tmp = library_namespace.is_Function(tmp = options.parser) ? tmp
				: String_to_Date.parser[tmp] || String_to_Date.default_parser;

		if (library_namespace.is_Function(tmp)) {
			library_namespace.debug('use customize parser to parse ('
					+ typeof date_string + ') [' + date_string + '].', 2);
			// console.trace(date_string);
			if (tmp = tmp(date_string,
			// assert: parser 亦負責 parse time zone offset.
			minute_offset, options)) {
				return tmp;
			}
		}

		library_namespace.debug('無法以 parser 判別。use Date.parse() to parse.', 2);
		if (tmp = Date.parse(date_string)) {
			// TODO: period_end 無效。
			// native parser 會處理 time zone offset.
			tmp = new Date(tmp);
			if (!isNaN(minute_offset) && minute_offset !== DEFAULT_TIME_ZONE) {
				tmp.setMinutes(tmp.getMinutes() - tmp.getTimezoneOffset()
						- minute_offset);
			}
			return tmp;
		}
	}

	// 本地之 time zone / time offset (UTC offset by minutes)。
	// e.g., UTC+8: 8 * 60 = +480
	// e.g., UTC-5: -5 * 60
	// 亦為 Date.parse(date_string) 與 new Date() 會自動附上的當地時間差距。
	// assert: String_to_Date.default_offset 為整數。
	String_to_Date.default_offset = -present_local_minute_offset;

	/**
	 * <code>
	主要指是否計算 0 year。
	.no_year_0 = true: 將 astronomical year numbering 轉成一般紀年法（1 BCE→1 CE）。
	僅用於計算 Gregorian calendar, Julian calendar。
	normal	astronomical
	2	2
	1	1
	-1	0
	-2	-1
	-3	-2
	</code>
	 */
	String_to_Date.no_year_0 = Date_to_String.no_year_0 = true;

	var stem_branch_date_pattern,
	// 精密度: 千紀,世紀,年代,年,月,日,時,分,秒,毫秒
	index_precision = 'millennium,century,decade,year,month,day,hour,minute,second,microsecond'
			.split(',');
	(function() {
		// e.g., for '公元前720年2月22日'
		var start_pattern = '^[^\\d:\\-−‐前.]*',
		// with weekday 星期
		mid_pattern = '(?:\\s*\\(?[日月火水木金土一二三四五六]\\)?)?(?:\\s+',
		// e.g., for '1616年2月壬午', '7時'
		end_pattern = ')?[^\\d日時]*$',

		// pattern of date. 當今會準確使用的時間，
		// 為 -47xx BCE (Julian day 0) 至 2xxx CE。
		date_pattern = /(?:([\-−‐前]?(?:[0-4]?\d{3}|\d{1,3}))[\/.\-年 ])?\s*([01]?\d)(?:[\/.\-月 ]\s*([0-3]?\d)日?)?/.source,
		// pattern of time. [0-6]: 支持閏秒
		time_pattern = /([0-2]?\d)[:時时]\s*(?:([0-6]?\d)[:分]?\s*(?:([0-6]?\d)(?:\.(\d+))?)?)?秒?\s*(?:([PA])M)?/i.source;

		// 日期先: date [time]
		String_to_Date_default_parser.date_first = new RegExp(start_pattern
				+ date_pattern + mid_pattern + time_pattern + end_pattern, 'i');
		// 時間先: time [date]
		String_to_Date_default_parser.time_first = new RegExp(start_pattern
				+ time_pattern + mid_pattern + date_pattern + end_pattern, 'i');

		// 將於下方作初始化。
		stem_branch_date_pattern = date_pattern;
	})();

	// [ all, start month, end month, year, misc ]
	var PATTERN_EN_MONTH_YEAR = /^(?:([a-z]{3,9})\s*[.\/\-–－—─~～〜﹣])?\s*([a-z]{3,9}),?\s+(\d{1,4})( +\D.*)?$/i,
	// [ all, year, start month, end month, misc ]
	PATTERN_EN_YEAR_MONTH = /^(\d{1,4})\s+(?:([a-z]{3,9})\s*[.\/\-–－—─~～〜﹣])?\s*([a-z]{3,9})( +\D.*)?$/i,
	// U+2212 '−': minus sign
	// 為了 calendar 測試，年分需要能 parse 0–9999。
	// [ all, .*年, \d+, [百千] ]
	PATTERN_YEAR_ONLY = /^[^\d\/:\-−‐前日月年]*(\d{3,4}|([\-−‐前]?\d{1,4})([百千]?)年|[\-−‐前]\d{1,4})[^\d\/:\-−‐前日月年]*$/,
	//
	PATTERN_BCE = /(?:^|[^a-z.])B\.?C\.?E?(?:[^a-z.]|$)/i, time_boundary = new Date(
			0, 0, 1);
	time_boundary.setFullYear(0);
	time_boundary = time_boundary.getTime();

	/**
	 * parse date_string and return the new Date.
	 * 
	 * @param {String}date_string
	 *            date string.
	 * @param {Integer}minute_offset
	 *            (指定 time zone 之) offset in minutes.
	 * @param {Object}options {
	 *            {Boolean}period_end:<br />
	 *            將指定內容視為一時段，並取得此期間之結束（終結）時間，因此 parse 後將得到第一個不屬於此範圍之時刻。<br />
	 *            e.g., '2000/5' → 2000/6/1 0:0:0<br />
	 *            e.g., '5/3' → 5/4 0:0:0<br />
	 *            e.g., '5/3 12:' → 5/4 13:0:0<br />
	 *            e.g., '5/3 12:50' → 5/4 12:51:0<br /> }
	 * 
	 * @returns {Date} new Date
	 * @see <a href="http://php.net/manual/en/function.date.php"
	 *      accessdate="2012/3/23 20:51">PHP: date - Manual</a>
	 */
	function String_to_Date_default_parser(date_string, minute_offset, options) {
		// console.trace(date_string);
		if (is_Date(date_string)) {
			return date_string;
		}

		// 前置處理。
		if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		var date_data,
		// 精密度
		precision, period_end = options.period_end,
		// matched string
		matched, tmp,
		//
		no_year_0 = 'no_year_0' in options ? options.no_year_0
				: String_to_Date.no_year_0;

		date_string = date_string.trim()
		// 注意:"紀"會轉換成結束時間。
		.replace(/世[紀纪]/g, '百年').replace(/千[紀纪]/g, '千年');

		// ------------------------------------------------

		// [ all, start month, end month, year, misc ]
		matched = date_string.match(PATTERN_EN_MONTH_YEAR);
		if (!matched && (matched = date_string.match(PATTERN_EN_YEAR_MONTH))) {
			matched.splice(4, 0, matched[1]);
			matched.splice(1, 1);
		}
		if (matched) {
			// e.g., 'May–June 1998', 'June 1998 UTC+6'
			// console.trace(period_end, matched);
			var date_value = Date.parse(
			//
			(!period_end && matched[1] || matched[2]) + ' ' + matched[3]
			// matched[4]: e.g., 'UTC+8'
			+ (matched[4] || ''));
			if (isNaN(date_value)) {
				// Cannot parse "month year"
				library_namespace.debug('無法 parse: [' + date_string + ']', 2,
						'String_to_Date_default_parser');
				return;
			}

			if (!/UTC(?:\W|$)/.test(matched[4])
			//
			&& !isNaN(minute_offset) && minute_offset !== DEFAULT_TIME_ZONE) {
				date_value -= (present_local_minute_offset + minute_offset)
						* ONE_MINTE_LENGTH_VALUE;
			}
			date_value = new Date(date_value);
			if (period_end) {
				date_value.setMonth(date_value.getMonth() + 1);
			} else if (false && matched[1]) {
				library_namespace.warn('Cannot handle date range: '
						+ date_string);
			}

			// .precision 將會影響 function wikidata_datavalue() @
			// CeL.application.net.wiki.data
			date_value.precision = 'month';
			return date_value;
		}

		// ------------------------------------------------

		if (isNaN(minute_offset)
				&& !isNaN(tmp = get_minute_offset(date_string))) {
			minute_offset = tmp;
			// 留下此 pattern 在 match 時會出錯。
			date_string = date_string.replace(UTC_PATTERN, '').trim();
		}

		// TODO:
		// e.g., '10.12', '10/12'
		// e.g., '10/12, 2001'
		// e.g., '10 12, 2001'
		// e.g., '2001 10 12'

		if (matched = date_string.match(PATTERN_YEAR_ONLY)) {
			// 僅有 xxx/1xxx/2xxx 年(year) 時。
			precision = matched[3] === '百' ? 'century'
					: matched[3] === '千' ? 'millennium'
					// 注意：這邊不會檢查如"2016年代"之合理性（應當為"2010年代"）
					: date_string.includes('年代') ? 'decade' : 'year';
			date_string = (matched[2] || matched[1]).replace(/^[−‐前]/, '-000');
			if (period_end) {
				if (matched[3]) {
					// 將於後面才作位數處理。
					++date_string;
				} else {
					// 作位數處理。
					matched = date_string.includes('00');
					if (!++date_string) {
						// 預防 前1年 → 0年。
						date_string = no_year_0 ? '0001' : '0000';
					} else if (matched
							&& (date_string = '00' + date_string).length < 4) {
						date_string = '0' + date_string;
					}
				}
				// 已處理過 period_end，因此除去此 flag。
				period_end = false;
			}
			if (matched[3]) {
				date_string = date_string
				// 轉換到正確的年份。
				* (precision === 'century' ? 100 : 1000);
				// 作位數處理。
				if (0 < date_string && date_string < 1000) {
					date_string = '0' + date_string;
				} else if (date_string === 0) {
					date_string = '000';
				}
			}
			// 添加月份以利parse。
			date_string += '/1';
		} else {
			// 依照中文之習慣，日期 + 時間中間可不加空格。
			date_string = date_string.replace(/日(\d)/, '日 $1');
		}

		if (false &&
		// 速度似乎差不多。
		(date_data = date_string.match(/^(-?\d{1,4})\/(\d{1,2})\/(\d{1,2})$/))) {
			// library_namespace.debug('輸入格式: 日期', 2);
			date_data.shift();

		} else if ((date_data = date_string
				.match(String_to_Date_default_parser.date_first))
				&& isNaN(date_data[0])) {
			// library_namespace.debug('輸入格式: 日期 (+ 時間)', 2);
			date_data.shift();

		} else if (date_data = date_string
				.match(String_to_Date_default_parser.time_first)) {
			// library_namespace.debug('輸入格式: 時間 (+ 日期): 未匹配或僅有一數字', 2);
			// [ 1, 2, 3, 4, 5, 6, 7, 8 ]
			// → [ 6, 7, 8, 1, 2, 3, 4, 5 ]
			date_data.shift();
			date_data.unshift(date_data[5], date_data[6], date_data[7]);
			date_data.length = 8;

		} else {
			library_namespace.debug('無法 parse: [' + date_string + ']', 2,
					'String_to_Date_default_parser');
			return;
		}

		if (!precision) {
			// 這邊僅處理年以下的單位。
			date_data.some(function(value, index) {
				if (!value) {
					// value should be undefined.
					if (index > 0) {
						precision = index_precision[index + 2];
					}
					return true;
				}
			});
		}

		// ----------------------------------------------------

		// date_data: index: [ year, month, month_day (Day of
		// the month), hour, minute, second, milliseconds, Ante
		// meridiem or Post meridiem ]

		library_namespace.debug(date_data.join('<br />'), 2,
				'String_to_Date_default_parser');

		tmp = date_data.length === 8 && date_data.pop();
		if (tmp === 'P' || tmp === 'p') {
			// is PM (else: AM or 24-hour format)
			date_data[3] = 12 + (date_data[3] | 0);
		}

		var year = +date_data[0];
		if (isNaN(year) && /^前/.test(date_data[0])) {
			year = -date_data[0].slice(1);
		}
		// fix browser Date.parse() bug for BCE date.
		else if (year > 0 && PATTERN_BCE.test(date_string)) {
			year = -year;
			if (!('no_year_0' in options)) {
				// default: no year 0
				no_year_0 = true;
			}
		}

		// 確定正確年份: 若無 year 0 則所有負的年份皆 +1，
		// 轉成<a
		// href="http://en.wikipedia.org/wiki/Astronomical_year_numbering"
		// accessdate="2013/2/11 15:40" title="Astronomical year
		// numbering">天文年號</a>。
		// (BCE) -1 → 0, -2 → -1, -3 → -2, ...
		if (year < 0) {
			if (no_year_0) {
				year++;
			}

		} else if (year < 100 && date_data[0].length < 3
		// year padding: 0–99 的年份會加上此年份。
		&& (tmp = isNaN(options.year_padding)
		//
		? String_to_Date_default_parser.year_padding : options.year_padding)) {
			year += tmp;
		}

		date_data[0] = year;
		if (period_end) {
			tmp = date_data.length;
			// 由小至大，將第一個有指定的加一即可。
			while (tmp-- > 0) {
				// IE 中，String.prototype.match() 未成功時會回傳 ''，
				// 而 !isNaN('')===true，因此無法正確判別。
				if (!isNaN(date_data[tmp]) && date_data[tmp] !== '') {
					date_data[tmp]++;
					break;
				}
			}
			year = date_data[0];
		}

		if (!(0 < (date_data[2] = +date_data[2]))) {
			date_data[2] = 1;
		}
		if (typeof options.post_process === 'function') {
			options.post_process(date_data);
		}

		year = +year || 0;
		// time zone.
		tmp = +date_data[4] || 0;
		var base_on_UTC = !isNaN(minute_offset)
				&& minute_offset !== DEFAULT_TIME_ZONE;
		// 若是未設定，則當作 local time zone。
		if (base_on_UTC) {
			// 否則基於本機當前的時區來調整成基於 UTC 之 `minute_offset`
			// local time + .getTimezoneOffset() = UTC
			tmp -= present_local_minute_offset + minute_offset;
		}

		if (year < 100 && year >= 0) {
			// 僅使用 new Date(0) 的話，會含入 timezone offset (.getTimezoneOffset)。
			// 因此得使用 new Date(0, 0)。
			date_value = new Date(0, 0);
			// 先設定小單位，再設定大單位：設定小單位時會影響到大單位。反之不然。
			// 下兩者得到的值不同。
			// (d=new Date(0, 0)).setFullYear(0, 0, -1, 0, 480, 0, 0);
			// d.toISOString()
			//
			// (d=new Date(0, 0)).setHours(0, 480, 0, 0);
			// d.setFullYear(0, 0, -1);d.toISOString()
			date_value.setHours(+date_data[3] || 0, tmp, +date_data[5] || 0,
					+date_data[6] || 0);
			date_value.setFullYear(
			// new Date(10, ..) === new Date(1910, ..)
			year, date_data[1] ? date_data[1] - 1 : 0, date_data[2]);
		} else {
			date_value = new Date(year, date_data[1] ? date_data[1] - 1 : 0,
					date_data[2], +date_data[3] || 0, tmp, +date_data[5] || 0,
					+date_data[6] || 0);
		}
		if (base_on_UTC
				&& date_value.getTimezoneOffset() !== present_local_minute_offset) {
			/**
			 * 當基於本機當前的時區來調整成UTC時間時，若是 time zone 和預設的
			 * `present_local_minute_offset` 不同，就必須在以 new Date() 設定時間後，才調整 time
			 * zone。
			 */
			date_value.setMinutes(date_value.getMinutes()
					+ present_local_minute_offset
					- date_value.getTimezoneOffset());
		}

		// 測試僅輸入時刻的情況。e.g., '7時'
		if (options.near && date_value.getFullYear() === 0
				&& date_value - time_boundary > 0) {
			// 判別未輸入時預設年份設對了沒：以最接近 options.near 的為基準。
			tmp = is_Date(options.near) ? options.near : new Date;
			date_string = tmp.getFullYear();
			matched = new Date(date_value.getTime());
			date_value.setFullYear(date_string);
			matched.setFullYear(date_value - tmp > 0 ? date_string - 1
					: date_string + 1);
			if (date_value - tmp > 0 && date_value - tmp > tmp - matched
					|| date_value - tmp < 0 && date_value - tmp < tmp - matched) {
				date_value = matched;
			}
		}

		if (precision) {
			date_value.precision = precision;
		}
		return date_value;
	}

	// 0–99 的年份會加上此年份 (1900)。
	String_to_Date_default_parser.year_padding = (new Date(0, 0, 1))
			.getFullYear();
	String_to_Date.default_parser = String_to_Date_default_parser;

	// date_string.match(String_to_Date.parser_PATTERN)
	// === [, parser name, date string ]
	// e.g., "Âm lịch"
	String_to_Date.parser_PATTERN = /^\s*(?:([^:]+):)?\s*(.+)/i;

	String_to_Date.parser = {

		Julian : Julian_String_to_Date,
		// Common Era / Before the Common Era, CE / BCE. 公元/西元.
		CE : function(date_string, minute_offset, options) {
			if (!library_namespace.is_Object(options)) {
				options = Object.create(null);
			}
			if (!('no_year_0' in options)) {
				options.no_year_0 = true;
			}
			var date_value = String_to_Date_default_parser(date_string,
					minute_offset, options);
			return date_value - Gregorian_reform_of(options.reform) < 0
			//
			? Julian_String_to_Date(date_string, minute_offset, options)
					: date_value;
		},

		// <a href="http://php.net/manual/en/function.date.php"
		// accessdate="2012/3/23 20:51">PHP: date - Manual</a>
		PHP : function() {
			// TODO
			throw new Error('String_to_Date.parser.PHP: Not Yet Implemented!');
		},
		// <a href="http://www.freebsd.org/cgi/man.cgi?query=strftime"
		// accessdate="2012/3/23 20:59">strftime</a>,
		// <a href="http://hacks.bluesmoon.info/strftime/" accessdate="2012/3/23
		// 21:9">strftime: strftime for Javascript</a>
		strftime : function() {
			// TODO
			throw new Error(
					'String_to_Date.parser.strftime: Not Yet Implemented!');
		}
	};

	// 時區縮寫。
	// <a href="http://en.wikipedia.org/wiki/List_of_time_zone_abbreviations"
	// accessdate="2012/12/2 13:0" title="List of time zone abbreviations">time
	// zone abbreviations</a> and offset in hour.
	// TODO: Daylight Saving Time (DST).
	// @see CeL.application.locale.time_zone_of_language()
	String_to_Date.zone = {
		// UTC+08:00
		// China Standard Time
		CST : 8,
		Z中國 : 8,

		JST : 9,
		Z日本 : 9,

		EST : -5,
		PST : -8,

		// Greenwich Mean Time
		GMT : 0,
		// Coordinated Universal Time
		UTC : 0
	};

	_// JSDT:_module_
	.String_to_Date = String_to_Date;

	// ---------------------------------------------------------

	/**
	 * test if the year is leap year. has year 0!<br />
	 * 
	 * @param {Integer}year
	 * @param type
	 *            calendar type: true: use Julian calendar, false: use Gregorian
	 *            calendar, 'CE': use CE
	 * 
	 * @returns {Boolean}
	 */
	function is_leap_year(year, type) {
		if (type === 'CE') {
			if (reform_year < year) {
				type = false;
			} else if (year < 0) {
				year++;
			}
		}
		// Julian calendar
		return type ? year % 4 === 0
		// Gregorian calendar
		: year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
	}
	_.is_leap_year = is_leap_year;

	/**
	 * test if in the year, Gregorian calendar and Julian calendar have
	 * different intercalation.
	 * 
	 * @param {Integer}year
	 * @returns {Boolean} 當年 Julian 與 UTC 為不同閏年規定: Gregorian 當年沒有閏日，但 Julian 有。
	 */
	function is_different_leap_year(year) {
		return year % 100 === 0 && year % 400 !== 0;
	}
	_.is_different_leap_year = is_different_leap_year;

	/**
	 * 計算 Gregorian 與 Julian 的日數差距。 the secular difference between the two
	 * calendars.<br />
	 * 會將 date_data: Julian → Gregorian.
	 * 
	 * @param {Array}date_data
	 *            Julian date [year, month, date]
	 * 
	 * @returns {Number} Julian → Gregorian 時，需要減去的日數。（除少數特例外，即 Gregorian →
	 *          Julian 時，需要加上的日數。）
	 * 
	 * @see https://en.wikipedia.org/wiki/Gregorian_calendar#Difference_between_Gregorian_and_Julian_calendar_dates
	 */
	function Julian_shift_days(date_data) {
		var year = +date_data[0];
		// 測試是否為有差異的當年
		if (is_different_leap_year(year)
		// 測試是否為閏日。
		// 閏日前(before Julian calendar leap day)還要算是上一階段。
		&& date_data[1] < 3) {
			year--;
		}
		// 計算 Gregorian 與 Julian 的 different days。
		// 2: 0年時，差了2日。
		// -701: 8, -700: 7; -601: 7, -600: 6; 99: 2, 100: 1;
		year = 2 + Math.floor(year / 400) - Math.floor(year / 100);
		// 這演算法對差異大至 31+28 日的時段不適用。
		date_data[2] -= year;
		return year;
	}
	_.Julian_shift_days = Julian_shift_days;

	/**
	 * parse proleptic Julian calendar date_string and return the new Date.<br />
	 * 
	 * 借用系統內建的計時機制。其他 arguments 見 String_to_Date_default_parser()。
	 * 
	 * @param {String}date_string
	 *            Julian calendar date string.
	 * 
	 * @returns {Date} new Date
	 * 
	 * @see http://en.wikipedia.org/wiki/Old_Style_and_New_Style_dates
	 * @see http://eclipse.gsfc.nasa.gov/SEhelp/julian.html
	 */
	function Julian_String_to_Date(date_string, minute_offset, options) {
		if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		options.post_process = Julian_shift_days;

		return String_to_Date_default_parser(date_string, minute_offset,
				options);
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	function parse_English_date(date) {
		date = date.trim().replace(/.+\[(?:\d{1,2}|note \d+)\]$/i, '');
		var accuracy = date.match(/^(?:before|after)[\s ](.+)$/i), matched;
		if (accuracy) {
			date = accuracy[1].trim();
			accuracy = accuracy[0];
		}
		if (accuracy = date.match(/^ca?.(.+)$/)) {
			date = accuracy[1].trim();
			accuracy = accuracy[0];
		}
		if (/^[a-z]{3,9}\s+-?\d+$/i.test(date)) {
			date = '1 ' + date;
			accuracy = date;
		}

		if (date.includes('?')) {
			accuracy = date;
			date = date.replace(/\?/g, '');
		}

		if (!isNaN(date) || /^\d+\/\d+$/.test(date)) {
			accuracy = date;
		} else if (!isNaN(matched = Date.parse(date))) {
			date = new Date(matched + String_to_Date.default_offset
					* ONE_MINTE_LENGTH_VALUE).toISOString()
			//
			.match(/^\d+-\d+-\d+/)[0].replace(/^0+/, '').replace(/(\d)-0*/g,
					'$1\/');
		} else {
			library_namespace.warn(date);
			return;
		}
		return [ date, accuracy ];
	}

	_.parse_English_date = parse_English_date;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	/**
	 * 顯示格式化日期時間 string：依照指定格式輸出日期與時間。<br />
	 * TODO:<br />
	 * 各 locale 有不同 format 與 time zone offset.
	 * 
	 * @param {Date}date_value
	 *            要轉換的 date, TODO? 值過小時當作時間, <0 轉成當下時間.
	 * @param {Object|String|Function}options
	 *            選擇性功能: {<br />
	 *            {String|Function}parser: 格式字串分析器 'strftime',<br />
	 *            {String}format: 格式字串 '%Y/%m/%d %H:%M:%S.%f',<br />
	 *            {String}locale: 地區語系設定<br /> }
	 * 
	 * @returns {String} 依照指定格式格式化後輸出的日期與時間.
	 * 
	 * @see<br />
	 *      <a href="http://blog.csdn.net/xzknet/article/details/2278101"
	 *      accessdate="2012/3/24 15:11" title="如何使用Javascript格式化日期显示 -
	 *      虫二的专栏~~在路上~~~ - 博客频道 - CSDN.NET">JsJava中提供了專用的類，專門對日期進行指定格式的字符串輸出</a>,<br />
	 *      <a href="http://www.merlyn.demon.co.uk/js-date8.htm"
	 *      accessdate="2012/3/25 1:42">Merlyn - JSDT 8 : Enhancing the Object -
	 *      J R Stockton</a>,<br />
	 *      U.S. Naval Observatory <a
	 *      href="http://aa.usno.navy.mil/data/docs/JulianDate.php"
	 *      accessdate="2012/3/25 1:42">Julian Date Converter</a><br />
	 *      ISO 8601:2004(E)
	 * 
	 * @_memberOf _module_
	 */
	function Date_to_String(date_value, options) {
		// 前置處理。
		if (typeof options === 'string') {
			options = options in Date_to_String.parser ? {
				parser : Date_to_String.parser[options]
			} : {
				format : options
			};
		} else if (typeof options === 'function') {
			options = {
				parser : options
			};
		} else if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		if (false) {
			if (options.parser
					&& !library_namespace.is_Function(options.parser)
					&& !library_namespace
							.is_Function(String_to_Date.parser[options.parser])) {
				library_namespace.warn('Date_to_String: 無法判斷 parser ['
						+ options.parser + ']！');
			}
		}

		// if (!date_value) date_value = new Date;

		if (date_value && !is_Date(date_value)
		// String_to_Date() 會幫忙做正規化。
		? String_to_Date(date_value) : date_value) {
			return (library_namespace.is_Function(options.parser) ? options.parser
					: Date_to_String.parser[options.parser]
							|| Date_to_String.default_parser)(date_value,
					options.format, library_namespace.gettext.to_standard
					//
					? library_namespace.gettext.to_standard(options.locale)
							: options.locale, options);
		}

		library_namespace.warn('Date_to_String: 無法判斷 date value [' + date_value
				+ ']！');
	}

	// default parser.
	Date_to_String.default_parser = strftime;

	Date_to_String.parser = {

		// <a href="http://php.net/manual/en/function.date.php"
		// accessdate="2012/3/23 20:51">PHP: date - Manual</a>
		PHP : function(date_value, format, locale) {
			// TODO
			throw new Error('Date_to_String.parser.PHP: Not Yet Implemented!');
		},
		// ISO 8601:2004(E)
		ISO8601 : function(date_value, format, locale) {
			// TODO
			throw new Error(
					'Date_to_String.parser.ISO8601: Not Yet Implemented!');
		},
		// .NET standard format string (standard date and time format string) <a
		// href="http://msdn.microsoft.com/zh-tw/library/az4se3k1.aspx"
		// accessdate="2012/3/24 17:43">標準日期和時間格式字串</a>
		SFS : function(date_value, format, locale) {
			// TODO
			throw new Error('Date_to_String.parser.SFS: Not Yet Implemented!');
		},
		// <a href="http://www.freebsd.org/cgi/man.cgi?query=strftime"
		// accessdate="2012/3/23 20:59">strftime</a>,
		// <a href="http://hacks.bluesmoon.info/strftime/" accessdate="2012/3/23
		// 21:9">strftime: strftime for Javascript</a>
		strftime : strftime,

		Gregorian : Date_to_Gregorian,
		Julian : Date_to_Julian,
		// Common Era / Before the Common Era, CE / BCE.
		CE : function(date_value, format, locale, options) {
			// 前置處理。
			if (!library_namespace.is_Object(options)) {
				options = Object.create(null);
			}
			if (!('no_year_0' in options)) {
				options.no_year_0 = true;
			}

			return (date_value - Gregorian_reform_of(options.reform) < 0
			//
			? Date_to_Julian : Date_to_Gregorian)(date_value, format, locale,
					options);
		},

		// Turn to RFC 822 date-time
		// <a
		// href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/toUTCString"
		// accessdate="2012/3/24 8:5" title="toUTCString - MDN">The most common
		// return value is a RFC-1123 formatted date stamp, which is a slightly
		// updated version of RFC-822 date stamps.</a>
		// Date_to_RFC822[generateCode.dLK]='String_to_Date';
		RFC822 : function(date_value) {
			// e.g., "Wed, 14 Jun 2017 07:00:00 GMT"
			return date_value.toUTCString().replace(/UTC/gi, 'GMT');
		}
	};

	_// JSDT:_module_
	.Date_to_String = Date_to_String;

	// ---------------------------------------------------------

	/**
	 * 依照指定 strftime 格式輸出日期與時間。
	 * 
	 * @param {Date}date_value
	 *            要格式化的日期。
	 * @param {String}format
	 *            輸出的格式字串。
	 * @param {String}locale
	 *            輸出的地區語系設定。
	 * @param {Object}options
	 *            選擇性功能。
	 * 
	 * @returns {String} 依照指定格式輸出的日期與時間。
	 * 
	 * @see<br />
	 *      <a href="http://www.freebsd.org/cgi/man.cgi?query=strftime"
	 *      accessdate="2012/3/23 20:59">strftime</a>,<br />
	 *      <a href="http://hacks.bluesmoon.info/strftime/"
	 *      accessdate="2012/3/23 21:9">strftime: strftime for Javascript</a>,
	 */
	function strftime(date_value, format, locale, options) {
		// 前置處理。
		if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		var original_Date = options.original_Date || date_value,
		/**
		 * 支援的 conversion specifications (轉換規格).
		 */
		conversion = strftime.conversion[locale]
				|| strftime.conversion[strftime.null_domain],
		/**
		 * 所須搜尋的 conversion specifications (轉換規格) pattern.
		 */
		search = strftime.search[locale]
				|| strftime.search[strftime.null_domain];

		// 也可以使用 options.zone 設定要轉換成的時區(timezone)。
		if (isNaN(options.offset) && !isNaN(options.zone)) {
			options.offset = options.zone * 60;
		}
		// console.log(options);
		// library_namespace.debug('options.offset = ' + options.offset, 0);

		// to this minute offset. UTC+8: 8 * 60 = +480
		// or using options.minute_offset?
		if (!isNaN(options.offset)) {
			date_value = new Date(date_value.getTime() + ONE_MINTE_LENGTH_VALUE
					* (options.offset - String_to_Date.default_offset));
		}

		function convertor(s) {
			return s.replace(search, function($0, $1, $2) {
				// 可以在 conversion 中，用
				// this[conversion name].apply(this, arguments)
				// 來取得另一 conversion 之結果。
				var v = $2 in original_Date ? original_Date[$2]
				// original_Date[$2] 為物件本身之特殊屬性，應當排在泛用函數 conversion[$2] 之前。
				: typeof (v = conversion[$2]) === 'function' ? conversion[$2](
						date_value, options)
				//
				: v in original_Date ? original_Date[v]
				// 將之當作 format。
				: /%/.test(v) ? parse_escape(v, convertor)
				//
				: v;
				// library_namespace.debug([v, $1, $2]);
				return $1 ? pad(v, $1) : v;
			});
		}

		return parse_escape(format || strftime.default_format, convertor);
	}

	// .toISOString(): '%4Y-%2m-%2dT%2H:%2M:%2S.%fZ'
	strftime.default_format = '%Y/%m/%d %H:%M:%S.%f';

	/**
	 * 設定支援的 conversion specifications (轉換規格).<br />
	 * 將直接使用輸入，因此呼叫後若改變 conversion specifications object 將出現問題！<br />
	 * 
	 * @example <code>
	 * library_namespace.Date_to_String.parser.strftime.set_conversion({
	 date : function() {
	 return this.getDate();
	 }
	 }, 'cmn-Hant-TW');
	 * </code>
	 * 
	 * @param {Object}conversion
	 *            conversion specifications (轉換規格)。
	 * @param {String}locale
	 *            輸出的地區語系設定。
	 * 
	 * @returns {RegExp} 所須搜尋的 conversion specifications (轉換規格) pattern。
	 */
	strftime.set_conversion = function(conversion, locale, options) {
		var i, v, locale_conversion, gettext = library_namespace.gettext,
		// escape special char.
		escape_string = function(s) {
			return s.replace(/[*?!+.()\[\]\|\-^$\\\/]/g, '\\$0');
		},
		/**
		 * 所須搜尋的 conversion specifications (轉換規格) pattern.
		 */
		search;

		if (!strftime.search) {
			library_namespace.debug('初始化 strftime', 2,
					'strftime.set_conversion');
			strftime.search = Object.create(null);
			strftime.conversion = Object.create(null);
		}

		// 前置處理。
		if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		if (locale && gettext.to_standard && !options.no_gettext) {
			locale = gettext.to_standard(locale);
		}
		if (!locale) {
			locale = strftime.null_domain;
		}

		if (!(locale in (locale_conversion = strftime.conversion))) {
			locale_conversion[locale] = Object.create(null);
		}
		locale_conversion = locale_conversion[locale];
		for (i in conversion) {
			// 不變更引數 conversion，且允許重複添增。
			locale_conversion[i] = v = conversion[i];
			if (v in locale_conversion) {
				search = [ v ];
				while (v in locale_conversion) {
					// 處理 alias。
					locale_conversion[i] = v = locale_conversion[v];
					if (search.includes(v)) {
						// 預防迴圈。
						break;
					}
					search.push(v);
				}
			}
		}

		v = '';
		search = [];
		// 造出 search pattern。
		for (i in locale_conversion) {
			if ((i = escape_string(i)).length > 1) {
				search.push(i);
			} else {
				v += i;
			}
		}
		// 從長的排到短的。
		search.sort(function(a, b) {
			// 長→短
			return b.length - a.length;
		});
		if (v) {
			search.push('[' + v + ']');
		}
		strftime.search[locale] = search = new RegExp('%(\\d?)('
				+ search.join('|') + ')', 'g');
		library_namespace.debug('use conversion specifications ' + locale
				+ ': ' + search, 2, 'strftime.set_conversion');

		return search;
	};

	strftime.null_domain = '';

	var gettext_date = library_namespace.gettext.date;
	if (!gettext_date) {
		gettext_date = function(v) {
			if (library_namespace.locale.gettext) {
				gettext_date = library_namespace.locale.gettext.date;
				return gettext_date[this].apply(gettext_date, arguments);
			}
			return v;
		};
		'year,month,date,week,full_week'.split(',').forEach(function(type) {
			gettext_date[type] = gettext_date.bind(type);
		});
	}

	// common year 月初累積日。查表法用。
	// accumulated_days[0] = 到一月月初時累積的天數。
	var accumulated_days = [ 0 ],
	// common year 每月日數。
	// [ 31, 28, 31, .. ]
	month_days = [];
	(function() {
		// select a common year.
		var date = new Date(1902, 0, 1), month = 0, days, all_days = 0;
		while (month++ < 12) {
			// 設在月底，以取得當月日數。
			date.setMonth(month, 0);
			month_days.push(days = date.getDate());
			accumulated_days.push(all_days += days);
		}
	})();
	Object.seal(month_days);
	Object.seal(accumulated_days);

	/**
	 * 自 year/month/date 開始之本年曆數（每月日數）。
	 * 
	 * @param {Integer|Boolean}[is_leap]
	 *            is leap year
	 * @param {Integer}[month]
	 *            月
	 * @param {Integer}[date]
	 *            月日期
	 * @returns {Array} 每月日數。
	 */
	function get_month_days(is_leap, month, date) {
		// month: serial → index
		if (month |= 0)
			--month;
		// assert: month: 0–11, date: 1–28/29/30/31

		var year_data = month_days.slice(month);

		if (month < 2
		// 處理閏年。
		&& (typeof is_leap === 'number' ? is_leap_year(is_leap) : is_leap)) {
			year_data[1 - month]++;
		}

		// 處理首月的曆數。
		if (date > 1) {
			year_data[0] -= date - 1;
		}

		return year_data;
	}
	_.get_month_days = get_month_days;

	/**
	 * ordinal date, 年日期.<br />
	 * 本年開始至 year/month/date 之本年年內的天數。
	 * 
	 * @param {Integer}month
	 *            月
	 * @param {Integer}date
	 *            月日期
	 * @param {Integer|Boolean}[is_leap]
	 *            is leap year
	 * @returns {Integer} 年內的日數。
	 * @see https://en.wikipedia.org/wiki/Ordinal_date
	 */
	function ordinal_date(month, date, is_leap) {
		if (is_Date(month)) {
			date = month.getDate() | 0, is_leap = is_leap_year(month
					.getFullYear()), month = month.getMonth() | 0;
		} else {
			--month;
			if (typeof is_leap === 'number') {
				// treat as year.
				is_leap = is_leap_year(is_leap);
			}
		}
		if (is_leap && month > 1) {
			date++;
		}
		return accumulated_days[month] + date | 0;
	}
	_.ordinal_date = ordinal_date;

	// week date, 週日期, 表示年內的星期數天數，再加上星期內第幾天。
	// https://en.wikipedia.org/wiki/ISO_week_date
	// return [ year, week (1-52 or 53), weekday (1-7) ]
	// var w = week_date(new Date);
	// w[0].pad(4) + '-W' + w[1].pad(2) + '-' + w[2]
	function week_date(date, to_ISO) {
		var year = date.getFullYear() | 0, weekday = date.getDay() | 0, days = ordinal_date(date) | 0, week;
		if (weekday === 0) {
			weekday = 7;
		}
		week = (10 + days - weekday) / 7 | 0;
		if (week === 0) {
			week = 53;
			year--;
		}
		// 計算首日是否為 星期四 或 (星期三 + leap)；
		// 此為有 W53 之條件。
		else if (week > 52 && (days = (weekday + 1 - days).mod(7)) !== 4
				&& (days !== 3 || !is_leap_year(year))) {
			week = 1;
			year++;
		}

		if (to_ISO) {
			// TODO: 在IS0 8601中星期以星期一開始
			// 一年的首星期必須包含1月4日, 包含一年的首個星期四
			year = year.pad(4);
			week = 'W' + week.pad(2);
		}
		days = [ year, week, weekday ];
		if (to_ISO === 1) {
			days = days.join('');
		} else if (to_ISO !== 2) {
			days = days.join('-');
		}

		return days;
	}
	_.week_date = week_date;

	// <a href="http://www.cppreference.com/wiki/cn/chrono/c/strftime"
	// accessdate="2012/3/24 15:23">strftime [C++ Reference]</a>
	// <a
	// href="http://help.adobe.com/zh_TW/as2/reference/flashlite/WS5b3ccc516d4fbf351e63e3d118cd9b5f6e-7923.html"
	// accessdate="2012/3/24 15:29">Adobe Flash Platform * Date</a>
	// <a href="http://msdn.microsoft.com/zh-tw/library/dca21baa.aspx"
	// accessdate="2012/3/24 15:30">Date 物件</a>
	// 除非必要，這邊不應用上 options.original_Date。
	strftime.default_conversion = {
		// ----------------------------
		// date

		// 完整年份(非兩位數的數字，近十年應為四位數的數字，如2013) 以4位十進制數寫年份。
		Y : function(date_value, options) {
			return date_value.getFullYear();
		},
		// 以替用方式寫年。例如在 ja_JP 本地環境中，以「平成23年」取代「2011年」。
		EY : function(date_value, options) {
			return gettext_date.year(
			// (options && options.original_Date || date_value)
			date_value.getFullYear(), options.numeral || options.locale);
		},

		// 月分 (1-12)。 將月份寫作十進制數（範圍[01,12]）。
		// also: %B, %b
		m : function(date_value, options) {
			return 1 + date_value.getMonth();
		},
		// 寫完整月名，例如 October。
		B : function(date_value, options) {
			return gettext_date.month(1 +
			// (options && options.original_Date || date_value)
			date_value.getMonth(), options.locale);
		},

		// 月中的第幾天 (1-31) 以十進制數寫月的第幾日（範圍[01,31]）。
		d : function(date_value, options) {
			return date_value.getDate();
		},
		// 以替用數字系統寫零基的月的第幾日。例如 ja_JP 本地環境中「二十七」取代「 27 」。
		Od : function(date_value, options) {
			return gettext_date.date(
			// (options && options.original_Date || date_value)
			date_value.getDate(), options.locale);
		},

		// ----------------------------
		// week

		// 2017/8/16 增加在地化的星期名稱表示法。之前曾經用過"%w"這個方式的，都需要改成"%A"。
		// 寫縮略的星期日期名，例如Fri（本地環境依賴）。
		a : function(date_value, options) {
			return gettext_date.week(
			// (options && options.original_Date || date_value)
			date_value.getDay(), options.locale);
		},
		// 寫完整的星期日期名，例如Friday（本地環境依賴）。
		A : function(date_value, options) {
			return gettext_date.full_week(
			// (options && options.original_Date || date_value)
			date_value.getDay(), options.locale);
		},
		// 星期 (0-6) 以十進制數寫星期日期，其中星期日是0（範圍[0-6]）。
		w : function(date_value, options) {
			return date_value.getDay();
		},

		// ----------------------------
		// time

		// 小時數 (0-23) 以十進制數寫時，24小時制（範圍[00-23]）。
		H : function(date_value, options) {
			return date_value.getHours();
		},
		// 分鐘數 (0-59) 以十進制數寫分（範圍[00,59]）。
		M : function(date_value, options) {
			return date_value.getMinutes();
		},
		// 秒數 (0-59) 以十進制數寫秒（範圍[00,59]）。
		S : function(date_value, options) {
			return date_value.getSeconds();
		},
		/**
		 * 毫秒(milliseconds) (000-999)
		 * 
		 * @see %f: zero-padded millisecond / microsecond: <a
		 *      href="http://bugs.python.org/issue1982" accessdate="2012/3/24
		 *      12:44">Issue 1982: Feature: extend strftime to accept
		 *      milliseconds - Python tracker</a>
		 */
		f : function(date_value, options) {
			var ms = date_value.getMilliseconds();
			return ms > 99 ? ms : ms > 9 ? '0' + ms : ms >= 0 ? '00' + ms : ms;
		},

		// 以 ISO 8601 格式（例如 -0430 ）寫距 UTC 的偏移
		z : function(date_value, options) {
			var offset = '+', minutes = -date_value.getTimezoneOffset();
			if (minutes < 0) {
				offset = '-';
				minutes = -minutes;
			}
			var hours = minutes / 60 | 0;
			offset += hours.pad(2) + (minutes % 60).pad(2);
			return offset;
		},

		// ----------------------------
		// misc

		// 年日數 以十進制數寫年的第幾日（範圍[001,366]）。
		// (new Date).format('%4Y-%3o')
		j : function(date_value, options) {
			return ordinal_date(date_value);
		},
		// 週數 以十進制數寫年的第幾個星期（星期一是星期的首日）（範圍[00,53]）。
		W : function(date_value, options) {
			return week_date(date_value)[1];
		},

		// 有相同開頭的時候，長的要放前面！
		// (new Date).format('%JDN')
		JDN : Date_to_JDN,
		// (new Date).format('%JD')
		JD : Date_to_JD,

		// gettext_config:{"id":"year-of-the-sexagenary-cycle"}
		"歲次" : guess_year_stem_branch,
		// alias
		// gettext_config:{"id":"year-of-the-sexagenary-cycle"}
		年干支 : '歲次',
		// gettext_config:{"id":"year-of-the-sexagenary-cycle"}
		年柱 : '歲次',

		日干支序 : date_stem_branch_index,
		// 計算距離甲子共有幾日，再於 index_to_stem_branch() 取模數。
		// 假定為不間斷之循環紀日。
		// gettext_config:{"id":"day-of-the-sexagenary-cycle"}
		"日干支" : function(date_value, options) {
			return index_to_stem_branch(date_stem_branch_index(date_value,
					options));
		},
		// gettext_config:{"id":"day-of-the-sexagenary-cycle"}
		日柱 : '日干支',

		// 時辰干支: 計算距離甲子共有幾個時辰，再於 index_to_stem_branch() 取模數。
		// 時干支不受子初分日(子初換日/子正換日)影響。
		時干支序 : hour_stem_branch_index,
		時干支 : function(date_value, options) {
			return index_to_stem_branch(hour_stem_branch_index(date_value,
					options));
		},
		時柱 : '時干支',
		// 每刻15分。
		// e.g., 子正初刻
		// 隋後普遍行百刻制，每天100刻。至順治二年（公元1645年）頒行時憲曆後，改為日96刻，每時辰八刻（初初刻、初一刻、初二刻、初三刻、正初刻、正一刻、正二刻、正三刻）[7,13,14]。自此每刻15分，無「四刻」之名。
		時刻 : function(date_value, options) {
			var diff = Math.floor(hour_stem_branch_index(date_value, options))
			// 12: BRANCH_LIST.length
			.mod(12);
			return BRANCH_LIST.charAt(diff) + (diff % 2 ? '正' : '初')
					+ '初一二三'.charAt(date_value.getMinutes() / 4 | 0) + '刻';
		}
	};

	strftime.set_conversion(strftime.default_conversion, strftime.null_domain);

	function Date_to_Gregorian(date_value, format, locale, options) {

		if ('no_year_0' in options ? options.no_year_0
				: Date_to_String.no_year_0) {
			var Year = date_value.getYear(), FullYear = date_value
					.getFullYear(), UTCFullYear = date_value.getUTCFullYear();

			if (FullYear < 1 || UTCFullYear < 1) {
				// 處理 0 year: Gregorian 與 Julian 沒有 0 year。
				// 因為公元前之公曆閏年出現在 1, 5, 9, 13, .. BC，因此無法以「除以4」計算。
				// 應該直接改年分，而不是將時間直接將其值減掉 (0/1/1 0:-1/1/1 0:),
				// 而當作彷彿沒有 0年這段期間的存在，直接從-1年開始。
				//
				// <a
				// href="http://en.wikipedia.org/wiki/Astronomical_year_numbering"
				// accessdate="2013/2/11 15:40" title="Astronomical year
				// numbering">天文年號</a>
				// <a
				// href="http://en.wikipedia.org/wiki/Gregorian_calendar#Proleptic_Gregorian_calendar"
				// accessdate="2013/2/11 9:7">Gregorian calendar</a>
				//
				// For dates before the year 1, unlike the proleptic Gregorian
				// calendar used in the international standard ISO 8601, the
				// traditional
				// proleptic Gregorian calendar (like the Julian calendar) does
				// not
				// have a year 0 and instead uses the ordinal numbers 1, 2, …
				// both for
				// years AD and BC.

				// 前置處理。
				if (!library_namespace.is_Object(options)) {
					options = Object.create(null);
				}

				if (!options.no_new_Date) {
					// IE 需要 .getTime()：IE8 以 new Date(Date
					// object) 會得到 NaN！
					date_value = new Date(date_value.getTime());
				}

				if (FullYear < 1) {
					date_value.getYear = new Function('return ' + (Year - 1));
					date_value.getFullYear = new Function('return '
							+ (FullYear - 1));
				}
				if (UTCFullYear < 1) {
					date_value.getUTCFullYear = FullYear === UTCFullYear ?
					// 一般情況 (FullYear === UTCFullYear)。
					// else: 預防 1/1, 12/31 時，getYear()
					// 與 getUTCFullYear() 可能會有不同值。
					// 盡量少帶入變數。
					date_value.getFullYear : new Function('return '
							+ (UTCFullYear - 1));
				}
			}
		}

		return strftime(date_value, format, locale, options);
	}

	// 代替 getDate() 用。
	var leap_date = new Function('return 29');

	/**
	 * proleptic Julian calendar.<br />
	 * 
	 * TODO: 太沒效率。
	 * 
	 * 以系統內建的計時機制，<br />
	 * 將擴展/外推/延伸的格里曆, proleptic Gregorian calendar<br /> → proleptic Julian
	 * calendar for 4713 BCE－2200 CE.
	 * 
	 * @param {Date}date_value
	 *            要格式化的日期。
	 * @param {String}format
	 *            輸出的格式字串。
	 * @param {String}locale
	 *            輸出的地區語系設定。
	 * @param {Object}options
	 *            選擇性功能。
	 * 
	 * @returns {String} 依照指定格式輸出的日期與時間。
	 * 
	 * @see<br />
	 *      <a
	 *      href="http://en.wikipedia.org/wiki/Conversion_between_Julian_and_Gregorian_calendars"
	 *      accessdate="2013/2/11 9:8">Conversion between Julian and Gregorian
	 *      calendars</a>
	 */
	function Date_to_Julian(date_value, format, locale, options) {
		// 計算與 UTC 的差距。
		var year = date_value.getFullYear(),
		// 計算 Gregorian 與 Julian 的 different days。
		// 0年時，差了 2日。這演算法對差異大至 31+28 日的時段不適用。
		shift_days = 2 + Math.floor(year / 400) - Math.floor(year / 100),
		// 當年 Julian 與 UTC 為不同閏年規定: Gregorian 當年沒有閏日，但 Julian 有。
		is_leap_year = is_different_leap_year(year);

		if (shift_days || is_leap_year) {
			var week_day = date_value.getDay();

			// 前置處理。
			if (!library_namespace.is_Object(options)) {
				options = Object.create(null);
			}
			// 因為可能會更改 date_value，因此把本來的 date_value 放在 options
			// 中供有需要的取用。
			if (!options.original_Date) {
				options.original_Date = date_value;
			}
			// 不改變原先的 date_value。
			options.no_new_Date = true;
			// 以新的 UTC Date instance 模擬 Julian calendar。
			// IE 需要 .getTime()：IE8 以 new Date(Date object) 會得到 NaN！
			date_value = new Date(date_value.getTime());
			date_value.setDate(date_value.getDate() + shift_days);

			if (is_leap_year && date_value.getFullYear() <= year) {
				// 原 → 現 → 應
				// ... → 2/27 → 2/28
				// ... → 2/28 → 2/29
				// ... → 3/1 → 3/1
				var month = date_value.getMonth();
				// 分水嶺: 以 Julian date 3/1 0:0 為分界。
				// 在不同閏年當年，Julian date 3/1 前需要特別處理。
				if (month < 2 || date_value.getFullYear() < year) {
					// 因為加至當年沒有閏日的 Gregorian，2/29 會變成 3/1。
					if (month === 1 && date_value.getDate() === 28) {
						// is leap day
						// 便宜行事: 不設 delta，直接把 3/1 → 2/28，再強制使 .getDate() = 29。
						// TODO: .getDay() 恐有誤。
						// 當 Julian date 2/29 閏日當日，UTC 非閏日的時候，需要特別處理。
						// TODO: 處理其他。
						date_value.getDate = leap_date;
					} else {
						// Julian date 2/29 閏日前。少算的，須更正。
						// 閏日前(before Julian calendar leap day)還要算是上一階段。
						date_value.setDate(date_value.getDate() + 1);
					}
				}
			}

			// 處理 day of the week: 就算以另一個日期模擬 UTC，原先的星期不會改變。
			if (date_value.getDay() !== week_day) {
				date_value.getDay = new Function('return ' + week_day);
			}
			// TODO: .getUTCDay()
		}

		date_value = Date_to_Gregorian(date_value, format, locale, options);
		if (library_namespace.is_Object(options)) {
			// 預防此 options 為重複使用。
			delete options.original_Date;
		}
		return date_value;
	}

	/**
	 * <code>


	There is no year 0 in the Julian system!


	The Julian date for CE  1582 October  4 00:00:00.0 UT is
	JD 2299159.500000

	The dates 5 through 14 October, 1582, do not exist in the Gregorian Calendar!

	The Julian date for CE  1582 October 15 00:00:00.0 UT is
	JD 2299160.500000

	JD 2299159.000000 is
	CE 1582 October 03 12:00:00.0 UT  Wednesday

	JD 2299160.000000 is
	CE 1582 October 04 12:00:00.0 UT  Thursday

	JD 2299161.000000 is
	CE 1582 October 15 12:00:00.0 UT  Friday



	JD      0.000000 is
	BCE 4713 January 01 12:00:00.0 UT  Monday

	JD      1.000000 is
	BCE 4713 January 02 12:00:00.0 UT  Tuesday




	The Julian date for CE     1 January  1 00:00:00.0 UT is
	JD 1721423.500000

	JD 1721423.000000 is
	BCE    1 December 31 12:00:00.0 UT  Friday

	JD 1721424.000000 is
	CE    1 January 01 12:00:00.0 UT  Saturday


	The Julian date for CE     1 March  1 00:00:00.0 UT is
	JD 1721482.500000

	JD 1721482.000000 is
	CE    1 February 28 12:00:00.0 UT  Monday



	The Julian date for CE  1000 February  1 00:00:00.0 UT is
	JD 2086338.500000

	The Julian date for CE  1000 February 29 00:00:00.0 UT is
	JD 2086366.500000

	JD 2086367.000000 is
	CE 1000 February 29 12:00:00.0 UT  Thursday




	The Julian date for CE   500 February 29 00:00:00.0 UT is
	JD 1903741.500000

	JD 1903742.000000 is
	CE  500 February 29 12:00:00.0 UT  Tuesday




	The Julian date for CE   100 March  1 00:00:00.0 UT is
	JD 1757642.500000

	JD 1757642.000000 is
	CE  100 February 29 12:00:00.0 UT  Saturday

	The Julian date for CE     4 March  1 00:00:00.0 UT is
	JD 1722578.500000

	JD 1722578.000000 is
	CE    4 February 29 12:00:00.0 UT  Friday

	The Julian date for CE  2000 January  1 12:00:00.0 UT is
	JD 2451545.000000




	The Julian date for BCE  1000 January  1 12:00:00.0 UT is
	JD 1356174.000000


	The Julian date for BCE  4000 January  1 12:00:00.0 UT is
	JD 260424.000000


	The Julian date for BCE  4710 January  1 12:00:00.0 UT is
	JD   1096.000000


	The Julian date for BCE  4701 January  1 12:00:00.0 UT is
	JD   4383.000000

	The Julian date for BCE  4700 January  1 12:00:00.0 UT is
	JD   4749.000000

	The Julian date for BCE  4700 February 28 12:00:00.0 UT is
	JD   4807.000000

	The Julian date for BCE   101 February 29 12:00:00.0 UT is
	JD 1684592.000000



	date=new Date(1582,10,15);
	CeL.Date_to_JDN(new Date(1582,10,15));

	</code>
	 */

	// 設定 .as_UTC_time 當作 UTC 時，將加上為本地時間調整所需之 offset。
	var Julian_Date_local_offset = String_to_Date.default_offset / 60 / 24;

	// Julian Date (JD)
	// <a href="http://aa.usno.navy.mil/data/docs/JulianDate.php"
	// accessdate="2013/2/11 9:10">Julian Date Converter</a>
	function Date_to_JD(date_value, options) {
		date_value = ((options && options.original_Date || date_value) - Julian_Date_epoch)
				/ ONE_DAY_LENGTH_VALUE;
		if (options && options.as_UTC_time) {
			date_value += Julian_Date_local_offset;
		}
		return date_value;
	}
	// Julian Day Number (JDN)
	function Date_to_JDN(date_value, options) {
		// JDN0: JD = -.5 – .5⁻
		// JDN0: JD + .5 = 0 – 1⁻
		// 精神:以 UTC 計算時，當天從頭至尾都是相同的 JDN。
		// 基本上世界每個地方在當地當天 12:0 都有相同的 JDN，但不保證世界每個地方在當地當天 0:0 都有相同的 JDN。
		return Math.floor(Date_to_JD(date_value, options) + .5);
	}
	// Time Conversion Tool
	// http://ssd.jpl.nasa.gov/tc.cgi
	function JD_to_Date(JD) {
		// 注意：此輸出常顯示為系統之 proleptic Gregorian calendar，
		// 而一般天文計算使用 proleptic Julian calendar！
		return new Date(Julian_Date_epoch + ONE_DAY_LENGTH_VALUE * JD);
	}

	_.Date_to_JD = Date_to_JD;
	_.Date_to_JDN = Date_to_JDN;
	_.JD_to_Date = JD_to_Date;

	// ---------------------------------------------------------------------------//
	// basic constants. 定義基本常數。

	// for Julian Date (JD), Julian Day Number (JDN).
	// Julian Date: 由公元前4713年1月1日，協調世界時中午12時開始所經過的天數。
	// 原點實際設在 -004713-11-24T12:00:00.000Z。
	// http://www.tondering.dk/claus/cal/julperiod.php
	// http://aa.usno.navy.mil/data/docs/JulianDate.php
	var Julian_Date_epoch = Date.parse('-004713-11-24T12:00:00.000Z');
	if (!Julian_Date_epoch) {
		// 替代方法. 慢.
		Julian_Date_epoch = String_to_Date('-4713/1/1 12:0', {
			parser : 'Julian',
			zone : 0
		});
		Julian_Date_epoch = Julian_Date_epoch.getTime()
				+ (present_local_minute_offset - (Julian_Date_epoch
						.getTimezoneOffset() || 0)) * ONE_MINTE_LENGTH_VALUE;
	}

	// 預設的 Gregorian calendar 改曆日期:
	// Julian calendar → Gregorian calendar.
	//
	// 這天開始使用 Gregorian calendar。之前使用 Julian calendar。
	// e.g., UTC/Gregorian 1582/10/14 ⇔ Julian 1582/10/4.
	//
	// 西曆改曆分界點。這天之後採用 Gregorian calendar 表示。
	// 西曆以1582年10月15日為改曆分界點，Julian calendar（儒略曆）1582年10月4日的下一日為 Gregorian
	// calendar（格里高利曆）1582年10月15日。
	var reform_year = 1582;
	_.Gregorian_reform_date = new Date(reform_year, 10 - 1, 15);

	// gcal-3.6/doc/GREG-REFORM
	// http://www.tondering.dk/claus/cal/gregorian.php
	// http://www.webexhibits.org/calendars/year-countries.html
	// http://sizes.com/time/cal_Gregadoption.htm
	/*
	 * https://en.wikipedia.org/wiki/List_of_adoption_dates_of_the_Gregorian_calendar_per_country
	 * 
	 * 使用公共轉換組「外國地名翻譯」
	 * https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97:CGroup/%E5%9C%B0%E5%90%8D
	 */
	var reform_by_region = {
		// gettext_config:{"id":"italy"}
		'Italy' : '1582/10/15',
		// gettext_config:{"id":"poland"}
		'Poland' : '1582/10/15',
		// gettext_config:{"id":"portugal"}
		'Portugal' : '1582/10/15',
		// gettext_config:{"id":"spain"}
		'Spain' : '1582/10/15',
		// gettext_config:{"id":"france"}
		'France' : '1582/12/20',
		// 盧森堡 Source?
		// gettext_config:{"id":"luxembourg"}
		'Luxembourg' : '1583/1/1',
		// Holland: 1583/1/12
		// gettext_config:{"id":"netherlands"}
		'Netherlands' : '1583/1/12',
		// Source?
		// gettext_config:{"id":"bavaria"}
		'Bavaria' : '1583/10/16',
		// gettext_config:{"id":"austria"}
		'Austria' : '1584/1/17',
		// gettext_config:{"id":"switzerland"}
		'Switzerland' : '1584/1/22',
		// gettext_config:{"id":"hungary"}
		'Hungary' : '1587/11/1',
		// gettext_config:{"id":"germany"}
		'Germany' : '1700/3/1',
		// gettext_config:{"id":"norway"}
		'Norway' : '1700/3/1',
		// gettext_config:{"id":"denmark"}
		'Denmark' : '1700/3/1',
		// Kingdom of Great Britain, 大不列顛王國, グレートブリテン王国, 英國
		// https://en.wikipedia.org/wiki/Calendar_%28New_Style%29_Act_1750
		// gettext_config:{"id":"great-britain"}
		'Great Britain' : '1752/9/14',
		// gettext_config:{"id":"sweden"}
		'Sweden' : '1753/3/1',
		// gettext_config:{"id":"finland"}
		'Finland' : '1753/3/1',
		// 日本
		// 'Japan' : '1873/1/1',
		// 中國
		// 'China' : '1911/11/20',
		// gettext_config:{"id":"bulgaria"}
		'Bulgaria' : '1916/4/14',
		// USSR, U.S.S.R., 蘇聯
		// gettext_config:{"id":"soviet-union"}
		'Soviet Union' : '1918/2/14',
		// gettext_config:{"id":"serbia"}
		'Serbia' : '1919/2/1',
		// gettext_config:{"id":"romania"}
		'Romania' : '1919/2/1',
		// gettext_config:{"id":"greece"}
		'Greece' : '1924/3/23',
		// gettext_config:{"id":"turkey"}
		'Türkiye' : '1926/1/1',
		// gettext_config:{"id":"egypt"}
		'Egypt' : '1928/10/1'
	// 之前使用伊斯蘭曆法。
	// 'Saudi Arabia':'2016/10/1'
	};

	(function() {
		for ( var region in reform_by_region)
			reform_by_region[region] = Date.parse(reform_by_region[region]);
	})();

	/**
	 * 取得特定區域之 Gregorian calendar 改曆日期。
	 * 
	 * @param {String}region
	 *            {String}region, {Date}reform date, {Number}Date value
	 * @returns {Number}reform Date value
	 */
	function Gregorian_reform_of(region) {
		if (is_Date(region)) {
			region = region.getTime();
		} else if (typeof region === 'string' && (region in reform_by_region)) {
			region = reform_by_region[region];
		}
		return Number.isFinite(region) ? region : _.Gregorian_reform_date;
	}
	Gregorian_reform_of.regions = reform_by_region;
	_.Gregorian_reform_of = Gregorian_reform_of;

	// ---------------------------------------------------------------------------//
	// 文化/區域功能。

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_'),
	// 10 天干. celestial stem, Heavenly Stem.
	STEM_LIST = '甲乙丙丁戊己庚辛壬癸',
	// 12 地支. Earthly Branches. TODO: 異體字如"夘"
	BRANCH_LIST = '子丑寅卯辰巳午未申酉戌亥',
	// 60: lcm(STEM_LIST.length, BRANCH_LIST.length);
	SEXAGENARY_CYCLE_LENGTH = 60,

	// 當考慮以 CST，或以當地時間為準。
	// 因為八字與經度，以及該經度與太陽的日照相對夾角有關，因此採當地時間為準。

	// CE YEAR_STEM_BRANCH_EPOCH 3-12月為甲子年。
	// 以此計算 new Date(0) 之 offset。
	// 黃帝紀元元年 (year -2696 in proleptic Gregorian calendar) 為甲子年。
	YEAR_STEM_BRANCH_EPOCH = -2696,
	// 1984/3/31 0:0 (甲子年丁卯月)甲子日始: 以此基準點計算 new Date(0) 之 offset。
	DATE_STEM_BRANCH_EPOCH = new Date(1984, 3 - 1, 31),
	//
	DATE_STEM_BRANCH_minute_offset = DATE_STEM_BRANCH_EPOCH.getTimezoneOffset() || 0,
	// 1984/3/31 23:0 (甲子年丁卯月)甲子日甲子時始: 以此基準點計算 new Date(0) 之 offset。
	HOUR_STEM_BRANCH_epoch = new Date(1984, 3 - 1, 30, 23),
	//
	HOUR_STEM_BRANCH_minute_offset = HOUR_STEM_BRANCH_epoch.getTimezoneOffset() || 0;
	DATE_STEM_BRANCH_EPOCH = DATE_STEM_BRANCH_EPOCH.getTime();
	HOUR_STEM_BRANCH_epoch = HOUR_STEM_BRANCH_epoch.getTime();

	_.STEM_LIST = STEM_LIST;
	_.BRANCH_LIST = BRANCH_LIST;
	_.SEXAGENARY_CYCLE_LENGTH = SEXAGENARY_CYCLE_LENGTH;

	_.YEAR_STEM_BRANCH_EPOCH = YEAR_STEM_BRANCH_EPOCH;

	// 日干支序。
	// 注意：此處"序"指的是 Array index，從 0 開始。
	function date_stem_branch_index(date_value, options) {
		if (options && options.original_Date) {
			date_value = options.original_Date;
		}
		var index = Math.floor((date_value - DATE_STEM_BRANCH_EPOCH
		// 修正不同年代時刻間的時區差。
		- (date_value.getTimezoneOffset() - DATE_STEM_BRANCH_minute_offset)
				* ONE_MINTE_LENGTH_VALUE)
				/ ONE_DAY_LENGTH_VALUE);
		// 針對需要子初分日者特別處理:直接算入下一天。
		if (Date_to_String['子初分日'] && date_value.getHours() === 23) {
			index++;
		}
		if ((index %= SEXAGENARY_CYCLE_LENGTH) < 0) {
			index += SEXAGENARY_CYCLE_LENGTH;
		}
		return index;
	}

	// 時干支序。
	// 注意：此處"序"指的是 Array index，從 0 開始。
	function hour_stem_branch_index(date_value, options) {
		date_value = options && options.original_Date || date_value;
		date_value = date_value - HOUR_STEM_BRANCH_epoch
		// 修正不同年代時刻間的時區差。
		- (date_value.getTimezoneOffset() - HOUR_STEM_BRANCH_minute_offset)
				* ONE_MINTE_LENGTH_VALUE;
		return date_value / ONE_時辰_LENGTH_VALUE;
	}

	// 極大程度依賴 date_pattern 的寫法！
	stem_branch_date_pattern = new RegExp(stem_branch_date_pattern.replace(
			/\([^()]+\)日/, '([' + STEM_LIST + '][' + BRANCH_LIST + '])日'));

	/**
	 * parse 日干支：取得最接近 date_value 之指定日干支。
	 * 
	 * @param {String|Integer}stem_branch
	 *            指定日干支。
	 * @param {Date}date_value
	 *            基準日。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @returns
	 */
	function convert_stem_branch_date(stem_branch, date_value, end_date_diff) {

		if (!isNaN(stem_branch)
				|| !isNaN(stem_branch = stem_branch_to_index(stem_branch))) {

			if (!date_value) {
				date_value = new Date;
			}

			// assert: 加入干支之 date 可被正常 parse，但日干支本身會被忽略。
			// stem_branch_diff. [3]: see date_pattern.

			// 取得日干支差距。
			stem_branch -= date_stem_branch_index(date_value);

			if (!end_date_diff) {
				// 設在月底。
				end_date_diff = new Date(date_value).setMonth(date_value
						.getMonth() + 1, 0)
						- date_value;
			} else if (end_date_diff < 0) {
				// assert: !!period_end === true
				stem_branch += end_date_diff;
			}

			if (stem_branch < 0) {
				// 轉成最接近 0 之正 index。
				stem_branch = SEXAGENARY_CYCLE_LENGTH
						+ (stem_branch % SEXAGENARY_CYCLE_LENGTH);
			}
			if (Math.abs(end_date_diff) < stem_branch) {
				// 找出距離範圍最近的日干支。
				if (library_namespace.is_debug()) {
					library_namespace
							.warn('convert_stem_branch_date: 所欲求之日干支 ['
									+ stem_branch + '] 並不在範圍內！');
				}
				if (stem_branch - Math.abs(end_date_diff) > SEXAGENARY_CYCLE_LENGTH
						- stem_branch) {
					stem_branch -= SEXAGENARY_CYCLE_LENGTH;
				}
			}
			date_value.setDate(date_value.getDate() + stem_branch
					+ (end_date_diff < 0 ? end_date_diff : 0));
		}

		return date_value;
	}

	_.convert_stem_branch_date = convert_stem_branch_date;

	// 會變更 options!
	String_to_Date.parser.Chinese = function(date_string, minute_offset,
			options) {
		// 前置處理。
		if (!library_namespace.is_Object(options)) {
			options = Object.create(null);
		}

		if (isNaN(options.year_padding)) {
			options.year_padding = 0;
		}

		var date_value = String_to_Date.parser.CE(date_string, minute_offset,
				options),
		//
		stem_branch = date_value && date_string.match(stem_branch_date_pattern),
		//
		end_date_diff, period_end;

		// for 中國年號/中華民國紀年。
		// date_value.setFullYear(1911 + date_value.getFullYear());

		if (stem_branch
		// 確定真有 match 到干支。
		// 若沒 match 到，IE 中為 ""，其他為 undefined。
		&& (stem_branch = stem_branch[3])) {
			// 取得評估日期範圍。
			options.period_end = !(period_end = options.period_end);
			end_date_diff = (String_to_Date.parser.CE(date_string,
					minute_offset, options) - date_value)
					/ ONE_DAY_LENGTH_VALUE;
			// assert: if (end_date_diff < 0) than !!period_end === true

			// 復原 options。
			options.period_end = period_end;

			date_value = convert_stem_branch_date(stem_branch, date_value,
					end_date_diff);
		}

		return date_value;
	};

	/**
	 * 計算干支/天干與地支<br />
	 * Chinese sexagenary cycle.
	 * 
	 * @param {Integer}index
	 *            序數 (0-59)。
	 * @returns
	 */
	function index_to_stem_branch(index) {
		// NaN | 0 → 0, 過大的數 | 0 可能成負數。
		//
		// 當 < 0: 需要修正對負小數之模數計算。
		// 原因出自上面計算負小數時，其實應採用 Math.floor()。
		// Math.floor(-1.1) → -2。
		// 但以 "-1.1 | 0", "-1.1 >> 0", "≈-1.1" 會 → -1。
		// 效能:
		// http://jsperf.com/math-floor-vs-math-round-vs-parseint
		if (!isNaN(index = +index % SEXAGENARY_CYCLE_LENGTH)) {
			if ((index = Math.floor(index)) < 0) {
				index += SEXAGENARY_CYCLE_LENGTH;
			}

			// 10: STEM_LIST.length
			return STEM_LIST.charAt(index % 10)
			// 12: BRANCH_LIST.length
			+ BRANCH_LIST.charAt(index % 12);
		}
	}

	// 取得指定日干支之序數 (0-59)。
	function stem_branch_to_index(stem_branch) {
		if (!stem_branch || !(stem_branch = String(stem_branch))) {
			return;
		}

		var _0 = stem_branch.charAt(0), index = STEM_LIST.indexOf(_0);
		if (stem_branch.length > 1) {
			// '甲子'
			if (index !== NOT_FOUND
					&& (_0 = BRANCH_LIST.indexOf(stem_branch.charAt(1))) !== NOT_FOUND) {
				// 解一次同餘式組
				// index = (SEXAGENARY_CYCLE_LENGTH + 6 * index - 5 * _0) %
				// SEXAGENARY_CYCLE_LENGTH;
				index = (6 * index + 55 * _0) % SEXAGENARY_CYCLE_LENGTH;
			}
		} else if (index === NOT_FOUND) {
			// '甲' / '子'
			index = BRANCH_LIST.indexOf(_0);
		}

		if (index >= 0) {
			return index;
		}
	}

	_.to_stem_branch = index_to_stem_branch;
	// 可能回傳 0。若無法轉換，會回傳 undefined。
	_.stem_branch_index = function(value, options) {
		return is_Date(value) ? options && options.hour ? hour_stem_branch_index(value)
				: date_stem_branch_index(value)
				: stem_branch_to_index(value);
	};

	/**
	 * guess the year-stem-branch (歲次/年干支) of the date.
	 * 
	 * @param {Date|Integer}date_value
	 *            date specified.
	 * @param {Object|Boolean}options
	 *            true or {get_index:true} : get {Integer}index (年干支序) instead
	 *            of year-stem-branch.
	 * 
	 * @returns {String} year-stem-branch (歲次/年干支)
	 */
	function guess_year_stem_branch(date_value, options) {
		if (options && options.original_Date) {
			date_value = options.original_Date;
		}

		var year, month, date;
		if (is_Date(date_value)) {
			year = date_value.getFullYear();
			month = date_value.getMonth();
		} else if (isNaN(date_value)) {
			// TypeError
			throw new Error('guess_year_stem_branch: Not a Date');
		} else {
			year = date_value | 0;
			month = 7;
		}

		year -= YEAR_STEM_BRANCH_EPOCH;

		if (month < 2)
			// 正月初一的日期落在大寒至雨水
			// （一般在公曆1月19日至2月20日）之間。
			// 立春則一般在2月4日或2月5日。
			if ((date = date_value.getDate()) < 19 && month === 0) {
				// 上一年。
				year--;
			} else if (date < 20 || month < 1) {
				// 無法判別歲次：需要 include 'data.date.era'!
				return '(' + index_to_stem_branch(year - 1) + '或'
						+ index_to_stem_branch(year) + ')';
			}

		if (!options || options !== true && !options.get_index) {
			year = index_to_stem_branch(year);
		} else if ((year %= SEXAGENARY_CYCLE_LENGTH) < 0) {
			// see index_to_stem_branch()
			year += SEXAGENARY_CYCLE_LENGTH;
		}

		return year;
	}

	_.guess_year_stem_branch = guess_year_stem_branch;

	// Date_to_String['子初分日'] = false;
	// Date_to_String.子初分日 = false;

	strftime.set_conversion(Object.assign({
		// 完整民國紀年年份(2 or 3位數的數字，如 98, 102)
		R : function(date_value) {
			if ((date_value = date_value.getFullYear()) > 900) {
				// 民前0年是1911年。
				date_value -= 1911;
			}
			return date_value;
		}
	}, strftime.default_conversion), 'cmn-Hant-TW');

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// timevalue → {String}日期及時間表達式

	/**
	 * 計算大略的時間間隔，以適當的時間單位縮寫簡略顯示。 count roughly duration, count date.<br />
	 * CeL.age_of(new Date(0, 0, 0), new Date(0, 0, 0, 0, 0, 8)) === '8s'
	 * 
	 * TODO: locale
	 * 
	 * @param {Date|Number}start
	 * @param {Date|Number}[end]
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 */
	function age_of(start, end, options) {
		options = library_namespace.setup_options(options);
		if (!end) {
			// count till now.
			end = end === 0 ? new Date(0) : new Date;
		}
		var difference = end - start, diff, diff2,
		//
		gettext = library_namespace.gettext;
		if (!(difference >= 0) || !isFinite(difference)) {
			return;
		}

		if (!is_Date(start)) {
			start = new Date(start);
		}
		if (!is_Date(end)) {
			end = new Date(end);
		}
		// assert: new Date(0) 得到1月1日
		// assert: (new Date(0)).getMonth()===0&&(new Date(0)).getDate()===1
		diff2 = new Date(end - start);
		// ↑ 如此可處理年尾到年首的差異。
		// 計算兩者相差年分計數。
		diff = diff2.getFullYear() - /* 1970 */new Date(0).getFullYear();
		// 計算兩者相差大概月分。
		diff2 = diff2.getMonth() + (diff2.getDate() - 1) / 30;

		// 將數字四捨五入到指定的小數位數。 TODO: 把時間表示方式改為60進位。
		var to_fixed_digits = (options.digits | 0) >= 0
		// default: 0. e.g., {digits:0}
		? options.digits | 0 : 0;
		var long_format = options.long_format;

		if (diff) {
			// assert: {Integer}diff 年 {Float}diff2 月, diff > 0.
			// → difference = {Float} 年（至小數）
			difference = diff + diff2 / 12;
			// diff = {String} format to show
			if (options.月) {
				diff = gettext(long_format ?
				// gettext_config:{"id":"$1-years-and-$2-months"}
				'%1 {{PLURAL:%1|year|years}} and %2 {{PLURAL:%2|month|months}}'
				// gettext_config:{"id":"$1-y-$2-m"}
				: '%1 Y %2 M', diff, Math.round(diff2));
			} else {
				// years 近一年, 一年多
				// SI symbol: a (for Latin annus)
				diff = gettext(long_format ?
				// gettext_config:{"id":"$1-years"}
				'%1 {{PLURAL:%1|year|years}}'
				// gettext_config:{"id":"$1-y"}
				: '%1 Y', difference.to_fixed(to_fixed_digits));
			}
			if (options.歲) {
				// 計算年齡(虛歲)幾歲。
				difference = end.getFullYear() - start.getFullYear()
				// + 1: 一出生即虛歲一歲(YO, years old, "Y/O.")。之後過年長一歲。
				// else: 計算周歲（又稱實歲、足歲）幾歲。
				+ (options.歲 === '虛' ? 1 : 0);
				if (start - age_of.get_new_year(start.getFullYear()) < 0) {
					difference++;
				}
				if (end - age_of.get_new_year(end.getFullYear()) < 0) {
					difference--;
				}
				// 時年實歲。
				diff = difference + '歲, ' + diff;
			}

			return diff;
		}

		if (diff2 >= 1 && options.max_unit !== 'day') {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-months"}
			'%1 {{PLURAL:%1|month|months}}'
			// gettext_config:{"id":"$1-m"}
			: '%1 M', diff2.to_fixed(to_fixed_digits));
		}

		if (difference < 1000) {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-milliseconds"}
			'%1 {{PLURAL:%1|millisecond|milliseconds}}'
			// gettext_config:{"id":"$1-ms"}
			: '%1 ms', difference | 0);
		}

		if ((difference /= 1000) < 60) {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-seconds"}
			'%1 {{PLURAL:%1|second|seconds}}'
			// gettext_config:{"id":"$1-s"}
			: '%1 s', difference.to_fixed(to_fixed_digits));
		}

		if ((difference /= 60) < 60) {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-minutes"}
			'%1 {{PLURAL:%1|minute|minutes}}'
			// gettext_config:{"id":"$1-min"}
			: '%1 min', difference.to_fixed(to_fixed_digits));
		}

		if ((difference /= 60) < 24) {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-hours"}
			'%1 {{PLURAL:%1|hour|hours}}'
			// gettext_config:{"id":"$1-hr"}
			: '%1 hr', difference.to_fixed(to_fixed_digits));
		}

		if ((difference /= 24) < 7 || !options.weeks) {
			return gettext(long_format ?
			// gettext_config:{"id":"$1-days"}
			'%1 {{PLURAL:%1|day|days}}'
			// gettext_config:{"id":"$1-d"}
			: '%1 d', difference.to_fixed(to_fixed_digits));
		}

		return gettext(long_format ?
		// gettext_config:{"id":"$1-weeks"}
		'%1 {{PLURAL:%1|week|weeks}}'
		// gettext_config:{"id":"$1-w"}
		: '%1 W', (difference / 7).to_fixed(to_fixed_digits));
	}

	// 將在 data.date.era 更正。
	age_of.get_new_year = function(year, 月, 日, era_key) {
		// 取平均值。因無法準確判別春節（農曆正月初一）日期，此方法尚有誤差！
		return new Date((year < 0 ? year : '000' + year) + '/2/1');
	};

	_.age_of = age_of;

	// ------------------------------------------

	var recent_date_name = [
	// gettext_config:{"id":"2-days-before-yesterday-$h-$m"}
	'2 days before yesterday, %H:%M',
	// gettext_config:{"id":"the-day-before-yesterday-$h-$m"}
	'the day before yesterday, %H:%M',
	// gettext_config:{"id":"yesterday-$h-$m"}
	'yesterday, %H:%M',
	// gettext_config:{"id":"today-$h-$m"}
	'today, %H:%M',
	// gettext_config:{"id":"tomorrow-$h-$m"}
	'tomorrow, %H:%M',
	// gettext_config:{"id":"the-day-after-tomorrow-$h-$m"}
	'the day after tomorrow, %H:%M',
	// gettext_config:{"id":"2-days-after-tomorrow-$h-$m"}
	'2 days after tomorrow, %H:%M',
	// gettext_config:{"id":"3-days-after-tomorrow-$h-$m"}
	'3 days after tomorrow, %H:%M' ];
	var recent_date_name_today_index
	// gettext_config:{"id":"today-$h-$m"}
	= recent_date_name.indexOf('today, %H:%M');

	// @see https://en.wikipedia.org/wiki/Wikipedia:Comments_in_Local_Time
	// https://en.wikipedia.org/wiki/User:Gary/comments_in_local_time.js
	// https://zh.wikipedia.org/wiki/MediaWiki:Gadget-CommentsinLocalTime.js
	function indicate_date_time(date, options) {
		options = library_namespace.setup_options(options);
		if (!is_Date(date)) {
			// e.g., time value, ISO string
			// console.trace(date);
			date = new Date(date);
		}

		var base_date = options.base_date;
		if (isNaN(base_date) && !is_Date(base_date)) {
			base_date = typeof options.base_date === 'string' ? Date
					.parse(options.base_date) : Date.now();
		}

		var date_value_diff = date - base_date;
		if (isNaN(date_value_diff)) {
			// something wrong
			return;
		}

		if (Math.abs(date_value_diff) > (options.max_interval || 35 * ONE_DAY_LENGTH_VALUE)) {
			return date.format(options.general_format
					|| indicate_date_time.general_format);
		}

		var passed = date_value_diff <= 0,
		//
		gettext = library_namespace.gettext;

		if (passed) {
			date_value_diff = -date_value_diff;
		} else {
			// is future
		}

		// → seconds
		date_value_diff /= 1000;

		if (date_value_diff < 1) {
			// gettext_config:{"id":"now"}
			return gettext('now');
		}

		if (date_value_diff < 10) {
			// gettext_config:{"id":"several-seconds-ago"}
			return gettext(passed ? 'several seconds ago'
			// gettext_config:{"id":"soon"}
			: 'soon');
		}
		if (date_value_diff < 60) {
			// gettext_config:{"id":"$1-seconds-ago"}
			return gettext(passed ? '%1 {{PLURAL:%1|second|seconds}} ago'
			// gettext_config:{"id":"$1-seconds-later"}
			: '%1 {{PLURAL:%1|second|seconds}} later', Math
					.round(date_value_diff));
		}

		// → minutes
		date_value_diff /= 60;
		if (date_value_diff < 60) {
			// gettext_config:{"id":"$1-minutes-ago"}
			return gettext(passed ? '%1 {{PLURAL:%1|minute|minutes}} ago'
			// gettext_config:{"id":"$1-minutes-later"}
			: '%1 {{PLURAL:%1|minute|minutes}} later', Math
					.round(date_value_diff));
		}

		// → hours
		date_value_diff /= 60;
		if (date_value_diff < 3) {
			// gettext_config:{"id":"$1-hours-ago"}
			return gettext(passed ? '%1 {{PLURAL:%1|hour|hours}} ago'
			// gettext_config:{"id":"$1-hours-later"}
			: '%1 {{PLURAL:%1|hour|hours}} later', Math.round(date_value_diff));
		}

		// ----------------------------

		// → days
		date_value_diff /= 24;

		if (date_value_diff <= 3) {
			// the day of the month
			var message = /* date_of_month */date.getDate()
					- (is_Date(base_date) ? base_date : new Date(base_date))
							.getDate() + recent_date_name_today_index;
			// console.log([date_value_diff, message, (new Date).getDate(),
			// date.getDate()]);
			if (message > recent_date_name.length) {
				// assert: (new Date) 於本月初，date 於上月底。
				date_value_diff = new Date;
				date_value_diff.setDate(0);
				message -= date_value_diff.getDate();
			}
			message = recent_date_name[message];
			return date.format(gettext(message/* + ', %H:%M' */));
		}

		// TODO: week, 周六

		if (date_value_diff <= 35) {
			// gettext_config:{"id":"$1-days-ago"}
			return gettext(passed ? '%1 {{PLURAL:%1|day|days}} ago'
			// gettext_config:{"id":"$1-days-later"}
			: '%1 {{PLURAL:%1|day|days}} later', Math.round(date_value_diff));
		}

		// ----------------------------

		if (false && date_value_diff < 30) {
			// gettext_config:{"id":"$1-weeks-ago"}
			return gettext(passed ? '%1 {{PLURAL:%1|week|weeks}} ago'
			// gettext_config:{"id":"$1-weeks-later"}
			: '%1 {PLURAL:%1|week|weeks}} later', Math
					.round(date_value_diff / 7));
		}

		// ----------------------------

		// for dates in this year, *月*日

		// ----------------------------

		// *年*月*日

		return date.format(options.general_format
				|| indicate_date_time.general_format);
	}

	indicate_date_time.general_format = '%Y-%2m-%2d %2H:%2M';

	_.indicate_date_time = indicate_date_time;

	// ------------------------------------------
	// {String}日期及時間表達式 → {Natural}timevalue in milliseconds

	// https://en.wikipedia.org/wiki/ISO_8601#Durations
	var PATTERN_ISO_8601_durations = /^P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/,
	// 日期及時間 由小到大排列。
	PATTERN_time_units = [ [ '(?:ms|milliseconds?|毫秒|ミリ秒)', 1 ],
			[ '(?:s(?:ec)?|秒[鐘钟]?)', 1000 ], [ '(?:m(?:in)?|分[鐘钟]?)', 60 ],
			[ '(?:h(?:r|ours?)?|[個个]?小?[時时]|[個个]?時間)', 60 ],
			// T: for ISO 8601 Durations. e.g., 'P21DT3H'
			[ '(?:d(?:ays?|T)?|[日天])', 24 ],
			[ '(?:w(?:eeks?)?|週|[個个]?星期|個?禮拜|个?礼拜)', 7, true ],
			// 以下僅僅給出約略大小。 1 month: 30 days
			[ '(?:mon(?:ths?)?|[個个ヶ]?月)', 30 ],
			// https://en.wikipedia.org/wiki/Year#SI_prefix_multipliers
			// NIST SP811 和ISO 80000-3：2006 支持將符號a作為一年的時間單位。在英語中，還使用縮寫y和yr。
			// IUPAC: 1 a = 31556925.445 seconds
			[ '(?:y(?:r|ears?)?|年)', 12 ] ];

	(function() {
		// [ all, amount ]
		var ms = 1, template = /(\d+(?:\.\d+)?|\.\d+) ?UNIT(?:[^a-z]|$)/.source;
		PATTERN_time_units = PATTERN_time_units.map(function(pair) {
			return [ new RegExp(template.replace('UNIT', pair[0]), 'i'),
					pair[2] ? ms * pair[1] : ms *= pair[1] ];
		});
	})();

	// parser time interval to timevalue (get how many millisecond)
	// TODO: 半小時
	function time_interval_to_millisecond(interval) {
		if (typeof interval !== 'string') {
			// 允許函數之類其他種類的設定，需要呼叫端進一步處理。
			return interval > 0 ? +interval : interval || 0;
		}

		var timevalue = 0, has_matched, matched = interval
				.match(PATTERN_ISO_8601_durations);
		if (matched) {
			if (false && (+matched[1] || +matched[2])) {
				throw 'We cannot handle year / month: ' + interval;
			}

			// 這可以順便用來 parse:
			// https://en.wikipedia.org/wiki/ISO_8601#Durations
			// e.g., "P23DT23H"
			interval = matched[0];

		} else if (matched = interval
		// e.g., "12:34", "12:34:56"
		.match(/(?:^|\s)(\d{1,3}):(\d{1,2})(?::(\d{1,2}))?(?:\s|$)/)) {
			interval = matched[1] + 'H' + matched[2] + 'M'
					+ (matched[3] ? matched[3] + 'S' : '');
		}

		PATTERN_time_units.forEach(function(pair) {
			matched = interval.match(pair[0]);
			if (matched) {
				has_matched = true;
				timevalue += matched[1] * pair[1];
			}
		});

		if (has_matched)
			return timevalue;

		matched = interval.split('/');
		if (matched.length === 2) {
			// https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
			matched = matched.map(function(time) {
				return Date.parse(time);
			});
			if (!isNaN(matched[0]) && !isNaN(matched[1])) {
				return matched[1] - matched[0];
			}
		}
	}

	_.to_millisecond = time_interval_to_millisecond;

	// ---------------------------------------------------------------------//

	// parse durations. period 是比較久的時間
	function parse_period(period) {
		var matched = period.match(parse_period.PATTERN);
		if (matched && (!/[日時]/.test(matched[2])
		// 預防 "10月22日夜7-8時"
		|| !/[時分秒\/]/.test(matched[2].match(/^(?:.*?)([年月日時分秒\/])/)[1]))) {
			(period = matched).shift();
			if (!period[1].includes('月')
					&& (matched = period[0].match(/[^年月]+月/))) {
				period[1] = matched[0] + period[1];
			}
			if (!period[1].includes('年')
					&& (matched = period[0].match(/[^年]+年/))) {
				period[1] = matched[0] + period[1];
			}
		} else if (library_namespace.is_debug(2)) {
			library_namespace.warn('parse_period: Cannot parse period ['
					+ period + ']');
		}
		return period;
	}

	// '1/1/1-2/1/1' → [, '1/1/1', '2/1/1' ]
	// 'Neo-Babylonian/Nabopolassar' → null
	// "[^a-z]": 避免類似 "Neo-Babylonian" 被當作 period。
	//
	// "Maya:9.2.15.3.8 12 Lamat 6 Wo－Maya:9.6.11.0.16 7 Kib' 4 K'ayab'"
	// →
	// [, "Maya:9.2.15.3.8 12 Lamat 6 Wo", "Maya:9.6.11.0.16 7 Kib' 4 K'ayab'" ]
	parse_period.PATTERN = /^(.+[^a-z]|[^\d]*\d.+)[\-–~－—─～〜﹣至]\s*([^\-].+)$/i;
	// @see String_to_Date.parser_PATTERN

	_.parse_period = parse_period;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// count=1: 1–31
	// count=2: 1–15, 16–31
	// count=3: 1–10, 11–20, 21–31
	// count=4: 1–7, 8–14, 15–21, 22–31
	// count=5: 1–6, ...
	/**
	 * 將`date`所屬的月份以日子為單位平均切割成`count`個slice，回傳`date`所在slice的首尾日期。
	 * 
	 * @param {Array}date
	 *            基準日期: [year, month, date]。assert: 必須為合理日期，不可輸入[2001,1,32]之類。
	 * @param {Natural}count
	 *            將`date`所屬的月份以日子為單位平均切割成`count`個slice。 assert: count<=31
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns `date`所在slice的首尾日期: {Array}[起始日期, 結束日期]
	 */
	function get_date_range_via_cutting_month(date, count, options) {
		if (!options && !(count >= 1)) {
			options = library_namespace.setup_options(count);
			count = options.count;
		} else {
			options = library_namespace.setup_options(options);
		}
		if (!Array.isArray(date)) {
			if (!is_Date(date)) {
				date = new Date(date);
			}
			date = Julian_day(date);
			date = Julian_day.to_YMD(date, 'CE');
		}
		// assert: Array.isArray(date)
		var year = date[0], month = date[1];
		date = date[2];

		var days_in_this_month = Julian_day.from_YMD(year, month + 1, 1, 'CE')
				- Julian_day.from_YMD(year, month, 1, 'CE');

		// const
		var slice_days;
		if (options.slice_days >= 1 && !count) {
			slice_days = options.slice_days;
			count = days_in_this_month / slice_days | 0;
		} else {
			slice_days = days_in_this_month / count | 0;
			if (days_in_this_month - count * slice_days > 2 * slice_days) {
				// 預防最後一區塊太大。
				// e.g., ([2000,2,28], 10)
				slice_days++;
			}
		}
		var index = (date - 1) / slice_days | 0;
		if (index >= count)
			index = count - 1;
		var slice_start_date = index * slice_days + 1;
		var slice_end_date = slice_start_date + slice_days
		// 從下一個片段第一天移到本片段最後一天。
		- 1;
		if (slice_days === 0) {
			slice_start_date = slice_end_date = date;
		} else if (index === count - 1) {
			// assert: date 處在最後一個片段。
			// 最後一個片段必須包含到最後一天。
			slice_end_date = days_in_this_month;
		}

		if (options.get_Date) {
			if (false) {
				console.trace([ [ year, month, slice_start_date ],
						[ year, month, slice_end_date ] ]);
			}
			slice_start_date = Julian_day.YMD_to_Date(year, month,
					slice_start_date, 'CE');
			slice_end_date = Julian_day.YMD_to_Date(year, month,
					slice_end_date, 'CE');
		} else if (options.get_full_date) {
			slice_start_date = [ year, month, slice_start_date ];
			slice_end_date = [ year, month, slice_end_date ];
		}
		return [ slice_start_date, slice_end_date ];
	}

	_.get_date_range_via_cutting_month = get_date_range_via_cutting_month;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	/**
	 * <code>
	mode:
		+4:不顯示時間,
		+3:顯示時間至時,
		+2:顯示時間至分,
		+1:顯示時間至秒,
		+0:顯示時間至毫秒(milliseconds)

		+32(4<<3):不顯示日期,
		+24(3<<3):顯示日期mm/dd,
		+16(2<<3):顯示日期yyyy/mm,
		+8(1<<3):顯示日期yyyy/mm/dd(星期),
		+0:顯示日期yyyy/mm/dd

		+64(1<<6):input UTC
		+128(2<<6):output UTC

	NOTE:
	在現有時制下要轉換其他時區之時間成正確time:
	d=_其他時區之時間_;
	diff=其他時區之時差(例如 TW: UTC+8)
	d.setTime(d.getTime()-60000*((new Date).getTimezoneOffset()+diff*60))

	</code>
	 */

	/**
	 * 顯示格式化日期 string
	 * 
	 * @deprecated use Date_to_String.
	 * 
	 * @param date_value
	 *            要轉換的 date, 值過小時當作時間, <0 轉成當下時間
	 * @param {Number}
	 *            mode 要轉換的 mode
	 * @param {Boolean}
	 *            zero_fill 對 0-9 是否補零
	 * @param {String}
	 *            date_separator date separator
	 * @param {String}
	 *            time_separator time separator
	 * @return {String} 格式化後的日期
	 * 
	 * @example alert(format_date());
	 * 
	 * @since 2003/10/18 1:04 修正
	 * @since 2010/4/16 10:37:30 重構(refactoring)
	 * 
	 * @requires to_fixed
	 * 
	 * @see http://www.merlyn.demon.co.uk/js-dates.htm,
	 *      http://aa.usno.navy.mil/data/docs/JulianDate.html
	 * 
	 * @_memberOf _module_
	 */
	function format_date(date_value, mode, zero_fill, date_separator,
			time_separator) {
		library_namespace.debug('[' + (typeof date_value) + '] ' + date_value
				+ ', mode: ' + mode, 3);

		// initialization
		if (!mode) {
			mode = 0;
		}

		var output_UTC, a, b = mode, time_mode, return_string = '', show_number = zero_fill ? function(
				n) {
			return n > 9 ? n : '0' + n;
		}
				: function(n) {
					return n;
				};

		// date & time mode
		mode %= 64;
		// UTC mode
		b = (b - mode) / 64;
		// input UTC
		a = b % 2 == 1 ? 1 : 0;
		output_UTC = b - a === 1;

		time_mode = mode % 8;
		// date mode
		mode = (mode - time_mode) / 8;
		// time_mode > 4 && mode > 3: error mode: 沒啥好顯示的了

		// 處理各種不同的 date
		b = typeof date_value;
		if (b === 'number' && date_value >= 0) {
			// 全球標準時間(UCT)與本地時間之差距
			// UTC time = local time + format_date.UTC_offset(milliseconds)
			if (!a && isNaN(a = format_date.UTC_offset)) {
				// input UTC 時之差距(milliseconds)
				// .getTimezoneOffset() is in minute.
				a = format_date.UTC_offset = ONE_MINTE_LENGTH_VALUE
						* present_local_minute_offset;
			}

			// 值過小時當作時間: d < 90000000 ≈ 24*60*60*1000，判別為當天，只顯示時間。不允許 d < 0！
			date_value = new Date(Math.abs(a += date_value) < 9e7 ? a
					: date_value);
			mode = 32;
		} else if (b === 'string' && (a = date_value.toDate())) {
			date_value = a;
		} else if (b === 'date') {
			// 應對在 Excel 等外部程式會出現的東西。
			date_value = new Date(date_value);
		} else if (
		// http://www.interq.or.jp/student/exeal/dss/ejs/1/1.html
		// 引数がオブジェクトを要求してくる場合は instanceof 演算子を使用します
		// typeof date_value!=='object'||date_value.constructor!=Date
		!(date_value instanceof Date)) {
			// new Date === new Date()
			date_value = new Date;
		}

		// 處理 date
		if (mode < 4) {
			return_string = show_number((output_UTC ? date_value.getUTCMonth()
					: date_value.getMonth()) + 1);
			if (!date_separator) {
				date_separator = '/';
			}
			if (mode < 3) {
				return_string = (output_UTC ? date_value.getUTCFullYear()
						: date_value.getFullYear())
						+ date_separator + return_string;
			}
			if (mode !== 2) {
				return_string += date_separator
						+ show_number(output_UTC ? date_value.getUTCDate()
								: date_value.getDate());
				if (mode === 1) {
					return_string += '('
							+ (output_UTC ? date_value.getUTCDay() : date_value
									.getDay()) + ')';
				}
			}
		}

		// 處理 time
		if (time_mode < 4) {
			if (mode < 4) {
				// 日期 & 時間中間分隔
				return_string += ' ';
			}
			if (!time_separator) {
				time_separator = ':';
			}
			return_string += show_number(output_UTC ? date_value.getUTCHours()
					: date_value.getHours());
			if (time_mode < 3) {
				return_string += time_separator
						+ show_number(output_UTC ? date_value.getUTCMinutes()
								: date_value.getMinutes());
				if (time_mode < 2) {
					return_string += time_separator
							+ (time_mode
							//
							? show_number(output_UTC ? date_value
									.getUTCSeconds() : date_value.getSeconds())
							//
							: (output_UTC ? date_value.getUTCSeconds()
									+ date_value.getUTCMilliseconds() / 1e3
							//
							: date_value.getSeconds()
									+ date_value.getMilliseconds() / 1e3)
									.to_fixed(3));
				}
			}
		}

		return return_string;
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	// @inner
	function serial_token_list_toString() {
		return this.join('');
	}

	// @inner
	function to_serial_token_list(item, options) {
		var serial_token_list = [];
		if (!item && item !== 0)
			return serial_token_list;

		serial_token_list.toString = serial_token_list_toString;
		var PATTERN_serial_token = /([^\d]+)(0*)([1-9]\d*)?/g;
		var max_serial_length = options.max_serial_length;

		item = String(item);
		var matched = item.match(/^\d+/);
		if (matched) {
			matched = matched[0];
			if (matched.length > max_serial_length) {
				serial_token_list.push(matched.slice(0, -max_serial_length),
						matched.slice(-max_serial_length));
			} else {
				serial_token_list.push('', matched);
			}
			PATTERN_serial_token.lastIndex = matched.length;
		}

		while (matched = PATTERN_serial_token.exec(item)) {
			if (!matched[3])
				matched[3] = '';
			var diff = max_serial_length - matched[3].length;
			if (matched[2].length <= diff) {
				serial_token_list.push(matched[1], matched[2] + matched[3]);
			} else if (0 <= diff) {
				serial_token_list.push(matched[1] + matched[2].slice(0, -diff),
						'0'.repeat(diff) + matched[3]);
			} else {
				serial_token_list.push(matched[0], '');
			}
		}

		// assert: item === serial_token_list.join('')

		// return pairs: [
		// non-serial, digits (maybe serial),
		// non-serial, digits (maybe serial),
		// ... ]
		return serial_token_list;
	}

	// @inner
	function generator_toString(serial, date) {
		var list = this.clone();
		if (typeof date === 'string') {
			date = date.to_Date() || date;
		} else if (typeof date === 'number') {
			date = new Date(date);
		}
		if (!is_Date(date) || !date.getTime()) {
			if (date) {
				library_namespace.error([ 'generator_toString: ', {
					// gettext_config:{"id":"invalid-date-$1"}
					T : [ 'Invalid date: %1', date ]
				} ]);
			}
			date = new Date;
		}

		for (var arg_index = 1, index = 1; index < list.length; index++) {
			var operator = list[index];
			if (Number.isSafeInteger(serial)) {
				if (typeof operator === 'number') {
					list[index] = operator ? serial.pad(operator) : serial;
				} else {
					list[index] = operator ? date.format(operator) :
					// assert: operator === ''
					'';
				}
			} else {
				list[index] = typeof operator === 'number' ? '%' + arg_index++
						: operator;
			}
		}
		return list.join('');
	}

	// @inner
	function get_pattern_and_generator(serial_token_list, options) {
		if (!serial_token_list)
			return;

		var pattern = serial_token_list.clone();
		var generator = serial_token_list.clone();

		for (var index = 1; index < pattern.length; index++) {
			var token = pattern[index];
			if (index % 2 === 0) {
				// assert: generator[index] === token;
				pattern[index]
				//
				= library_namespace.to_RegExp_pattern(token);
				continue;
			}

			if (!token)
				continue;

			var fixed_length = options.fixed_length || token.startsWith(0);
			generator[index] = fixed_length ? token.length : 0;
			pattern[index] = fixed_length
			//
			? '(\\d{' + token.length + '})'
			//
			: '(\\d{1,' + options.max_serial_length + '})';
		}

		// assert: new RegExp('^'+pattern+'$').test(serial_token_list.join(''))
		// === true

		// assert: CeL.gettext(generator, index, index.pad()) may generate
		// serial_token_list.join('')

		return [ pattern, generator ];
	}

	// @inner
	function new_generator(generator_array) {
		return generator_toString.bind(generator_array);
	}

	// generator string (e.g., including "%1", "%Y") to generator
	function parse_generator(generator_string) {
		// matched: [ operator, pad, date, argument_NO ]
		var PATTERN_operator = new RegExp(
				/%(?:(\d?)(conversion)|(1)|(\d?)№)/.source.replace(
						'conversion', Object.keys(strftime.default_conversion)
								.join('|')), 'g');
		var matched, generator = [], lastIndex = 0;
		while (matched = PATTERN_operator.exec(generator_string)) {
			generator.push(generator_string.slice(lastIndex, matched.index),
					matched[3] ? 0 : matched[4] ? +matched[4] : matched[0]);
			lastIndex = PATTERN_operator.lastIndex;
		}
		if (lastIndex < generator_string.length)
			generator.push(generator_string.slice(lastIndex));

		// assert: generator.toString() === generator_string
		return new_generator(generator);
	}

	detect_serial_pattern.parse_generator = parse_generator;

	// digital serial instance to pattern and generator
	function detect_serial_pattern(items, options) {
		options = library_namespace.new_options(options);
		if (!(options.max_serial_length > 0)) {
			// 4: year length
			options.max_serial_length = 4;
		}

		var pattern_hash = Object.create(null);
		function add_serial_token_list(serial_token_list) {
			var pattern = get_pattern_and_generator(serial_token_list, options);
			if (!pattern)
				return;
			var generator = pattern[1];
			pattern = pattern[0];
			var pattern_String = pattern.join('');
			if (!pattern_hash[pattern_String]) {
				(pattern_hash[pattern_String] = []).generator = generator;
			}
			pattern_hash[pattern_String].push(serial_token_list);
		}

		// 創建 pattern_hash
		items.forEach(function(item) {
			var serial_token_list = to_serial_token_list(item, options);
			add_serial_token_list(serial_token_list);
		});

		// 掃描: 有相同 digits 的不應歸為 serial。
		Object.values(pattern_hash).forEach(function(lists) {
			var need_to_resettle = [];
			for (var index = 1; index < lists.length; index += 2) {
				for (var digits_hash = Object.create(null), index_of_lists = 0;
				//
				index_of_lists < lists.length; index_of_lists++) {
					var serial_token_list = lists[index_of_lists];
					var digits = serial_token_list[index];
					if (!digits) {
						// assert: lists[*][index] === ''
						break;
					}
					if (!(digits in digits_hash)) {
						digits_hash[digits] = index_of_lists;
						continue;
					}
					// 有相同 digits 的不應歸為 serial。
					// e.g., "A1B1", "A1B2"
					// 僅有 A1B<b>1</b>, A1B<b>2</b> 可歸為 serial。
					// A<b>1</b> ["A", "1", ... ] 應改為 ["A1", "", ... ]
					serial_token_list[index - 1] += digits;
					serial_token_list[index] = '';
					if (!need_to_resettle.includes(index_of_lists))
						need_to_resettle.push(index_of_lists);
					if (digits_hash[digits] >= 0) {
						serial_token_list = lists[digits_hash[digits]];
						serial_token_list[index - 1] += digits;
						serial_token_list[index] = '';
						need_to_resettle.unshift(digits_hash[digits]);
						// 下次不再處理。
						digits_hash[digits] = -1;
					}
				}
			}

			if (need_to_resettle.length > 0) {
				need_to_resettle.sort(library_namespace.descending)
				//
				.forEach(function(index_of_lists) {
					var serial_token_list = lists.splice(index_of_lists, 1)[0];
					// rebulid pattern_hash
					add_serial_token_list(serial_token_list);
				});
			}
		});

		// 把 pattern '(\\d{1,' + max_serial_length + '})'
		// 搬到 '(\\d{' + token.length + '})'
		Object.keys(pattern_hash).forEach(function(pattern) {
			var lists = pattern_hash[pattern];
			if (lists.length === 0) {
				// Nothing left after "有相同 digits 的不應歸為 serial。".
				delete pattern_hash[pattern];
				return;
			}
			if (!pattern.includes('(\\d{1,')) {
				// Not target.
				return;
			}
			var _options = Object.clone(options);
			_options.fixed_length = true;
			for (var index_of_lists = 0;
			//
			index_of_lists < lists.length; index_of_lists++) {
				var serial_token_list = lists[index_of_lists];
				var pattern = get_pattern_and_generator(serial_token_list,
				//
				_options);
				// var generator = pattern[1];
				pattern = pattern[0];
				var pattern_String = pattern.join('');
				if (pattern_hash[pattern_String]) {
					lists.splice(index_of_lists--, 1);
					pattern_hash[pattern_String].push(serial_token_list);
				}
			}
		});

		Object.keys(pattern_hash).forEach(function(pattern) {
			if (pattern_hash[pattern].length === 0)
				delete pattern_hash[pattern];
		});

		// 把符合日期的數字以日期標示。
		Object.values(pattern_hash).forEach(function(lists) {
			var generator = lists.generator;
			for (var index = 1,
			// assert: length === generator.length
			length = generator.length; index < length; index += 2) {
				var digits_list = [];
				if (lists.some(function(serial_token_list) {
					var digits = serial_token_list[index];
					if (!digits)
						return true;
					// assert: digits_list.includes(digits) === false
					digits_list.push(digits);
				})) {
					continue;
				}

				// checker = [ typical generator label, checker,
				// has digits without 0-prefix ]
				var checker_list = [ [ '%Y', function(digits) {
					return 1900 <= digits && digits <= 2200;
				} ], [ '%m', function(digits) {
					if (1 <= digits && digits <= 12) {
						if (digits < 10 && digits.length < 2)
							this[2] = true;
						return true;
					}
				} ], [ '%d', function(digits) {
					if (1 <= digits && digits <= 31) {
						if (digits < 10 && digits.length < 2)
							this[2] = true;
						return true;
					}
				} ] ];

				checker_list = checker_list.filter(function(checker) {
					return digits_list.every(function(digits) {
						return checker[1](digits);
					});
				});

				if (checker_list.length === 0) {
					// No matched, use generator default operator
					// assert: typeof generator[index] === 'number'
					continue;
				}

				// assert: typeof generator[index] === 'number'
				generator[index] = [ generator[index] ]
				// 登記所有相符的。
				.append(checker_list);

				switch (checker_list = checker_list[0][0]) {
				case '%Y':
				case '%m':
					generator['has_' + checker_list] = true;
					break;
				}
			}

			for (var index = 1; index < generator.length; index += 2) {
				var operator = generator[index];
				if (Array.isArray(operator)) {
					var digits_length = operator[0];
					// best checker
					operator = operator[1];
					generator[index] = operator[0] === '%Y'
					// assert: generator[index] = [ number, [checker] ]
					|| generator['has_%Y'] && operator[0] === '%m'
					//
					|| generator['has_%m'] && operator[0] === '%d'
					//
					? digits_length || operator[2]
					// digits_length: "%m" → "%2m", operator[2]: "%m" → "%0m"
					? operator[0].replace('%', '%' + digits_length)
					//
					: operator[0] : digits_length;
				}
			}
		});

		// move items of %m to %2m, %d to %2d
		var pattern_group_hash = Object.create(null);
		Object.keys(pattern_hash).forEach(function(pattern) {
			var generalized = pattern.replace(/\\d{\d{1,2}}/g, '\\d{1,'
			//
			+ options.max_serial_length + '}');
			if (!pattern_group_hash[generalized]) {
				pattern_group_hash[generalized] = [ pattern ];
				return;
			}

			var pattern_to = pattern_hash[pattern].generator.join('');
			var index_in_group_hash;
			var pattern_from = pattern_group_hash[generalized]
			// 找出所有與 pattern 等價的
			.filter(function(_pattern, index) {
				_pattern = pattern_hash[_pattern].generator.join('');
				if (/%\d([md])/.test(_pattern)
				//
				!== /%\d([md])/.test(pattern_to)
				//
				&& _pattern.replace(/%\d([md])/g, '%$1')
				//
				=== pattern_to.replace(/%\d([md])/g, '%$1')) {
					if (!(index_in_group_hash >= 0))
						index_in_group_hash = index;
					return true;
				}
			});
			if (pattern_from.length === 0) {
				// Warning: 可能導致出現錯誤
				pattern_group_hash[generalized].push(pattern);
				return;
			}

			pattern_from = pattern_from[0];
			var pattern_to;
			if (/%\d([md])/.test(pattern_to)) {
				pattern_group_hash[generalized].splice(index_in_group_hash, 1);
				pattern_group_hash[generalized].push(pattern_to);
				pattern_to = pattern;
			} else {
				// switch from, to
				pattern_to = pattern_from;
				pattern_from = pattern;
			}
			// assert: !/%\d([md])/.test(pattern_from)
			// && /%\d([md])/.test(pattern_to)

			// var lists_from = pattern_hash[pattern_from];
			// var lists_to = pattern_hash[pattern_to];
			pattern_hash[pattern_to].append(pattern_hash[pattern_from]);
			delete pattern_hash[pattern_from];
		});

		var pattern_list = [];
		Object.keys(pattern_hash).forEach(function(pattern) {
			var lists = pattern_hash[pattern];
			var generator = lists.generator;
			// recover superfluous "0" (by "%m" → "%0m" above)
			for (var index = 1; index < generator.length; index += 2) {
				if (typeof generator[index] === 'string') {
					generator[index] = generator[index]
					// "%0m" → "%m"
					.replace(/^%0([md])$/g, '%$1');
				}
			}
			// assert (lists.length > 0)
			pattern_list.push({
				pattern : new RegExp('^' + pattern + '$'),
				generator : new_generator(generator),
				items : lists,
				count : lists.length
			});
		});
		// count 從大到小排序
		pattern_list.sort(function(_1, _2) {
			return _2.count - _1.count;
		});

		return pattern_list;
	}

	_.detect_serial_pattern = detect_serial_pattern;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//
	// 組織 period list，以做後續檢索。

	/**
	 * 取得包含 date 之 periods<br />
	 * need module CeL.data.native
	 * 
	 * @param {Date}date
	 *            欲搜尋之 date
	 * 
	 * @returns {Array}period data
	 */
	function get_contemporary_periods(date) {
		date = +date;
		if (date < this.start[0]) {
			return;
		}

		var start_index = this.start.search_sorted(date, {
			found : true
		}),
		// 邊際 period
		edge_period = this[start_index], contemporary = this.contemporary[start_index];

		if (contemporary) {
			var end_list = contemporary.end;
			// 把結束時間在 date 之前的去掉。
			var last_index = 0;
			// 因為量應該不大，採循序搜尋。
			while (end_list[last_index] <= date) {
				last_index++;
			}
			contemporary = contemporary.slice(last_index);
		} else {
			contemporary = [];
		}

		if (date < this.get_end(edge_period)) {
			contemporary.push(edge_period);
		} else if (contemporary.length === 0) {
			return;
		}

		return contemporary;
	}

	// TODO
	function add_period(period_data) {
		var start_time = this.get_start(period_data),
		// index to insert
		index = this.start.search_sorted(start_time, {
			found : true
		});
		TODO;
		if (start_time < this.start[0])
			;
	}

	if (false) {
		test_periods = sortest_periods([
				[ new Date(2015, 3, 2), new Date(2015, 7, 3), 'bbb' ],
				[ new Date(2015, 1, 2), new Date(2015, 4, 3), 'aaa' ], ], 0, 1);

		test_periods.get_contemporary(new Date(2015, 1, 1));
		test_periods.get_contemporary(new Date(2015, 3, 2));
		test_periods.get_contemporary(new Date(2015, 3, 8));
		test_periods.get_contemporary(new Date(2015, 4, 3));
		test_periods.get_contemporary(new Date(2015, 7, 2));
		test_periods.get_contemporary(new Date(2015, 7, 3));
		test_periods.get_contemporary(new Date(2015, 7, 4));
	}

	/**
	 * 組織 period_list，以做後續檢索。
	 * 
	 * @param {Object|Array}period_list
	 *            period list
	 * @param {Number|Function}start_index
	 *            start index. 若為 function，回傳須轉為 number，不應回傳 boolean, false。
	 * @param {Number|Function}end_index
	 *            end index. 若為 function，回傳須轉為 number，不應回傳 boolean, false。
	 * @param {Number}[unit_length]
	 * 
	 * @returns {Array}period list
	 */
	function sort_periods(period_list, start_index, end_index, unit_length) {
		var periods = [], start_list = [],
		// assert: Number.isFinite(get_start(period_data))
		get_start = typeof start_index === 'function' ? start_index : function(
				data) {
			return +data[start_index];
		},
		// assert: Number.isFinite(get_end(period_data))
		get_end = typeof end_index === 'function' ? end_index : function(data) {
			var time = +data[end_index];
			return isNaN(time) ? +get_start(data) + unit_length : time;
		};
		if (!(unit_length > 0)) {
			unit_length = ONE_DAY_LENGTH_VALUE;
		}
		// periods.get_start = get_start;
		periods.get_end = get_end;
		// periods.unit = unit_length;

		function add_index(period_data, index) {
			start_list.push([ get_start(period_data), period_data ]);
		}
		if (typeof period_list.forEach === 'function') {
			period_list.forEach(add_index);
		} else {
			for ( var key in period_list) {
				add_index(period_list[key], key);
			}
		}

		// sort by start time
		start_list.sort(function(period1, period2) {
			return period1[0] - period2[0];
		});

		// [ start time value, ... ]
		var start_time_list = [],
		// [ [ period_data, period_data, ... ], ... ]
		// contemporary 若存在，應該按照 end 時間由前至後 sort。
		contemporary = [],
		//
		last_contemporary, last_end_list, last_end,
		// 前一period
		last_period;
		periods.start = start_time_list;
		periods.contemporary = contemporary;
		if (false) {
			periods.add = add_period;
			start_list.forEach(function(period_data) {
				periods.add(period_data);
			});
		}

		start_list.forEach(function(period, index) {
			var start_time = period[0];
			periods.push(period[1]);
			start_time_list.push(start_time);
			if (last_contemporary) {
				last_contemporary = last_contemporary.slice();
				last_end_list = last_end_list.slice();
			} else {
				last_contemporary = [];
				last_end_list = [];
			}

			// 除去結束時間於本 period 之前的 period。
			var past_index = 0;
			// 因為量應該不大，採循序搜尋。
			while (last_end_list[past_index]
					&& start_time < last_end_list[past_index]) {
				past_index++;
			}
			if (past_index > 0) {
				last_end_list.slice(past_index);
				last_contemporary.slice(past_index);
			}

			if (start_time < last_end) {
				// last_period 與本 period 重疊。將之添入。
				past_index = 0;
				// 因為量應該不大，採循序搜尋。
				while (last_end_list[past_index] <= last_end) {
					past_index++;
				}
				last_end_list.splice(past_index, 0, last_end);
				last_contemporary.splice(past_index, 0, last_period);
			}

			// last_contemporary: 不包含本 period 之本 period 共存 periods。

			if (last_contemporary.length > 0) {
				(contemporary[index] = last_contemporary).end = last_end_list;
			} else {
				last_contemporary = null;
			}
			last_end = get_end(last_period = period[1]);
		});

		periods.get_contemporary = get_contemporary_periods;
		return periods;
	}

	_.sort_periods = sort_periods;

	// ----------------------------------------------------------------------------------------------------------------------------------------------------------//

	library_namespace.set_method(String.prototype, {
		to_Date : set_bind(String_to_Date)
	});

	library_namespace.set_method(Date.prototype, {
		to_Excel : set_bind(Date_to_Excel),

		age : set_bind(age_of, true),
		format : set_bind(Date_to_String)
	});

	return (_// JSDT:_module_
	);
}

});
// application.net.wiki
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科)
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用的程式庫，主要用於編寫[[維基百科:機器人]]
 *               ([[WP:{{{name|{{int:Group-bot}}}}}|{{{name|{{int:Group-bot}}}}}]])。
 * 
 * TODO:<code>

wiki_API.work() 遇到 Invalid token 之類問題，中途跳出 abort 時，無法紀錄。應將紀錄顯示於 console 或 local file。
wiki_API.page() 整合各 action=query 至單一公用 function。
[[mw:Manual:Pywikibot/zh]]

[[mw:Help:OAuth]]
https://www.mediawiki.org/wiki/OAuth/Owner-only_consumers
https://meta.wikimedia.org/wiki/Steward_requests/Miscellaneous#OAuth_permissions
[[m:Special:OAuthConsumerRegistration/propose]] (using an owner-only consumers) get (consumer_key, consumer_secret, access_token, access_secret)

Wikimedia REST API
https://www.mediawiki.org/wiki/RESTBase

https://zh.wikipedia.org/w/index.php?title=title&action=history&hilight=123,456


-{zh-hans:访问;zh-hant:訪問;zh-tw:瀏覽}-量
https://wikitech.wikimedia.org/wiki/Analytics/PageviewAPI
https://en.wikipedia.org/wiki/Wikipedia:Pageview_statistics
https://dumps.wikimedia.org/other/pagecounts-raw/
https://tools.wmflabs.org/pageviews
https://wikitech.wikimedia.org/wiki/Analytics/Data/Pagecounts-raw
https://meta.wikimedia.org/wiki/Research:Page_view

WikiData Remote editor
http://tools.wmflabs.org/widar/


get user infomation:
https://www.mediawiki.org/w/api.php?action=help&modules=query%2Busers
https://zh.wikipedia.org/w/api.php?action=query&format=json&list=users&usprop=blockinfo|groups|implicitgroups|rights|editcount|registration|emailable|gender|centralids|cancreate&usattachedwiki=zhwiki&ususers=username|username
https://www.mediawiki.org/w/api.php?action=help&modules=query%2Busercontribs
https://zh.wikipedia.org/w/api.php?action=query&format=json&list=usercontribs&uclimit=1&ucdir=newer&ucprop=ids|title|timestamp|comment|parsedcomment|size|sizediff|flags|tags&ucuser=username

對Action API的更改，請訂閱
https://lists.wikimedia.org/pipermail/mediawiki-api-announce/

雙重重定向/重新導向/転送
特別:二重リダイレクト
Special:DoubleRedirects
Special:BrokenRedirects
https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bquerypage
[[mw:User:Duplicatebug/API Overview/action]]
https://test.wikipedia.org/w/api.php?action=query&list=querypage&qppage=DoubleRedirects&qplimit=max


gadgets 小工具 [[Wikipedia:Tools]], [[Category:Wikipedia scripts]], [[mw:ResourceLoader/Core modules]]
[[Special:MyPage/common.js]] [[使用說明:維基用戶腳本開發指南]]

// ---------------------------------------------------------

// https://doc.wikimedia.org/mediawiki-core/master/js/#!/api/mw.loader
mediaWiki.loader.load('https://kanasimi.github.io/CeJS/ce.js')
CeL.run('application.net.wiki');
CeL.wiki.page('Wikipedia:機器人',function(page_data){console.log(page_data);},{redirects:true,section:0})

// wikibits從2013年就棄用
// https://www.mediawiki.org/wiki/ResourceLoader/Legacy_JavaScript#wikibits.js
// NG: importScript('User:cewbot/*.js');

你可以在維基媒體的wiki網站URL最後增加?safemode=1來關閉你個人的CSS和JavaScript。範例：https://zh.wikipedia.org/wiki/文學?safemode=1。上面一行意思是你可以測試是否是你的使用者腳本或套件造成問題，而不必解除安裝。

</code>
 * 
 * @see https://github.com/siddharthvp/mwn
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
// JavaScript MediaWiki API for ECMAScript 2017+ :
// https://github.com/kanasimi/wikiapi
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki',

	// .includes() @ CeL.data.code.compatibility
	// .between() @ CeL.data.native
	// .append() @ CeL.data.native
	require : 'data.code.compatibility.|data.native.'
	// (new Date).format('%4Y%2m%2d'), (new Date).format() @ CeL.data.date
	// optional 選用: .show_value() @ CeL.interact.DOM, CeL.application.debug
	// optional 選用: CeL.wiki.cache(): CeL.application.platform.nodejs.fs_mkdir()
	// optional 選用: CeL.wiki.traversal(): CeL.application.platform.nodejs
	// optional 選用: wiki_API.work(): gettext():
	// optional 選用: CeL.application.storage
	// CeL.application.locale.gettext()
	// CeL.date.String_to_Date(), Julian_day(), .to_millisecond(): CeL.data.date
	+ '|data.date.',

	// 設定不匯出的子函式。
	no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring

	// --------------------------------------------------------------------------------------------

	// https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript
	/**
	 * web Wikipedia / 維基百科 用的 functions。<br />
	 * 可執行環境: node.js, JScript。
	 * 
	 * TODO: new wiki_API(API_URL || login_options);<br />
	 * wiki_session.login(user_name, password, API_URL);
	 * 
	 * @param {String}user_name
	 *            user name
	 * @param {String}password
	 *            user password
	 * @param {String}[API_URL]
	 *            language code or API Endpoint URL
	 * 
	 * @returns {wiki_API} wiki site API
	 * @template wiki_API
	 * 
	 * @constructor
	 */
	function wiki_API(user_name, password, API_URL) {
		if (!this || this.constructor !== wiki_API) {
			return wiki_API.query.apply(null, arguments);
		}

		// TODO: this.login(user_name, password, API_URL);

		var login_options;
		if (API_URL && typeof API_URL === 'object') {
			// session = new wiki_API(user_name, password, login_options);
			login_options = API_URL;
			API_URL = null;
		} else if (!API_URL && !password && user_name
				&& typeof user_name === 'object') {
			// session = new wiki_API(login_options);
			login_options = user_name;
			user_name = null;
			// console.log(login_options);
		} else {
			login_options = Object.create(null);
		}

		user_name = user_name || login_options.user_name;
		password = password || login_options.password;
		API_URL = API_URL || login_options.API_URL/* || login_options.project */;

		// console.trace([ user_name, password, API_URL ]);
		library_namespace.debug('URL of service endpoint: ' + API_URL
				+ ', default language: ' + wiki_API.language, 3, 'wiki_API');

		// action queue 佇列。應以 append，而非整個換掉的方式更改。
		this.actions = [];
		// @see wiki_API.prototype.next
		if (login_options.is_running) {
			// login 前便執行其他作業，可能導致 Session=deleted。 e.g., running
			// login_options.configuration_adapter() @ 20201008.fix_anchor.js
			if (typeof login_options.is_running === 'string')
				this.actions.unshift([ login_options.is_running ]);
			this.running = true;
		}

		this.token = {
			// lgusername
			lgname : user_name,
			// user_password
			lgpassword : password
		};

		// console.trace(API_URL);
		if (!API_URL && !('language' in this)
		// wikidata 不設定 language。
		&& !this[wiki_API.KEY_HOST_SESSION]) {
			API_URL = wiki_API.language;
			// 假若未設定 API_URL 或 user_name，那就不初始化。等 .login 才初始化。
			// 若想基本的初始化，最起碼必須設定 API_URL。
			login_options.need_initialize = password && user_name;
		} else if (!('need_initialize' in login_options)) {
			login_options.need_initialize = true;
		}

		if ('use_SQL' in login_options) {
			this.use_SQL = login_options.use_SQL;
		} else if (API_URL
		// assert: typeof API_URL === 'string'
		&& API_URL.includes('://')) {
			// assert: Not MediaWiki server. Is outer server.
			this.use_SQL = false;
		}

		// console.trace(API_URL);
		// setup session.
		if (API_URL) {
			// e.g., 'cmn'
			if (API_URL in wiki_API.language_code_to_site_alias)
				API_URL = wiki_API.language_code_to_site_alias[API_URL];
			wiki_API.setup_API_language(this /* session */, API_URL);
			wiki_API.setup_API_URL(this /* session */, API_URL);
		}

		[ 'site_name', 'data_API_URL', 'SPARQL_API_URL',
		// Must after wiki_API.setup_API_language()!
		'language' ]
		//
		.forEach(function(property) {
			if (property in login_options)
				this[property] = login_options[property];
		}, this);
		// console.trace(this);

		this.general_parameters = Object.clone(wiki_API.general_parameters);
		library_namespace.import_options(login_options,
		// @see CeL.application.net.wiki.namespace
		wiki_API.general_parameters_normalizer, this.general_parameters);
		if (library_namespace.is_WWW(true) && window.location
		// For non-authenticated requests, specify the value *. This
		// will cause the Access-Control-Allow-Origin header to be set,
		// but Access-Control-Allow-Credentials will be false and all
		// user-specific data will be restricted.
		&& this.general_parameters.origin !== '*') {
			var host;
			if (!window.location.host
			// e.g., locale file: window.location.host===""
			|| (host = new URL(this.API_URL).host)
					&& host !== window.location.host
					&& host !== this.general_parameters.origin) {
				library_namespace.warn([ 'wiki_API: ', {
					// gettext_config:{"id":"you-may-need-to-set-$1-=-$2"}
					T : [ 'You may need to set %1 = %2!',
					//
					'.origin', JSON.stringify(host) ]
				} ]);
			}
		}

		if (login_options.localStorage_prefix_key && wiki_API.has_storage) {
			// assert: typeof login_options.localStorage_prefix_key === 'string'
			// ||
			// typeof login_options.localStorage_prefix_key === 'number'
			this.localStorage_prefix = [ library_namespace.Class,
					wiki_API.site_name(this),
					login_options.localStorage_prefix_key, '' ]
			// '.'
			.join(library_namespace.env.module_name_separator);
		}

		// ------------------------------------------------
		// pre-loading functions

		// https://stackoverflow.com/questions/39007637/javascript-set-vs-array-performance
		// https://jsbench.me/3pkjlwzhbr/1

		// .API_parameters[modules.path] = parameter_hash
		// @see get_API_parameters()
		this.API_parameters = Object.create(null);
		// wiki_session.redirects_data[redirect_from] = {String}redirect_to
		// = main page title without "Template:" prefix
		// @see CeL.application.net.wiki.task ,
		// CeL.application.net.wiki.namespace
		this.redirects_data = Object.create(null);

		if (login_options.need_initialize) {
			this.run_after_initializing = [];
			// 注意: new wiki_API() 後之操作，應該採 wiki_session.run()
			// 的方式，確保此時已經執行過 pre-loading functions @ function wiki_API():
			// wiki_session.siteinfo(), wiki_session.adapt_task_configurations()
			this.run(initialize_wiki_API, login_options);
		} else {
			// e.g.,
			// wiki = new CeL.wiki; ...; wiki.login(login_options);
		}
	}

	function initialize_wiki_API(options) {
		var session = this;
		// if (session.API_URL)
		session.siteinfo(load_template_functions);

		function load_template_functions() {
			// console.trace(session);
			// @see CeL.application.net.wiki.template_functions
			if (session.load_template_functions)
				session.load_template_functions(null,
				//
				adapt_task_configurations);
			else
				adapt_task_configurations();
		}

		function adapt_task_configurations() {
			// console.trace(options);
			if (options.task_configuration_page) {
				session.adapt_task_configurations(
						options.task_configuration_page,
						function(configuration) {
							// console.trace(configuration);
							if (options.configuration_adapter)
								options.configuration_adapter(configuration);
							initialization_complete();
						});
			} else {
				initialization_complete();
			}
		}

		function initialization_complete() {
			library_namespace.debug(wiki_API.site_name(session)
					+ ': 初始化程序登錄完畢。添加之前登錄的 ' + session.actions.length + ' 個程序',
					1, 'initialization_complete');
			session.actions.append(session.run_after_initializing);
			delete session.run_after_initializing;
		}
	}
	initialize_wiki_API.is_initializing_process = true;

	/**
	 * 檢查若 value 為 session。
	 * 
	 * @param value
	 *            value to test. 要測試的值。
	 * 
	 * @returns {Boolean} value 為 session。
	 */
	function is_wiki_API(value) {
		return value
				&& ((value instanceof wiki_API) || value.API_URL && value.token);
	}

	// ------------------------------------------------------------------------

	// export 導出.

	// @static
	Object.assign(wiki_API, {
		is_wiki_API : is_wiki_API
	});

	if (library_namespace.is_WWW(true) && typeof mw === 'object' && mw
			&& typeof mw.config === 'object'
			&& typeof mw.config.get === 'function'
			&& typeof mediaWiki === "object" && mediaWiki === mw) {
		wiki_API.mw_web_session = true;
	}

	// 等執行再包含入必須的模組。
	this.finish = function(name_space, waiting, sub_modules_to_full_module_path) {
		var sub_modules = [ 'namespace', 'parser', 'query', 'page',
				'page.Page', 'Flow', 'list', 'edit', 'task', 'parser.wikitext',
				'parser.section', 'parser.misc' ];

		// ------------------------------------------------------------------------
		// auto import SQL 相關函數 @ Toolforge。

		// function setup_wmflabs()

		// only for node.js.
		// https://wikitech.wikimedia.org/wiki/Help:Toolforge/FAQ#How_can_I_detect_if_I.27m_running_in_Cloud_VPS.3F_And_which_project_.28tools_or_toolsbeta.29.3F
		if (library_namespace.platform.nodejs) {
			/** {String}Wikimedia Toolforge name. CeL.wiki.wmflabs */
			wiki_API.wmflabs = require('fs').existsSync('/etc/wmflabs-project')
			// e.g., 'tools-bastion-05'.
			// if use `process.env.INSTANCEPROJECT`,
			// you may get 'tools' or 'tools-login'.
			&& (library_namespace.env.INSTANCENAME
			// 以 /usr/bin/jsub 執行時可得。
			// e.g., 'tools-exec-1210.eqiad.wmflabs'
			|| library_namespace.env.HOSTNAME || true);
		}

		if (wiki_API.wmflabs) {
			// import CeL.application.net.wiki.Toolforge
			sub_modules.push('Toolforge');
		}

		// --------------------------------------------------------------------

		// Essential dependency chain
		library_namespace.debug({
			T :
			// gettext_config:{"id":"load-the-main-functions-and-necessary-dependencies-to-operate-mediawiki"}
			'Load the main functions and necessary dependencies to operate MediaWiki.'
		}, 1, 'wiki_API');
		// library_namespace.set_debug(2);
		library_namespace.run(sub_modules_to_full_module_path(sub_modules),
		//
		function() {
			wiki_API.mw_web_session = false; //MODIFIED
			if (wiki_API.mw_web_session) {
				wiki_API.mw_web_session = new wiki_API({
					API_URL :
					// mediaWiki.config.get('wgServer')
					location.origin
					// https://www.mediawiki.org/wiki/Manual:$wgScriptPath
					+ mediaWiki.config.get('wgScriptPath')
					// https://www.mediawiki.org/wiki/Manual:Api.php
					+ '/api.php',
					localStorage_prefix_key : 'mw_web_session'
				});
				// fill tokens
				for ( var token_name in mediaWiki.user.tokens.values) {
					wiki_API.mw_web_session.token[
					// 'csrfToken' → 'csrftoken'
					token_name.toLowerCase()]
					//
					= mediaWiki.user.tokens.values[token_name];
				}
				// 預設對所有網站會使用相同的 cookie

				// @see
				// https://doc.wikimedia.org/mediawiki-core/master/js/#!/api/mw.Api
			}
			library_namespace.debug({
				// gettext_config:{"id":"all-wiki-submodules-are-loaded"}
				T : 'All wiki submodules are loaded.'
			}, 1, 'wiki_API');
		}, waiting);
		return waiting;
	};

	return wiki_API;
}

});
// application.OS.Windows

/**
 * @name	CeL function for Windows
 * @fileoverview
 * 本檔案包含了 Windows 系統管理專用的 functions。
 * @since	
 */

'use strict';
if (typeof CeL === 'function')
CeL.run(
{
name : 'application.OS.Windows',
code : function(library_namespace) {


/**
 * null module constructor
 * @class	web 的 functions
 */
var _// JSDT:_module_
= function() {
	//	null module constructor
};

/**
 * for JSDT: 有 prototype 才會將之當作 Class
 */
_// JSDT:_module_
.prototype = {
};



// --------------------------------------------------------


// 在 .hta 中, typeof WScript==='undefined'.
// http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/objects/shell/application.asp
// http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/programmersguide/shell_intro.asp

// 用 IE 跑 ActiveXObject 可能會出現 ActiveX 指令碼的警告，須更改「允許主動式內容在我電腦上的檔案中執行」或改用 <a href="http://msdn.microsoft.com/en-us/library/ms537628%28v=vs.85%29.aspx" accessdate="2011/12/11 20:4" title="The Mark of the Web (MOTW)">Mark of the Web</a>。
// IE 工具→「網際網路選項」→「進階」→「安全性」→「允許主動式內容在我電腦上的檔案中執行」


_// JSDT:_module_
.
//	for Microsoft Windows Component Object Model.
//	http://blogs.msdn.com/b/ericlippert/archive/2004/06/01/145686.aspx
//	http://technet.microsoft.com/library/ee156598.aspx
new_COM = typeof WScript === 'object' ? function(id) {
	//	http://msdn.microsoft.com/en-us/library/xzysf6hc(v=vs.84).aspx
	return WScript.CreateObject(id);
} : typeof ActiveXObject === 'function' ? function(id) {
	// e.g., in HTA
	return new ActiveXObject(id);
} : typeof Server === 'object' && Server.CreateObject && function(id) {
	return Server.CreateObject(id);
};

// CeL.application.OS.Windows.no_COM
if (_.no_COM = !_.new_COM && 'No Component Object Model support!') {
	if (false && !library_namespace.env.ignore_COM_error)
		library_namespace.warn('new_COM: no <a href="http://en.wikipedia.org/wiki/Component_Object_Model" target="_blank">Component Object Model</a> support!');

	(_.new_COM = function(id) {
		// 忽略沒有 Windows Component Object Model 的錯誤。
		if (!library_namespace.env.ignore_COM_error)
			throw new Error('new_COM: No method to get Microsoft <a href="http://en.wikipedia.org/wiki/Component_Object_Model" target="_blank">Component Object Model</a> (COM): [' + id + ']! You may need to set `CeL.env.ignore_COM_error = true`!');
	});

	return _;
}
// WScript.Echo((_.no_COM? '沒' : '') + '有 Windows Component Object Model。');


/**
 * test if is a COM.<br />
 * 經驗法則。並非依照規格書。
 * 
 * @param object
 *            object to test
 * @returns {Boolean} is a COM.
 */
function is_COM(object) {
	try {
		if (library_namespace.is_Object(object)
				&& '' === '' + object
				&& typeof object.constructor === 'undefined'
				) {
			var i;
			for (i in object) {
				return false;
			}

			try {
				i = String(object);
				return false;
			} catch (e) {
				return true;
			}
		}
		return false;

	} catch (e) {
		// TODO: handle exception
	}
}


_// JSDT:_module_
.
is_COM = is_COM;






var HTA;
/**
 * Are we run in HTA?<br />
 * ** HTA 中應該在 DOM ready 後呼叫，否則 document.getElementsByTagName 不會有東西！
 * @param {String}[id]	HTA tag id (only used in low version that we have no document.getElementsByTagName)
 * @return	We're in HTA
 * @require	library_namespace.is_WWW
 * @since	2009/12/29 19:18:53
 * @_memberOf	_module_
 * @see
 * http://msdn2.microsoft.com/en-us/library/ms536479.aspx
 * http://www.microsoft.com/technet/scriptcenter/resources/qanda/apr05/hey0420.mspx
 * http://www.msfn.org/board/lofiversion/index.php/t61847.html
 * lazy evaluation
 * http://peter.michaux.ca/articles/lazy-function-definition-pattern
 */
function get_HTA(id) {
	if (!library_namespace.is_HTA)
		return;

	if (library_namespace.is_WWW(true)) {
		HTA = document.getElementsByTagName('APPLICATION')[0];
	} else
		HTA = library_namespace.is_WWW() && id && document.all && document.all[id];

	return HTA;
};

library_namespace.set_initializor(get_HTA, _);




function parse_command_line(command_line, no_command_name){
	//	TODO: "" 中的判別仍有問題。
	var args = [], re = no_command_name ? /\s+("([^"]*)"|(\S+))/g
			: /\s*("([^"]*)"|(\S+))/g, result;

	// commandLine 第一引數為 full script name
	while (result = re.exec(command_line))
		args.push(result[3] || result[2]);

	return args;
}

//get_WScript_object();
//get_WScript_object[generateCode.dLK]='is_WWW,get_HTA,WSH,dirSp'.split(',');
//get_WScript_object[generateCode.dLK].push('*var args,WshShell,WinShell,WinShell,fso;get_WScript_object();');
var WSH, WshShell = "WScript.Shell", WinShell = "Shell.Application", FSO = "Scripting.FileSystemObject", args;

var log_message;

/**
* 
* @param HTML_only
*/
function get_WScript_object(HTML_only) {
	var i;

	if (typeof WshShell === 'string') {
		//library_namespace.debug('Initializing using ' + _.new_COM, 1, 'get_WScript_object');
		try {
			WshShell = _.new_COM(WshShell);
			WinShell = _.new_COM(WinShell);
			FSO = _.new_COM(FSO);
		} catch (e) {
			if ((e.number & 0xFFFF) === 429)
				//	Automation 伺服程式無法產生物件
				//	Run-Time Error '429' OLE Automation Server Can't Create Object
				//	把 HTA 當作 HTML?
				throw e;
			library_namespace.error(e);
		}
		//library_namespace.debug(typeof FSO, 1, 'get_WScript_object');
	} else
		library_namespace.debug('Already initialized!', 1, 'get_WScript_object');

	if (typeof WScript === 'object'
		// && typeof WScript.constructor=='undefined'
			) {
		// Array.from()
		args = Array.prototype.slice.call(WScript.Arguments);

		//	Microsoft Windows Script Host (WSH)
		i = (WSH = WScript.FullName).lastIndexOf(library_namespace.env.path_separator);
		if (i !== -1)
			WSH = WSH.slice(i + 1);

	} else if (
			!(typeof HTML_only === 'undefined' ? library_namespace.is_WWW() && !_.get_HTA() : HTML_only)// !HTML_only//
			&& typeof ActiveXObject !== 'undefined')
		try {
			if (i = _.get_HTA()){
				args = parse_command_line(i.commandLine);
				//	default HTA host is mshta.exe.
				WSH = 'mshta.exe';
			}
		} catch (e) {
		}

	//	判斷假如尚未load則排入以確定是否為HTA
	else if (library_namespace.is_WWW(1) && !_.get_HTA()
			// && !document.getElementsByTagName('body').length
			)
		setTimeout(function() {
			get_WScript_object(HTML_only);
		}, 100);


	try {
		// CScript.exe only
		// var stdout = FSO.GetStandardStream(1);
		// var stderr = FSO.GetStandardStream(2);
		log_message = function(message) {
			// stdout.WriteLine(message);
			// WScript.StdOut.Write(message);
			WScript.StdOut.WriteLine(message);
		};
	} catch (e) {
		// using WScript.exe
		log_message = function(message) {
			WScript.Echo(message);
		};
	}

	// WScript.StdIn.ReadLine()


/*
* @cc_on @if(@_jscript_version >= 5) // JScript gives us Conditional
* compilation, we can cope with old IE versions. // and security blocked
* creation of the objects. ;//else.. @end@
*/

	i = {
		WshShell : WshShell,
		WinShell : WinShell,
		FSO : FSO,
		args : args,
		WSH : WSH
	};

	if(HTML_only)
		throw i;
	return i;
};

library_namespace.set_initializor(get_WScript_object, _);




/*	2007/11/17 23:3:53
	使用 ADSI (Active Directory Service Interface) 存取資料
	http://support.microsoft.com/kb/234001
	http://www.dbworld.com.tw/member/article/010328b.htm
	http://support.microsoft.com/kb/216393
*/
function addUser(name,pw,group,computer){
 //	http://msdn.microsoft.com/library/en-us/script56/html/wsmthenumprinterconnections.asp
 ;
 //	連上伺服器
 var oIADs,o;
 //	利用Create指令，指定產生一個新的使用者類別，以及使用者帳號的名稱。使用SetInfo的指令將目錄服務中的資料更新。
 try{oIADs=new Enumerator(GetObject(computer='WinNT://'+(computer||(new_COM('WScript.Network')).ComputerName)));}catch(e){}//WScript.CreateObject('WScript.Network')
 if(oIADs){//try{
  if(name){
   try{o=oIADs.Create('user',name);}catch(e){o=new Enumerator(GetObject(computer+'/'+name));}
   o.SetPassword(pw),/*o.FullName=name,o.Description=name,*/o.SetInfo();
   //	Administrators
   if(group)(new Enumerator(GetObject(computer+'/'+group))).Add(o.ADsPath);	//	o.ADsPath: computer+'/'+name
   return o;	//	得到用戶
  }

  //oIADs.Filter=['user'];//new VBArray('user');	//	no use, 改用.AccountDisabled
  o={};
  //	http://msdn2.microsoft.com/en-us/library/aa746343.aspx
  //	對所有的oIADs，通常有Name,Description
  for(var i,j,a,b,p='Name,AccountDisabled,Description,FullName,HomeDirectory,IsAccountLocked,LastLogin,LoginHours,LoginScript,MaxStorage,PasswordExpirationDate,PasswordMinimumLength,PasswordRequired,Profile'.split(',');!oIADs.atEnd();oIADs.moveNext())if(typeof oIADs.item().AccountDisabled==='boolean'){
   for(i=oIADs.item(),j=0,a={};j<p.length;j++)if(b=p[j])try{
    a[b]=i[b];
    if(typeof a[b]==='date')a[b]=new Date(a[b]);
   }catch(e){
    //alert('addUser():\n['+i.name+'] does not has:\n'+b);
    //	刪掉沒有的屬性。但僅少數不具有，所以不能全刪。XP中沒有(?):,AccountExpirationDate,BadLoginAddress,BadLoginCount,Department,Division,EmailAddress,EmployeeID,FaxNumber,FirstName,GraceLoginsAllowed,GraceLoginsRemaining,HomePage,Languages,LastFailedLogin,LastLogoff,LastName,LoginWorkstations,Manager,MaxLogins,NamePrefix,NameSuffix,OfficeLocations,OtherName,PasswordLastChanged,Picture,PostalAddresses,PostalCodes,RequireUniquePassword,SeeAlso,TelephoneHome,TelephoneMobile,TelephoneNumber,TelephonePager,Title
    //p[j]=0;//delete p[j];
   }
   o[i.name]=a;
  }

  return o;
 }//catch(e){}
};
//a=addUser();for(i in a){d=[];for(j in a[i])d.push(j+': '+a[i][j]);alert(d.join('\n'));}





//	特殊功能	-------------------------------------------------------

/*	取得基本環境值
//	test
if(0){
 var o=WinEnvironment;
 if(typeof o=='object'){var i,t='';for(i in o)t+=i+'='+o[i]+'\n';alert(t);}
 o=SpecialFolder;
 if(typeof o=='object'){var i,t='';for(i in o)t+=i+'='+o[i]+'\n';alert(t);}
 o=Network;
 if(typeof o=='object'){var i,t='';for(i in o)t+=i+'='+o[i]+'\n';alert(t);}
 o=NetDrive;
 if(typeof o=='object'){var i,t='';for(i in o)t+=i+'='+o[i]+'\n';alert(t);}
 o=NetPrinter;
 if(typeof o=='object'){var i,t='';for(i in o)t+=i+'='+o[i]+'\n';alert(t);}
}
*/
//setTool();
var WinEnvironment,SpecialFolder,Network,NetDrive,NetPrinter;
//getEnvironment[generateCode.dLK]='WinEnvironment,SpecialFolder,Network,NetDrive,NetPrinter,*getEnvironment();';
function getEnvironment(){
 if(typeof WshShell!=='object'||typeof SpecialFolder==='object')return;

 // http://www.robvanderwoude.com/vbstech_data_environment.php
 // https://msdn.microsoft.com/ja-jp/library/cc364502.aspx
 // WshShell.ExpandEnvironmentStrings('%TEMP%'), WshShell.ExpandEnvironmentStrings('%ProgramFiles%')
 WinEnvironment={},Network={},NetDrive={},NetPrinter={};
 // Windows 95/98/Me の場合、使用できる strType は Process に限定されます。
 var i,j,k,o=new Enumerator(WshShell.Environment("Process"));/*	Win9x、NT（Administratorもしくはほかのユーザー）の区別なく、すべての場合でエラーが発生しないようにするには、strTypeに"PROCESS"を指定するとよいでしょう。
	機器上所有已定義的環境變數Windows environment variables	http://msdn2.microsoft.com/en-us/library/fd7hxfdd(VS.85).aspx	http://www.roy.hi-ho.ne.jp/mutaguchi/wsh/refer/lesson11.htm	http://nacelle.info/wsh/03001.php	http://www.cs.odu.edu/~wild/windowsNT/Spring00/wsh.htm
	usual:	ALLUSERSPROFILE,APPDATA,BLASTER,CLASSPATH,CLIENTNAME,CommonProgramFiles,COMPUTERNAME,ComSpec,DEVMGR_SHOW_NONPRESENT_DEVICES,HOMEDRIVE,HOMEPATH,INCLUDE,LIB,LOGONSERVER,NUMBER_OF_PROCESSORS,OS,Os2LibPath,Path,PATHEXT,PROCESSOR_ARCHITECTURE,PROCESSOR_IDENTIFIER,PROCESSOR_LEVEL,PROCESSOR_REVISION,ProgramFiles,PROMPT,QTJAVA,SESSIONNAME,SystemDrive,SystemRoot,TEMP,TMP,USERDOMAIN,USERNAME,USERPROFILE,VS71COMNTOOLS,VSCOMNTOOLS,windir,winbootdir

	WshShell.ExpandEnvironmentStrings("%windir%\\notepad.exe");	WshShell.Environment("Process")("TMP")
	MyShortcut.IconLocation = WSHShell.ExpandEnvironmentStrings("%windir%\\notepad.exe, 0");

	System	HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment
	User	HKEY_CURRENT_USER\Environment
	Volatile	HKEY_CURRENT_USER\Volatile Environment	ログオフとともにクリアされる
	Process, or 98:'WshShell.Environment'==WshShell.Environment("Process"),NT:==WshShell.Environment("System")ただし、Administratorアカウントを持つユーザー以外は、strTypeに"SYSTEM"を指定、もしくは省略するとエラーになります。
 */
 while(!o.atEnd()){
  i=o.item();
  j=i.indexOf('=');//if((j=i.indexOf('='))!=-1)
  WinEnvironment[i.slice(0,j)]=i.substr(j+1);	//	value以';'作為分隔，若有必要可使用.split(';')
  o.moveNext();
 }

 //	http://www.microsoft.com/japan/msdn/library/ja/script56/html/wsprospecialfolders.asp	HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders
 //	VB中用For Each .. In可列舉出全部，但JS則不行-_-所以得自己列舉
 // fso.GetSpecialFolder( 0: Windows 文件夾 1: System 文件夾 2: Temp 文件夾 )
 set_Object_value('SpecialFolder','AllUsersDesktop,AllUsersStartMenu,AllUsersPrograms,AllUsersStartup,AppData,Desktop,Favorites,Fonts,MyDocuments,NetHood,PrintHood,Programs,Recent,SendTo,StartMenu,Startup,Templates');
 o=WshShell.SpecialFolders;
 for(i in SpecialFolder)SpecialFolder[i]=o(i);
 for(i=0;i<o.Count();i++)SpecialFolder[i]=o.item(i);

 o=new_COM("WScript.Network");//WScript.CreateObject("WScript.Network");
 //	http://msdn.microsoft.com/library/en-us/script56/html/wsmthenumprinterconnections.asp
 Network.ComputerName=o.ComputerName,Network.UserDomain=o.UserDomain,Network.UserName=o.UserName;
 //	Network Drive & Printer mappings
 j=o.EnumNetworkDrives(),k=1;
 for(i=0;i<j.Count();i+=2)NetDrive[j.Item(i)?j.Item(i):'Volatile'+k++]=NetDrive[i/2]=j.Item(i+1);
 j=o.EnumPrinterConnections(),k=1;
 for(i=0;i<j.Count();i+=2)NetPrinter[j.Item(i)]=NetPrinter[i/2]=j.Item(i+1);
};	//	function getEnvironment()

// http://msdn.microsoft.com/en-us/library/0ea7b5xe.aspx
// http://msdn.microsoft.com/en-us/library/yzefkb42.aspx
/*

CeL.run('application.OS.Windows');
CeL.log(CeL.get_SpecialFolder('APPDATA','foobar2000'));

*/
function get_SpecialFolder(name, sub_path) {
	if (!SpecialFolder) {
		var SpecialFolders = get_WScript_object().WshShell.SpecialFolders;

		SpecialFolder = [];
		'AllUsersDesktop,AllUsersStartMenu,AllUsersPrograms,AllUsersStartup,AppData,Desktop,Favorites,Fonts,MyDocuments,NetHood,PrintHood,Programs,Recent,SendTo,StartMenu,Startup,Templates'
		//
		.toUpperCase().split(',')
		//
		.forEach(function (strFolderName) {
			var path = SpecialFolders.Item(strFolderName);
			if (path) {
				SpecialFolder[strFolderName] = path;
				library_namespace.debug('SpecialFolder[' + strFolderName + '] = [' + path + ']', 2);
			}
		});

		// SpecialFolders.length === SpecialFolders.Count()
		for (var i = 0, length = SpecialFolders.Count(); i < length; i++)
			// SpecialFolders.Item(i) is native String @ JScript.
			SpecialFolder[i] = SpecialFolders.Item(i);
	}

	if (!name)
		name = SpecialFolder;
	else if ((name = SpecialFolder[name.toUpperCase()]) && sub_path)
		name += '\\' + sub_path;
	return name;
}

_.get_SpecialFolder = get_SpecialFolder;



_// JSDT:_module_
.
/**
 * 取得 VB 的 Nothing
 * @returns	VB 的 Nothing
 * @_memberOf	_module_
 */
VBNothing = function () {
	try {
		return new_COM("ADODB.RecordSet").ActiveConnection;
	} catch (e) {
	}
};

_// JSDT:_module_
.
/**
 * 轉換 VB 的 Safe Array 成為 JS Array.
 * @param vba	VB 的 array
 * @returns
 * @_memberOf	_module_
 */
VBA_to_JSA = function (vba) {
	try {
		return (new VBArray(vba)).toArray();
	} catch (e) {
	}
	return [];
};

_// JSDT:_module_
.
/**
 * 轉換JS Array成為VB的Safe Array.
 * Safe Array To JS Array: plaese use new VBArray().
 * JScriptの配列は実際にはCSV文字列だったりする。VBScriptのvartypeに食わせると8(VT_STRING)が返ってくることからもわかる。
 * @param array
 * @returns
 * @see
 * http://www.microsoft.com/japan/msdn/japan/msdn/library/ja/script56/html/js56jsobjvbarray.asp
 * @_memberOf	_module_
 */
JSA_to_VBA = function (array) {
	if (typeof array !== 'object')
		array = [ array ];
	var i = 0, dic = new_COM("Scripting.Dictionary");
	for (; i < array.length; i++)
		dic.add(i, array[i]);
	try {
		return dic.items();
	} finally {
		//dic = null;
	}
};




/*	http://www.eggheadcafe.com/forumarchives/scriptingVisualBasicscript/Mar2006/post26047035.asp
	Application.DoEvents();
*/
function DoEvents() {
	// Triggers screen updates in an HTA...
	try {
		if (!DoEvents.w)
			DoEvents.w = typeof WshShell === 'object' ? WshShell
					: new_COM("WScript.Shell");
		DoEvents.w.Run("%COMSPEC% /c exit", 0, true);
	} catch (e) {
	}
}

var DoNothing = DoEvents;

function Sleep(_sec) {
	if (isNaN(_sec) || _sec < 0)
		_sec = 0;
	if (typeof WScript === 'object')
		try {
			// Win98的JScript沒有WScript.Sleep
			WScript.Sleep(_sec * 1e3);
		} catch (e) {
		}
		else
			// if(typeof window!='object')
			try {
				if (!Sleep.w)
					Sleep.w = typeof WshShell === 'object' ? WshShell
							: new_COM("WScript.Shell");
				Sleep.w.Run(_sec ? "%COMSPEC% /c ping.exe -n " + (1 + _sec)
						+ " 127.0.0.1>nul 2>nul" : "%COMSPEC% /c exit", 0,
						true);
			} catch (e) {
			}
};





/*
	送key到application	http://msdn.microsoft.com/library/en-us/script56/html/wsmthsendkeys.asp
	SendKeys('a')	送a
	SendKeys("a{1}4{2}5");	送a,等1/10s,送4,等2/10s,送5
	timeOut:	<0:loop, 0 or not set:1 time, >0:be the time(ms)
*/
var SendKeysU;
//SendKeys[generateCode.dLK]='Sleep';
function SendKeys(keys,appTitle,timeOut,timeInterval){
 if(typeof WshShell!=='object'||typeof WshShell!=='object'&&typeof(WshShell=new_COM("WScript.Shell"))!=='object')return 1;
 if(isNaN(timeInterval)||timeInterval<1)timeInterval=100;	//	時間間隔
 timeOut=timeOut?timeOut<0?-1:Math.floor(timeOut/timeInterval)+1:0;
 if(appTitle)
  while(!WshShell.AppActivate(appTitle))
   if(timeOut--)Sleep(timeInterval);else return 2;
 if(!SendKeysU)SendKeysU=100;	//	時間間隔單位
 while(keys.match(/\{([.\d]+)\}/)){
  WshShell.SendKeys(keys.substr(0,RegExp.index));
  Sleep(SendKeysU*RegExp.$1);
  keys=keys.substr(RegExp.lastIndex);
 }
 return WshShell.SendKeys(keys);
}




// Create an object reference: hack?!
//var windows=new WScript();
// Run the calculator program
//windows.explorer.run('calc.exe');
// Writing the local computer name to the screen
//document.write(windows.network.computerName);
// Copy files from one folder to another
//windows.fileSystem.copyFile('c:\\mydocuments\\*.txt', 'c:\\tempfolder\\');





return (
	_// JSDT:_module_
);
}


});


// data
/**
 * @name CeL data function
 * @fileoverview 本檔案包含了 data 處理的 functions。
 * @since
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

typeof CeL === 'function' && CeL.run({
	// module name
	name : 'data',

	require : 'data.code.compatibility.|data.native.to_fixed',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var to_fixed = this.r('to_fixed'),
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	/**
	 * null module constructor
	 * 
	 * @class data 處理的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	/**
	 * <code>
	eval(uneval(o)): IE 沒有 uneval
	http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone

	way1:
	return YAHOO.lang.JSON.parse( YAHOO.lang.JSON.stringify( obj ) );

	TODO:
	1.
	防止交叉參照版: try
	var a=function(){this.a=1,this.b={a:this.a},this.a={b:this.b};},b=cloneObject(a);
	.or.
	var a={},b;
	a.a={a:1};
	a.b={a:a.a};
	a.a={b:a.b};
	b=cloneObject(a);

	恐須改成
	=new cloneObject();


	2.
	equal()

	 </code>
	 */
	/**
	 * clone object
	 * 
	 * @param object
	 * @param {Boolean}deep
	 *            deep / with trivial
	 * @return
	 * 
	 * @see Object.clone() @ data.native
	 * @since 2008/7/19 11:13:10, 2012/10/16 22:01:12, 2014/5/30 19:35:59.
	 */
	function clone(object, deep) {
		if (!object || typeof object !== 'object')
			// assert: is 純量 / function
			return object;

		if (Array.isArray(object))
			if (deep) {
				var target = [];
				object.forEach(function(o, index) {
					target[index] = clone(o, deep);
				});
				return target;
			} else
				// Array.clone: data.native.clone_Array()
				return Array.clone(object);

		var key = ('clone' in object)
		// test 物件自帶的 clone().
		&& typeof object.clone === 'function';

		if (key)
			// object.clone(deep);
			return object.clone();

		key = library_namespace.is_type(object);
		if (key === 'Date')
			return new Date(object.getTime());

		if (key === 'RegExp')
			// new object.constructor(object)
			return new RegExp(object);

		var value, target = {};
		for (key in object)
			// 不加入非本 instance，為 prototype 的東西。
			if (Object.hasOwn(object, key)) {
				value = object[key];
				// TODO: 預防 loop, 防止交叉參照/循環參照。
				target[key] = deep ? clone(value, deep) : value;
			}
		return target;
	}

	_// JSDT:_module_
	.clone = clone;

	// merge `new_data` to `old_data`, and return merged old_data
	// merge 時，各屬性值以 `old_data` 為基礎，`new_data` 後設定者為準。
	// Will modify old_data!
	function deep_merge_object(old_data, options) {
		var new_data;
		if (Array.isArray(old_data)) {
			// deep_merge_object([old_data, new_data, newer_data, ...,
			// latest data ], options);
			old_data.forEach(function(data, index) {
				if (index === 0) {
					old_data = data;
				} else if (index === this.length - 1) {
					new_data = data;
				} else {
					old_data = deep_merge_object([ old_data, data ], options);
				}
			});
		} else {
			// deep_merge_object(old_data, new_data);
			new_data = options;
		}

		// ----------------------------

		if (typeof old_data !== 'object' || old_data === null || !new_data) {
			return new_data || old_data;
		}

		// ----------------------------

		function merge_property_of_object(sub_new_data, sub_old_data) {
			for ( var property in sub_new_data) {
				// 將 property in sub_new_data 設定至
				// old_value=sub_old_data[property];
				merge_property(property, sub_new_data, sub_old_data);
			}
			return sub_old_data;
		}

		// 以 sub_old_data[property] 為基礎，將 sub_new_data[property] merge/overwrite
		// 到 sub_old_data[property]
		// 最終指定 sub_new_data[property] = old_value;
		function merge_property(property, sub_new_data, sub_old_data) {
			// assert: property in sub_new_data
			var new_value = sub_new_data[property];

			// assert: typeof old_value === 'object'
			if (typeof new_value !== 'object' || !(property in sub_old_data)) {
				// using new_value, overwrite old value
				sub_old_data[property] = new_value;
				return;
			}

			// assert: property in sub_old_data
			var old_value = sub_old_data[property];

			if (Array.isArray(new_value)) {
				if (Array.isArray(old_value)) {
					// 對於 {Object}old_value 先複製到 `old_value`
					Object.keys(new_value).forEach(
					// merge 像 new_value.a=1
					function(sub_property) {
						if (!library_namespace.is_digits(sub_property)) {
							merge_property(sub_property, new_value, old_value);
						}
					});

					old_value.append(new_value);
				} else if (typeof old_value === 'object') {
					// assert: library_namespace.is_Object(old_value)
					merge_property_of_object(new_value, old_value);
				} else {
					// new_value.push(old_value);
					sub_old_data[property] = new_value;
				}
				return;
			}

			// assert: library_namespace.is_Object(old_value) &&
			// library_namespace.is_Object(new_value)

			if (typeof old_value !== 'object') {
				// 考慮 new_value 與 old_value 型態不同的情況。
				sub_old_data[property] = new_value;
			} else {
				merge_property_of_object(new_value, old_value);
			}
		}

		// assert: library_namespace.is_Object(old_data)
		return merge_property_of_object(new_data, old_data);
	}

	_.deep_merge_object = deep_merge_object;

	/**
	 * get the quote index of specified string.<br />
	 * 輸入('"','dh"fdgfg')得到2:指向"的位置.
	 * 
	 * @param {String}string
	 * @param {String}quote
	 *            ['"/]，[/]可能不太適用，除非將/[/]/→/[\/]/
	 * @returns
	 * @since 2004/5/5
	 */
	function index_of_quote(string, quote) {
		var i, l = 0, m;
		if (!quote)
			quote = '"';
		while ((i = string.indexOf(quote, l)) > 0
				&& string.charAt(i - 1) === '\\') {
			m = string.slice(l, i - 2).match(/(\\+)$/);
			if (m && m[1].length % 2)
				break;
			else
				l = i + 1;
		}
		return i;
	}

	/**
	 * <code>
	 {var a=[],b,t='',i;a[20]=4,a[12]=8,a[27]=4,a[29]=4,a[5]=6,a.e=60,a.d=17,a.c=1;alert(a);b=sortValue(a);alert(a+'\n'+b);for(i in b)t+='\n'+b[i]+'	'+a[b[i]];alert(t);}
	 </code>
	 */
	// 依值排出key array…起碼到現在，我還看不出此函數有啥大功用。
	// array,否則會出現error! mode=1:相同value的以','合併,mode=2:相同value的以array填入
	function sortValue(a, mode) {
		var s = [], r = [], i, j, b, k = [];
		// 使用(i in n)的方法，僅有數字的i會自動排序；這樣雖不必用sort()，但數字亦會轉成字串。
		for (i in a)
			if ((b = isNaN(i) ? i : parseFloat(i)),
			//
			typeof s[j = isNaN(j = a[i]) ? j : parseFloat(j)] === 'undefined')
				k.push(j), s[j] = b;
			else if (typeof s[j] === 'object')
				s[j].push(b);
			else
				s[j] = [ s[j], b ];
		// 注意：sort 方法會在原地排序 Array 物件。
		for (i = 0, k.sort(library_namespace.ascending); i < k.length; i++)
			if (typeof (b = s[k[i]]) === 'object')
				if (mode === 1)
					// b.join(',')與''+b效能相同
					r.push(b.join(','));
				else if (mode === 2)
					r.push(b);
				else
					for (j in b)
						r.push(b[j]);
			else
				r.push(b);
		return r;
	}

	/**
	 * <code>
	 2005/7/18 21:26
	 依照所要求的index(sortByIndex_I)對array排序。
	 sortByIndex_Datatype表某index為數字/字串或function
	 先設定sortByIndex_I,sortByIndex_Datatype再使用array.sort(sortByIndex);

	 example:
	var array=[
	'123	avcf	334',
	'131	hj	562',
	'657	gfhj	435',
	'131	ajy	52',
	'345	fds	562',
	'52	gh	435',
	];
	sortByIndex_I=[0,1],sortByIndex_Datatype={0:1,2:1};
	for(i in array)array[i]=array[i].split('	');
	array.sort(sortByIndex);
	alert(array.join('\n'));
	 </code>
	 */
	var sortByIndex_I, sortByIndex_Datatype;
	function sortByIndex(a, b) {
		// alert(a+'\n'+b);
		for (var i = 0, n; i < sortByIndex_I.length; i++)
			if (sortByIndex_Datatype[n = sortByIndex_I[i]]) {
				if (typeof sortByIndex_Datatype[n] === 'function') {
					if (n = sortByIndex_Datatype[n](a[n], b[n]))
						return n;
				} else if (n = a[n] - b[n])
					return n;
			} else if (a[n] != b[n])
				return a[n] > b[n] ? 1 : -1;
		return 0;
	}

	/**
	 * <code>
	 2005/7/18 21:26
	 依照所要求的 index 對 array 排序，傳回排序後的 index array。
	 **假如設定了 separator，array 的元素會先被 separator 分割！

	 example:
	 var array=[
	 '123	avcf	334',
	 '131	hj	562',
	 '657	gfhj	435',
	 '131	ajy	52',
	 '345	fds	562',
	 '52	gh	435',
	 ];
	 alert(getIndexSortByIndex(array,'	',[0,1],[0,2]));
	 alert(array.join('\n'));	//	已被 separator 分割！

	 </code>
	 */
	function getIndexSortByIndex(array, separator, indexArray, isNumberIndex) {
		// 判定與事前準備(設定sortByIndex_I,sortByIndex_Datatype)
		if (typeof indexArray === 'number')
			sortByIndex_I = [ indexArray ];
		else if (typeof indexArray !== 'object'
				|| indexArray.constructor !== Array)
			sortByIndex_I = [ 0 ];
		else
			sortByIndex_I = indexArray;
		var i, sortByIndex_A = [];
		sortByIndex_Datatype = Object.create(null);
		if (typeof isNumberIndex === 'object') {
			if (isNumberIndex.constructor === Array) {
				sortByIndex_Datatype = Object.create(null);
				for (i = 0; i < isNumberIndex.length; i++)
					sortByIndex_Datatype[isNumberIndex[i]] = 1;
			} else
				sortByIndex_Datatype = isNumberIndex;
			for (i in sortByIndex_Datatype)
				if (isNaN(sortByIndex_Datatype[i])
						|| parseInt(sortByIndex_Datatype[i]) !== sortByIndex_Datatype[i])
					delete sortByIndex_Datatype[i];
		}
		if (typeof array !== 'object')
			return;

		// main work: 可以不用重造 array 資料的話..
		for (i in array) {
			if (separator)
				array[i] = array[i].split(separator);
			sortByIndex_A.push(i);
		}
		sortByIndex_A.sort(function(a, b) {
			return sortByIndex(array[a], array[b]);
		});

		/**
		 * <code>
		for: 重造array資料
		var getIndexSortByIndexArray=array;
		for(i in getIndexSortByIndexArray){
			if(separator)getIndexSortByIndexArray[i]=getIndexSortByIndexArray[i].split(separator);
			sortByIndex_A.push(i);
		}
		sortByIndex_A.sort(function (a,b){return sortByIndex(getIndexSortByIndexArray[a],getIndexSortByIndexArray[b]);});
		</code>
		 */

		return sortByIndex_A;
	}

	/**
	 * <code>
	 simpleWrite('char_frequency report3.txt',char_frequency(simpleRead('function.js')+simpleRead('accounts.js')));
	 {var t=reduceCode(simpleRead('function.js')+simpleRead('accounts.js'));simpleWrite('char_frequency source.js',t),simpleWrite('char_frequency report.txt',char_frequency(t));}	//	所費時間：十數秒（…太扯了吧！）
	 </code>
	 */
	_// JSDT:_module_
	.
	/**
	 * 測出各字元的出現率。 普通使用字元@0-127：9-10,13,32-126，reduce後常用：9,32-95,97-125
	 * 
	 * @param {String}
	 *            text 文檔
	 * @return
	 * @_memberOf _module_
	 */
	char_frequency = function char_frequency(text) {
		var i, a, c = [], d, t = '' + text, l = t.length, used = '', unused = '', u1 = -1, u2 = u1;
		for (i = 0; i < l; i++)
			if (c[a = t.charCodeAt(i)])
				c[a]++;
			else
				c[a] = 1;
		for (i = u1; i < 256; i++)
			if (c[i]) {
				if (u2 + 1 === i)
					used += ',' + i, unused += (u2 < 0 ? '' : '-' + u2);
				u1 = i;
			} else {
				if (u1 + 1 === i)
					unused += ',' + i, used += (u1 < 0 ? '' : '-' + u1);
				u2 = i;
			}
		// 若是reduceCode()的程式，通常在120項左右。
		for (i = 0, t = 'used:' + used.substr(1) + '\nunused:'
				+ unused.substr(1) + '\n', d = sortValue(c, 2).reverse(); i < d.length; i++) {
			t += NewLine
					+ (a = d[i])
					+ '['
					+ fromCharCode(a).replace(/\0/g, '\\0').replace(/\r/g,
							'\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t')
					+ ']' + ':	' + (a = c[typeof a === 'object' ? a[0] : a])
					+ '	' + (100 * a / l);
			// .5%以上者←選購
			// if(200*v<l)break;
		}
		alert(t);
		return t;
	};

	/**
	 * <code>
	 flag:
	 (flag&1)==0	HTML tag, 表情符號等不算一個字
	 (flag&1)==1	將 HTML tag 全部消掉
	 (flag&2)==1	連表情符號等也算一個字

	 可讀性/適讀性
	 http://en.wikipedia.org/wiki/Flesch-Kincaid_Readability_Test
	 http://en.wikipedia.org/wiki/Gunning_fog_index
	 Gunning-Fog Index：簡單的來說就是幾年的學校教育才看的懂你的文章，數字越低代表越容易閱讀，若是高於17那表示你的文章太難囉，需要研究生才看的懂，我是6.08，所以要受過6.08年的學校教育就看的懂囉。
	 Flesch Reading Ease：這個指數的分數越高，表示越容易了解，一般標準的文件大約介於60~70分之間。
	 Flesch-Kincaid grade level：和Gunning-Fog Index相似，分數越低可讀性越高，越容易使閱讀者了解，至於此指數和Gunning-Fog Index有何不同，網站上有列出計算的演算法，有興趣的人可以比較比較。

	 DO.normalize(): 合併所有child成一String, may crash IE6 Win!	http://www.quirksmode.org/dom/tests/splittext.html
	 </code>
	 */
	_// JSDT:_module_
	.
	/**
	 * 計算字數 count words. word_count
	 * 
	 * @param {String}
	 *            text 文檔
	 * @param {Number}
	 *            flag 文檔格式/處理方法
	 * 
	 * @return {Number} 字數
	 * 
	 * @see https://zh.wikipedia.org/wiki/User:%E5%B0%8F%E8%BA%8D/Wordcount.js
	 * 
	 * @_memberOf _module_
	 */
	count_word = function count_word(text, flag) {
		var is_HTML = flag & 1;

		// is HTML object
		if (typeof text === 'object')
			if (text.innerText)
				text = text.innerText, is_HTML = false;
			else if (text.innerHTML)
				text = text.innerHTML, is_HTML = true;

		if (typeof text !== 'string')
			return 0;

		// 和perl不同，JScript常抓不到(.*?)之後還接特定字串的東西，大概因為沒有s。(.*?)得改作([\s\S]*?)？
		// 或者該加/img？
		if (is_HTML)
			text = text.replace(/<!--([\s\S]*?)-->/g, '').replace(
					/<[\s\n]*\/?[\s\n]*[a-z][^<>]*>/gi, '');

		if (flag & 2)
			text = text.replace(
			// 連表情符號或 '（~。），' / 破折號 '——' / 刪節號 '……' 等標點符號也算一個字
			/[\+\-–*\\\/?!,;.<>{}\[\]@#$%^&_|"'~`—…、，；。！？：()（）「」『』“”‘’]{2,}/g,
					';');

		return text
		// 去掉注解用的括弧、書名號、專名號、印刷符號等
		.replace(/[()（）《》〈〉＊＃]+/g, '')

		// 將數字改成單一字母。
		.replace(/\d*\.?\d+([^.]|$)/g, '0$1')
		/**
		 * 將整組物理量值加計量單位略縮成單一字母。<br />
		 * The general rule of the International Bureau of Weights and Measures
		 * (BIPM) is that the numerical value always precedes the unit, and a
		 * space is always used to separate the unit from the number, e.g., "23
		 * °C" (not "23°C" or "23° C").
		 * 
		 * @see <a href="http://en.wikipedia.org/wiki/ISO_31-0#Expressions"
		 *      accessdate="2012/7/28 0:42">ISO 31-0</a>, <a
		 *      href="http://lamar.colostate.edu/~hillger/faq.html#spacing"
		 *      accessdate="2012/7/28 0:42">FAQ: Frequently Asked Questions
		 *      about the metric system</a>.
		 */
		.replace(/\d+\s*[a-zA-Z°]+(\s*\/\s*(\d+\s*)?[a-zA-Z°]+)?/g, '0')
		// 長度過長時，極耗時間。e.g., ...\d{500000}...
		// .replace(/\d*\.?\d+\s*[a-zA-Z°]+(\s*\/\s*(\d*\.?\d+\s*)?[a-zA-Z°]+)?/g,'0')

		// https://en.wikipedia.org/wiki/Punctuation_of_English
		// Do not count punctuations of English.
		.replace(/[,;:.?!\-–"'()⟨⟩«»\[\]{}<>$%#@~`^&*\\\/⁄+=|]+/g, '')
		// 將英文、數字、單位等改成單一字母。[.]: 縮寫。[\/]: m/s 之類。
		// a's: 1
		// http://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF
		// http://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8
		.replace(/[\wÀ-ÖØ-öø-ȳ]{2,}/g, 'w')

		// date/time or number
		.replace(/[\d:+\-–\.\/,]{2,}/g, '0')
		// 再去掉*全部*空白
		.replace(/[\s\n]+/g, '')
		// return text.length;
		.length;
	};

	_// JSDT:_module_
	.
	/**
	 * 運算式值的二進位表示法
	 * 已最佳化:5.82s/100000次dec_to_bin(20,8)@300(?)MHz,2.63s/100000次dec_to_bin(20)@300(?)MHz
	 * 
	 * @param {Number}
	 *            number number
	 * @param places
	 *            places,字元數,使用前置0來填補回覆值
	 * @return
	 * @example<code>
	{var d=new Date,i,b;for(i=0;i<100000;i++)b=dec_to_bin(20);alert(gDate(new Date-d));}
	</code>
	 * @_memberOf _module_
	 */
	dec_to_bin = function dec_to_bin(number, places) {
		if (places && number + 1 < (1 << places)) {
			var h = '', b = number.toString(2), i = b.length;
			for (; i < places; i++)
				h += '0';
			return h + b;
		}
		// native code 還是最快！
		return number.toString(2);

		if (false) {
			// 上兩代：慢
			// 不用'1:0'，型別轉換比較慢.不用i，多一個變數會慢很多
			var b = '', c = 1;
			for (p = p && n < (p = 1 << p) ? p : n + 1; c < p; c <<= 1)
				b = (c & n ? '1' : '0') + b;
			return b;

			// 上一代：慢
			if (p && n + 1 < (1 << p)) {
				var h = '', c = 1, b = n.toString(2);
				while (c <= n)
					c <<= 1;
				while (c < p)
					c <<= 1, h += '0';
				return h + (n ? n.toString(2) : '');
			}
		}
	};

	/**
	 * <code>
	value	(Array)=value,(Object)value=
	[null]=value	累加=value
	value=[null]	value=''

	type: value type	['=','][int|float|_num_]
	: 前段
		以[']或["]作分隔重定義指定號[=]與分隔號[,]
	: 後段
		數字表累加
		'int'表整數int，累加1
		'float'表示浮點數float，累加.1	bug:應該用.to_fixed()
		不輸入或非數字表示string

	mode
	_.set_Object_value.F.object
	_.set_Object_value.F.array(10進位/當做數字)
	number: key部分之base(10進位，16進位等)

	example:
	set_Object_value('UTCDay','Sun,Mon,Tue,Wed,Thu,Fri,Sat','int');	//	自動從0開始設，UTCDay.Tue=2
	set_Object_value('UTCDay','Sun,Mon,Tue,Wed,Thu,Fri,Sat');	//	UTCDay.Sun=UTCDay.Fri=''
	set_Object_value('add','a=3,b,c,d',2);	//	累加2。add.b=5
	set_Object_value('add','a,b,c,d',1,_.set_Object_value.F.array);	//	add[2]='c'
	set_Object_value('add','4=a,b,c,d',2,_.set_Object_value.F.array);	//	累加2。add[8]='c'

	 </code>
	 */
	_// JSDT:_module_
	.
	/**
	 * 設定object之值，輸入item=[value][,item=[value]..]。<br />
	 * value未設定會自動累加。<br />
	 * 使用前不必需先宣告…起碼在現在的JS版本中
	 * 
	 * @param obj
	 *            object name that need to operate at
	 * @param value
	 *            valueto set
	 * @param type
	 *            累加 / value type
	 * @param mode
	 *            mode / value type
	 * @return
	 * @_memberOf _module_
	 */
	set_Object_value = function set_Object_value(obj, value, type, mode) {
		if (!value || typeof obj !== 'string')
			return;

		var a, b, i = 0, p = '=', sp = ',', e = "if(typeof " + obj
				+ "!='object')" + obj + "=new " + (mode ?
				// "[]":"{}"
				// Array之另一種表示法：[value1,value2,..],
				// Object之另一種表示法：{key1:value1,key2:value2,..}
				"Array" : "Object") + ";",
		// l: item, n: value to 累加
		n, Tint = false, cmC = '\\u002c', eqC = '\\u003d';
		if (type) {
			if (typeof a === 'string') {
				a = type.charAt(0);
				if (a === '"' || a === "'") {
					a = type.split(a);
					p = a[1], sp = a[2], type = a[3];
				}
			}
			if (type === 'int')
				type = 1, Tint = true;
			else if (type === 'float')
				type = .1;
			else if (isNaN(type))
				type = 0;
			else if (type === parseInt(type))
				type = parseInt(type), Tint = true;
			else
				// t被設成累加數
				type = parseFloat(type);
		}
		// else t = 1;

		if (typeof value === 'string')
			value = value.split(sp);
		// escape regex characters from jQuery
		cmC = new RegExp(cmC.replace(
				/([\.\\\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1"), 'g'),
				eqC = new RegExp(eqC.replace(
						/([\.\\\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1"),
						'g');

		if (type)
			// n: 現在count到..
			n = -type;

		for (; i < value.length; i++) {
			if (value[i].indexOf(p) === NOT_FOUND)
				// if(v[i].indexOf(p)==NOT_FOUND&&m)v[i]=p+v[i];
				value[i] = mode ? p + value[i] : value[i] + p;
			if (mode && value[i] === p) {
				n += type;
				continue;
			}
			a = value[i].split(p);
			if (!mode && !a[0])
				// 去掉不合理的(Array可能有NaN index，所以不設條件。)
				continue;
			a[0] = a[0].replace(cmC, ',').replace(eqC, '='), a[1] = a[1]
					.replace(cmC, ',').replace(eqC, '=');
			if (type)
				if (mode) {
					if (!a[0])
						a[0] = (n += type);
					else if (!isNaN(b = mode > 0 ? parseInt(a[0], mode) : a[0]))
						n = Tint ? (a[0] = parseInt(b)) : parseFloat(b);
				} else if (!a[1])
					a[1] = (n += type);
				else if (!isNaN(a[1]))
					n = Tint ? parseInt(a[1]) : parseFloat(a[1]);
			if (!type || Tint && isNaN(b = parseInt(a[1]))
					|| isNaN(b = parseFloat(a[1])))
				b = a[1];
			a = a[0];
			e += obj + '['
					+ (!type || isNaN(a) ? library_namespace.dQuote(a) : a)
					+ ']='
					+ (!type || isNaN(b) ? library_namespace.dQuote(b) : b)
					+ ';';
		}

		try {
			// if(o=='kk')alert(e.slice(0,500));
			// 因為沒想到其他方法可存取Global的object，只好使用eval...
			// 可以試試obj=set_Object_value(0,..){this=new Aaaray/Object}
			return library_namespace.eval_code(e);
		} catch (e) {
			library_namespace.error('Error @ ' + obj);
			library_namespace.error(e);
			return;
		}
	};

	_.set_Object_value.F = {
		// object is default
		'object' : 0,
		'array' : -1
	};

	_// JSDT:_module_
	.
	/**
	 * 將字串組分作 Object
	 * 
	 * @param {String}
	 *            value_set 字串組, e.g., 'a=12,b=34'
	 * @param assignment_char
	 *            char to assign values, e.g., '='
	 * @param end_char
	 *            end char of assignment
	 * @return
	 * @since 2006/9/6 20:55, 2010/4/12 23:06:04
	 * @_memberOf _module_
	 */
	split_String_to_Object = function split_String_to_Object(value_set,
			assignment_char, end_char) {
		if (typeof value_set !== 'string' || !value_set)
			return {};

		value_set = value_set.split(end_char || /[,;]/);

		if (!assignment_char)
			assignment_char = /[=:]/;

		var a, o = {}, _e = 0, l = value_set.length;
		for (; _e < l; _e++) {
			// http://msdn.microsoft.com/library/en-us/jscript7/html/jsmthsplit.asp
			a = value_set[_e].split(assignment_char, 2);
			if (false)
				library_namespace.debug(value_set[_e] + '\n' + a[0] + ' '
						+ a[1], 2);
			if (a[0] !== '')
				o[a[0]] = a[1];
		}
		return o;
	};

	/**
	 * <code>
	2003/10/1 15:46
	比較string:m,n從起頭開始相同字元數
	return null: 格式錯誤，-1: !m||!n
	若一開始就不同：0


	TODO:
	
	test starting with
	
	2009/2/7 7:51:58
	看來測試 string 的包含，以 .indexOf() 最快。
	即使是比較 s.length 為極小常數的情況亦復如此
	
	下面是快到慢：
	
	//	long, short
	var contain_substring = [ function(l, s) {
		var a = 0 == l.indexOf(s);
		return a;
	}, function(l, s) {
		return 0 == l.indexOf(s);
	}, function(l, s) {
		return s == l.slice(0, s.length);
	}, function(l, s) {
		return l.match(s);
	}, function(l, s) {
		for (var i = 0; i < s.length; i++)
			if (s.charAt(i) != l.charAt(i))
				return 0;
		return 1;
	} ];

	function test_contain_substring() {
		for (var i = 0; i < contain_substring.length; i++) {
			var t = new Date;
			for (var j = 0; j < 50000; j++) {
				contain_substring[i]('sdfgjk;sh*dn\\fj;kgsamnd nwgu!eoh;nfgsj;g',
						'sdfgjk;sh*dn\\fj;kgsamnd nwgu!');
				contain_substring[i]('sdbf6a89* /23hsauru', 'sdbf6a89* /23');
			}
			sl(i + ': ' + (new Date - t));
		}
	}
	
	
	//	極小常數的情況:
	//	long,short
	var contain_substring = [ function(l, s) {
		var a = 0 == l.indexOf(s);
		return a;
	}, function(l, s) {
		return 0 == l.indexOf(s);
	}, function(l, s) {
		return s == l.slice(0, 1);
	}, function(l, s) {
		return s.charAt(0) == l.charAt(0);
	}, function(l, s) {
		return l.match(/^\//);
	} ];

	function test_contain_substring() {
		for (var i = 0; i < contain_substring.length; i++) {
			var t = new Date;
			for (var j = 0; j < 50000; j++) {
				contain_substring[i]('a:\\sdfg.dfg\\dsfg\\dsfg', '/');
				contain_substring[i]('/dsfg/adfg/sadfsdf', '/');
			}
			sl(i + ': ' + (new Date - t));
		}
	}

	</code>
	 */

	_// JSDT:_module_
	.
	/**
	 * test if 2 string is at the same length.<br />
	 * strcmp: String.prototype.localeCompare
	 * 
	 * @param s1
	 *            string 1
	 * @param s2
	 *            string 2
	 * @return
	 * @_memberOf _module_
	 */
	same_length = function same_length(s1, s2) {
		if (typeof m !== 'string' || typeof n !== 'string')
			return;
		if (!s1 || !s2)
			return 0;

		var i = s1.length, b = 0, s = s2.length;
		if (i < s) {
			if (
			// m === n.slice(0, i = m.length)
			0 === s2.indexOf(s1))
				return i;
		} else if (
		// s2==s1.slice(0,i=s2.length)
		i = s, 0 === s1.indexOf(s2))
			return i;

		// sl('*same_length: start length: '+i);
		while ((i = (i + 1) >> 1) > 1 && (s = s2.substr(b, i))) {
			if (false)
				sl('same_length: ' + i + ',' + b + '; [' + m.substr(b) + '], ['
						+ s + '] of [' + n + ']');
			if (s1.indexOf(s, b) === b)
				b += i;
			if (false) {
				sl('*same_length: ' + i + ',' + b + '; [' + m.charAt(b)
						+ '], [' + n.charAt(b) + '] of [' + n + ']');
				var s_l = i && m.charAt(b) == n.charAt(b) ? b + 1 : b;
				sl('*same_length: ' + s_l + ':' + m.slice(0, s_l) + ',<em>'
						+ m.slice(s_l) + '</em>; ' + n.slice(0, s_l) + ',<em>'
						+ n.slice(s_l) + '</em>');
			}
		}
		return i && s1.charAt(b) === s2.charAt(b) ? b + 1 : b;
	};

	/**
	 * 去除指定字串中重複字元。 remove duplicate characters in a string.
	 * 
	 * @param {String}string
	 *            指定字串。
	 * 
	 * @returns 去除重複字元後之字串。
	 */
	function remove_duplicate_characters(string) {
		string = String(string);
		if (!string)
			return '';

		string = string.split('');
		var i = 0, length = string.length, code_array = [], code;
		for (; i < length; i++) {
			code = string[i].charCodeAt(0);
			if (code in code_array) {
				string[i] = '';
			} else {
				code_array[code] = 1;
			}
		}

		return string.join('');
	}

	_// JSDT:_module_
	.remove_duplicate_characters = remove_duplicate_characters;

	// -----------------------------------------------------------------------------

	/**
	 * 產生將數字轉為 K, M, G 等數量級(order of magnitude)表示方式的轉換器。<br />
	 * 原理:先設好各 symbol 使用之下限，比完大小後使用此 symbol。
	 * 
	 * TODO: full test
	 * 
	 * @param {Array}symbol
	 *            array of {String}symbol
	 * @param {Integer}[base]
	 *            define what power
	 * @param {Integer}[index_of_1]
	 *            純量的 index。no prefix. 這之前的算做小數。
	 * @param {String}intervening
	 *            intervening string, 將插入於數字與 symbol 間。e.g., &nbsp;
	 * @return {Function} 改變表示方式之轉換器。
	 * @return {undefined} 輸入有問題。
	 * @requires to_fixed
	 * @see <a href="http://www.merlyn.demon.co.uk/js-maths.htm#DTS"
	 *      accessdate="2012/8/18 12:17">JRS - JavaScript Maths - J R Stockton</a>
	 * @_memberOf _module_
	 */
	function set_order_prefix(symbol, base, index_of_1, intervening) {
		if (!Array.isArray(symbol) || !symbol.length)
			return;

		if (!base)
			base = 10;
		if (!index_of_1) {
			index_of_1 = 0;
			if (symbol[0])
				symbol.unshift('');
		}

		var magnitude = 1, length = symbol.length, value = new Array(length), index = index_of_1;

		// 先設定好各數量級(order of magnitude)之大小。
		while (++index < length) {
			magnitude *= base;
			value[index] = magnitude;
		}
		if (index_of_1) {
			index = index_of_1;
			magnitude = 1;
			while (index--) {
				magnitude /= base;
				value[index] = magnitude;
			}
		}
		value[index_of_1] = 1;

		if (intervening) {
			for (index = 0; index < length; index++) {
				symbol[index] = intervening + symbol[index];
			}
		}

		library_namespace.debug('magnitude array of base ' + base + ': ['
				+ value + ']', 1, 'set_order_prefix');
		library_namespace.debug('prefixes of base ' + base + ': [' + symbol
				+ ']', 1, 'set_order_prefix');

		// cache 引入: symbol, value, length.

		return (
		/**
		 * 將數字轉為 K, M, G 等數量級(order of magnitude)表示方式。
		 * 
		 * @param {Number}number
		 *            數字純量
		 * @param {Number}digits
		 *            to fixed digit
		 * @type {String}
		 * @return {String} 指定數量級(order of magnitude)表示方式
		 * @requires to_fixed
		 */
		function(number, digits) {
			if (typeof number === 'string')
				number = parseFloat(number.replace(/[, ]/g, ''));
			if (!number || isNaN(number))
				return 0;

			var l = 0, r = length, i;
			// 直接用比的。 inline binary search.
			// while (l < (i = Math.floor((l + r) / 2))) {
			while (l < (i = (l + r) >> 1)) {
				library_namespace.debug('compare: ' + number + ', [' + i + ']'
						+ value[i], 3, 'set_order_prefix');
				if (number < value[i]) {
					r = i;
				} else {
					l = i;
				}
			}
			library_namespace.debug('index: [' + i + '] ' + value[i] + ', '
					+ symbol[i], 2, 'set_order_prefix');

			l = number / value[i];
			return to_fixed.call(l, isNaN(digits) || digits < 0 ? (r = Math
					.floor(l)) < 10 ? 2 : r < 100 ? 1 : 0 : digits)
					+ symbol[i];
		});
	}

	/**
	 * 將數字轉為 K, M, G 等 metric prefix / SI prefix 表示方式，例如 6458 轉成 6.31 K。
	 * 
	 * @example <code>
	 * CeL.to_1000_prefix(12343454345);
	 * CeL.to_1000_prefix('12,343,454,345');
	 * </code>
	 * 
	 * @returns
	 * @see <a href="http://en.wikipedia.org/wiki/Metric_prefix"
	 *      accessdate="2012/8/18 12:9">Metric prefix</a>, <a
	 *      href="http://en.wikipedia.org/wiki/International_System_of_Units"
	 *      accessdate="2012/8/18 12:11">International System of Units</a>, <a
	 *      href="http://www.bipm.org/en/si/si_brochure/chapter3/prefixes.html"
	 *      accessdate="2012/8/18 12:10">BIPM - SI prefixes</a>, <a
	 *      href="http://bmanolov.free.fr/numbers_names.php"
	 *      accessdate="2012/8/18 12:19">Names of LARGE and small Numbers</a>
	 */
	function to_1000_prefix() {
		var s = 'yzafpnμm kMGTPEZY', i = s.indexOf(' ');
		s = s.split('');
		s[i] = '';
		return set_order_prefix(s, 1000, i, ' ');
	}

	/**
	 * 將數字轉為 Ki, Mi, Gi 等 binary prefix 表示方式，例如 1024 轉成 1Ki。
	 * 
	 * @example <code>
	 CeL.to_1024_prefix(12343454345);
	 </code>
	 * 
	 * @returns
	 * @see <a
	 *      href="http://en.wikipedia.org/wiki/Binary_prefix#IEC_standard_prefixes"
	 *      accessdate="2012/8/18 11:53">Binary prefix</a>
	 */
	function to_1024_prefix() {
		return set_order_prefix(',Ki,Mi,Gi,Ti,Pi,Ei,Zi,Yi'.split(','), 1024, 0,
				' ');
	}

	// 不可以 `byte` 為變數名: JsDoc 會失會失效。
	function to_KiB(bytes, type, use_KB) {
		var expression = use_KB ? library_namespace.to_1000_prefix
				: library_namespace.to_1024_prefix, b = bytes + ' byte'
				+ (bytes > 1 ? 's' : '');
		expression = expression(bytes) + 'B';

		if (type && type.toLowerCase() === 'html') {
			expression = '<span title="' + b + '">' + expression + '</span>';
		} else if (library_namespace.is_Object(type)) {
			expression = {
				span : expression,
				title : b
			};
		} else if (type === '()') {
			expression += ' (' + b + ')';
		}

		return expression;
	}
	function to_KB(bytes, type) {
		return to_KiB(bytes, type, true);
	}

	// old alias: CeL.show_KiB(), CeL.show_KB()
	_.to_KiB = to_KiB;
	_.to_KB = to_KB;

	// TODO: accept '300K' as 300 KiB

	// 設定 lazy evaluation。
	library_namespace.set_initializor(to_1000_prefix);
	library_namespace.set_initializor(to_1024_prefix);

	// -----------------------------------------------------------------------------

	/**
	 * for IE3: mode=1:不取空字串<br />
	 * .split() appears from Internet Explorer 4.0
	 * 
	 * @see <a
	 *      href="http://msdn.microsoft.com/en-us/library/s4esdbwz%28v=VS.85%29.aspx"
	 *      accessdate="2010/4/16 20:4">Version Information (Windows Scripting -
	 *      JScript)</a>
	 */
	function StringToArray(s, mode) {
		var a = [], last = 0, i;
		while ((i = s.indexOf(sp, last)) !== NOT_FOUND) {
			if (mode === 0 || last !== i)
				a[a.length] = s.slice(last, i);
			last = i + 1;
		}
		if (mode === 0 || last !== s.length)
			a[a.length] = s.slice(last);
		return a;
	}

	// for IE3: 去除s之空白,包括字與字之間的
	function disposeSpace(s) {
		if (!s)
			return s;
		var r = "", i, last;
		while ((i = s.indexOf(' ', last)) !== NOT_FOUND)
			r += s.slice(last, i), last = i + 1;
		r += s.slice(last);
		return r;
	}

	// for IE3: 以label,mode:m置換s,先找到先贏
	// 輸入t['$k']=..會有問題，需用t['\\$k']=..
	function changeV(s, l, m) {
		var i, r, re, t; // var I='';
		if (!m)
			m = 'g';
		if (s && (t = l ? l : label))
			for (i in t) {
				// I+=', '+i+'='+t[i];
				re = new RegExp(i, m);
				// r=s.replace(re,t[i]);s=r;
				s = s.replace(re, t[i]);
			}
		// pLog(I.substr(2));
		// pLog('changeV:'+s);
		return s;
	}

	/**
	 * <code>
	// 以label置換s,先找到先贏
	function changeV(s) {
		for (var i, j = 0; j < labelN.length; j++)
			if ((i = s.indexOf(labelN[j])) != NOT_FOUND)
				s = s.slice(0, i) + labelV[j] + s.slice(i + labelN[j].length)
				, j = 0; // search again from beginning
		return s;
	}
	 </code>
	 */

	_// JSDT:_module_
	.get_Object_value = function(o) {
		// if (Array.isArray(o)) return o;

		// if (!library_namespace.is_Object(o)) return;
		var i, l = [];
		for (i in o)
			l.push(o[i]);
		return l;
	};

	_// JSDT:_module_
	.
	/**
	 * 互換/reverse key/value pairs.
	 * 
	 * @example <code>
	swap_key_value({A:1,B:2,s:4,t:[]}, [], /^[A-Z_\-\d]+$/) === [,'A','B']
	</code>
	 * @param {Object|object}pairs
	 *            key/value pairs
	 * @param {Object|Array}[base]
	 *            把互換結果放在 base
	 * @param {RegExp}[key_filter]
	 *            僅放入符合的 key
	 * @returns
	 */
	swap_key_value = function(pairs, base, key_filter) {
		if (!base)
			base = {};

		var k;
		if (library_namespace.is_type(key_filter, 'RegExp')) {
			for (k in pairs)
				if (key_filter.test(k))
					base[pairs[k]] = k;
		} else
			for (k in pairs)
				base[pairs[k]] = k;

		return base;
	};

	if (library_namespace.dependency_chain)
		_.dependency_chain = library_namespace.dependency_chain;

	/**
	 * new_Array=[,,]: 可以使用 Array 常值中的空白元素來建立零星稀疏的陣列。
	 */

	// ---------------------------------------------------------------------//
	// UTF-8 char and bytes.
	/**
	 * 計算指定 UTF-8 char code 之 bytes。
	 * 
	 * TODO:<br />
	 * 加快速度。
	 * 
	 * @param {Number}code
	 *            指定之 UTF-8 char code。
	 * @returns {Number} 指定 UTF-8 char code 之 bytes。
	 * @see https://en.wikipedia.org/wiki/UTF-8#Description
	 */
	function bytes_of_UTF8_char_code(code) {
		return code < 0x0080 ? 1 : code < 0x0800 ? 2 : code < 0x10000 ? 3
				: code < 0x200000 ? 4 : code < 0x4000000 ? 5
						: code < 0x80000000 ? 6 : 7;
	}

	/**
	 * 計算指定 UTF-8 text 之 bytes。
	 * 
	 * TODO:<br />
	 * use Buffer.byteLength
	 * 
	 * @param {String}text
	 *            指定之 UTF-8 text。
	 * @returns {Number} 指定 UTF-8 text 之 bytes。
	 */
	function byte_count_of_UTF8(text) {
		var i = 0, length = text.length, bytes = 0;
		for (; i < length; i++)
			bytes += bytes_of_UTF8_char_code(text.charCodeAt(i));
		return bytes;
	}

	/**
	 * 將 UTF-8 text 截成指定 byte 長度。
	 * 
	 * @param {String}text
	 *            指定之 UTF-8 text。
	 * @param {Number}byte_length
	 *            指定之 byte 長度。
	 * @returns {String} UTF-8 text, length <= byte_length.
	 */
	function cut_UTF8_by_bytes(text, byte_length) {
		var i = 0, length = text.length;
		for (; byte_length > 0 && i < length; i++) {
			byte_length -= bytes_of_UTF8_char_code(text.charCodeAt(i));
			if (byte_length < 0)
				i--;
		}
		return i === length ? text : text.slice(0, i);
	}

	_.bytes_of_char_code = bytes_of_UTF8_char_code;
	_.byte_count = byte_count_of_UTF8;
	_.cut_by_bytes = cut_UTF8_by_bytes;

	// ---------------------------------------------------------------------//
	// for bencode & torrent file data.

	/**
	 * [ key_1, value_1, key_2, value_2, key_3, value_3 ]<br /> →<br /> {
	 * key_1: value_1, key_2: value_2, key_3: value_3 }
	 * 
	 * @param {Array}list
	 *            list to convert
	 * 
	 * @returns {Object} pair Object converted
	 * @since 2014/7/21 23:17:32
	 */
	function list_to_Object(list) {
		var i = 0, length = list.length, pair = Object.create(null);
		if (length % 2 !== 0)
			library_namespace.warn('list_to_Object: The length (' + length
					+ ') of list is not an even number!');

		for (; i < length; i += 2) {
			if (typeof list[i] !== 'string')
				library_namespace.warn(
				// Set key to non-string type. e.g., integer
				'Set (' + (typeof list[i]) + ') [' + list[i] + '] as key.');
			if (list[i] in pair)
				library_namespace.warn('Duplicated key: [' + list[i] + ']');

			library_namespace.debug('pair[' + list[i] + '] = [' + list[i + 1]
					+ ']', 3);
			pair[list[i]] = list[i + 1];
		}

		return pair;
	}

	/**
	 * parse bencode data
	 * 
	 * @param {String}data
	 *            bencode data
	 * @param {Object}[status]
	 *            get the parse status
	 * @param {Boolean}[is_ASCII]
	 *            若設定為真，則當作 ASCII 處理。若設定為假，則當作 UTF-8 處理。
	 * 
	 * @returns
	 * 
	 * @see https://zh.wikipedia.org/wiki/Bencode
	 * 
	 * @since 2014/7/21 23:17:32
	 */
	function parse_bencode(data, status, is_ASCII) {

		function make_end() {
			// assert: object_now === queue.pop()
			if ((tmp = object_now) !== queue.pop()) {
				library_namespace.error('Bad data structure!');
				// assert: queue.length === 0
				if (queue !== object_now)
					// 回存。
					queue.push(object_now);
			} else {
				if (tmp.d)
					tmp = list_to_Object(tmp);
				// assert: queue.length > 0
				(object_now = queue.at(-1)).push(tmp);
			}
		}

		// 盡可能不動到 data，因為 data 可能很大。
		var index = 0, tmp, queue = [],
		// 即使在 data 有缺陷的情況下，也盡可能解析出資料。
		// 因此先將 data 設定成 list。
		object_now = queue,
		// 為了多行程，因此這些 pattern 應該放在函數內，不可為 global 為其他行程存取。
		PATTERN_controller = /(.*?)([ldei\d])/g,
		// 為了盡快 match，所以盡可能選擇可能 match 的 pattern，之後再來檢查是否相符。
		PATTERN_integer = /(-?\d*)(\D)/g, PATTERN_string_length = /(\d*)(\D)/g;

		for (;;) {
			PATTERN_controller.lastIndex = index;
			if (!(tmp = PATTERN_controller.exec(data))) {
				if (index < data.length)
					library_namespace.error('Last data skipped! ('
							+ data.slice(index) + ')');
				break;
			}

			if (tmp[1]) {
				index += tmp[1].length;
				// control char should be next char.
				library_namespace.error('Some data skipped! (' + tmp[1] + ')');
			}

			switch (tmp[2]) {
			case 'l':
				// list 列表
			case 'd':
				// dictionary 關聯數組
				++index;
				queue.push(object_now = []);
				if (tmp[2] === 'd')
					object_now.d = true;
				break;
			case 'e':
				// ending
				++index;
				make_end();
				break;

			case 'i':
				// integer 整數
				PATTERN_integer.lastIndex = ++index;
				tmp = PATTERN_integer.exec(data);
				if (tmp && tmp[2] === 'e') {
					// 確定為 /i\d+e/
					if (!tmp[1])
						library_namespace
								.error('No integer specified ("ie" instead of /i\d+e/)!');
					else if (PATTERN_integer.lastIndex !== index
							+ tmp[0].length)
						library_namespace.error('Some integer data skipped! ('
								+ data.slice(index, PATTERN_integer.lastIndex
										- tmp[0].length) + ')');
					object_now.push(parseInt(tmp[1]));
					index = PATTERN_integer.lastIndex;
				} else {
					// fatal error
					library_namespace.error('Bad integer format! Exit parse!');
					index = data.length;
				}
				break;

			default:
				// assert: 接下來是 string (\d+:.+) 字串
				PATTERN_string_length.lastIndex = index;
				tmp = PATTERN_string_length.exec(data);
				if (tmp && tmp[2] === ':') {
					// 確定為 /\d+:/
					if (!tmp[1] || !(tmp[1] | 0))
						library_namespace.error('No string length specified! ('
								+ tmp[1] + ')');
					else if (PATTERN_string_length.lastIndex !== index
							+ tmp[0].length)
						library_namespace.error('Some string data skipped! ('
								+ data.slice(index,
										PATTERN_string_length.lastIndex
												- tmp[0].length) + ')');
					if ((index = PATTERN_string_length.lastIndex)
							+ (tmp = tmp[1] | 0) > data.length)
						library_namespace.error(
						//
						'The end of string is beyond the end of data! (ask '
						// remaining
						+ (index + tmp) + ' - data left ' + data.length
								+ ' = lost ' + (index + tmp - data.length)
								+ ')');
					// tmp: length of string.
					library_namespace.debug(index + '+' + tmp, 3);
					if (is_ASCII) {
						object_now.push(data.substr(index, tmp));
						index += tmp;
					} else {
						// 對 UTF-8 (non-ASCII string) 特別處理:
						// 此時因取得 Unicode，所指定之 length >= 實際 length。
						tmp = cut_UTF8_by_bytes(data.substr(index, tmp), tmp);
						object_now.push(tmp);
						index += tmp.length;
					}
				} else {
					// fatal error
					library_namespace.error('Bad string format! Exit parse!');
					index = data.length;
				}
			}
		}

		if (queue.length > 1)
			library_namespace.warn('Illegal data: 有錯誤或缺陷!');
		while (queue.length > 1 && Array.isArray(queue.at(-1)))
			make_end();

		if (status)
			if (queue.length !== 1)
				status.error = true;

		return queue.length === 1 ? queue[0] : queue;
	}

	/**
	 * parse torrent file data
	 * 
	 * @example <code>

	 // @ JScript
	CeL.run('data', function () {
		// http://www.ubuntu.com/download/alternative-downloads
		CeL.log(CeL.parse_torrent('http://releases.ubuntu.com/14.04/ubuntu-14.04-desktop-i386.iso.torrent', true));
	});

	 * </code>
	 * 
	 * @param {String}path
	 *            torrent file path.
	 * @param {Boolean}name_only
	 *            get the torrent name only.
	 * 
	 * @returns {Object} torrent file data
	 * @since 2014/7/21 23:17:32
	 */
	function parse_torrent(path, name_only) {
		// 注意:此方法不可跨 domain!
		// JScript 下，XMLHttpRequest 會將檔案當作 UTF-8 讀取。
		var data = library_namespace.get_file(path);
		var status = Object.create(null);
		if (!data || data.charAt(0) !== 'd') {
			library_namespace.error((data ? 'Illegal' : 'Cannot get')
					+ ' torrent data of [' + path + ']!');
			return;
		}
		library_namespace.debug(data, 4);

		if (name_only) {
			// a fast way to get torrent name.
			var PATTERN_name = /4:name(\d{1,4}):/, matched = data
					.match(PATTERN_name), index;
			if (matched && (matched = matched[1] | 0) > 0) {
				library_namespace.debug('[' + path + '] length: ' + matched, 3);
				// fix for non-ASCII chars, it will be change to Unicode,
				// and the real length <= length specified.
				if (false) {
					// assert: 'piece length' 恰好在 PATTERN_name 之後。
					index = data.indexOf('12:piece lengthi')
							- PATTERN_name.lastIndex;
					return data.substr(PATTERN_name.lastIndex, index > 0 ? Math
							.min(index, matched) : matched);
				}
				return cut_UTF8_by_bytes(data.substr(PATTERN_name.lastIndex,
						matched), matched);
			}
			return;
		}

		data = parse_bencode(data, status);

		return data;
	}

	_.list_to_Object = list_to_Object;
	_.parse_bencode = parse_bencode;
	_.parse_torrent = parse_torrent;

	// ---------------------------------------------------------------------//

	function is_natural(value) {
		return value >= 1 && Math.floor(value) === value;
	}
	// is_non_negative
	function is_natural_or_0(value) {
		return value >= 0 && Math.floor(value) === value;
	}
	function is_integer(value) {
		return Math.floor(value) === value;
	}
	import_options.filters = {
		number : {
			range : function in_range(value) {
				return (typeof this[0] !== 'number' || this[0] <= value)
						&& (typeof this[1] !== 'number' || value <= this[1]);
			},

			// 自然數 natural numbers ℕ*, ℕ+, ℕ>0, ℤ+
			natural : is_natural,
			'ℕ' : is_natural,
			'natural+0' : is_natural_or_0,
			// 'ℕ0'
			'ℕ+0' : is_natural_or_0,
			// 整數
			integer : is_integer,
			'ℤ' : is_integer
		},
		string : {
			IPv4 : /^[12]?\d{1,2}\.[12]?\d{1,2}\.[12]?\d{1,2}\.[12]?\d{1,2}$/,

			// RFC2822 :
			// http://regexlib.com/DisplayPatterns.aspx
			// /^(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/,
			email :
			// http://www.regular-expressions.info/email.html
			// /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+([a-z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\b$/i,
			/^[a-z0-9+_~-]+(\.[a-z0-9+_~-]+)*@([a-z\d]([a-z\d-]*[a-z\d])?\.)+([a-z]{2}|com|org|net)\b$/i,

			// 十進位小數
			decimal : /^[+\-]?(?:\d+|\d*\.\d+)$/,
			// 數字
			digits : library_namespace.is_digits
		}
	};

	/**
	 * @inner
	 */
	function string_options_to_normalizer(string_normalizer) {
		var normalizer = Object.create(null);

		string_normalizer.split('|').forEach(function(type) {
			var matched = type.match(/^([a-z]+):([\s\S]+)$/);
			if (!matched) {
				normalizer[type] = true;
				return;
			}

			type = matched[1];
			// condition
			var _normalizer = matched[2];
			if (_normalizer in import_options.filters[type]) {
				_normalizer = import_options.filters[type][_normalizer];

			} else if (type === 'number' && (matched = _normalizer.match(
			// @see CeL.date.parse_period.PATTERN
			// [ all, min, max ]
			/([+\-]?\d+(?:\.\d+)?)?\s*[–~－—─～〜﹣至]\s*([+\-]?\d+(?:\.\d+)?)?/))) {
				_normalizer = import_options.filters[type]
				// this: [ min, max ]
				.range.bind([ matched[1] && +matched[1],
				//
				matched[2] && +matched[2] ]);

			} else if (type === 'string') {
				matched = _normalizer.match(library_namespace.PATTERN_RegExp);
				if (matched) {
					_normalizer = new RegExp(matched[1], matched[2]);
				} else {
					_normalizer = _normalizer.split(';');
				}

			} else {
				library_namespace.warn('import_options: Invalid normalizer: '
				//
				+ _normalizer);
			}

			normalizer[type] = _normalizer;
		});

		return normalizer;
	}

	/**
	 * 將 options 裡面可使用之選項（依照 options_normalizer 之定義），篩選、正規化並提取至 target。
	 * 
	 * @param {Object}options
	 * @param {Object|String|Function}options_normalizer
	 *            options allowed
	 * @param {Object}[target]
	 *            target options to modify
	 * @returns
	 * 
	 * @see function verify_arg(key, value)
	 * @see function generate_argument_condition(condition) @ CeL.application.net.work_crawler.arguments
	 * @see _.default_verify_pattern @ CeL.interact.form.select_input
	 */
	function import_options(options, options_normalizer, target) {
		options = library_namespace.setup_options(options);
		if (!target) {
			target = Object.create(null);
		}

		for ( var key in options) {
			var value = options[key];
			var normalizer = options_normalizer && options_normalizer[key];
			if (typeof normalizer === 'string') {
				// e.g., 'boolean|string:changed;multi_parts_changed'
				normalizer = string_options_to_normalizer(normalizer);
				// console.trace(normalizer);
			}

			if (typeof normalizer === 'object') {
				var type = Array.isArray(value) ? 'Array'
				//
				: library_namespace.is_RegExp(value) ? 'RegExp'
				//
				: library_namespace.is_Date(value) ? 'Date' : null;
				if (!type || !(type in normalizer)
						&& !((type = type.toLowerCase()) in normalizer)) {
					type = typeof value;
				}

				if (type in normalizer) {
					normalizer = normalizer[type];
				} else {
					// invalid value type
					continue;
				}
			}

			if (normalizer === undefined && options_normalizer) {
				// invalid key / parameter name
				continue;
			}

			if (typeof normalizer === 'function') {
				value = normalizer(value);
			} else if (!fit_filter(normalizer, value)) {
				// treat normalizer as filter
				// invalid value
				continue;
			}

			if (value !== import_options.INVALID
			// && value !== undefined
			) {
				target[key] = value;
			}
		}

		// console.trace(target);
		return target;
	}

	import_options.INVALID = {
		invalid_value : true
	};

	_.import_options = import_options;

	/**
	 * validity value
	 * 
	 * generate_filter: fit_filter.bind(null, filter)
	 * 
	 * @param {Function|RegExp|Array}filter
	 * @param value
	 *            value to test
	 * 
	 * @returns value fits the filter
	 * 
	 * @see function receive() @ CeL.application.net.wiki.page
	 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text#pattern
	 */
	function fit_filter(filter, value) {
		// if (filter === true) return true;
		if (typeof filter === 'boolean' || filter === null
				|| typeof filter === 'undefined')
			return filter;

		// 驗證 pattern
		if (library_namespace.is_RegExp(filter))
			return filter.test(value);

		if (typeof filter === 'function')
			return filter(value);

		if (typeof filter === 'string') {
			return filter === value;
			// return filter.includes(value);
			// return String(value).includes(filter);
		}

		// e.g., ['A','B','C']
		if (Array.isArray(filter))
			return filter.includes(value);

		if (false && library_namespace.is_Object(filter))
			return value in filter;

		throw new TypeError('Invalid filter');
	}

	_.fit_filter = fit_filter;

	// ---------------------------------------------------------------------//

	return (_// JSDT:_module_
	);
}

});
// data.numeral
/**
 * @name CeL function for numeral systems
 * @fileoverview 本檔案包含了記數系統用的 functions。
 * 
 * @since
 * 
 * @see <a href="https://en.wikipedia.org/wiki/List_of_numeral_systems"
 *      accessdate="2015/4/30 21:50">List of numeral systems</a>
 */

'use strict';

if (false) {
	CeL.run('data.numeral', function() {
		CeL.to_Chinese_numeral(1000);
	});
}

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'data.numeral',
	// data.native: .chars()
	require : 'data.code.compatibility.|data.native.',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {
	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');
	// nothing required

	/**
	 * null module constructor
	 * 
	 * @class 處理記數系統的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// -----------------------------------------------------------------------------------------------------------------
	// 中文數字 (Chinese numerals)

	function to_search_pattern(keys) {
		var key, chars = [], long_keys = [];
		function add(key) {
			if (key)
				if (key.length === 1)
					chars.push(key);
				else
					long_keys.push(key);
		}

		if (Array.isArray(keys))
			keys.forEach(add);
		else
			for (key in keys)
				add(key);

		chars = chars.length > 0 ? '[' + chars.join('') + ']' : '';
		if (long_keys.length > 0 && chars)
			long_keys.push(chars);

		// /(?:long_keys|long_keys|[chars])/g
		// /[chars]/g
		return new RegExp(long_keys.length > 0 ? '(?:' + long_keys.join('|')
				+ ')' : chars, 'g');
	}

	var
	// 小寫數字
	Chinese_numerals_Normal_digits = '〇一二三四五六七八九',
	//
	Chinese_numerals_Normal_digits_Array
	//
	= Chinese_numerals_Normal_digits.split(''),
	//
	Chinese_numerals_Normal_digits_pattern
	//
	= to_search_pattern(Chinese_numerals_Normal_digits_Array),
	//
	numerals_Normal_pattern = new RegExp('('
	//
	+ Chinese_numerals_Normal_digits_pattern.source + '|\\d+)', 'g'),
	// 籌算: 步十百千萬
	amount_pattern = new RegExp(numerals_Normal_pattern.source + '?([十百千])',
			'g'),

	// 正式大寫數字
	Chinese_numerals_Formal_digits = '零壹貳參肆伍陸柒捌玖',
	//
	Chinese_numerals_Formal_digits_Array
	//
	= Chinese_numerals_Formal_digits.split(''),
	//
	Chinese_numerals_Formal_digits_pattern
	//
	= to_search_pattern(Chinese_numerals_Formal_digits_Array),

	// http://thdl.ntu.edu.tw/suzhou/
	// 蘇州碼子又稱花碼、番仔碼、草碼、菁仔碼
	Suzhou_numerals_digits = '〇〡〢〣〤〥〦〧〨〩',
	// Counting Rod Numerals As of Unicode version 8.0
	Counting_rod_numerals_digits
	// https://en.wikipedia.org/wiki/Counting_Rod_Numerals
	= '𝍠𝍡𝍢𝍣𝍤𝍥𝍦𝍧𝍨𝍩𝍪𝍫𝍬𝍭𝍮𝍯𝍰𝍱',
	// 全形阿拉伯數字 U+FF10~U+FF19 FULLWIDTH DIGIT
	FULLWIDTH_DIGITS = '０１２３４５６７８９',
	//
	positional_Chinese_numerals_digits
	//
	= Chinese_numerals_Normal_digits
	//
	+ Chinese_numerals_Formal_digits
	//
	+ Suzhou_numerals_digits.slice(1) + FULLWIDTH_DIGITS,
	//
	positional_Chinese_numerals_digits_pattern
	//
	= new RegExp('[' + positional_Chinese_numerals_digits + ']', 'g'),
	//
	only_positional_Chinese_numerals_digits_pattern
	//
	= new RegExp('^[' + positional_Chinese_numerals_digits + ']+$'),

	// 舊時/非正式/通用數字 正規化
	numeral_convert_pair = {
		// o : '〇',
		Ｏ : '〇',
		'○' : '〇',
		弌 : '壹',
		弍 : '貳',
		兩 : '二',
		叁 : '參',
		叄 : '參',
		弎 : '參',
		亖 : '四',
		// Firefox/3.0.19 無法 parse '䦉': 錯誤: invalid property id
		'䦉' : '肆',

		// [[ja:大字 (数字)]]
		壱 : '壹',
		弐 : '貳',
		貮 : '貳',
		参 : '參',
		陆 : '陸',
		// 去除常用字以防 false positive
		// 漆 : '柒',
		// 俗亦以「什」代拾，然易竄為「仟」。
		// 什 : '拾',

		// 念圓 : '貳拾圓',
		// 念 : '貳拾',
		廿 : '二十',
		卄 : '二十',
		卅 : '三十',
		// http://www.bsm.org.cn/show_article.php?id=1888
		// "丗五年" = "卅五年"
		丗 : '三十',
		// e.g., 卌又三年
		卌 : '四十',
		// 罕作「圩」
		// 圩 : '五十',
		皕 : '二百',
		// 古亦作「陌」。
		陌 : '佰',
		// 古亦作「阡」。
		阡 : '仟',
		万 : '萬',
		萬萬 : '億',
		// 太常使用。
		// 經 : '京',
		杼 : '秭',
		壤 : '穰',

		厘 : '釐'
	// 太常使用。
	// 毛 : '毫'
	},
	//
	numeral_convert_pattern,

	// denomination, 萬進系統單位
	// http://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97
	// http://zh.wikipedia.org/wiki/%E5%8D%81%E8%BF%9B%E5%88%B6
	// http://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97
	// http://lists.w3.org/Archives/Public/www-style/2003Apr/0063.html
	// http://forum.moztw.org/viewtopic.php?t=3043
	// http://www.moroo.com/uzokusou/misc/suumei/suumei.html
	// http://espero.51.net/qishng/zhao.htm
	// http://www.nchu.edu.tw/~material/nano/newsbook1.htm
	// http://www.moroo.com/uzokusou/misc/suumei/suumei1.html
	// 十億（吉）,兆（萬億）,千兆（拍）,百京（艾）,十垓（澤）,秭（堯）,秭:禾予;溝(土旁);,無量大數→,無量,大數;[載]之後的[極]有的用[報]
	// 異體：阿僧[禾氏],For Korean:阿僧祗;秭:禾予,抒,杼,For Korean:枾 For
	// Korean:不可思議(不:U+4E0D→U+F967)
	// Espana應該是梵文所譯
	// 因為根據「大方廣佛華嚴經卷第四十五卷」中在「無量」這個數位以後還有無邊、無等、不可數、不可稱、不可思、不可量、不可說、不可說不可說，Espana應該是指上面其中一個..因為如果你有心查查Espana其實應該是解作西班牙文的「西班牙」
	Chinese_numerals_Denominations
	// ',萬,億,兆,京,垓,秭,穰,溝,澗,正,載,極,恒河沙,阿僧祇,那由他,不可思議,無量大數'
	= ',萬,億,兆,京,垓,秭,穰,溝,澗,正,載,極',
	//
	Chinese_numerals_Denominations_Array
	//
	= Chinese_numerals_Denominations.split(','),
	//
	Chinese_numerals_Denominations_pattern
	//
	= to_search_pattern(Chinese_numerals_Denominations_Array),
	//
	Chinese_numerals_token_pattern
	//
	= new RegExp('(.*?)('
	//
	+ Chinese_numerals_Denominations_pattern.source + ')', 'g'),

	// TODO:
	// http://zh.wikipedia.org/wiki/%E5%8D%81%E9%80%80%E4%BD%8D
	// 比漠微細的，是自天竺的佛經上的數字。而這些「佛經數字」已成為「古代用法」了。
	// 小數單位(十退位)：分,釐(厘),毫(毛),絲(秒),忽,微,纖,沙,塵（納）,埃,渺,漠(皮),模糊,逡巡,須臾（飛）,瞬息,彈指,剎那（阿）,六德(德),虛,空,清,淨
	// or:,虛,空,清,淨→,空虛,清淨（仄）,阿賴耶,阿摩羅,涅槃寂靜（攸）
	// 六釐英金庚款公債條例: 年息定為?釐, 年利率?厘
	Chinese_numerals_Decimal_denominations = '分釐毫絲忽微纖沙塵埃渺漠',
	//
	numerals_Decimal_token_pattern
	//
	= new RegExp(numerals_Normal_pattern.source
	//
	+ '([' + Chinese_numerals_Decimal_denominations + '])', 'g'),

	// 下數系統單位
	Chinese_numerals_Normal_base_denomination
	// 籌算: 步十百千萬
	= (',十,百,千' + Chinese_numerals_Denominations).split(','),
	//
	Chinese_numerals_Formal_base_denomination
	//
	= (',拾,佰,仟' + Chinese_numerals_Denominations).split(','),
	//
	Chinese_numerals_Normal_pattern = new RegExp('(?:負?(?:['
			+ Chinese_numerals_Normal_digits + '\\d ]['
			+ Chinese_numerals_Normal_base_denomination.join('') + ']*|['
			+ Chinese_numerals_Normal_base_denomination.join('')
			+ ']+)+(又|分之)?)+', 'g'),
	//
	Chinese_numerals_Normal_Full_matched = new RegExp('^(?:負?['
			+ Chinese_numerals_Normal_digits + '\\d '
			+ Chinese_numerals_Normal_base_denomination.join('') + '又]+|分之)+$'),
	//
	numeral_value = Object.create(null);

	_.Chinese_numerals_Normal_digits = Chinese_numerals_Normal_digits;
	_.Chinese_numerals_Formal_digits = Chinese_numerals_Formal_digits;
	_.Chinese_numerals_Denominations
	//
	= Chinese_numerals_Denominations_Array.join('');

	(function() {
		var base, scale = 0;
		Chinese_numerals_Normal_digits_Array
		//
		.forEach(function(digits) {
			numeral_value[digits] = scale;
			scale++;
		});

		base = scale;
		'十,百,千'.split(',')
		// 籌算: 步十百千萬
		.forEach(function(denomination) {
			numeral_value[denomination] = scale;
			scale *= base;
		});

		base = scale;
		Chinese_numerals_Denominations_Array
		//
		.forEach(function(denomination) {
			if (denomination) {
				numeral_value[denomination] = scale;
				scale *= base;
			}
		});

		scale = .1;
		Chinese_numerals_Decimal_denominations.split('')
		//
		.forEach(function(denomination) {
			if (denomination) {
				numeral_value[denomination] = scale;
				scale /= 10;
			}
		});

		for (scale = 1;
		//
		scale < Suzhou_numerals_digits.length; scale++) {
			base = Suzhou_numerals_digits.charAt(scale);
			numeral_value[base] = scale;
			numeral_convert_pair[base]
			//
			= Chinese_numerals_Normal_digits[scale];
		}

		for (scale = 0;
		//
		scale < FULLWIDTH_DIGITS.length; scale++) {
			base = FULLWIDTH_DIGITS.charAt(scale);
			numeral_value[base] = scale;
			numeral_convert_pair[base]
			//
			= Chinese_numerals_Normal_digits[scale];
		}

		numeral_convert_pattern
		//
		= to_search_pattern(numeral_convert_pair);
	})();

	// 對所有非正規之數字。
	// TODO (bug): 十廿, 二廿
	function normalize_Chinese_numeral(number_String) {
		return number_String
		// .replace(/\s+/g, '')
		//
		.replace(numeral_convert_pattern, function($0) {
			return numeral_convert_pair[$0];
		});
	}

	_.normalize_Chinese_numeral = normalize_Chinese_numeral;

	function Chinese_numerals_Formal_to_Normal(number_String) {
		return number_String.replace(Chinese_numerals_Formal_digits_pattern,
				function($0) {
					return Chinese_numerals_Normal_digits
					//
					.charAt(Chinese_numerals_Formal_digits.indexOf($0));
				})
		//
		.replace(/[拾佰仟]/g, function(denomination) {
			return '十百千'.charAt('拾佰仟'.indexOf(denomination));
		});
	}

	_.Chinese_numerals_Formal_to_Normal
	//
	= Chinese_numerals_Formal_to_Normal;

	function Chinese_numerals_Normal_to_Formal(number_String) {
		return number_String.replace(Chinese_numerals_Normal_digits_pattern,
				function($0) {
					return Chinese_numerals_Formal_digits
					//
					.charAt(Chinese_numerals_Normal_digits.indexOf($0));
				})
		//
		.replace(/[十百千]/g, function($0) {
			return '拾佰仟'.charAt('十百千'.indexOf($0));
		});

	}

	_.Chinese_numerals_Normal_to_Formal
	//
	= Chinese_numerals_Normal_to_Formal;

	/**
	 * 將漢字中文數字轉換為半形阿拉伯數字表示法(小數系統 0-99999)
	 * 
	 * @deprecated use from_Chinese_numeral.
	 */
	function deprecated_from_Chinese_numeral(number_String) {
		if (!number_String || !isNaN(number_String))
			return number_String;

		number_String = Chinese_numerals_Formal_to_Normal(
		//
		normalize_Chinese_numeral('' + number_String));

		var i = 0, l, m,
		//
		n = Chinese_numerals_Normal_digits_Array,
		// 籌算: 萬千百十步
		d = '萬千百十'.split(''), r = 0,
		/**
		 * @see <a
		 *      href="http://zh.wikipedia.org/wiki/%E6%97%A5%E8%AA%9E%E6%95%B8%E5%AD%97"
		 *      accessdate="2012/9/10 21:0">日語數字</a>
		 */
		p = ('' + number_String).replace(/\s/g, '')
		//
		.replace(/[Ｏ○]/g, '〇');
		for (; i < n.length; i++)
			n[n[i]] = i;
		for (i = 0; i < d.length; i++) {
			if (p && NOT_FOUND !==
			//
			(m = d[i] ? p.indexOf(d[i]) : p.length))
				if (!m && d[i] === '十')
					r += 1, p = p.slice(1);
				else if (isNaN(l = n[
				//
				p.slice(0, m).replace(/^〇+/, '')]))
					return number_String;
				else
					r += l, p = p.slice(m + 1);
			if (d[i])
				r *= 10;
		}

		return r;
	}

	// More examples: see /_test suite/test.js

	function from_positional_Chinese_numeral(number_String) {
		return isNaN(number_String = number_String.replace(
				positional_Chinese_numerals_digits_pattern, function(digit) {
					return numeral_value[digit];
				})) ? number_String : +number_String;
	}

	function to_positional_Chinese_numeral(number_String, formal) {
		formal = formal ? Chinese_numerals_Formal_digits_Array
		//
		: Chinese_numerals_Normal_digits_Array;
		return ('' + number_String)
		//
		.replace(/\d/g, function(digit) {
			return formal[digit];
		});
	}

	_.positional_Chinese_numerals_digits
	//
	= positional_Chinese_numerals_digits;
	_.from_positional_Chinese_numeral
	//
	= from_positional_Chinese_numeral;
	_.to_positional_Chinese_numeral
	//
	= to_positional_Chinese_numeral;

	// 將漢字中文數字轉換為半形阿拉伯數字表示法。(正常情況下:小數系統 0-9999)
	function from_Chinese_numeral_token(amount) {
		if (!isNaN(amount))
			return +amount;

		// reset
		amount_pattern.lastIndex = 0;

		var token_sum = 0, matched, lastIndex = 0;
		while (matched = amount_pattern.exec(amount)) {
			lastIndex = amount_pattern.lastIndex;
			// [ , digit, denomination ]
			// for "一千零十一" 等。
			token_sum += (matched[1]
			//
			&& matched[1] !== '〇' ? numeral_value[matched[1]] : 1)
			//
			* numeral_value[matched[2]];
		}

		// lastIndex 後面的全部放棄。
		amount = amount.slice(lastIndex).replace(/^〇+/, '');
		numerals_Normal_pattern.lastIndex = 0;

		matched = numerals_Normal_pattern.exec(amount);
		if (matched)
			token_sum += isNaN(matched = matched[0])
			//
			? numeral_value[matched] : +matched;

		return token_sum || 0;
	}

	/**
	 * 將漢字中文數字轉換為阿拉伯數字表示法。<br />
	 * 注意：本函數不會檢查 number_String 之正規與否！
	 */
	function from_Chinese_numeral(number_String) {
		if (!number_String || !isNaN(number_String))
			return number_String;

		number_String = Chinese_numerals_Formal_to_Normal(
		//
		normalize_Chinese_numeral('' + number_String));
		// console.log(Chinese_numerals_Normal_pattern);
		// console.log(JSON.stringify(number_String));

		if (!Chinese_numerals_Normal_Full_matched.test(number_String)) {
			// 部分符合，僅針對符合部分處理。
			Chinese_numerals_Normal_pattern.lastIndex = 0;
			return number_String.replace(
			//
			Chinese_numerals_Normal_pattern, function($0) {
				// console.log('-- ' + JSON.stringify($0));
				// 避免前後空格被吃掉。
				var token = $0.match(/^(\s*)(\S.*?)(\s*)$/);
				if (!token) {
					// 可能會是" "
					return $0;
				}
				var digit = token[2].charAt(0);
				token[2] = ('負十'.includes(digit)
						|| positional_Chinese_numerals_digits.includes(digit)
						|| (digit = token[2].charAt(1)) && ('十'.includes(digit)
						//
						|| positional_Chinese_numerals_digits.includes(digit))
				// 不處理過大的位值，例如 "正"。
				? from_Chinese_numeral(token[2]) : token[2]);
				return token[1] + token[2] + token[3];
			});
		}

		var sum = 0, lastIndex = 0,
		//
		negative = number_String.charAt(0) === '負',
		//
		matched = number_String
		//
		.match(/^(負)?(?:(.+)又)?(.+)分之(.+)$/);
		if (matched) {
			sum = (matched[2]
			//
			&& from_Chinese_numeral(matched[2]) || 0)
					+ from_Chinese_numeral(matched[4])
					/ from_Chinese_numeral(matched[3]);
			return negative ? -sum : sum;
		}

		// reset
		Chinese_numerals_token_pattern.lastIndex = 0;

		// console.log([ number_String, Chinese_numerals_token_pattern ]);
		while (matched = Chinese_numerals_token_pattern
		//
		.exec(number_String)) {
			// [ , amount, denomination ]
			// console.log(matched);
			sum += from_Chinese_numeral_token(matched[1] || 1)
					* numeral_value[matched[2]];
			lastIndex = Chinese_numerals_token_pattern.lastIndex;
		}

		number_String = number_String.slice(lastIndex);

		// reset
		numerals_Decimal_token_pattern.lastIndex = 0;

		// console.log([ sum, number_String, numerals_Decimal_token_pattern ]);
		if (lastIndex = numerals_Decimal_token_pattern
		//
		.exec(number_String)) {
			// 輸入 '捌佰3分' 之類。
			// console.log(lastIndex);
			lastIndex = lastIndex.index;
			matched = [ , number_String.slice(0, lastIndex),
					number_String.slice(lastIndex) ];
		} else {
			// 輸入 '捌佰3又3分' 之類。
			matched = number_String.match(/(.*)[點又.](.*)/)
					|| [ , number_String ];
		}

		if (false) {
			console
					.trace([ sum, matched, Chinese_numerals_Normal_Full_matched ]);
			console.trace([ only_positional_Chinese_numerals_digits_pattern
					.test(matched[1]) ]);
		}
		sum += only_positional_Chinese_numerals_digits_pattern.test(matched[1])
		// e.g., CeL.from_Chinese_numeral('第一二三四章')
		? from_positional_Chinese_numeral(matched[1])
				: from_Chinese_numeral_token(matched[1]);

		// console.trace(sum);

		if (number_String = matched[2]) {
			// 處理小數。
			for (var base = .1, lastIndex = 0;; base /= 10) {
				numerals_Decimal_token_pattern.lastIndex = lastIndex;
				if (matched = numerals_Decimal_token_pattern
				//
				.exec(number_String)) {
					lastIndex
					//
					= numerals_Decimal_token_pattern.lastIndex;
					// 單位
					base = numeral_value[matched[2]];
					matched = matched[1];
				} else {
					numerals_Normal_pattern.lastIndex = lastIndex;
					if (matched = numerals_Normal_pattern
					//
					.exec(number_String)) {
						lastIndex
						//
						= numerals_Normal_pattern.lastIndex;
						matched = matched[0];
					} else
						break;
				}
				if (isNaN(matched))
					matched = numeral_value[matched];
				else if (matched > 9)
					matched = matched.replace(/^(\d)/, '$1.');
				else
					matched = +matched;
				sum += matched * base;
			}
		}

		return negative ? -sum : sum;
	}

	/**
	 * 將阿拉伯數字轉為中文數字<b>下數系統</b>大寫(Long scale)、小寫(Short scale)兩種表示法/中文數字讀法<br />
	 * 處理1-99999的數,尚有bug。
	 */
	function to_Chinese_numeral_Low_scale(number_String, formal) {
		// 用r=[]約多花一倍時間!
		var i = 0, r = '', l = number_String.length - 1, d,
		//
		tnum = formal ? Chinese_numerals_Formal_digits_Array
				: Chinese_numerals_Normal_digits_Array,
		//
		zero = tnum[0],
		//
		tbd = formal ? Chinese_numerals_Formal_base_denomination
				: Chinese_numerals_Normal_base_denomination;

		for (; i <= l; i++)
			// if(d=parseInt(number_String.charAt(i)))比較慢
			if ((d = number_String.charAt(i)) !== '0')
				// '〇一二三四五六七八'.charAt(d) 比較慢
				r += tnum[d] + tbd[l - i];
			else if (r.slice(-1) != zero)
				if (Math.floor(number_String.slice(i + 1)))
					r += zero;
				else
					break;
		return r;
	}

	if (false)
		(function() {
			// 2.016,2.297,2.016
			var d = new Date, v = '12345236', i = 0, a;
			for (; i < 10000; i++)
				a = to_Chinese_numeral(v);
			alert(v + '\n→' + a + '\ntime:' + gDate(new Date - d));
		});

	/**
	 * 將阿拉伯數字轉為萬進中文數字表示法。 num>1京時僅會取概數，此時得轉成string再輸入！ TODO: 統整:尚有bug。 廿卅 小數
	 * 
	 * @param {Number}number
	 *            native number
	 * @param {Boolean}[formal]
	 *            kind
	 * 
	 * @returns {String} 中文數字
	 * 
	 */
	function to_Chinese_numeral(number, formal) {
		// number = parseFloat(number);
		number = (typeof number === 'number'
		//
		? number.toString(10)
		//
		: '' + number)
		// 避免前後空格被吃掉。
		// .replace(/[,\s]/g, '')
		;

		if (!/^[+\-]?(?:\d+(?:\.\d*)?|(?:\d*\.)?\d+)$/.test(number)) {
			// 非數值
			return number.replace(
			//
			/[+\-]?(?:\d+(?:\.\d*)?|(?:\d*\.)?\d+)/g, function($0) {
				// 避免前後空格被吃掉。
				var token = $0.match(/^(\s*)(\S.*?)(\s*)$/);
				if (!token) {
					// 可能會是" "
					return $0;
				}
				// console.log(token);
				return token[1] + to_Chinese_numeral(token[2], formal)
						+ token[3];
			});
		}

		var j,
		// i:integer,整數;
		i,
		// d:decimal,小數
		d = number.indexOf('.'), k, l, m, addZero = false,
		//
		tnum = formal ? Chinese_numerals_Formal_digits_Array
		//
		: Chinese_numerals_Normal_digits_Array,
		//
		zero = tnum[0];
		if (d === NOT_FOUND)
			d = 0;
		else
			for (number = number.replace(/0+$/, ''),
			//
			i = number.slice(d + 1),
			//
			number = number.slice(0, d),
			//
			d = '', j = 0; j < i.length; j++)
				// 小數
				d += tnum[i.charAt(j)];

		// 至此 number 為整數。
		if (number.charAt(0) === '-')
			i = '負', number = number.slice(1);
		else
			i = '';
		number = number.replace(/^0+/, '');

		m = number.length % 4, j = m - 4, l = (number.length - (m || 4)) / 4;
		// addZero=false, l=Math.floor((number.length-1)/4)
		for (; j < number.length; m = 0, l--)
			// 這邊得用 parseInt( ,10):
			// parseInt('0~')會用八進位，其他也有奇怪的效果。
			if (Math.floor(m = m ? number.slice(0, m) : number
					.substr(j += 4, 4))) {
				m = to_Chinese_numeral_Low_scale(m, formal);
				if (addZero = addZero && m.charAt(0) != zero) {
					i += zero + m
					//
					+ Chinese_numerals_Denominations_Array[l];
					addZero = false;
				} else
					i += m
					//
					+ Chinese_numerals_Denominations_Array[l];
			} else
				addZero = true;

		// 習慣用法： 一十 → 十
		return (i ? i.replace(/^(負)?[一壹]([十拾])/, '$1$2') : zero)
				+ (d ? '點' + d : '');
	}

	_.from_Chinese_numeral = from_Chinese_numeral;
	_.to_Chinese_numeral = to_Chinese_numeral;

	/**
	 * 各區文化特色 - 貨幣轉換:<br />
	 * 轉換成新臺幣中文大寫金額表示法。<br />
	 * Converted into money notation.
	 * 
	 * @example <code>

	// More examples: see /_test suite/test.js

	 * </code>
	 * 
	 * @param {Number|String}amount
	 *            貨幣數量。
	 * @returns {String} 新臺幣金額中文大寫表示法。
	 * 
	 * @requires to_Chinese_numeral()
	 */
	function to_TWD(amount) {
		if (typeof amount === 'string')
			amount = amount.replace(/[\s,$]+/g, '');

		amount = to_Chinese_numeral(amount, true)
		// 銀行習慣用法，零可以不用寫。
		.replace(/([佰仟萬億兆京垓秭穰溝澗正載極])零/g, '$1')
		// 100000 → 壹拾萬圓整
		.replace(/^拾/, '壹拾');

		// 大寫金額數字應緊接“人民幣/港幣/台幣”字樣填寫，不得留有空位。
		return '新臺幣' + (amount.includes('點') ? amount.replace(
		//
		/點(.)(.)?(.)?/, function($0, $1, $2, $3) {
			return '圓' + $1 + '角'
			// 日本明治時代臺灣 1圓=100錢=1000厘, 不使用"零"這個數字
			// e.g., "五百三圓二十三錢五厘"
			+ ($2 ? $2 + '分' + ($3 ? $3 + '文' : '') : '');
		}) :
		// 在“元”(或“圓”)之後、應寫“整”(或“正”)字
		// 在“角”之後，可以不寫“整”(或“正”)字
		// 大寫金額數字有“分”的，“分”後面不寫“整”(或“正”)字。
		amount + '圓整');
	}

	_// JSDT:_module_
	.to_TWD = to_TWD;

	/**
	 * Japanese numerals
	 * 
	 * @param {Number}number
	 *            native number
	 * 
	 * @returns {String} Japanese numerals
	 */
	function to_Japanese_numeral(number) {
		return to_Chinese_numeral(number).replace(/〇/g, '').replace(/萬/, '万');
	}

	_.to_Japanese_numeral = to_Japanese_numeral;

	// https://en.wikipedia.org/wiki/Long_and_short_scales
	// http://blog.functionalfun.net/2008/08/project-euler-problem-17-converting.html
	var English_numerals = {
		0 : "zero",
		1 : "one",
		2 : "two",
		3 : "three",
		4 : "four",
		5 : "five",
		6 : "six",
		7 : "seven",
		8 : "eight",
		9 : "nine",
		10 : "ten",
		11 : "eleven",
		12 : "twelve",
		13 : "thirteen",
		14 : "fourteen",
		15 : "fifteen",
		16 : "sixteen",
		17 : "seventeen",
		18 : "eighteen",
		19 : "nineteen",
		20 : "twenty",
		30 : "thirty",
		40 : "forty",
		50 : "fifty",
		60 : "sixty",
		70 : "seventy",
		80 : "eighty",
		90 : "ninety",
		100 : "hundred",
		1000 : "thousand",
		1000000 : "million",
		1000000000 : "billion",
		1000000000000 : "trillion",
		1000000000000000 : "quadrillion",
		// Number.isSafeInteger(1000000000000000000) === false
		'1000000000000000000' : "quintillion"
	};

	// @inner
	function to_English_numeral_small(number) {
		// assert: number = 1 ~ 999
		// hundreds
		var conversion = number / 100 | 0;

		if (number %= 100)
			if (number in English_numerals)
				number = English_numerals[number];
			else {
				// units
				var _1 = number % 10;
				_1 = _1 ? English_numerals[_1] : '';
				// tens
				number = number / 10 | 0;
				if (number) {
					number = English_numerals[number * 10];
					if (_1)
						number += '-' + _1;
				} else
					number = _1;
			}

		if (conversion) {
			conversion = English_numerals[conversion] + ' '
					+ English_numerals[100];
			if (number)
				conversion += ' and ' + number;
		} else
			conversion = number;
		return conversion;
	}

	// written out numbers in words. Get number name.
	// British usage
	// @see http://www.grammarbook.com/numbers/numbers.asp
	function to_English_numeral(number) {
		if (number != Math.floor(number)) {
			library_namespace.error('Cannot conver [' + number + ']!');
		}

		number = Math.floor(number);
		if (number < 0)
			return "negative " + to_English_numeral(-number);
		if (number < 91 && (number in English_numerals))
			// for zero.
			return English_numerals[number];

		var base = 1000, unit = 1, conversion = [], remainder,
		// remainder, 0 ~ 999 (1000-1)
		small = number % base;
		while (number = Math.floor(number / base)) {
			unit *= base;
			if (remainder = number % base)
				conversion.unshift(to_English_numeral_small(remainder) + ' '
						+ English_numerals[unit]);
		}

		if (conversion = conversion.join(', ')) {
			if (small)
				conversion += ' and '
				//
				+ to_English_numeral_small(small);
		} else
			conversion = small ? to_English_numeral_small(small) : '';
		return conversion;
	}

	_.to_English_numeral = to_English_numeral;

	// -----------------------------------------------------------------------------------------------------------------
	// (十進位)位值直接轉換用
	// https://en.wikipedia.org/wiki/Positional_notation

	function convert_positional(digit_set, name) {
		var digits;
		if (typeof digit_set !== 'string' || 10 !==
		//
		(digits = digit_set.chars()).length) {
			library_namespace.error('Invalid digits of [' + name + ']: ('
					+ digits.length + ') [' + digit_set + ']');
			return;
		}

		var PATTERN_numeral = new RegExp(
				digit_set.length === digits.length ? '[' + digit_set + ']'
						: digits.join('|'), 'g');
		digits.forEach(function(digit, index) {
			numeral_convert_pair[digit] = index;
		});

		/**
		 * native number → positional numeral system
		 * 
		 * @param {Number}number
		 *            native number
		 * 
		 * @returns {String} specified numerals
		 */
		function to_numeral(number) {
			return String(number).replace(/\d/g, function(digit) {
				return digits[digit];
			});
		}

		/**
		 * positional numeral system → native number
		 * 
		 * @param {String}number
		 *            specified numerals
		 * 
		 * @returns {Number} native number
		 */
		to_numeral.from = function from_numeral(number) {
			number = String(number).replace(PATTERN_numeral, function(digit) {
				return numeral_convert_pair[digit];
			});
			if (!isNaN(number))
				number = Number(number);
			return number;
		}

		return to_numeral;
	}

	// http://wikimediafoundation.org/wiki/Template:ConvertDigit
	// https://github.com/esetera/Objavi/blob/master/digits.txt
	// https://de.wikipedia.org/wiki/Zahlzeichen_in_Unicode
	// TODO: https://en.wiktionary.org/wiki/8
	(function() {
		var positional_digits = {
			// Eastern Arabic numerals
			// https://en.wikipedia.org/wiki/Eastern_Arabic_numerals
			// 中東阿拉伯文數字, 標準阿拉伯文數字
			// Western Arabic / Hindu–Arabic numeral system: 0123456789
			// 在埃及，「二」通常用另一種寫法。
			Arabic : '٠١٢٣٤٥٦٧٨٩',
			// Perso-Arabic variant, Persian, Urdu, 東阿拉伯文數字
			Perso : '۰۱۲۳۴۵۶۷۸۹',

			Balinese : '᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙',

			// Bengali numerals (সংখ্যা shôngkhæ), 孟加拉文數字,
			// Bengali-Assamese numerals
			// https://en.wikipedia.org/wiki/Bengali_numerals
			// ৴৵৶৷৸৹
			Bangla : '০১২৩৪৫৬৭৮৯',

			Brahmi : '𑁦𑁧𑁨𑁩𑁪𑁫𑁬𑁭𑁮𑁯',
			Chakma : '𑄶𑄷𑄸𑄹𑄺𑄻𑄼𑄽𑄾𑄿',
			Cham : '꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙',

			// 天城文（देवनागरी / devanāgarī）
			// https://hi.wikipedia.org/wiki/%E0%A4%AE%E0%A5%80%E0%A4%A1%E0%A4%BF%E0%A4%AF%E0%A4%BE%E0%A4%B5%E0%A4%BF%E0%A4%95%E0%A4%BF:Gadget-Numeral_converter.js
			// https://hi.wikipedia.org/wiki/%E0%A4%B5%E0%A4%BF%E0%A4%95%E0%A4%BF%E0%A4%AA%E0%A5%80%E0%A4%A1%E0%A4%BF%E0%A4%AF%E0%A4%BE:%E0%A4%85%E0%A4%82%E0%A4%95_%E0%A4%AA%E0%A4%B0%E0%A4%BF%E0%A4%B5%E0%A4%B0%E0%A5%8D%E0%A4%A4%E0%A4%95
			Devanagari : '०१२३४५६७८९',

			Gujarati : '૦૧૨૩૪૫૬૭૮૯',
			// Gurmukhī numerals
			// https://en.wikipedia.org/wiki/Gurmukh%C4%AB_alphabet#Numerals
			Gurmukhi : '੦੧੨੩੪੫੬੭੮੯',
			Javanese : '꧐꧑꧒꧓꧔꧕꧖꧗꧘꧙',
			Kannada : '೦೧೨೩೪೫೬೭೮೯',
			// Kayah Li
			Kayah_Li : '꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉',

			// Khmer, Cambodian, 高棉文數字.
			// https://km.wikipedia.org/wiki/%E1%9E%91%E1%9F%86%E1%9E%96%E1%9F%90%E1%9E%9A%E1%9E%82%E1%9F%86%E1%9E%9A%E1%9E%BC:Number_table_sorting
			Khmer : '០១២៣៤៥៦៧៨៩',

			// Tai Tham Hora 十進位數字系統。
			Lanna : '᪀᪁᪂᪃᪄᪅᪆᪇᪈᪉',
			// Tai Tham Tham 十進位數字系統。老傣文，又稱老傣仂文、蘭納文. Lanna script
			Tai_Tham : '᪐᪑᪒᪓᪔᪕᪖᪗᪘᪙',

			// 寮國/寮文數字
			Lao : '໐໑໒໓໔໕໖໗໘໙',
			Lepcha : '᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉',
			Limbu : '᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏',
			Malayalam : '൦൧൨൩൪൫൬൭൮൯',
			// Meitei-Mayek
			Meitei_Mayek : '꯰꯱꯲꯳꯴꯵꯶꯷꯸꯹',
			Mongolian : '᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙',
			// or Burmese. 緬甸文數字.
			// 警告:其中非空!
			Myanmar : '၀၁၂၃၄၅၆၇၈၉',
			// 緬甸撣邦文十進位數字系統。
			// 警告:其中非空!
			Myanmar_Shan : '႐႑႒႓႔႕႖႗႘႙',
			// Neu-Tai-Lue.
			Neu_Tai_Lue : '᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙',
			// N'Ko, r to l
			NKo : '߀߁߂߃߄߅߆߇߈߉',
			Oriya : '୦୧୨୩୪୫୬୭୮୯',
			// Ol Chiki decimal numeral system. 桑塔爾文十進位數字系統。
			Ol_Chiki : '᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙',
			Osmanya : '𐒠𐒡𐒢𐒣𐒤𐒥𐒦𐒧𐒨𐒩',
			Saurashtra : '꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙',
			Sharada : '𑇐𑇑𑇒𑇓𑇔𑇕𑇖𑇗𑇘𑇙',
			// Sorang-Sompeng
			Sorang_Sompeng : '𑃰𑃱𑃲𑃳𑃴𑃵𑃶𑃷𑃸𑃹',
			Sundanese : '᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹',
			Takri : '𑛀𑛁𑛂𑛃𑛄𑛅𑛆𑛇𑛈𑛉',
			// Tamil (Grantha), 泰米爾文數字
			// https://www.adobe.com/type/browser/pdfs/1965.pdf
			Tamil : '௦௧௨௩௪௫௬௭௮௯',
			Telugu : '౦౧౨౩౪౫౬౭౮౯',
			// 藏文數字
			Tibetan : '༠༡༢༣༤༥༦༧༨༩',
			// 泰文數字 th:ตัวเลขไทย
			// https://th.wikipedia.org/wiki/%E0%B8%95%E0%B8%B1%E0%B8%A7%E0%B9%80%E0%B8%A5%E0%B8%82%E0%B9%84%E0%B8%97%E0%B8%A2
			Thai : '๐๑๒๓๔๕๖๗๘๙',
			Vai : '꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩'
		};

		for ( var name in positional_digits) {
			var to_numeral = convert_positional(positional_digits[name], name);
			if (to_numeral) {
				_['to_' + name + '_numeral'] = to_numeral;
				_['from_' + name + '_numeral'] = to_numeral.from;
			}
		}
	})();

	// -----------------------------------------------------------------------------------------------------------------
	// Roman numerals
	// https://en.wikipedia.org/wiki/Roman_numerals
	// https://en.wiktionary.org/wiki/Appendix:Roman_numerals
	// TODO: to Alternative forms
	var Roman_numeral_alternative = {
		'ↅ' : 'VI',
		'ↆ' : 'L',
		// Safari 11: Invalid character
		'Ⅼ' : 'L',
		'Ⅽ' : 'C',
		'Ⅾ' : 'D',
		'Ⅿ' : 'M',
		'ⅼ' : 'L',
		'ⅽ' : 'C',
		'ⅾ' : 'D',
		'ⅿ' : 'M',
		'ↀ' : 'M'
	}, PATTERN_Roman_numeral_alternative,
	//
	Roman_numeral_pair = {},
	// 
	PATTERN_Roman = [],

	// assert: 2個一組為十進位。
	Roman_numeral_value = 'IVXLCDMↁↂↇↈ'.split(''),
	// Roman_numeral_value[apostrophus_starts] 開始為 apostrophus 表示法。
	apostrophus_starts = Roman_numeral_value.indexOf('ↁ');

	Roman_numeral_value.forEach(function(digit, index) {
		var is_unit = index % 2 === 0, next;
		Roman_numeral_pair[digit] = (is_unit ? 1 : 5)
				* Math.pow(10, index / 2 | 0);
		if (is_unit) {
			var next = Roman_numeral_value[index + 1];
			PATTERN_Roman.unshift('('
					+ (next ? digit + '[' + next
							+ Roman_numeral_value[index + 2] + ']|' + next
							+ '?' : '') + digit + '*)');
		}
	});

	// 千百十個: /(M*)(C[DM]|D?C*)(X[LC]|L?X*)(I[VX]|V?I*)/i
	PATTERN_Roman = new RegExp(PATTERN_Roman.join(''), 'i');
	// console.log(PATTERN_Roman);
	// /(ↈ*)(ↂ[ↇↈ]|ↇ?ↂ*)(M[ↁↂ]|ↁ?M*)(C[DM]|D?C*)(X[LC]|L?X*)(I[VX]|V?I*)/i

	// apostrophus: expressed in "apostrophus" notation.
	function to_Roman_numeral(number, apostrophus) {
		if (!(number > 0) || number != (number | 0)) {
			/**
			 * the word nulla (the Latin word meaning "none") was used by
			 * medieval computists in lieu of 0.<br />
			 * About 725, Bede or one of his colleagues used the letter N, the
			 * initial of nulla, in a table of epacts, all written in Roman
			 * numerals.
			 */
			// return number === 0 ? 'N' : number;
			return number;
		}

		/** {Natural}已處理的 Roman 數字。 */
		var value = [],
		/** {Natural}剩下尚未處理的數值。 */
		left = number | 0;

		// 將 apostrophus 轉成可接受的最大 index。
		apostrophus = apostrophus ? Roman_numeral_value.length
				: apostrophus_starts;

		// index += 2: assert: 2個一組為十進位。
		for (var index = 0; left > 0; index += 2) {
			if (index >= apostrophus) {
				library_namespace.error(
				// OUT OF RANGE: number ≥ 1000000
				'The number is too large to be expressed in Roman numerals: '
						+ number);
				return;
			}

			var digits,
			/** {Integer}位值。 */
			position = left % 10;
			left = left / 10 | 0;
			if ((position + 1) % 5 === 0 && apostrophus >
			// position = 4 or 9 時之特殊處置。必須有此數字表示法，才允許通過。
			(digits = index + (position === 4 ? 1 : 2))) {
				digits = Roman_numeral_value[index]
						+ Roman_numeral_value[digits];
			} else {
				if (position > 4
				// [index + 1] 可能已經越界。
				&& (digits = Roman_numeral_value[index + 1])) {
					position -= 5;
				} else {
					digits = '';
				}
				digits += Roman_numeral_value[index].repeat(position);
			}
			value.push(digits);
		}

		return value.reverse().join('');
	}

	function Roman_position(previous, position) {
		if (!position)
			return previous;

		if (position.length === 1)
			return previous + Roman_numeral_pair[position];

		var _1 = Roman_numeral_pair[position[0]],
		//
		_2 = Roman_numeral_pair[position[1]];
		if (_2 > _1)
			// assert: position.length === 2
			return previous + _2 - _1;

		return previous + _1 + _2 * (position.length - 1);
	}

	// TODO: 'Ↄ', 'ↄ'
	function from_Roman_numeral(number) {
		var matched = normalize_Roman_numeral(number).match(PATTERN_Roman);

		return matched ? matched.slice(1).reduce(Roman_position, 0) : number;
	}

	function normalize_Roman_numeral(number) {
		return String(number)
		// 正規化。
		.replace(PATTERN_Roman_numeral_alternative, function(digit) {
			return Roman_numeral_alternative[digit];
		});
	}

	_.to_Roman_numeral = to_Roman_numeral;
	_.from_Roman_numeral = from_Roman_numeral;
	_.normalize_Roman_numeral = normalize_Roman_numeral;

	'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'.split('').forEach(function(digit, index) {
		Roman_numeral_alternative[digit] = to_Roman_numeral(index + 1);
	});
	'ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻ'.split('').forEach(function(digit, index) {
		Roman_numeral_alternative[digit] = to_Roman_numeral(index + 1);
	});
	PATTERN_Roman_numeral_alternative = new RegExp('['
			+ Object.keys(Roman_numeral_alternative) + ']', 'g');

	if (false)
		(function() {
			for (var i = 1; i < 50000; i++)
				if (i !== CeL.from_Roman_numeral(CeL.to_Roman_numeral(i)))
					throw 'Error: ' + i + ' → ' + CeL.to_Roman_numeral(i)
							+ ' → '
							+ CeL.from_Roman_numeral(CeL.to_Roman_numeral(i));
		});

	// -----------------------------------------------------------------------------------------------------------------

	return (_// JSDT:_module_
	);
}

});
// application.locale
/**
 * @name CeL function for locale / i18n (Internationalization, ja:地域化) 系列
 * @fileoverview 本檔案包含了地區語系/文化設定的 functions。
 * @since
 * @see http://blog.miniasp.com/post/2010/12/24/Search-and-Download-International-Terminology-Microsoft-Language-Portal.aspx
 *      http://www.microsoft.com/language/zh-tw/default.aspx Microsoft | 語言入口網站
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.locale',

	// data.numeral.to_Chinese_numeral|data.numeral.to_positional_Chinese_numeral|data.numeral.to_English_numeral
	require : 'data.numeral.to_Chinese_numeral'
	//
	+ '|data.numeral.to_positional_Chinese_numeral',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	var module_name = this.id,
	// requiring
	to_Chinese_numeral = this.r('to_Chinese_numeral'), to_positional_Chinese_numeral = this
			.r('to_positional_Chinese_numeral');

	/**
	 * null module constructor
	 * 
	 * @class locale 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	/**
	 * <code>
	<a href="http://www.ietf.org/rfc/bcp/bcp47.txt" accessdate="2012/8/22 15:23" title="BCP 47: Tags for Identifying Languages">BCP 47</a> language tag

	http://www.whatwg.org/specs/web-apps/current-work/#the-lang-and-xml:lang-attributes
	The lang attribute (in no namespace) specifies the primary language for the element's contents and for any of the element's attributes that contain text. Its value must be a valid BCP 47 language tag, or the empty string.

	<a href="http://www.w3.org/International/articles/language-tags/" accessdate="2012/9/23 13:29">Language tags in HTML and XML</a>
	language-extlang-script-region-variant-extension-privateuse

	http://www.cnblogs.com/sink_cup/archive/2011/04/15/written_language_and_spoken_language.html
	http://zh.wikipedia.org/wiki/%E6%B1%89%E8%AF%AD

	<a href="http://en.wikipedia.org/wiki/IETF_language_tag" accessdate="2012/8/22 15:25">IETF language tag</a>

	TODO:
	en-X-US
	</code>
	 */
	function language_tag(tag) {
		return language_tag.parse.call(this, tag);
	}

	// 3_language[-3_extlang][-3_extlang][-4_script][-2w|3d_region]
	language_tag.language_RegExp = /^(?:(?:([a-z]{2,3})(?:-([a-z]{4,8}|[a-z]{3}(?:-[a-z]{3}){0,1}))?))(?:-([a-z]{4}))?(?:-([a-z]{2}|\d{3}))?((?:-(?:[a-z\d]{2,8}))*)$/;
	// x-fragment[-fragment]..
	language_tag.privateuse_RegExp = /^x((?:-(?:[a-z\d]{1,8}))+)$/;
	// 片段
	language_tag.privateuse_fragment_RegExp = /-([a-z\d]{1,8})/g;
	language_tag.parse = function(tag) {
		this.tag = tag;
		// language tags and their subtags, including private use and
		// extensions, are to be treated as case insensitive
		tag = String(tag).toLowerCase();
		var i = 1, match = language_tag.language_RegExp.exec(tag);
		if (match) {
			library_namespace.debug(match.join('<br />'), 3,
					'language_tag.parse');

			// 3_language[-3_extlang][-3_extlang][-4_script][-2w|3d_region]

			// <a href="http://en.wikipedia.org/wiki/ISO_639-3"
			// accessdate="2012/9/22 17:5">ISO 639-3 codes</a>
			// list: <a href="http://en.wikipedia.org/wiki/ISO_639:a"
			// accessdate="2012/9/22 16:56">ISO 639:a</a>
			// 國際語種代號標準。
			this.language = match[i++];
			// TODO: 查表對照轉換, fill this.language
			this.extlang = match[i++];

			/**
			 * @see <a
			 *      href="http://en.wikipedia.org/wiki/ISO_15924#List_of_codes"
			 *      accessdate="2012/9/22 16:57">ISO 15924 code</a>
			 */
			// 書寫文字。match[] 可能是 undefined。
			this.script = (match[i++] || '').replace(/^[a-z]/, function($0) {
				return $0.toUpperCase();
			});
			/**
			 * @see <a
			 *      href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"
			 *      accessdate="2012/9/22 16:58">ISO 3166-1 alpha-2 code</a>
			 */
			// 國家/地區/區域/領域代碼。match[] 可能是 undefined。
			this.region = (match[i++] || '').toUpperCase();

			// TODO: variant, extension, privateuse
			this.external = match[i++];

			if (library_namespace.is_debug(2)) {
				for (i in this) {
					library_namespace.debug(i + ' : ' + this[i], 2,
							'language_tag.parse');
				}
			}

		} else if (match = language_tag.privateuse_RegExp.exec(tag)) {

			// x-fragment[-fragment]..
			library_namespace.debug('parse privateuse subtag [' + tag + ']', 2,
					'language_tag.parse');
			tag = match[1];
			this.privateuse = i = [];
			// reset 'g' flag
			language_tag.privateuse_fragment_RegExp.exec('');
			while (match = language_tag.privateuse_fragment_RegExp.exec(tag)) {
				i.push(match[1]);
			}
			library_namespace.debug('privateuse subtag: ' + i, 2,
					'language_tag.parse');

		} else if (library_namespace.is_debug()) {
			library_namespace.warn('unrecognized language tag: [' + tag + ']');
		}

		return this;
	};

	// 查表對照轉換。
	language_tag.convert = function() {
		// TODO
		throw new Error('language_tag.convert: '
		// gettext_config:{"id":"not-yet-implemented"}
		+ gettext('Not Yet Implemented!'));
	};

	/**
	 * <code>
	new language_tag('cmn-Hant-TW');
	new language_tag('zh-cmn-Hant-TW');
	new language_tag('zh-Hant-TW');
	new language_tag('zh-TW');
	new language_tag('cmn-Hant');
	new language_tag('zh-Hant');
	new language_tag('x-CJK').language;
	new language_tag('zh-Hant').language;
	</code>
	 */

	// 語系代碼，應使用 language_tag.language_code(region) 的方法。
	// 主要的應該放後面。
	// mapping: region code (ISO 3166) → default language code (ISO 639)
	// https://en.wikipedia.org/wiki/Template:ISO_639_name
	language_tag.LANGUAGE_CODE = {
		// 中文
		ZH : 'zh',
		// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
		// Preferred-Value: cmn
		CN : 'cmn-Hans',
		// cmn-Hant-HK, yue-Hant-HK
		HK : 'cmn-Hant',
		TW : 'cmn-Hant',
		// ja-JP
		JP : 'ja',
		// ko-KR
		KR : 'ko',
		// en-GB
		GB : 'en',
		// There is no "en-UK" language code although it is often used on web
		// pages. http://microformats.org/wiki/en-uk
		// https://moz.com/community/q/uk-and-gb-when-selecting-targeted-engines-in-campaign-management
		UK : 'en',
		// en-US
		US : 'en',
		FR : 'fr',
		DE : 'de',
		// ru-RU
		RU : 'ru',
		// arb-Arab
		Arab : 'arb'
	};

	/**
	 * Get the default language code of region.
	 * 
	 * @param {String}region
	 *            region code (ISO 3166)
	 * @returns {String} language code (ISO 639)
	 */
	language_tag.language_code = function(region, regular_only) {
		var code = language_tag.LANGUAGE_CODE[language_tag.region_code(region)];
		if (!code
		// identity alias
		&& !language_tag.LANGUAGE_CODE[code = region.toLowerCase()]) {
			if (library_namespace.is_debug())
				library_namespace
						.warn('language_tag.language_code: 無法辨識之國家/區域：['
								+ region + ']');
			if (regular_only)
				return;
		}
		return code;
	}

	// mapping: region name → region code (ISO 3166)
	// https://en.wikipedia.org/wiki/ISO_3166-1
	// language_tag.region_code() 會自動測試添加"國"字，因此不用省略這個字。
	language_tag.REGION_CODE = {
		臺 : 'TW',
		臺灣 : 'TW',
		台 : 'TW',
		台灣 : 'TW',
		// for language_tag.LANGUAGE_CODE
		中文 : 'ZH',
		陸 : 'CN',
		大陸 : 'CN',
		中國 : 'CN',
		中國大陸 : 'CN',
		jpn : 'JP',
		日 : 'JP',
		日本 : 'JP',
		港 : 'HK',
		香港 : 'HK',
		韓國 : 'KR',
		英國 : 'GB',
		美國 : 'US',
		法國 : 'FR',
		德國 : 'DE',
		俄國 : 'RU',
		俄羅斯 : 'RU',
		阿拉伯 : 'Arab'
	};

	// reverse
	(function() {
		for ( var region_code in language_tag.REGION_CODE) {
			if ((region_code = language_tag.REGION_CODE[region_code])
			// identity alias: REGION_CODE[TW] = 'TW'
			&& !language_tag.REGION_CODE[region_code])
				language_tag.REGION_CODE[region_code] = region_code;
		}
		for ( var language_code in language_tag.LANGUAGE_CODE) {
			// reversed alias
			// e.g., ja → JP
			// e.g., cmn-hans → CN
			language_tag.REGION_CODE[language_tag.LANGUAGE_CODE[language_code]
					.toLowerCase()] = language_code;
		}
		// 因為下面的操作會改變 language_tag.LANGUAGE_CODE，因此不能與上面的同時操作。
		for ( var language_code in language_tag.LANGUAGE_CODE) {
			if ((language_code = language_tag.LANGUAGE_CODE[language_code])
			// identity alias
			&& !language_tag.LANGUAGE_CODE[language_code])
				language_tag.LANGUAGE_CODE[language_code] = language_code;
		}
	})();

	/**
	 * Get the default region code of region.
	 * 
	 * @param {String}region
	 *            region name
	 * @returns {String} region code (ISO 3166)
	 */
	language_tag.region_code = function(region, regular_only) {
		var code = language_tag.REGION_CODE[region];
		if (!code) {
			library_namespace.debug('嘗試解析 [' + region + ']。', 3,
					'language_tag.region_code');
			if (/^[a-z\-]+$/i.test(region)) {
				library_namespace.debug('嘗試 reversed alias 的部分。', 3,
						'language_tag.region_code');
				// language_code → region_code
				// e.g., cmn-Hant → search cmn-hant
				code = language_tag.REGION_CODE[region.toLowerCase()];

			} else if (code = region.match(/^(.+)[語文]$/)) {
				code = language_tag.REGION_CODE[code[1]]
				// e.g., 英語 → search 英國
				|| language_tag.REGION_CODE[code[1] + '國'];
			} else {
				// e.g., 英 → search 英國
				code = language_tag.REGION_CODE[region + '國'];
			}

			if (!code && (code = region.match(/-([a-z]{2,3})$/)))
				// e.g., zh-tw → search TW
				code = language_tag.REGION_CODE[code[1].toUpperCase()];

			if (!code
			// identity alias
			&& !language_tag.REGION_CODE[code = region.toUpperCase()]) {
				// 依舊無法成功。
				if (library_namespace.is_debug())
					library_namespace
							.warn('language_tag.region_code: 無法辨識之國家/區域：['
									+ region + ']');
				if (regular_only)
					return;
			}
		}
		return code;
	}

	_// JSDT:_module_
	.language_tag = language_tag;

	// -----------------------------------------------------------------------------------------------------------------
	// 各個 domain 結尾標點符號的轉換。

	var halfwidth_to_fullwidth_mapping = {
		'.' : '。'
	}, fullwidth_to_halfwidth_mapping = {
		'、' : ',',
		'。' : '.'
	};

	var PATTERN_language_code_is_CJK = /^(?:cmn|yue|ja)-/;

	function convert_punctuation_mark(punctuation_mark, domain_name) {
		if (!punctuation_mark)
			return punctuation_mark;

		// test domains_using_fullwidth_form
		if (PATTERN_language_code_is_CJK.test(domain_name)) {
			// 東亞標點符號。
			if (punctuation_mark in halfwidth_to_fullwidth_mapping) {
				return halfwidth_to_fullwidth_mapping[punctuation_mark];
			}

			if (/^ *\.{3,} *$/.test(punctuation_mark)) {
				// 中文預設標點符號前後無空白。
				punctuation_mark = punctuation_mark.trim();
				return '…'.repeat(punctuation_mark.length > 6 ? Math
						.ceil(punctuation_mark.length / 3) : 2);
			}

			if (/^ja-/.test(domain_name) && punctuation_mark === ',') {
				return '、';
			}

			if (punctuation_mark.length === 1) {
				// https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)
				var char_code = punctuation_mark.charCodeAt(0);
				if (char_code < 0xff) {
					return String.fromCharCode(char_code + 0xfee0);
				}
			}

		} else if (/^[^\x20-\xfe]/.test(punctuation_mark)) {
			if (punctuation_mark in fullwidth_to_halfwidth_mapping) {
				return fullwidth_to_halfwidth_mapping[punctuation_mark];
			}

			if (/^…+$/.test(punctuation_mark)) {
				return punctuation_mark.length > 2 ? '...'
						.repeat(punctuation_mark.length) : '...';
			}

			if (punctuation_mark.length === 1) {
				var char_code = punctuation_mark.charCodeAt(0);
				if (char_code > 0xfee0) {
					return String.fromCharCode(char_code - 0xfee0);
				}
			}
		}

		if (punctuation_mark.length > 1) {
			// PATTERN_punctuation_marks
			return punctuation_mark.replace(/%(\d)|(:)\s*|./g, function(p_m,
					NO, p_m_with_spaces) {
				if (NO)
					return p_m;
				if (p_m_with_spaces) {
					if (!PATTERN_language_code_is_CJK.test(domain_name))
						return p_m;
					p_m = p_m_with_spaces;
				}
				return convert_punctuation_mark(p_m, domain_name);
			});
		}

		return punctuation_mark;
	}

	// -----------------------------------------------------------------------------------------------------------------

	var plural_rules__domain_name = 'gettext_plural_rules';
	// plural_rules[language_code]
	// = [ #plural forms, function(){ return #plural form; } ]
	var plural_rules_of_language_code = Object.create(null);

	gettext.set_plural_rules = function set_plural_rules(plural_rules_Object) {
		for ( var language_code in plural_rules_Object) {
			var plural_rule = plural_rules_Object[language_code];
			language_code = gettext.to_standard(language_code);
			if (language_code) {
				plural_rules_of_language_code[language_code] = plural_rule;
			}// else: 尚未支援的語言。
		}
	};

	// ------------------------------------

	// matched: [ all behavior switch, is NO, NO ]
	var PATTERN_plural_switch_header = /\{\{PLURAL: *(%)?(\d+) *\|/,
	// matched: [ all behavior switch, previous, is NO, NO, parameters ]
	PATTERN_plural_switches_global = new RegExp('('
			+ PATTERN_plural_switch_header.source + ')'
			+ /([\s\S]+?)\}\}/.source, 'ig');

	// 處理 {{PLURAL:%1|summary|summaries}}
	// 處理 {{PLURAL:$1|1=you|$1 users including you}}
	// 處理 {{PLURAL:42|42=The answer is 42|Wrong answer|Wrong answers}}
	// https://raw.githubusercontent.com/wikimedia/mediawiki-extensions-Translate/master/data/plural-gettext.txt
	// https://translatewiki.net/wiki/Plural
	// https://docs.transifex.com/formats/gettext#plural-forms-in-a-po-file
	function adapt_plural(converted_text, value_list, domain_name) {
		var plural_count, plural_rule = plural_rules_of_language_code[domain_name];
		if (Array.isArray(plural_rule)) {
			plural_count = plural_rule[0];
			plural_rule = plural_rule[1];
		}
		// console.trace([ domain_name, plural_count, plural_rule ]);

		converted_text = converted_text.replace_till_stable(
		//
		PATTERN_plural_switches_global, function(all, _previous, is_NO, NO,
				parameters) {
			// https://translatewiki.net/wiki/Plural
			// And you can nest it freely
			// 自 end_mark 向前回溯。
			// TODO: using lookbehind search?
			var previous = '', nest_matched;
			while (nest_matched = parameters
					.match(PATTERN_plural_switch_header)) {
				previous += _previous
				//
				+ parameters.slice(0, nest_matched.index);
				_previous = nest_matched[0];
				is_NO = nest_matched[1];
				NO = nest_matched[2];
				parameters = parameters.slice(nest_matched.index
						+ _previous.length);
			}

			var value = is_NO ? value_list[NO] : NO;
			if (value < 0)
				value = -value;
			var plural_NO = (typeof plural_rule === 'function'
			//
			? plural_rule(+value) : plural_rule) + 1;

			var converted, default_converted, delta = 1;
			parameters = parameters.split('|');
			parameters.some(function(parameter, index) {
				var matched = parameter.match(/^(\d+)=([\s\S]*)$/);
				if (matched) {
					delta--;
					index = +matched[1];
					parameter = matched[2];
					if (index == value) {
						converted = parameter;
						return true;
					}
					if (!default_converted)
						default_converted = parameter;
					return;
				}

				index += delta;
				if (plural_NO >= 1) {
					if (index === plural_NO) {
						converted = parameter;
						// Do not return. Incase {{PLURAL:5|one|other|5=5}}
					} else if (index === 2 && plural_count !== 2
					// Special case. e.g., {{PLURAL:2||s}}
					// @ zh(plural_count=1), ru(3), NOT fr(2)
					&& value != 1 && parameters.length === 2) {
						converted = parameter;
						// assert: Should be the last element of parameters.
					} else {
						default_converted = parameter;
					}
					return;
				}

				/**
				 * https://translatewiki.net/wiki/Plural
				 * 
				 * If the number of forms written is less than the number of
				 * forms required by the plural rules of the language, the last
				 * available form will be used for all missing forms.
				 */
				default_converted = parameter;
				if (index == value) {
					converted = parameter;
					return true;
				}
			});

			return previous
			//
			+ (converted === undefined ? default_converted : converted);
		});

		return converted_text;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// JavaScript 國際化 i18n (Internationalization) / 在地化 本土化 l10n (Localization)
	// / 全球化 g11n (Globalization).

	/**
	 * 為各種不同 domain 轉換文字（句子）、轉成符合當地語言的訊息內容。包括但不僅限於各種語系。<br />
	 * 需要確認系統相應 domain resources 已載入時，請利用 gettext.use_domain(domain, callback)。
	 * 
	 * TODO: using localStorage.<br />
	 * https://translatewiki.net/wiki/Plural
	 * 
	 * @example <code>

	// More examples: see /_test suite/test.js

	 * </code>
	 * 
	 * @param {String|Function|Object}text_id
	 *            欲呼叫之 text id。<br /> ** 若未能取得，將直接使用此值。因此即使使用簡單的代號，也建議使用
	 *            msg#12, msg[12] 之類的表示法，而非直接以整數序號代替。<br />
	 *            嵌入式的一次性使用，不建議如此作法: { domain : text id }
	 * @param {String|Function}conversion_list
	 *            other conversion to include
	 * 
	 * @returns {String}轉換過的文字。
	 * 
	 * @since 2012/9/9 00:53:52
	 * 
	 * @see <a
	 *      href="http://stackoverflow.com/questions/48726/best-javascript-i18n-techniques-ajax-dates-times-numbers-currency"
	 *      accessdate="2012/9/9 0:13">Best JavaScript i18n techniques / Ajax -
	 *      dates, times, numbers, currency - Stack Overflow</a>,<br />
	 *      <a
	 *      href="http://stackoverflow.com/questions/3084675/internationalization-in-javascript"
	 *      accessdate="2012/9/9 0:13">Internationalization in Javascript -
	 *      Stack Overflow</a>,<br />
	 *      <a
	 *      href="http://stackoverflow.com/questions/9640630/javascript-i18n-internationalization-frameworks-libraries-for-clientside-use"
	 *      accessdate="2012/9/9 0:13">javascript i18n (internationalization)
	 *      frameworks/libraries for clientside use - Stack Overflow</a>,<br />
	 *      <a href="http://msdn.microsoft.com/en-us/library/txafckwd.aspx"
	 *      accessdate="2012/9/17 23:0">Composite Formatting</a>,
	 *      http://wiki.ecmascript.org/doku.php?id=strawman:string_format,
	 *      http://wiki.ecmascript.org/doku.php?id=strawman:string_format_take_two
	 */
	function gettext(/* message */text_id/* , ...value_list */) {
		// 轉換 / convert function.
		function convert(text_id, domain_specified) {
			// 未設定個別 domain 者，將以此訊息(text_id)顯示。
			// text_id 一般應採用原文(message of original language)，
			// 或最常用語言；亦可以代碼(message id)表示，但須設定所有可能使用的語言。
			// console.log(text_id);

			var prefix, postfix;
			if (library_namespace.is_debug(9)) {
				console.trace(domain);
			}

			// 注意: 在 text_id 與所屬 domain 之 converted_text 相同的情況下，
			// domain 中不會有這一筆記錄。
			// 因此無法以 `text_id in domain` 來判別 fallback。
			if (typeof text_id === 'function' || typeof text_id === 'object') {
				using_default = true;
			} else if (!(text_id in domain)) {
				var matched = String(text_id).match(
						PATTERN_message_with_tail_punctuation_mark);
				if (matched && (matched[2] in domain)) {
					prefix = matched[1];
					postfix = matched[3];
					text_id = matched[2];
				} else {
					using_default = true;
				}
			}
			if (!using_default) {
				text_id = domain[text_id];
				if (prefix) {
					text_id = convert_punctuation_mark(prefix, domain_name)
							+ text_id;
				}
				if (postfix
				// 預防翻譯後有結尾標點符號，但原文沒有的情況。但這情況其實應該警示。
				// && !PATTERN_message_with_tail_punctuation_mark.test(text_id)
				) {
					text_id += convert_punctuation_mark(postfix, domain_name);
				}
			}

			return typeof text_id === 'function' ? text_id(domain_name,
					value_list, domain_specified) : text_id;
		}

		function try_domain(_domain_name, recover) {
			var original_domain_data = [ domain_name, domain ];

			domain_name = _domain_name;
			// 在不明環境，如 node.js 中執行時，((gettext_texts[domain_name])) 可能為
			// undefined。
			domain = gettext_texts[domain_name] || Object.create(null);
			var _text = String(convert(library_namespace.is_Object(text_id) ? text_id[domain_name]
					: text_id));

			if (recover) {
				domain_name = original_domain_data[0];
				domain = original_domain_data[1];
			}
			return _text;
		}

		var value_list = arguments, length = value_list.length, using_default,
		// this: 本次轉換之特殊設定。
		domain_name = this && this.domain_name || gettext_domain_name,
		//
		domain, converted_text = try_domain(domain_name),
		// 強制轉換/必須轉換 force convert. e.g., 輸入 id，因此不能以 text_id 顯示。
		force_convert = using_default && this && (this.force_convert
		// for DOM
		|| this.getAttribute && this.getAttribute('force_convert'));

		// 設定 force_convert 時，最好先 `gettext.load_domain(force_convert)`
		// 以避免最後仍找不到任何一個可用的 domain。
		if (force_convert) {
			// force_convert: fallback_domain_name_list
			if (!Array.isArray(force_convert))
				force_convert = force_convert.split(',');
			force_convert.some(function(_domain_name) {
				_domain_name = gettext.to_standard(_domain_name);
				if (!_domain_name || _domain_name === domain_name)
					return;
				var _text = try_domain(_domain_name, true);
				if (!using_default) {
					domain_name = _domain_name;
					converted_text = _text;
					// using the first matched
					return true;
				}
			});
		}

		library_namespace
				.debug('Use domain_name: ' + domain_name, 6, 'gettext');

		converted_text = adapt_plural(converted_text, value_list, domain_name);

		if (length <= 1) {
			// assert: {String}converted_text
			return converted_text;
		}

		var text_list = [], matched, last_index = 0,
		// 允許 convert 出的結果為 object。
		has_object = false,
		// whole conversion specification:
		// %% || %index || %domain/index
		// || %\w(conversion format specifier)\d{1,2}(index)
		// || %[conversion specifications@]index
		//
		// 警告: index 以 "|" 終結，後接數字會被視為 patten 明確終結，並且 "|" 將被吃掉。
		// e.g., gettest("%1|123", 321) === "321123"
		// gettest("%1||123", 321) === "321||123"
		// TODO: 改成 %{index}, %{var_id}
		//
		// @see CeL.extract_literals()
		//
		// 採用 local variable，因為可能有 multithreading 的問題。
		conversion_pattern = /([\s\S]*?)%(?:(%)|(?:([^%@\s\/]+)\/)?(?:([^%@\s\d]{1,3})|([^%@]+)@)?(\d{1,2})(\|\d)?)/g;

		while (matched = conversion_pattern.exec(converted_text)) {
			if (matched[7]) {
				// 回吐最後一個 \d
				conversion_pattern.lastIndex--;
				// conversion_pattern.lastIndex -= matched[7].length
				// - '|'.length;
			}
			last_index = conversion_pattern.lastIndex;

			// matched:
			// 0: prefix + conversion, 1: prefix, 2: is_escaped "%",
			// 3: domain_specified, 4: format, 5: object_name, 6: argument NO,
			// 7: "|" + \d.
			var conversion = matched[0];

			if (matched[2]) {
				text_list.push(conversion);
				continue;
			}

			var NO = +matched[6], format = matched[4];
			if (NO < length && (!(format || (format = matched[5]))
			// 有設定 {String}format 的話，就必須在 gettext.conversion 中。
			|| (format in gettext.conversion))) {
				if (NO === 0)
					conversion = text_id;
				else {
					var domain_specified = matched[3],
					//
					domain_used = domain_specified
							&& gettext_texts[domain_specified];
					if (domain_used) {
						// 避免 %0 形成 infinite loop。
						var origin_domain = domain, origin_domain_name = domain_name;
						library_namespace.debug('臨時改變 domain: ' + domain_name
								+ '→' + domain_specified, 6, 'gettext');
						domain_name = domain_specified;
						domain = domain_used;
						conversion = convert(value_list[NO], domain_specified);
						library_namespace.debug('回存/回復 domain: ' + domain_name
								+ '→' + origin_domain_name, 6, 'gettext');
						domain_name = origin_domain_name;
						domain = origin_domain;
					} else {
						conversion = convert(value_list[NO]);
					}
				}

				if (format)
					conversion = Array.isArray(NO = gettext.conversion[format])
					//
					? gettext_conversion_Array(conversion, NO, format)
					// assert: gettext.conversion[format] is function
					: NO(conversion, domain_specified || domain_name);

			} else {
				library_namespace.warn('gettext: '
				//
				+ (NO < length ? 'Unknown format [' + format + ']'
				//
				: 'given too few arguments: ' + length + ' <= No. ' + NO));
			}

			if (typeof conversion === 'object') {
				has_object = true;
				text_list.push(matched[1], conversion);
			} else {
				// String(conversion): for Symbol value
				text_list.push(matched[1] + String(conversion));
			}
		}

		text_list.push(converted_text.slice(last_index));
		return has_object ? text_list : text_list.join('');
	}

	// matched: [ all, header punctuation mark, text_id / message, tail
	// punctuation mark ]
	var PATTERN_message_with_tail_punctuation_mark = /^(\.{3,}\s*)?([\s\S]+?)(\.{3,}|…+|:\s*(%\d)?|[,;:.?!~、，；：。？！～])$/;

	function trim_punctuation_marks(text) {
		var matched = text.match(PATTERN_message_with_tail_punctuation_mark);
		return matched ? matched[2] : text;
	}

	_.trim_punctuation_marks = trim_punctuation_marks;

	// ------------------------------------------------------------------------

	// 應對多個句子在不同語言下結合時使用。
	function Sentence_combination(sentence) {
		// call super constructor.
		// Array.call(this);

		var sentence_combination = this;
		if (sentence) {
			if (Array.isArray(sentence) && sentence.every(function(_sentence) {
				return Array.isArray(_sentence);
			})) {
				// e.g., new CeL.gettext.Sentence_combination(
				// [ [ 'message', p1 ], [ 'message' ] ])
				sentence_combination.append(sentence);
			} else {
				// e.g., new CeL.gettext.Sentence_combination(
				// [ 'message', p1, p2 ])
				sentence_combination.push(sentence);
			}
		}
	}

	function deep_convert(text) {
		if (!Array.isArray(text)) {
			return gettext(text);
		}

		// e.g., [ '%1 elapsed.', ['%1 s', 2] ]
		var converted = [ text[0] ];
		for (var index = 1; index < text.length; index++) {
			converted[index] = deep_convert(text[index]);
		}
		return gettext.apply(null, converted);
	}

	function Sentence_combination__converting() {
		var converted_list = [];
		this.forEach(function(sentence) {
			sentence = deep_convert(sentence);
			if (sentence)
				converted_list.push(sentence);
		});

		return converted_list;
	}

	// @see CeL.data.count_word()
	// 這些標點符號和下一句中間可以不用接空白字元。
	// /[\u4e00-\u9fa5]/: 匹配中文 RegExp。
	// https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)
	// https://arc-tech.hatenablog.com/entry/2021/01/20/105620
	// e.g., start quote marks
	var PATTERN_no_need_to_append_tail_space = /[\s—、，；：。？！（）［］｛｝「」『』〔〕【】〖〗〈〉《》“”‘’§(\[<{⟨‹«\u4e00-\u9fffぁ-んーァ-ヶ]$/;
	// e.g., end quote marks
	var PATTERN_no_need_to_add_header_space = /^[\s)\]>}⟩›»）］｝」』〕】〗〉》”’‰‱]/;

	function Sentence_combination__join(separator) {
		var converted_list = this.converting();
		if (separator || separator === '')
			return converted_list.join(separator);

		for (var index = 0; index < converted_list.length;) {
			var converted = converted_list[index];
			if (!converted
					|| PATTERN_no_need_to_append_tail_space.test(converted)) {
				++index;
				continue;
			}
			var next_sentence, original_index = index;
			while (++index < converted_list.length) {
				next_sentence = converted_list[index];
				if (next_sentence || next_sentence === 0) {
					if (!PATTERN_no_need_to_add_header_space
							.test(next_sentence)) {
						converted_list[original_index] += ' ';
					}
					break;
				}
			}
		}
		return converted_list.join('');
	}

	// https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/create
	Sentence_combination.prototype
	// 繼承一個父類別
	= Object.assign(Object.create(Array.prototype), {
		// 重新指定建構式
		constructor : Sentence_combination,
		converting : Sentence_combination__converting,
		join : Sentence_combination__join,
		toString : Sentence_combination__join
	});

	/**
	 * @example<code>

	messages = new gettext.Sentence_combination();
	messages.push(message, [ message ], [ message, arg_1, arg_2 ]);
	messages.toString();

	</code>
	 */
	gettext.Sentence_combination = Sentence_combination;

	function append_message_tail_space(text, options) {
		if (!options || typeof options === 'string' || !options.no_more_convert) {
			// Treat `options` as an argument to gettext.
			text = gettext.apply(null, arguments);
		}
		if (!text || PATTERN_no_need_to_append_tail_space.test(text)) {
			return text;
		}

		var next_sentence = options && options.next_sentence;
		return next_sentence
				&& !PATTERN_no_need_to_add_header_space.test(next_sentence)
				|| next_sentence === 0 ? text + ' ' : text;
	}

	gettext.append_message_tail_space = append_message_tail_space;

	// ------------------------------------------------------------------------

	// 不改變預設domain，直接取得特定domain的轉換過的文字。
	// 警告：需要確保系統相應 domain resources 已載入並設定好。
	gettext.in_domain = function(domain_name, text_id) {
		var options = typeof domain_name === 'object' ? domain_name
		//
		: typeof domain_name === 'string' ? {
			domain_name : gettext.to_standard(domain_name)
		} : {
			domain : domain_name
		};

		if (false && Array.isArray(text_id)) {
			return gettext.apply(options, text_id);
		}

		if (arguments.length <= 2) {
			// 沒有多餘的參數設定(e.g., %1, %2)。
			return gettext.call(options, text_id);
		}

		var value_list = Array.prototype.slice.call(arguments);
		value_list.shift();
		return gettext.apply(options, value_list);
	};

	/**
	 * 檢查指定資源是否已載入，若已完成，則執行 callback 序列。
	 * 
	 * @param {String}[domain_name]
	 *            設定當前使用之 domain name。
	 * @param {Integer}[type]
	 *            欲設定已載入/未載入之資源類型。
	 * @param {Boolean}[is_loaded]
	 *            設定/登記是否尚未載入之資源類型。
	 * @returns {Boolean} 此 type 是否已 loaded。
	 */
	function gettext_check_resources(domain_name, type, is_loaded) {
		if (!domain_name)
			domain_name = gettext_domain_name;

		var domain = gettext_resource[domain_name];
		if (!domain)
			gettext_resource[domain_name] = domain = Object.create(null);

		if (type)
			if (type = [ , 'system', 'user' ][type]) {
				if (typeof is_loaded === 'boolean') {
					library_namespace.debug('登記 [' + domain_name + '] 已經載入資源 ['
							+ type + ']。', 2, 'gettext_check_resources');
					domain[type] = is_loaded;
				}
			} else
				type = null;

		return type ? domain[type] : domain;
	}

	/**
	 * 當設定 conversion 為 Array 時，將預設採用此 function。<br />
	 * 可用在單數複數形式 (plural) 之表示上。
	 * 
	 * @param {Integer}amount
	 *            數量。
	 * @param {Array}conversion
	 *            用來轉換的 Array。
	 * @param {String}name
	 *            format name。
	 * 
	 * @returns {String} 轉換過的文字/句子。
	 */
	function gettext_conversion_Array(amount, conversion_Array, name) {
		var text,
		// index used.
		// TODO: check if amount < 0 or amount is not integer.
		index = amount < conversion_Array.length ? parseInt(amount)
				: conversion_Array.length - 1;

		if (index < 0) {
			library_namespace.debug({
				T : [ 'Negative index: %1', index ]
			});
			index = 1;
		} else
			while (index >= 0 && !(text = conversion_Array[index]))
				index--;

		if (!text || typeof text !== 'string') {
			library_namespace.warn({
				T : [ 'Nothing matched for amount [%1]', amount ]
			});
			return;
		}

		if (name)
			text = text.replace(/%n/g, name);

		return text.replace(/%d/g, amount);
	}

	/**
	 * 設定如何載入指定 domain resources，如語系檔。
	 * 
	 * @param {String|Function}path
	 *            (String) prefix of path to load.<br />
	 *            function(domain){return path to load;}
	 */
	gettext.use_domain_location = function(path) {
		if (typeof path === 'string') {
			gettext_domain_location = path;
			// 重設 user domain resources path。
			gettext_check_resources('', 2, false);
		}
		return gettext_domain_location;
	};
	/**
	 * 取得當前使用之 domain name。
	 * 
	 * @returns 當前使用之 domain name。
	 */
	gettext.get_domain_name = function() {
		return gettext_domain_name;
	};
	gettext.is_domain_name = function(domain_name) {
		return gettext_domain_name === gettext.to_standard(domain_name);
	};

	// force: 若 domain name 已經載入過，則再度載入。
	function load_domain(domain_name, callback, force) {
		var do_not_register = domain_name === plural_rules__domain_name;
		if (!domain_name || !do_not_register
				&& !(domain_name = gettext.to_standard(domain_name))) {
			// using the default domain name.
			domain_name = gettext.default_domain;
		}

		if (!domain_name || domain_name === gettext_domain_name && !force) {
			typeof callback === 'function' && callback(domain_name);
			return;
		}

		if (!(domain_name in gettext_texts) && !!do_not_register) {
			// initialization
			gettext_texts[domain_name] = Object.create(null);
		}

		var need_to_load = [];
		// TODO: use <a href="http://en.wikipedia.org/wiki/JSONP"
		// accessdate="2012/9/14 23:50">JSONP</a>
		if (!gettext_check_resources(domain_name, 1)) {
			library_namespace.debug('準備載入系統相應 domain resources。', 2, 'gettext');
			need_to_load.push(library_namespace.get_module_path(module_name,
			// resources/
			CeL.env.resources_directory_name + '/' + domain_name + '.js'),
			//
			function() {
				if (do_not_register)
					return;
				library_namespace.debug('Resources of module included.', 2,
						'gettext');
				gettext_check_resources(domain_name, 1, true);
			});
		}

		if (typeof gettext_domain_location === 'function') {
			gettext_domain_location = gettext_domain_location();
		}

		if (typeof gettext_domain_location === 'string'
		//
		&& !gettext_check_resources(domain_name, 2)) {
			library_namespace.debug('準備載入 user 指定 domain resources，如語系檔。', 2,
					'gettext');
			need_to_load.push(typeof gettext_domain_location === 'string'
			// 因 same-origin policy，採 .js 而非其他 file type 如 .json。
			? gettext_domain_location + domain_name + '.js'
					: gettext_domain_location(domain_name), function() {
				library_namespace.debug('User-defined resources included.', 2,
						'gettext');
				gettext_check_resources(domain_name, 2, true);
			});
		}

		if (need_to_load.length > 0) {
			// console.trace(need_to_load);
			library_namespace.debug('need_to_load: ' + need_to_load, 2,
					'load_domain');
			library_namespace.run(need_to_load, typeof callback === 'function'
					&& function() {
						library_namespace.debug('Running callback...', 2,
								'gettext');
						callback(domain_name);
					});
		} else {
			library_namespace.debug('Nothing to load.');
			gettext_check_resources(domain_name, 2, true);
		}
	}

	gettext.load_domain = load_domain;

	/**
	 * 取得/設定當前使用之 domain。
	 * 
	 * @example<code>

	// for i18n: define gettext() user domain resources path / location.
	// gettext() will auto load (CeL.env.domain_location + language + '.js').
	// e.g., resources/cmn-Hant-TW.js, resources/ja-JP.js
	CeL.gettext.use_domain_location(module.filename.replace(/[^\\\/]*$/,
			'resources' + CeL.env.path_separator));

	CeL.gettext.use_domain('GUESS', true);

	</code>
	 * 
	 * @param {String}[domain_name]
	 *            設定當前使用之 domain name。
	 * @param {Function}[callback]
	 *            回撥函式。 callback(domain_name)
	 * @param {Boolean}[force]
	 *            強制載入 flag。即使尚未載入此 domain，亦設定之並自動載入。但是若 domain name
	 *            已經載入過，則不會再度載入。
	 * 
	 * @returns {Object}當前使用之 domain。
	 */
	function use_domain(domain_name, callback, force) {
		if (typeof callback === 'boolean' && force === undefined) {
			// shift 掉 callback。
			force = callback;
			callback = undefined;
		}

		if (domain_name === 'GUESS') {
			domain_name = guess_language();
		}

		if (!domain_name) {
			domain_name = gettext_texts[gettext_domain_name];
			typeof callback === 'function' && callback(domain_name);
			// return domain used now.
			return domain_name;
		}

		// 查驗 domain_name 是否已載入。
		var is_loaded = domain_name in gettext_texts;
		if (!is_loaded) {
			is_loaded = gettext.to_standard(domain_name);
			if (is_loaded) {
				is_loaded = (domain_name = is_loaded) in gettext_texts;
			}
		}

		if (is_loaded) {
			gettext_domain_name = domain_name;
			library_namespace.debug({
				// gettext_config:{"id":"$1-is-loaded-setting-up-user-domain-resources-now"}
				T : [ '已載入過 [%1]，直接設定使用者自訂資源。', domain_name ]
			}, 2, 'gettext.use_domain');
			gettext_check_resources(domain_name, 2, true);
			typeof callback === 'function' && callback(domain_name);

		} else if (force && domain_name) {
			if (library_namespace.is_WWW()
					&& library_namespace.is_included('interact.DOM')) {
				// 顯示使用 domain name 之訊息：此時執行，仍無法改採新 domain 顯示訊息。
				library_namespace.debug({
					T : [ domain_name === gettext_domain_name
					// gettext_config:{"id":"force-loading-using-domain-locale-$2-($1)"}
					? '強制再次載入/使用 [%2] (%1) 領域/語系。'
					// gettext_config:{"id":"loading-using-domain-locale-$2-($1)"}
					: '載入/使用 [%2] (%1) 領域/語系。', domain_name,
							gettext.get_alias(domain_name) ]
				}, 1, 'gettext.use_domain');
			} else {
				library_namespace.debug(
				// re-load
				(domain_name === gettext_domain_name ? 'FORCE ' : '')
						+ 'Loading/Using domain/locale ['
						+ gettext.get_alias(domain_name) + '] (' + domain_name
						+ ').', 1, 'gettext.use_domain');
			}

			if (!(domain_name in gettext_texts)) {
				// 為確保回傳的是最終的domain，先初始化。
				gettext_texts[domain_name] = Object.create(null);
			}

			load_domain(domain_name, function() {
				gettext_domain_name = domain_name;
				typeof callback === 'function' && callback(domain_name);
			});

		} else {
			if (domain_name) {
				if (domain_name !== gettext_domain_name)
					library_namespace.warn({
						// gettext_config:{"id":"specified-domain-$1-is-not-yet-loaded.-you-may-need-to-set-the-force-flag"}
						T : [ '所指定之 domain [%1] 尚未載入，若有必要請使用強制載入 flag。',
								domain_name ]
					});

			} else if (typeof callback === 'function'
					&& library_namespace.is_debug())
				// gettext_config:{"id":"unable-to-distinguish-domain-but-set-callback"}
				library_namespace.warn('無法判別 domain，卻設定有 callback。');

			// 無論如何還是執行 callback。
			typeof callback === 'function' && callback(domain_name);
		}

		return gettext_texts[domain_name];
	}

	// using_domain
	gettext.use_domain = use_domain;

	function guess_language() {

		if (library_namespace.is_WWW()) {
			// http://stackoverflow.com/questions/1043339/javascript-for-detecting-browser-language-preference
			return gettext.to_standard(navigator.userLanguage
					|| navigator.language
					// || navigator.languages && navigator.languages[0]
					// IE 11
					|| navigator.browserLanguage || navigator.systemLanguage);
		}

		function exec(command, PATTERN, mapping) {
			try {
				// @see https://gist.github.com/kaizhu256/a4568cb7dac2912fc5ed
				// synchronously run system command in nodejs <= 0.10.x
				// https://github.com/gvarsanyi/sync-exec/blob/master/js/sync-exec.js
				// if (!require('child_process').execSync) { return; }

				var code = require('child_process').execSync(command, {
					stdio : 'pipe'
				}).toString();
				// console.trace([ command, code ]);
				if (PATTERN)
					code = code.match(PATTERN)[1];
				if (mapping)
					code = mapping[code];
				return gettext.to_standard(code);
			} catch (e) {
				// TODO: handle exception
			}
		}

		// console.trace(library_namespace.platform.is_Windows());
		if (library_namespace.platform.is_Windows()) {
			// TODO:
			// `REG QUERY HKLM\System\CurrentControlSet\Control\Nls\Language /v
			// InstallLanguage`

			// https://www.lisenet.com/2014/get-windows-system-information-via-wmi-command-line-wmic/
			// TODO: `wmic OS get Caption,CSDVersion,OSArchitecture,Version`
			// require('os').release()

			return exec(
					// https://docs.microsoft.com/zh-tw/powershell/module/international/get-winsystemlocale?view=win10-ps
					'PowerShell.exe -Command "& {Get-WinSystemLocale | Select-Object LCID}"',
					/(\d+)[^\d]*$/, guess_language.LCID_mapping)
					// WMIC is deprecated.
					// https://stackoverflow.com/questions/1610337/how-can-i-find-the-current-windows-language-from-cmd
					// get 非 Unicode 應用程式的語言與系統地區設定所定義的語言
					|| exec('WMIC.EXE OS GET CodeSet', /(\d+)[^\d]*$/,
							guess_language.code_page_mapping)
					// using windows active console code page
					// https://docs.microsoft.com/en-us/windows/console/console-code-pages
					// CHCP may get 65001, so we do not use this at first.
					|| exec('CHCP', /(\d+)[^\d]*$/,
							guess_language.code_page_mapping);
		}

		/**
		 * <code>

		@see https://www.itread01.com/content/1546711411.html

		TODO: detect process.env.TZ: node.js 設定測試環境使用

		GreenWich時間
		process.env.TZ = 'Europe/London';

		timezone = {
			'Europe/London' : 0,
			'Asia/Shanghai' : -8,
			'America/New_York' : 5
		};

		</code>
		 */

		var LANG = library_namespace.env.LANG;
		// e.g., LANG=zh_TW.Big5
		// en_US.UTF-8
		if (LANG)
			return gettext.to_standard(LANG);

		return exec('locale', /(?:^|\n)LANG=([^\n]+)/);
	}

	// https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/chcp
	guess_language.code_page_mapping = {
		437 : 'en-US',
		866 : 'ru-RU',
		932 : 'ja-JP',
		936 : 'cmn-Hans-CN',
		949 : 'ko-KR',
		950 : 'cmn-Hant-TW',
		1256 : 'arb-Arab',
		54936 : 'cmn-Hans-CN'
	// 65001: 'Unicode'
	};

	// https://zh.wikipedia.org/wiki/区域设置#列表
	guess_language.LCID_mapping = {
		1028 : 'cmn-Hant-TW',
		1033 : 'en-US',
		1041 : 'ja-JP',
		1042 : 'ko-KR',
		1049 : 'ru-RU',
		2052 : 'cmn-Hans-CN',
		2057 : 'en-GB',
		3076 : 'cmn-Hant-HK',
		14337 : 'arb-Arab'
	};

	gettext.guess_language = guess_language;

	/**
	 * 設定欲轉換的文字格式。
	 * 
	 * @param {Object}text_Object
	 *            文字格式。 {<br />
	 *            text id : text for this domain }<br />
	 *            函數以回傳文字格式。 {<br />
	 *            text id : function(domain name){ return text for this domain } }
	 * @param {String}[domain]
	 *            指定存入之 domain。
	 * @param {Boolean}[clean_and_replace]
	 *            是否直接覆蓋掉原先之 domain。
	 */
	gettext.set_text = function set_text(text_Object, domain, clean_and_replace) {
		if (!library_namespace.is_Object(text_Object))
			return;

		if (!domain)
			domain = gettext_domain_name;

		// normalize domain
		if (!(domain in gettext_texts))
			domain = gettext.to_standard(domain);
		// console.trace(domain);

		if (clean_and_replace || !(domain in gettext_texts)) {
			gettext_texts[domain] = text_Object;
		} else {
			// specify a new domain.
			// gettext_texts[domain] = Object.create(null);

			// CeL.set_method() 不覆蓋原有的設定。
			// library_namespace.set_method(gettext_texts[domain], text_Object);

			// 覆蓋原有的設定。
			Object.assign(gettext_texts[domain], text_Object);
		}
	};

	// ------------------------------------

	/**
	 * 取得 domain 別名。 若欲取得某個語言在其他語言中的名稱，應該設定好i18n，並以gettext()取得。
	 * 
	 * @param {String}[language]
	 *            指定之正規名稱。
	 * @returns {String} 主要使用之別名。
	 * @returns {Object} { 正規名稱 : 別名 }
	 */
	gettext.get_alias = function(language) {
		return arguments.length > 0 ? gettext_main_alias[language in gettext_main_alias ? language
				: gettext.to_standard(language)]
				: gettext_main_alias;
	};

	/**
	 * 設定 domain 別名。<br />
	 * 本函數會改變 {Object}list!
	 * 
	 * @param {Object}list
	 *            full alias list / 別名。 = {<br />
	 *            norm/criterion (IANA language tag) : [<br />
	 *            主要別名放在首個 (e.g., 當地使用之語言名稱),<br />
	 *            最常用之 language tag (e.g., IETF language tag),<br />
	 *            其他別名 / other aliases ] }
	 */
	gettext.set_alias = function(list) {
		if (!library_namespace.is_Object(list))
			return;

		/** {String}normalized domain name */
		var norm;
		/** {String}domain alias */
		var alias;
		/** {Array}domain alias list */
		var alias_list, i, l;
		for (norm in list) {
			alias_list = list[norm];
			if (typeof alias_list === 'string') {
				alias_list = alias_list.split('|');
			} else if (!Array.isArray(alias_list)) {
				library_namespace.warn([ 'gettext.set_alias: ', {
					// gettext_config:{"id":"illegal-domain-alias-list-$1"}
					T : [ 'Illegal domain alias list: [%1]', alias_list ]
				} ]);
				continue;
			}

			// 加入 norm 本身。
			alias_list.push(norm);

			for (i = 0, l = alias_list.length; i < l; i++) {
				alias = alias_list[i];
				if (!alias) {
					continue;
				}

				library_namespace.debug({
					// gettext_config:{"id":"adding-domain-alias-$1-→-$2"}
					T : [ 'Adding domain alias [%1] → [%2]...',
					//
					alias, norm ]
				}, 2, 'gettext.set_alias');
				if (!(norm in gettext_main_alias))
					gettext_main_alias[norm] = alias;

				// 正規化: 不分大小寫, _ → -
				alias = alias.replace(/_/g, '-').toLowerCase();
				alias.split(/-/).forEach(function(token) {
					if (!gettext_aliases[token])
						gettext_aliases[token] = [];
					if (!gettext_aliases[token].includes(norm))
						gettext_aliases[token].push(norm);
				});
				continue;

				// for fallback
				while (true) {
					gettext_aliases[alias] = norm;

					var index = alias.lastIndexOf('-');
					if (index < 1)
						break;
					alias = alias.slice(0, index);
				}
			}
		}
	};

	/**
	 * 將 domain 別名正規化，轉為正規/標準名稱。<br />
	 * to a standard form. normalize_domain_name().
	 * 
	 * TODO: fix CeL.gettext.to_standard('cmn-CN') ===
	 * CeL.gettext.to_standard('zh-CN')
	 * 
	 * @param {String}alias
	 *            指定之別名。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String} 正規名稱。
	 * @returns undefined : can't found.
	 */
	gettext.to_standard = function to_standard(alias, options) {
		if (typeof alias !== 'string')
			return;

		if (options === true) {
			options = {
				get_list : true
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		// 正規化: 不分大小寫, _ → -
		alias = alias.replace(/_/g, '-').toLowerCase();

		var candidates;
		alias.split(/-/)
		// 通常越後面的越有特殊性。
		.reverse().some(function(token) {
			if (!gettext_aliases[token])
				return;
			// console.log(token + ': ' +
			// JSON.stringify(gettext_aliases[token]));
			if (!candidates) {
				candidates = gettext_aliases[token];
				return;
			}

			// 取交集。
			candidates = Array.intersection(candidates,
			//
			gettext_aliases[token]);
			// console.log('candidates: ' + JSON.stringify(candidates));
			if (candidates.length < 2) {
				return true;
			}
		});

		return options.get_list ? candidates ? candidates.clone() : []
				: candidates && candidates[0];

		var index;
		// for fallback
		while (true) {
			library_namespace.debug({
				// gettext_config:{"id":"testing-domain-alias-$1"}
				T : [ 'Testing domain alias [%1]...', alias ]
			}, 6, 'gettext.to_standard');
			if (alias in gettext_aliases)
				return gettext_aliases[alias];

			index = alias.lastIndexOf('-');
			if (index < 1)
				return;
			alias = alias.slice(0, index);
		}
	};

	var time_zone_of = {
		// JST
		'ja-JP' : 9,
		// CST
		'cmn-Hans-CN' : 8,
		'cmn-Hant-TW' : 8
	};

	// @see String_to_Date.zone @ CeL.data.date
	function time_zone_of_language(language) {
		return language in time_zone_of ? time_zone_of[language]
				: time_zone_of[gettext.to_standard(language)];
	}

	_.time_zone_of_language = time_zone_of_language;

	function detect_HTML_language(HTML) {
		// e.g., <html xml:lang="ja" lang="ja">
		var matched = HTML.match(/<html ([^<>]+)>/);
		if (matched
				&& (matched = matched[1]
						.match(/lang=(?:"([^"]+)"|([^\s<>]+))/i))) {
			return gettext.to_standard(matched[1] || matched[2]);
		}

		matched = HTML.match(/<meta [^<>]+?content=(?:"([^"]+)"|([^\s<>]+))/i);
		if (matched
				&& (matched = (matched[1] || matched[2])
						.match(/charset=([^;]+)/))) {
			// TODO: combine CeL.data.character
			matched = matched[1];
			matched = {
				big5 : 'cmn-Hant-TW',
				gbk : 'cmn-Hans-CN',
				gb2312 : 'cmn-Hans-CN',
				eucjp : 'ja-JP',
				shiftjis : 'ja-JP',
				sjis : 'ja-JP'
			}[matched.toLowerCase().replace(/[\s\-]/g, '')] || matched;
			return gettext.to_standard(matched);
		}

		// Can't determine what language the html used.
	}

	_.detect_HTML_language = detect_HTML_language;

	// ------------------------------------
	// DOM 操作。

	/**
	 * 翻譯/轉換所有指定之 nodes。<br />
	 * translate all nodes to show in specified domain.
	 * 
	 * @param {String|NodeList|Array|HTMLElement}[filter]
	 *            指定 selector || nodes || node || default domain。
	 * 
	 * @example <code>

	//	###usage 2014/2/5

	//	###runtime translate all nodes to show in specified language
	//	including: interact.DOM will auto load application.locale.
	CeL.run('interact.DOM', function() {
		//	setup domain (language)
		CeL.gettext.use_domain(language);

		//	simple way to create a text node with language tag.
		CeL.new_node({ T : message }, node);

		// handle with document.title in IE 8.
		if (CeL.set_text.need_check_title)
			CeL.gettext.document_title = 'document_title';

		// translate all nodes to show in specified language (or default domain).
		CeL.gettext.translate_nodes();
	});

	 * </code>
	 */
	gettext.translate_nodes = function(filter) {
		if (library_namespace.for_nodes) {
			gettext_DOM_id = gettext.DOM_id_key;
			library_namespace.for_nodes(gettext.translate_node, filter);
		}
	};

	gettext.translate_node = function(node) {
		var dataset,
		// message id
		id, conversion, i = 0, key;
		try {
			// 為提高效率，不作檢查。
			dataset =
			// library_namespace.is_HTML_element(node) &&
			library_namespace.DOM_data && library_namespace.DOM_data(node)
					|| node.dataset;
			id =
			// dataset && dataset[gettext.DOM_id_key];
			dataset && dataset[gettext_DOM_id];

			if (!id && gettext.document_title) {
				if (node.tagName.toLowerCase() === 'title')
					// IE 8 中，除了 document.title，本工具大部分顯示皆能以 translate_nodes()
					// 處理。
					// 對 IE 8，需要先設定 gettext.document_title = '~';
					id = gettext.document_title;
				// 若是不需要設定 gettext.document_title，則將之納入 .dataset。
				if (!library_namespace.set_text.need_check_title) {
					library_namespace.DOM_data(node, gettext_DOM_id,
							gettext.document_title);
					delete gettext.document_title;
				}
			}

		} catch (e) {
			library_namespace.warn([ 'gettext.translate_node: ', {
				// gettext_config:{"id":"failed-to-extract-gettext-id"}
				T : 'Failed to extract gettext id.'
			} ]);
		}

		if (!dataset)
			return;

		var gettext_DOM_title_id = gettext_DOM_id + '_element_title';
		if (node.title && !dataset[gettext_DOM_title_id]
				&& gettext_texts[gettext_domain_name]
				&& (node.title in gettext_texts[gettext_domain_name])) {
			dataset[gettext_DOM_title_id] = node.title;
		}
		if (dataset[gettext_DOM_title_id]) {
			node.title = gettext(dataset[gettext_DOM_title_id]);
		}

		if (id) {
			conversion = [ id ];
			while ((key = gettext_DOM_id + ++i) in dataset)
				conversion.push(dataset[key]);
			if (node.on_language_changed)
				node.on_language_changed(conversion);
			else
				library_namespace.set_text(node, gettext
						.apply(node, conversion));
		} else if (node.on_language_changed) {
			// @see CeL.DOM.new_node()
			node.on_language_changed(conversion);
		}
	};
	// for DOM use.
	// <tag data-gettext="text id" data-gettext1="conversion 1"
	// data-gettext2="conversion 2" />
	gettext.DOM_id_key = gettext_DOM_id = 'gettext';
	gettext.DOM_separator = '|';

	gettext.adapt_domain = function(language, callback) {
		library_namespace.debug({
			// gettext_config:{"id":"loading-language-domain-$1"}
			T : [ 'Loading language / domain [%1]...', language ]
		}, 1, 'gettext.adapt_domain');

		gettext.use_domain(language, function() {
			library_namespace.debug({
				// gettext_config:{"id":"language-domain-$1-loaded"}
				T : [ 'Language / domain [%1] loaded.', language ]
			}, 1, 'gettext.adapt_domain');
			try {
				// 設置頁面語系。
				document.getElementsByTagName('html')[0].setAttribute('lang',
						language);
			} catch (e) {
			}
			if (library_namespace.is_WWW())
				gettext.translate_nodes();
			create_domain_menu.onchange.forEach(function(handler) {
				handler(language);
			});
			typeof callback === 'function' && callback(language);
		}, true);

		// 可能用於 element 中，直接用 return gettext.adapt_domain() 即可。
		return false;
	};

	// https://en.wikipedia.org/wiki/Regional_Indicator_Symbol
	var domain_flags = {
		'arb-Arab' : '🇦🇪'
	};

	/**
	 * create domain / language menu
	 * 
	 * @param node
	 * @param domain_Array
	 */
	function create_domain_menu(node, domain_Array, onchange) {
		if (!node || !domain_Array
		//
		|| !library_namespace.new_node) {
			return;
		}

		if (false) {
			// TODO
			library_namespace.error([ 'create_domain_menu: ', {
				// gettext_config:{"id":"cannot-find-menu-node-$1"}
				T : [ 'Cannot find menu node: [%1]', node ]
			} ]);
		}

		var menu = [],
		// default domain.
		tmp = gettext.get_domain_name();

		domain_Array.forEach(function(domain) {
			domain = gettext.to_standard(domain);
			var flag;
			if (domain in domain_flags) {
				flag = domain_flags[domain];
			} else if (flag = domain && domain.match(/-([A-Z]{2})$/)) {
				// using
				// https://en.wikipedia.org/wiki/Regional_Indicator_Symbol
				// '🇦🇧🇨🇩🇪🇫🇬🇭🇮🇯🇰🇱🇲🇳🇴🇵🇶🇷🇸🇹🇺🇻🇼🇽🇾🇿'.match(/./ug)
				var delta = '🇦'.codePointAt(0) - 'A'.codePointAt(0);
				flag = String.fromCodePoint.apply(null, flag[1].chars().map(
						function(_char) {
							return delta + _char.codePointAt(0);
						}));
			} else {
				flag = '';
			}

			var option = {
				option : flag + gettext.get_alias(domain),
				value : domain
			};
			if (domain === tmp)
				option.selected = true;
			menu.push(option);
		});

		menu = {
			select : menu,
			onchange : function(e) {
				gettext.adapt_domain(library_namespace.node_value(this));
			}
		};

		if (tmp = create_domain_menu.tag) {
			menu = [
			// '🗣',
			{
				T : tmp
			}, ': ', menu ];
		}

		if (typeof onchange === 'function')
			create_domain_menu.onchange.push(onchange);
		library_namespace.new_node(menu, node);
	}

	// gettext_config:{"id":"language"}
	create_domain_menu.tag = 'Language';
	create_domain_menu.onchange = [];

	gettext.create_menu = create_domain_menu;

	// ------------------------------------
	// conversion specifications (轉換規格). e.g., 各區文化特色 - 數字、貨幣、時間、日期格式。

	var allow_Chinese = {
		Chinese : true
	};

	function domain_name_for_conversion(domain_name, allowed) {
		if (allowed && (domain_name in allowed))
			return domain_name;
		return gettext.to_standard(domain_name || gettext_domain_name);
	}

	// 數字系統。numeral system.
	// 英文的基數
	gettext.numeral = function(attribute, domain_name) {
		domain_name = domain_name_for_conversion(domain_name, allow_Chinese);
		library_namespace.debug({
			// gettext_config:{"id":"convert-number-$1-to-$2-format"}
			T : [ '轉換數字：[%1]成 %2 格式。', attribute, domain_name ]
		}, 6);
		switch (domain_name) {
		case 'Chinese':
			return to_Chinese_numeral(attribute);

		case 'en-US':
			return library_namespace.to_English_numeral(attribute);

			// 一般民間使用，相較於中文數字，更常使用阿拉伯數字。
		case 'cmn-Hant-TW':

			// TODO: others

		default:
			return attribute;
		}
	};

	/**
	 * 小數點, radix point, decimal point, decimal mark, decimal separator, 小数点の記号.
	 * 
	 * @param {String}[domain_name]
	 *            設定當前使用之 domain name。
	 * 
	 * @returns {String} 指定/當前 domain 使用之小數點。
	 * 
	 * @see <a href="http://en.wikipedia.org/wiki/Decimal_mark"
	 *      accessdate="2012/9/22 10:7">Decimal mark</a>
	 */
	gettext.numeral.decimal_mark = function(domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		switch (domain_name) {
		case 'cmn-Hant-TW':
			// return '點';

			// TODO: others

		default:
			return '.';
		}
	};
	/**
	 * thousands separator, 千位分隔符, 桁区切りの記号.
	 * 
	 * @param {String}[domain_name]
	 *            設定當前使用之 domain name。
	 * 
	 * @returns {String} 指定/當前 domain 使用之 thousands separator。
	 * 
	 * @see <a href="http://en.wikipedia.org/wiki/Decimal_mark"
	 *      accessdate="2012/9/22 10:7">Decimal mark</a>
	 */
	gettext.numeral.thousands_separator = function(domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		switch (domain_name) {
		case 'cmn-Hant-TW':
			// return '';

			// TODO: others

		default:
			return ',';
		}
	};

	// 英文的序數
	// https://en.wikipedia.org/wiki/Ordinal_number_%28linguistics%29
	var English_ordinal_suffixes = [ 'th', 'st', 'nd', 'rd' ];

	if (false) {
		CeL.gettext('The %o1 year', 21);
	}
	gettext.ordinal = function(attribute, domain_name) {
		domain_name = domain_name_for_conversion(domain_name, allow_Chinese);
		switch (domain_name) {
		case 'Chinese':
			return '第' + gettext.numeral(attribute, domain_name);

			// TODO: others

		default:
			var ordinal = attribute | 0;
			if (ordinal !== attribute || ordinal < 1)
				return attribute;
			if (3 < attribute && attribute < 21) {
				ordinal = English_ordinal_suffixes[0];
			} else {
				ordinal = English_ordinal_suffixes[ordinal % 10]
				//
				|| English_ordinal_suffixes[0];
			}
			return attribute + ordinal;
		}
	};

	// 貨幣, 通貨.
	gettext.currency = function(attribute, domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		switch (domain_name) {
		case 'cmn-Hant-TW':
			// data.numeral.to_TWD()
			return library_namespace.to_TWD(attribute);

		case 'en-US':
			// try: '-34235678908765456789098765423545.34678908765'
			var add_comma = function(v) {
				// 使用
				// return v.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
				// 可能會比較快，但小數也被置換了。
				return v.replace(/(\d+)(\d{3}(?:[.,]|$))/,
				//
				function($0, $1, $2) {
					return add_comma($1) + ',' + $2;
				});
			};
			return add_comma('US$' + attribute);

			// TODO: others

		default:
			return attribute;
		}
	};

	// ------------------------------------

	// 工具函數。

	// https://commons.wikimedia.org/wiki/Module:I18n/complex_date

	function year_name(ordinal, domain_name) {
		domain_name = domain_name_for_conversion(domain_name, allow_Chinese);
		switch (domain_name) {
		case 'Chinese':
			// number to Chinese year name.
			if (ordinal == 1) {
				// 一年 → 元年
				return '元';
			}

			var prefix = '';
			if (ordinal < 0) {
				prefix = '前';
				ordinal = -ordinal;
			}
			return prefix
			//
			+ (ordinal > 99 ? to_positional_Chinese_numeral(ordinal)
			//
			: to_Chinese_numeral(ordinal));

		default:
			return ordinal;
		}
	}

	function month_name(ordinal, domain_name) {
		domain_name = domain_name_for_conversion(domain_name, allow_Chinese);
		switch (domain_name) {
		case 'Chinese':
			// number to Chinese month name.
			// TODO: 冬月, 臘月.
			return typeof ordinal === 'string'
			//
			? ordinal.replace(/\d+/, function($0) {
				return Chinese_month_name[$0];
			}) : Chinese_month_name[ordinal]
					|| to_positional_Chinese_numeral(ordinal);

		case 'en-US':
			// ordinal: 1–12
			return month_name[domain_name][ordinal];

		default:
			return ordinal;
		}
	}

	function date_name(ordinal, domain_name) {
		domain_name = domain_name_for_conversion(domain_name, allow_Chinese);
		switch (domain_name) {
		case 'Chinese':
			// number to Chinese date name.
			return Chinese_date_name[ordinal]
					|| to_positional_Chinese_numeral(ordinal);

		default:
			return ordinal;
		}
	}

	var is_Date = library_namespace.is_Date,
	// 中文月名: Chinese_month_name[1]=正
	Chinese_month_name = [ '', '正' ],
	// 中文日名: Chinese_date_name[1]=初一
	Chinese_date_name = [ '' ];

	// 初一, 初二, ..初十,十一..十九,二十,廿一,廿九,三十
	(function() {
		var i = 2, date_name;
		while (i <= 12)
			Chinese_month_name.push(to_Chinese_numeral(i++));
		// 一般還是以"十一月"稱冬月。
		// Chinese_month_name[11] = '冬';
		// Chinese_month_name[12] = '臘';

		for (i = 1; i <= 30;) {
			date_name = to_Chinese_numeral(i++);
			if (date_name.length < 2)
				date_name = '初' + date_name;
			else if (date_name.length > 2)
				date_name = date_name.replace(/二十/, '廿');
			Chinese_date_name.push(date_name);
		}
	})();

	Object
			.assign(
					month_name,
					{
						'en-US' : ',January,February,March,April,May,June,July,August,September,October,November,December'
								.split(','),
						Chinese : Chinese_month_name
					});

	function week_name(ordinal, domain_name, full_name) {
		// assert: ordinal: 0–6
		domain_name = domain_name_for_conversion(domain_name);
		switch (domain_name) {
		case 'cmn-Hant-TW':
		case 'cmn-Hans-CN':
			// number to Chinese week name.
			// 星期/週/禮拜
			// gettext_config:{"id":"week-day"}
			return (full_name ? '星期' : '') + week_name.cmn[ordinal];

		case 'ja-JP':
			// gettext_config:{"id":"week-day-(japanese)"}
			return week_name[domain_name][ordinal] + (full_name ? '曜日' : '');

		case 'en-US':
			var full_week_name = week_name[domain_name][ordinal];
			return full_name ? full_week_name : full_week_name.slice(0, 3);

		default:
			// unknown domain
			return ordinal;
		}
	}

	// CeL.gettext.date.week[*]
	Object.assign(week_name, {
		'en-US' : 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'
				.split(','),
		'ja-JP' : '日月火水木金土'.split(''),
		'cmn' : '日一二三四五六'.split('')
	});

	// 日期, 用於 strftime.default_conversion @ CeL.data.date
	// or: CeL.gettext('%d1', new Date())
	gettext.date = function(date, domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		if (date && !is_Date(date) && date.to_Date)
			date = date.to_Date(domain_name);

		if (!date || !date.format)
			// warning
			return date;

		switch (domain_name) {
		case 'cmn-Hant-TW':
			// 中文日期
			return date.format('%Y年%m月%d日', {
				locale : domain_name
			});
			// 19世紀80年代, 20世紀60年代

		default:
			return date;
		}
	};

	// CeL.set_method() 不覆蓋原有的設定。
	library_namespace.set_method(gettext.date, {
		year : year_name,
		month : month_name,
		date : date_name,
		week : week_name,
		full_week : function full_week_name(ordinal, domain_name) {
			return week_name(ordinal, domain_name, true);
		}
	});

	// 時間
	gettext.time = function(date, domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		if (date && !is_Date(date) && date.to_Date)
			date = date.to_Date(domain_name);

		if (!date || !date.format)
			// warning
			return date;

		switch (domain_name) {
		case 'cmn-Hant-TW':
			// 中文時間
			return date.format('%H時%M分%S秒', {
				locale : domain_name
			});

		default:
			return date;
		}
	};

	// 日期+時間
	gettext.datetime = function(date, domain_name) {
		domain_name = domain_name_for_conversion(domain_name);
		if (date && !is_Date(date) && date.to_Date)
			date = date.to_Date(domain_name);

		if (!date || !date.format)
			// warning
			return date;

		switch (domain_name) {
		case 'cmn-Hant-TW':
			// 中文日期+時間
			return date.format('%Y年%m月%d日 %H時%M分%S秒', {
				locale : domain_name
			});

		default:
			return date;
		}
	};

	// ------------------------------------

	// { format : function }
	gettext.conversion = {
		// 中文數字 (Chinese numerals)
		數 : function(number) {
			return to_Chinese_numeral(number);
		},
		// 大陆简体中文数字。
		数 : function(number, locale) {
			return locale === 'ja-JP' ? library_namespace
					.to_Japanese_numeral(number)
			//
			: to_Chinese_numeral(number).replace(/萬/, '万');
		},
		// 日本語の漢数字。
		漢数 : library_namespace.to_Japanese_numeral,

		// 加成。e.g., 打六折、二成、二成七。
		成 : function(number) {
			number = to_Chinese_numeral((10 * number).to_fixed(1));
			if (number.includes('點'))
				number = number.replace(/點/, '成');
			else
				number += '成';
			return number;
		},
		// e.g., 日本語 (Japanese): 2割5分
		// http://forum.wordreference.com/showthread.php?t=1292655
		// 1割: one tenth, 3割: three tenths
		// TODO: 割引: 5分引く (5% off), 1割引く (10% off), 1%割引
		割 : function(number) {
			number = to_Chinese_numeral((10 * number).to_fixed(1));
			if (number.includes('點'))
				number = number.replace(/點/, '割') + '分';
			else
				number += '割';
			return number;
		},
		// 打折扣/discount。e.g., 打六折、打七二折、30% off（30﹪折扣，70% on sale）。
		// https://zh.wikipedia.org/wiki/%E6%8A%98%E6%89%A3
		// "% off" may use "⁒ off" 'COMMERCIAL MINUS SIGN' (U+2052).
		// commercial minus sign is used in commercial or tax related forms or
		// publications in several European countries, including Germany and
		// Scandinavia.
		折 : function(number) {
			number = (100 * number).to_fixed(0);
			// check
			if (number !== (number | 0)
			//
			|| number < 10 || 99 < number) {
				// gettext_config:{"id":"unable-to-convert-number-$1"}
				throw gettext('無法轉換數字 [%1]！', number);
			}
			number = to_positional_Chinese_numeral(number)
					.replace(/(.)〇/, '$1');
			return number + '折';
		},

		// 基準利率 1碼 = 0.25% = 1 / 400，碼翻譯自 quarter。
		碼 : function(number) {
			return (400 * number) + '碼';
		},

		// https://en.wikipedia.org/wiki/Parts-per_notation
		// percentage (%), 百分比, ％（全形百分號）
		'％' : function(number) {
			return (100 * number).to_fixed() + '%';
		},
		// permille (‰), 千分率
		'‰' : function(number) {
			return (1000 * number).to_fixed() + '‰';
		},
		// permyriad (‱) (Basis point), 萬分率
		'‱' : function(number) {
			return (10000 * number).to_fixed() + '‱';
		},
		// ppm (parts-per-million, 10–6), ppb (parts-per-billion, 10–9),
		// ppt (parts-per-trillion, 10–12), ppq (parts-per-quadrillion, 10–15).

		// CeL.gettext('%d1', new Date())
		d : gettext.date,
		// CeL.gettext('%t1', new Date())
		t : gettext.time,
		// CeL.gettext('%T1', new Date())
		T : gettext.datetime,
		n : gettext.numeral,
		o : gettext.ordinal,
		// CeL.gettext('%c1', 1000000)
		c : gettext.currency
	};

	// ------------------------------------
	// initialization

	var gettext_DOM_id, gettext_main_alias = Object.create(null), gettext_aliases = {
	// MUST in lower case. @see gettext.to_standard
	// hans : ['cmn-Hans-CN'],
	// hant : ['cmn-Hant-TW']
	}
			&& Object.create(null),
	/**
	 * {Object}All domain data.<br />
	 * gettext_texts[domain name] = {"message":"l10n message"}
	 */
	gettext_texts = Object.create(null),
	/** {String}domain name used now */
	gettext_domain_name,
	// CeL.env.domain_location = CeL.env.resources_directory_name + '/';
	// CeL.gettext.use_domain_location(CeL.env.resources_directory_name + '/');
	gettext_domain_location = library_namespace.env.domain_location, gettext_resource = Object
			.create(null);

	// TODO: lazy evaluation

	// https://cloud.google.com/speech-to-text/docs/languages?hl=zh-tw
	// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

	// http://www.rfc-editor.org/rfc/bcp/bcp47.txt

	// http://www.w3.org/International/articles/bcp47/

	// http://suika.fam.cx/~wakaba/wiki/sw/n/BCP%2047

	// http://www.iana.org/protocols
	// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
	// http://www.iana.org/assignments/language-tag-extensions-registry

	// http://www-01.sil.org/iso639-3/documentation.asp?id=cmn
	// http://www.ethnologue.com/language/cmn

	// http://schneegans.de/lv/

	// https://github.com/unicode-cldr/cldr-localenames-modern
	gettext.default_domain = {
		/**
		 * 最推薦之標準 language tag : '主要別名 (e.g., 當地使用之語言名稱)|最常用之 language tag
		 * (e.g., IETF language tag)|其他別名 / other aliases (e.g., 英文名稱, 最細分之標準
		 * language tag)'
		 */

		// ar-AE: 阿拉伯文 (阿拉伯聯合大公國)
		// ar-SA: 阿拉伯文 (沙烏地阿拉伯)
		'arb-Arab' : 'العربية|ar|Arabic|阿拉伯語|ar-arb-Arab|ar-AE|ar-SA',

		// 現代標準漢語
		'cmn-Hant-TW' : '繁體中文|zh-TW|繁體|zh-cmn-Hant-TW|TW|Hant|Chinese|傳統中文|正體中文|正體|漢語|華語|中文|中國|臺灣|台灣|官話|中華民國國語|Traditional Chinese',

		// Subtag: cmn, Preferred-Value: cmn
		'cmn-Hans-CN' : '简体中文|zh-CN|简体|zh-cmn-Hans-CN|CN|Hans|Chinese|简化字|简化中文|簡化字|簡體中文|普通话|中国|中国大陆|官话|Simplified Chinese|Mandarin Chinese',

		'cmn-Hant-HK' : '香港普通話|zh-yue-Hant-HK|Cantonese|香港華語|香港官話',

		// Min Nan Chinese. Macrolanguage: zh.
		// zh-min-nan:
		// http://taigi-pahkho.wikia.com/wiki/%E9%A0%AD%E9%A0%81
		// using 臺灣閩南語推薦用字
		'nan-Hant-TW' :
		//
		'臺灣閩南語|min-nan-Hant-TW|Taiwanese|zh-min-nan|zh-min-nan-Hant-TW|臺語|台語|臺灣話|台灣話|閩南語|河洛話|福老話',

		// 粵語審音配詞字庫 http://humanum.arts.cuhk.edu.hk/Lexis/lexi-can/
		'yue-Hant-HK' : '香港粵語|zh-yue-Hant-HK|Hong Kong Cantonese|港式粵語|香港話|港式廣東話|港式廣州話',

		// 前面的會覆蓋後來的，前面的優先度較高。
		'en-US' : 'English|en-US|英語|en-eng-Latn-US|en-Latn-US|eng-Latn-US|US|USA|United States|美語|美國英語|美式英語',

		/**
		 * Subtag: en, Suppress-Script: Latn
		 * 
		 * "zh-Hant" and "zh-Hans" represent Chinese written in Traditional and
		 * Simplified scripts respectively, while the language subtag "en" has a
		 * "Suppress-Script" field in the registry indicating that most English
		 * texts are written in the Latin script, discouraging a tag such as
		 * "en-Latn-US".
		 * 
		 * @see https://www.w3.org/International/articles/bcp47/
		 */
		'en-GB' : 'British English|en-GB|英國英語|en-eng-Latn-GB|en-Latn-GB|eng-Latn-GB|en-UK|Great Britain|United Kingdom|英式英語',

		// Subtag: ja, Suppress-Script: Jpan
		'ja-JP' : '日本語|ja-JP|Japanese|日語|日文|国語|日本|JP|ja-jpn-Jpan-JP|ja-Jpan-JP|jpn-Jpan-JP',

		// Subtag: ko, Suppress-Script: Kore
		'ko-KR' : '한국어|ko-KR|Korean|韓國語|조선어|朝鮮語|조선말|고려말|韓文|韓語|ko-kor-Kore-KR|ko-Kore-KR|kor-Kore-KR|KR',

		'th-TH' : 'ไทย|th-TH|Thai|泰語|泰國',

		// Subtag: ru, Suppress-Script: Cyrl
		'ru-RU' : 'Русский|ru-RU|Russian|俄語|rus-Cyrl-RU|ru-rus-Cyrl-RU|RU',
		// Tuvan language tyv-RU-TY https://en.wikipedia.org/wiki/ISO_3166-2:RU
		'tyv-RU' : 'Тыва дыл|tyv-RU-TY|Tuvan|圖瓦語',

		'fr-FR' : 'Français|fr-FR|French|法語',

		'de-DE' : 'Deutsch|de-DE|German|德語',

		'es-ES' : 'Español|es-ES|Spanish|西班牙語',

		'pt-BR' : 'Português|pt-BR|Brazilian Portuguese|巴西葡萄牙語|葡萄牙語|Português brasileiro',

		// Dutch language
		'nl-NL' : 'Nederlands|nl-NL|Dutch|荷蘭語',

		// Swedish language
		'sv-SE' : 'Svenska|sv-SE|Swedish|瑞典語',

		// Macedonian language
		'mk-MK' : 'Македонски јазик|mk-MK|Macedonian|馬其頓語',

		'kn-IN' : 'ಕನ್ನಡ|kn-IN|Kannada|康納達語',
		// Kashmiri language
		// https://en.wikipedia.org/wiki/Jammu_and_Kashmir_(union_territory)
		'ks-IN' : 'کٲشِر|ks-IN-JK|Kashmiri|喀什米爾語',

		// Gun language
		'guw-BJ' : 'gungbe|guw-BJ|Gun|康納達語',

		'lb-LU' : 'Lëtzebuergesch|lb-LU|Luxembourgish|盧森堡語',

		// Piedmontese language
		'pms-IT' : 'Piemontèis|pms-IT|Piedmontese|皮埃蒙特語'
	};
	gettext.set_alias(gettext.default_domain);

	// 初始化偏好的語言/優先言語。
	// setup default / current domain. ユーザーロケール(言語と地域)の判定。
	gettext.default_domain = guess_language();
	// console.log('setup default / current domain: ' + gettext.default_domain);
	// initialization 時，gettext 可能還沒 loaded。
	// 因此設在 post action。e.g., @ HTA.
	this.finish = function(name_space, waiting) {
		// 無論如何都該載入複數規則。
		load_domain(plural_rules__domain_name);

		// console.trace(gettext.default_domain);

		if (!gettext.default_domain) {
			return;
		}

		gettext.use_domain(gettext.default_domain, function() {
			gettext.adapt_domain(gettext.default_domain, waiting);
		}, true);
		return waiting;
	};

	// console.log(gettext_aliases);

	_// JSDT:_module_
	.gettext = gettext;

	// -----------------------------------------------------------------------------------------------------------------
	// 常用漢字↔旧字体/正字体/旧漢字
	// https://ja.wikipedia.org/wiki/%E5%B8%B8%E7%94%A8%E6%BC%A2%E5%AD%97

	var 旧字体_RegExp = [], 常用漢字_RegExp = [],
	// from https://github.com/marionette-of-u/RevText/blob/master/Program.cs
	旧字体 = "萬與兩竝乘亂龜豫爭亙亞佛假會傳體餘倂價侮儉僞僧免兒黨圓册寫處劍劑剩勵勞效敕勉勤勸勳區醫卑單卽嚴參雙收敍臺號喝營嘆囑器團圍圖國圈壓墮塀壘塚鹽增墨壞壤壯聲壹賣變奧奬孃學寶實寬寢對壽專將堯盡屆屬層嶽峽巖巢卷帶歸廳廣廢廊辨瓣辯貳彌彈當徑從德徵應戀恆惠悔惱惡慘愼慨憎懷懲戰戲戾拂拔擇擔拜據擴擧挾插搜揭搖攝擊敏數齊齋斷既舊晝晉晚曉暑曆朗條來樞榮櫻棧梅檢樓樂槪樣槇權橫欄缺歐歡步齒歷殘毆殺殼每氣沒澤淨淺濱海淚渴濟涉澁溪渚溫灣濕滿瀧滯漢潛瀨燈爐點爲燒煮犧狀獨狹獵猪獻獸琢瑤甁畫疊癡發盜縣眞硏碎碑禮社祈祉祐祖祝神祥祿禪禍禎福祕稱稻穀穗穩穰突竊龍節粹肅絲經繪繼續總綠緖練緣繩縱繁纖罐署飜者聰聽膽腦臟臭舍舖艷藝莖莊著藏薰藥虛虜蟲蠶螢蠻衞裝褐襃霸視覺覽觀觸譯證譽讀諸謁謠謹讓豐賓贊贈踐轉輕辭邊遞逸遲遙郞鄕都醉釀釋鐵鑛錢鑄鍊錄鎭關鬪陷險隆隨隱隸雜難靈靜響頻賴顏顯類飮驛驅騷驗髓髮鷄麥黃黑默齡"
			.split(''),
	//
	常用漢字 = "万与両並乗乱亀予争亘亜仏仮会伝体余併価侮倹偽僧免児党円冊写処剣剤剰励労効勅勉勤勧勲区医卑単即厳参双収叙台号喝営嘆嘱器団囲図国圏圧堕塀塁塚塩増墨壊壌壮声壱売変奥奨嬢学宝実寛寝対寿専将尭尽届属層岳峡巌巣巻帯帰庁広廃廊弁弁弁弐弥弾当径従徳徴応恋恒恵悔悩悪惨慎慨憎懐懲戦戯戻払抜択担拝拠拡挙挟挿捜掲揺摂撃敏数斉斎断既旧昼晋晩暁暑暦朗条来枢栄桜桟梅検楼楽概様槙権横欄欠欧歓歩歯歴残殴殺殻毎気没沢浄浅浜海涙渇済渉渋渓渚温湾湿満滝滞漢潜瀬灯炉点為焼煮犠状独狭猟猪献獣琢瑶瓶画畳痴発盗県真研砕碑礼社祈祉祐祖祝神祥禄禅禍禎福秘称稲穀穂穏穣突窃竜節粋粛糸経絵継続総緑緒練縁縄縦繁繊缶署翻者聡聴胆脳臓臭舎舗艶芸茎荘著蔵薫薬虚虜虫蚕蛍蛮衛装褐褒覇視覚覧観触訳証誉読諸謁謡謹譲豊賓賛贈践転軽辞辺逓逸遅遥郎郷都酔醸釈鉄鉱銭鋳錬録鎮関闘陥険隆随隠隷雑難霊静響頻頼顔顕類飲駅駆騒験髄髪鶏麦黄黒黙齢"
			.split('');

	旧字体.forEach(function(character) {
		旧字体_RegExp.push(new RegExp(character, 'g'));
	});

	常用漢字.forEach(function(character) {
		常用漢字_RegExp.push(new RegExp(character, 'g'));
	});

	// http://stackoverflow.com/questions/12562043/fastest-way-to-replace-string-in-js
	function to_旧字体(text) {
		常用漢字_RegExp.forEach(function(pattern, index) {
			text = text.replace(pattern, 旧字体[index]);
		});
		return text;
	}

	function to_常用漢字(text) {
		旧字体_RegExp.forEach(function(pattern, index) {
			text = text.replace(pattern, 常用漢字[index]);
		});
		return text;
	}

	_.to_旧字体 = to_旧字体;
	_.to_常用漢字 = to_常用漢字;

	// -----------------------------------------------------------------------------------------------------------------

	return (_// JSDT:_module_
	);
}

});
// interact.DOM
/**
 * @name CeL function for World Wide Web (www, W3)
 * @fileoverview 本檔案包含了 www 的 functions。
 * 
 * <code>
	http://www.comsharp.com/GetKnowledge/zh-CN/It_News_K902.aspx
	http://www.nczonline.net/blog/2010/01/12/history-of-the-user-agent-string/
	當 IE 初次推出它們的 User Agent 標誌的時候，是這個樣子：
	MSIE/3.0 (Win95; U)

	TODO:
	don't use .innerHTML
	通盤確認所有 HTMLElement 變數已經設成 null


	功能探測 vs 瀏覽器探測
	http://www.comsharp.com/GetKnowledge/zh-CN/It_News_K987.aspx
	Mark Pilgrim 有一個清單，它可以讓你探測任何功能。
	http://diveintohtml5.org/everything.html


	JQuery LazyLoad實現圖片延遲加載-探究 - jackchain - 博客園
	http://www.cnblogs.com/qidian10/archive/2011/08/17/2143081.html
	JavaScript & images LazyLoad 图片延迟加载(伪lazyload) - I'm qiqiboy !
	http://www.qiqiboy.com/2011/04/12/javascript-and-images-lazyload.html
	改造jQuery lazyLoad插件_ 前端開發_ JavaScript
	http://www.popo4j.com/qianduan/transformation_jquery_lazyload_plug.html
	在圖片尺寸比較大的情況下，圖片加載較慢，因此請求會被攔截，並且保留客戶端數據，在下次Img標籤加載Load方法的時候，可以繼續請求圖片數據
	</code>
 * 
 * @since
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'interact.DOM',

	// data.code.compatibility.trim
	require : 'data.code.compatibility.' + '|data.code.|data.native.'
	//
	+ '|data.split_String_to_Object'
	//
	+ '|application.locale.gettext',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	var module_name = this.id,
	// requiring
	split_String_to_Object = this.r('split_String_to_Object'), gettext = this
			.r('gettext');

	/**
	 * null module constructor
	 * 
	 * @class web 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// HTML only -------------------------------------------------------

	// https://stackoverflow.com/questions/50840168/how-to-detect-if-the-os-is-in-dark-mode-in-browsers
	// https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia
	if (library_namespace.is_WWW(true) && window.matchMedia) {
		// https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme
		// or: @media (prefers-color-scheme: light) { body { ... } }
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			// CeL.DOM.navigator_theme
			_.navigator_theme = 'dark';
		} else if (window.matchMedia('(prefers-color-scheme: light)').matches) {
			_.navigator_theme = 'light';
		} else {
			// _.navigator_theme = 'no-preference';
		}
	}

	/**
	 * NodeType: const unsigned short.
	 * 
	 * @see http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1950641247
	 *      http://www.w3.org/TR/DOM-Level-2-Core/core.html
	 *      ELEMENT_NODE,ATTRIBUTE_NODE,TEXT_NODE,CDATA_SECTION_NODE,ENTITY_REFERENCE_NODE,ENTITY_NODE,PROCESSING_INSTRUCTION_NODE,COMMENT_NODE,DOCUMENT_NODE,DOCUMENT_TYPE_NODE,DOCUMENT_FRAGMENT_NODE,NOTATION_NODE
	 * @inner
	 */
	var ELEMENT_NODE = 1,
	//
	TEXT_NODE = 3,
	//
	DOCUMENT_NODE = 9;

	if (library_namespace.is_WWW(true) &&
	// IE8: undefined
	!isNaN(document.ELEMENT_NODE))
		ELEMENT_NODE = document.ELEMENT_NODE, TEXT_NODE = document.TEXT_NODE,
				DOCUMENT_NODE = document.DOCUMENT_NODE;

	// w3.org namespaces base
	var W3C_BASE = 'http://www.w3.org/';
	if (!W3C_BASE.startsWith('http')) {
		/**
		 * 修改以適應 web.archive.org. Under archive.org, it will change to something
		 * like '/web/20140814093917/http://www.w3.org/'.
		 */
		W3C_BASE = W3C_BASE.slice(W3C_BASE.indexOf('http'));
	}

	// IE 中 Object.prototype.toString.call(HTML Element)==='[object Object]', 得用
	// ''+node
	var get_object_type = Object.prototype.toString,
	//
	element_pattern = /^\[object HTML([A-U][A-Za-z]{1,15})?Element\]$/;

	_// JSDT:_module_
	.
	/**
	 * 判斷是否為 HTML 之 element，包括一般 ELEMENT_NODE 以及 TEXT_NODE。 e.g., object
	 * instanceof HTMLLIElement
	 * 
	 * @param object
	 *            object to test
	 * @returns {Boolean} object is HTML Element
	 * @since 2010/6/23 02:32:41
	 * @_memberOf _module_
	 * @see http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-58190037,
	 *      http://www.w3.org/DOM/
	 */
	is_HTML_element = function(object) {
		var type = get_object_type.call(object);
		// return type.indexOf('[object HTML') === 0;
		return element_pattern.test(type) || '[object Text]' === type
				&& object.nodeType === TEXT_NODE;
	};

	_// JSDT:_module_
	.
	/**
	 * 判斷為指定 nodeType 之 HTML Element。
	 * 
	 * @param object
	 *            object to test
	 * @param test_type
	 *            type to test
	 * @returns {Boolean} object is the type of HTML Element
	 * @since 2010/6/23 02:32:41
	 * @_memberOf _module_
	 * @see http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-58190037,
	 *      http://www.w3.org/DOM/
	 */
	is_HTML_element_type = function(object, test_type) {
		var type = get_object_type.call(object);
		return test_type === TEXT_NODE ? '[object Text]' === type
				&& object.nodeType === TEXT_NODE
				: object.nodeType === test_type
						&& (test_type === DOCUMENT_NODE || element_pattern
								.test(type));
	};

	_// JSDT:_module_
	.
	/**
	 * 判斷是否為 DOM node。<br />
	 * 包含 TEXT_NODE, DOCUMENT_NODE, SVG element 等。
	 * 
	 * @param object
	 *            object to test
	 * @returns {Boolean} object is DOM node
	 * @since 2014/11/4 18:40:30
	 * @_memberOf _module_
	 * @see http://www.w3.org/DOM/
	 */
	is_DOM_NODE = function(object) {
		return object
		// && object.nodeType > 0
		&& object.nodeType === (object.nodeType | 0)
		// SVG element 無 .getElementById()，有 .getElementsByTagName()。
		// IE8 無 .getElementsByTagName()。
		// && typeof object.getElementsByTagName === 'function';
		&& ('nextSibling' in object);
	};

	_// JSDT:_module_
	.
	/**
	 * 判斷是否為 <a
	 * href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node-ELEMENT_NODE">ELEMENT_NODE</a>。<br />
	 * 不包含 TEXT_NODE, DOCUMENT_NODE 等。
	 * 
	 * @param object
	 *            object to test
	 * @returns {Boolean} object is HTML Element
	 * @since 2010/6/23 02:32:41
	 * @_memberOf _module_
	 * @see http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-58190037,
	 *      http://www.w3.org/DOM/
	 */
	is_ELEMENT_NODE = function(object) {
		if (false)
			library_namespace
					.debug('Test '
							+ get_object_type.call(object)
							+ ' '
							+ ((typeof object === 'object' || typeof object === 'function')
									&& object.nodeType || '')
							+ ': '
							+ element_pattern
									.test(get_object_type.call(object)) + ','
							+ (object.nodeType === 1));
		return element_pattern.test(get_object_type.call(object))
				&& object.nodeType === ELEMENT_NODE;
	};

	// IE8: [object Object]
	var DOCUMENT_TYPE = library_namespace.is_WWW()
			&& get_object_type.call(document) || '[object HTMLDocument]';
	_// JSDT:_module_
	.is_DOCUMENT_NODE = function(object) {
		// element_pattern 不能用在 DOCUMENT_NODE。
		// return _.is_HTML_element_type(object, DOCUMENT_NODE);

		if (false && object)
			library_namespace.debug('type: ' + get_object_type.call(object)
					+ ', nodeType=' + object.nodeType);
		return get_object_type.call(object) === DOCUMENT_TYPE
				&& object.nodeType === DOCUMENT_NODE;
	};

	_// JSDT:_module_
	.
	/**
	 * 判斷是否為 <a
	 * href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-536297177">NodeList</a>。<br>
	 * 
	 * @param object
	 *            object to test
	 * @returns {Boolean} if is NodeList
	 * @since 2012/3/4
	 * @_memberOf _module_
	 * @see http://stackoverflow.com/questions/7238177/detect-htmlcollection-nodelist-in-javascript<br />
	 *      http://www.webdeveloper.com/forum/showthread.php?t=239887
	 */
	is_NodeList = function(object) {
		var type = get_object_type.call(object);
		return type === '[object NodeList]'
		// 依2012現行實作，部分 browser 對 .getElementsByTagName() 之類所得為 NodeList。
		// https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagName
		// http://www.w3.org/TR/domcore/#dom-document-getelementsbytagname
		|| type === '[object HTMLCollection]';
	};

	// &nbsp; \u00a0
	var NBSP = '\xa0';

	_.NBSP = NBSP;

	if (false)
		string = string.replace(/ /g, CeL.DOM.NBSP);

	/**
	 * <code>
	 debug 用。

	 IE5DOM @ IE9 test:
	 IE7DOM @ IE9 test:
	 node <DIV>: type object, toString.call: [object Object], ""+node: [object], nodeType: 1:

	 IE8:
	 IE8DOM @ IE9 test:
	 IE9DOM @ IE9 test:
	 node <DIV>: type object, toString.call: [object Object], ""+node: [object HTMLDivElement], nodeType: 1:

	 IE8:
	 node <A>: type object, toString.call: [object Object], ""+node: , nodeType: 1:
	 node <OBJECT>: type object, toString.call: [object Object], ""+node: [object], nodeType: 1:

	 </code>
	 */
	function show_node(node) {
		var type = get_object_type.call(node);
		if (_.is_NodeList(node)) {
			library_namespace.debug(node.length + ' node list ' + type + ': '
					+ node[0] + '...', 1, 'show_node');
		} else if (_.is_ELEMENT_NODE(node)) {
			library_namespace.debug('node'
			//
			+ (node.tagName ? ' &lt;' + node.tagName
			//
			+ (node.id ? '#' + node.id : '') + '&gt;' : '')
			//
			+ ': type ' + typeof node + ', toString.call: ' + type
			//
			+ ', ""+node: ' + ('' + node) + ', nodeType: ' + node.nodeType
			//
			+ ('outerHTML' in node ? ': ' + node.outerHTML
			//
			: 'innerHTML' in node ? ': ' + node.innerHTML : ''),
			//
			1, 'show_node');
		} else {
			library_namespace
					.debug(
							type
									+ (node && typeof node === 'object' ? '.nodeType = '
											+ node.nodeType
											+ (node.nodeType === DOCUMENT_NODE ? ' (DOCUMENT_NODE)'
													: '')
											: ''), 1, 'show_node');
			if (node.nodeType === DOCUMENT_NODE) {
				library_namespace.debug('wondow.document.body: ['
						+ node.body.innerHTML.replace(/</g, '&lt;') + ']', 3,
						'show_node');
			}
		}
	}

	(function() {
		try {
			// workaround for IE, 因用 General type, 效能較差
			var d = window.document.createElement('div'), s;
			if (false)
				alert('toString test: '
						+ element_pattern.test(get_object_type.call(d)));

			if (d.nodeType !== ELEMENT_NODE) {
				// doesn't support W3C DOM?
				throw 0;
			}

			try {
				// IE8 中使用 d.getElementsByName('n') 會失效，_.is_NodeList(s) ===
				// true。
				s = d.getElementsByTagName('div');
				if (!_.is_NodeList(s)
						&& get_object_type.call(s) === '[object Object]') {
					// IE 6-8
					_.is_NodeList = function(object) {
						try {
							return object
									&& '[object Object]' === get_object_type
											.call(object)
									// IE9 的相容Quirks模式中可能符合 NodeList 的條件，但卻為
									// ELEMENT_NODE..
									&& !object.tagName
									// function or object
									&& typeof object.item !== 'undefined'
									&& !isNaN(object.length)
									// use NodeList(index), e.g., `object(0)`,
									// may throw.
									&& (object.length > 0 ? _
											.is_HTML_element(object[0])
											: object[0] === null);
						} catch (e) {
						}
					};
				}
			} catch (e) {
				// TODO: handle exception
			}

			s = element_pattern.test(get_object_type.call(d));
			if (!s) {
				if (element_pattern.test('' + d))
					// e.g., IE 9
					_.is_HTML_element = function(object) {
						return object
								&& (element_pattern.test('' + object)
								// for IE8. object 可能是 null!
								|| typeof object === 'object'
										// && object.tagName === "OBJECT"
										&& object.nodeType === ELEMENT_NODE
										&& "[object NamedNodeMap]" === ''
												+ object.attributes);
					};
				else if (get_object_type.call(d) === '[object Object]') {
					// e.g., IE 5-8. 這種判別方法有漏洞!
					_.is_HTML_element = function(object) {
						return get_object_type.call(object) === '[object Object]'
								// object !== null, undefined
								&& object
								&& typeof object.nodeType === 'number';
					};
					// bug fix/workaround for IE8:
					// IE8 中 CeL.is_Object(ELEMENT_NODE) === true！
					_.is_Object = function(object) {
						return get_object_type.call(object) === '[object Object]'
								// object !== null, undefined
								&& object
								// test a readonly property
								&& typeof object.nodeType !== 'number';
					};
				} else
					throw 1;

				// General type
				_.is_HTML_element_type = function(object, type) {
					return _.is_HTML_element(object)
							&& object.nodeType === type;
				};
				_.is_ELEMENT_NODE = function(object) {
					return _.is_HTML_element(object)
							&& object.nodeType === ELEMENT_NODE;
				};
			}

		} catch (e) {
			// TODO: handle exception
		} finally {
			d = null;
		}
	})();

	/**
	 * <code>
	test if can use flash

	better use SWFObject:
	http://code.google.com/p/swfobject/

	Browser detect:	http://www.quirksmode.org/js/detect.html
	var plugin=(window.navigator.mimeTypes && window.navigator.mimeTypes["application/x-shockwave-flash"]) ? window.navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin : 0;
	if ( plugin ) {
	        plugin=parseInt(plugin.description.substring(plugin.description.indexOf(".")-1)) >= 3;
	}
	else if (window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE")>=0 && window.navigator.userAgent.indexOf("Windows")>=0) {
	        document.write('<SCRIPT LANGUAGE=VBScript\> \n');
	        document.write('on error resume next \n');
	        document.write('plugin=( IsObject(CreateObject("ShockwaveFlash.ShockwaveFlash.6")))\n');
	        document.write('<\/SCRIPT\> \n');
	}
	if ( plugin ) {
	        document.write('<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"');
	        document.write('  codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" ');
	        document.write(' ID=flash5clickTAG WIDTH='+n_width+' HEIGHT='+n_height+'>');
	        document.write(' <PARAM NAME=movie VALUE="'+ n_flashfile +'"><param name=wmode value=opaque><PARAM NAME=loop VALUE=true><PARAM NAME=quality VALUE=high>  ');
	        document.write(' <EMBED src="'+ n_flashfile +'" loop=true wmode=opaque quality=high  ');
	        document.write(' swLiveConnect=FALSE WIDTH='+n_width+' HEIGHT='+n_height+'');
	        document.write(' TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash">');
	        document.write(' <\/EMBED>');
	        document.write(' <\/OBJECT>');
	} else if (!(window.navigator.appName && window.navigator.appName.indexOf("Netscape")>=0 && window.navigator.appVersion.indexOf("2.")>=0)){
	        document.write('<A HREF="'+ n_altURL +'" target="'+n_target+'"><IMG SRC="'+ n_altimg +'" WIDTH='+n_width+' HEIGHT='+n_height+' BORDER=0><\/A>');
	}
	</code>
	 */

	// copy from base.js
	// window.onerror=HandleError;
	function HandleError(message, url, line) {
		// if(window.confirm())_DO_CONTINUE_
		if (window.navigator.appName == "Microsoft Internet Explorer")
			return !window.confirm(url + '\n\nJavaScript Error: ' + line + '\n'
					+ message + '\n\nSee more details?');
		else if (window.navigator.appName == "Netscape")
			// document.location.href="javascript:";
			window.navigate('javascript:');

		/** <code>'Warning: function HandleError does not always return a value' in some Firebird with	user_pref("javascript.options.strict", true);	@ prefs.js</code> */
		// return message;
	}

	// 預防(舊版)NS resize時版面亂掉
	// window.onresize=OnResize;
	function OnResize() {
		// 回上一頁 history.go(-1),history.back()/history.forward()
		// this.location.replace(document.referrer)

		// Opera's document.referrer returns only null if referrer logging is
		// disabled
		// location.replace(),location.reload()
		history.go(0);
	}

	/**
	 * <code>
	 IE only!!
	 http://blog.livedoor.jp/dankogai/archives/50952477.html	DOM時代のdocument.write()

	 if (typeof document == 'object')
	 write = document.write;
	 </code>
	 */

	/**
	 * <code>
	 http://blog.taragana.com/index.php/archive/how-to-enable-windowstatus-in-firefox/
	 window.status在firefox下默認是不能修改的。
	 可以通過工具→選項→網頁特性→啟用javascript→高級→把修改狀態欄文本打上勾就好了。

	 Open about:config in browser and search for dom.disable_window_status_change. Change it to false.
	 Additionally in Firefox v1.0, this can be changed via "Tools → Options → Web Features → Enable JavaScript / Advanced → Allow scripts to change status bar text"
	 In Firefox v1.5, this can be changed via "Tools → Options → Content → Enable JavaScript / Advanced → Allow scripts to change status bar text"
	 via MozillaZine; learnt the hard way. 
	 </code>
	 */
	/**
	 * 滾動 window.status
	 * 
	 * @param message
	 * @param {Number}
	 *            speed 速度
	 * @param from
	 *            from where(基本上勿設定)
	 * @param roll_status_length
	 *            unit length(基本上後兩者勿設定)
	 */
	function roll_status(message, speed, from, roll_status_length) {
		// 間隔以 s
		var s = '    ';
		if (!roll_status_length)
			roll_status_length = message.length, message += s + message;
		if (!from || from >= roll_status_length + s.length)
			from = 0;
		if (!message)
			if (typeof window.status === 'string')
				roll_status(window.status, speed);
			else
				return;
		else if (message.slice(from) != window.status && message.length > L)
			return;

		if (isNaN(speed) || speed > 999)
			speed = 999;
		else if (speed < 0)
			speed = 0;

		// L:least length
		var L = 99;
		while (message.length < L)
			message += s + message;
		window.status = message.slice(++from);
		roll_statusS = window.setTimeout('roll_status("' + message + '",'
				+ speed + ',' + from + ',' + roll_status_length + ');', speed);
		if (false)
			roll_statusS = window.setInterval('roll_status("' + message + '",'
					+ speed + ',' + from + ')', speed);
	}

	// ↑copy from base.js

	/**
	 * 預防hack：禁止鍵盤keyboard&滑鼠mouse輸入,可以再加上一層div於最上方以防止copy<br />
	 * 下面一行調到檔案頭<br />
	 * var disabledKM = 0;
	 */
	// disableKM[generateCode.dLK] = 'disabledKM';
	// s=1:回復,s=2:使螢幕亦無法捲動(對NS無效),m:message,輸入時發出警告
	function disableKM(s, m) {
		if (false) {
			window.onerror = function() {
				return ture;
			};
			// 定義亦可用 function document.onmousedown(){...}
			document.onmousedown = document.oncontextmenu = document.onselectstart = document.ondragstart = function(
					e) {
				return false;
			};
			// 印刷を禁止して
			window.onbeforeprint = function() {
				for (i = 0; i < document.all.length; i++) {
					if (document.all[i].style.visibility != "hidden") {
						document.all[i].style.visibility = "hidden";
						document.all[i].id = "elmid";
					}
				}
			};
			window.onafterprint = function() {
				for (i = 0; i < document.all.length; i++) {
					if (document.all[i].id == "elmid") {
						document.all[i].style.visibility = "";
					}
				}
			};
		}
		if (!document.body)
			return;
		if (typeof s == 'undefined')
			s = 1;
		if (typeof disabledKM == 'undefined')
			disabledKM = 0;

		if (!s) {
			if (disabledKM) {
				window.ondragstart = document.body.Oondragstart || null,
						window.oncontextmenu = document.body.Ooncontextmenu
								|| null,
						window.onselectstart = document.body.Oonselectstart
								|| null;
				if (disabledKM == 2)
					document.body.style.overflow = typeof document.body.Ooverflow == 'string' ? document.body.Ooverflow
							: 'auto';
				window.onmousedown = window.Oonmousedown || null,
						window.onkeydown = window.Oonkeydown || null;
				window.onmousedown = document.Oonmousedown || null,
						window.onkeydown = document.Oonkeydown || null;
			}
			disabledKM = 0;
			return;
		}

		if (disabledKM) {
			// 已lock時不執行多餘的動作與覆蓋舊資訊
			if (s == 2)
				document.body.style.overflow = 'hidden';
			else if (typeof document.body.Ooverflow == 'string')
				document.body.style.overflow = document.body.Ooverflow;
		} else {
			// <body oncontextmenu="return false" ondragstart="return false"
			// onselectstart="return false">
			// 預防hack
			// 使body填滿視窗
			// leftMargin=topMargin=rightMargin=bottomMargin=0;
			document.body.Ooverflow = document.body.style.overflow;
			if (s == 2)
				// 使螢幕亦無法捲動
				document.body.style.overflow = 'hidden';
			if (typeof window.onselectstart != 'undefined')
				document.body.Oonselectstart = window.onselectstart;
			if (typeof window.oncontextmenu != 'undefined')
				document.body.Ooncontextmenu = window.oncontextmenu;
			if (typeof window.ondragstart != 'undefined')
				document.body.Oondragstart = window.ondragstart;
			window.ondragstart = window.oncontextmenu = window.onselectstart = function() {
				return false;
			};

			// 不要在 document 对象中设置 expando 属性，在 window 对象上设置 expando 属性。
			if (typeof window.onmousedown != 'undefined')
				document.Oonmousedown = window.onmousedown;
			if (typeof window.onkeydown != 'undefined')
				document.Oonkeydown = window.onkeydown;

			// ndblclick=
			if (typeof document.onmousedown != 'undefined')
				document.Oonmousedown = document.onmousedown;
			if (typeof document.onkeydown != 'undefined')
				document.Oonkeydown = document.onkeydown;
		}
		window.onmousedown = window.onkeydown = document.onmousedown = document.onkeydown = document.onContextMenu = new Function(
				'e',
				'if(window.navigator.appName=="Microsoft Internet Explorer"&&event.button!=1||window.navigator.appName=="Netscape"&&e.which!=1){'
						+ (m ? 'alert(' + dQuote(m) + ');' : '')
						+ 'return false;}');

		if (false) {
			window.captureEvents(Event.MOUSEUP | Event.MOUSEDOWN);
			window.onmousedown = function(e) {
				if (e.which == 1) {
					window.captureEvents(Event.MOUSEMOVE);
					window.onmousemove = rf;
				}
			};
			window.onmouseup = function(e) {
				if (e.which == 1) {
					window.releaseEvents(Event.MOUSEMOVE);
					window.onmousemove = null;
				}
			};
		}
		// Navigator 4.0x
		// http://topic.csdn.net/t/20020125/13/498661.html
		if (!disabledKM && window.Event && window.captureEvents)
			window.captureEvents(Event.MOUSEDOWN), window
					.captureEvents(Event.KEYDOWN);

		disabledKM = s;
	}

	if (false) {
		simpleWrite('a.txt', reduce_code([ f, toggle,
				library_namespace.set_Object_value ]));
		for ( var i in style)
			tt += i + '=' + document.getElementById("others").style[i]
					+ "<br />";
		document.write(tt);
	}

	/**
	 * 切換(顯示/隱藏) node.<br />
	 * toggle/swap display and visibility.<br />
	 * display:none or visibility:hidden.
	 * 
	 * TODO: use element.classList.toggle(className); TODO: use computed style
	 * 
	 * @param element
	 *            HTML element
	 * @param {String|Number}type
	 *            show or hidden or set the status type: {Number} type: 0:
	 *            hidden(→none), 1: show(→block), 2||undefined: switch, others:
	 *            get status only with no change {String} type: set CSS: display
	 *            type: none, '', block, inline, list-item. 其他恐造成 error?
	 * @return display status
	 * @since 2010/4/1 10:24:43 refactoring 重構
	 * @see http://www.w3schools.com/CSS/pr_class_visibility.asp
	 *      http://www.w3schools.com/css/pr_class_display.asp
	 *      http://www.javaeye.com/topic/140784
	 *      通過element.style對象只能取得內聯的樣式，也就是說只能取得html標籤裡寫的屬性。
	 * @requires [get_element],[_.get_style]
	 * @_memberOf _module_
	 */
	function toggle_display(element, type) {
		// showObj(element);
		if (!(element = get_element(element)))
			return;

		// Opera 7.5 意外的沒有 tagName (-_-) 而 Firefox 也可能沒有此 property.
		var tagName = ('' + element.tagName).toLowerCase(), style = element.style, v_value = {
			visible : 1,
			hidden : 2,
			collapse : 3
		};

		if (typeof type === 'undefined' || type == 2)
			type = style ? (_.get_style ? _.get_style(element, 'display') :
			// style.display === '' 時預設為顯示
			style.display) === 'none' : element.visibility !== 'visible';

		if (typeof type === 'boolean')
			type = type ? 1 : 0;

		if (!isNaN(type))
			// 對各種不同的 tag 作個別設定。
			type = type == 0 ? style ? 'none' : tagName === 'tr' ? 'collapse'
					: 'hidden' : type == 1 ? style ? (tagName in {
				div : 1,
				iframe : 1
			}) ? 'block' : 'inline' : 'visible' : null;

		library_namespace.debug('type: ' + type, 2, 'toggle_display');
		// test .innerHTML

		if (false)
			library_namespace.debug('set display style of &lt;' + tagName
					+ '&gt; to [' + type + ']');
		if (style)
			style[type in v_value ? 'visibility' : 'display'] = type;
		else if ((type in v_value)
		// &&!(tagName in {'iframe':1,'input':1})
		)
			element.visibility = type;
		else
			return;

		return type;
	}

	_// JSDT:_module_
	.toggle_display = toggle_display;

	/**
	 * replace HTML
	 * 
	 * @param node
	 * @param html
	 * @return
	 * 
	 * <code>
	http://blog.stevenlevithan.com/archives/faster-than-innerhtml
	You can use the above as el = replace_HTML(el, newHtml) instead of el.innerHTML = newHtml.

	.innerHTML=,document.createElement(→XML_node()
	.innerHTML='' → remove_all_child


	http://forum.moztw.org/viewtopic.php?t=17984&postdays=0&postorder=asc&start=15
	adoptNode() 會把現有的節點拿去用，ownerDocument 會被變更，被 adopt 的節點會從原來的 document 消失。
	importNode() 比較像是 cloneNode() 加上變更 ownerDocument。
	以前因為 Gecko 沒有太嚴格，所以可以用 Ajax 取回一個 XML 文件並直接透過 responseXML 把裡面的節點當 HTML 節點一樣的插入現有的網頁。
	</code>
	 * 
	 * @_memberOf _module_
	 */
	function replace_HTML(node, html) {
		if (node && typeof node === 'string')
			node = document.getElementById(node);

		if (node && !html && typeof node.replaceChildren === 'function') {
			// https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren
			node.replaceChildren();
			return node;
		}

		// _.is_ELEMENT_NODE(<math>) === false ("[object Element]" @
		// Firefox/37.0)
		if (false)
			if (!_.is_ELEMENT_NODE(node))
				return node;
		if (!node || !node.innerHTML)
			return node;

		try {
			/**
			 * <code>/* @cc_on
			// Pure innerHTML is slightly faster in IE
			node.innerHTML = html || '';
			return node;
			@</code>
			 */

			if (false) {
				var clone = node.cloneNode(false);
				clone.innerHTML = html || '';
				node.parentNode.replaceChild(clone, node);
			}

			// 預防之後不知道的 code 還是使用之前的 reference。
			node.innerHTML = html || '';

		} catch (e) {
			/**
			 * http://msdn.microsoft.com/en-us/library/ms532998.aspx#TOM_Create
			 * the innerText and innerHTML properties of the table and tr
			 * objects are read-only.
			 */
			library_namespace.warn('replace_HTML() error!');
			library_namespace.error(e);
		}

		// Since we just removed the old element from the DOM, return a
		// reference to the new element, which can be used to restore variable
		// references.
		return node;
	}

	_// JSDT:_module_
	.replace_HTML = replace_HTML;

	/**
	 * <code>
	使用 .firstChild 或 .lastChild 須注意此node可能是 text node，不能 appendChild。須以 .nodeType 判別。
	.children[0] (<span>) === .firstElementChild !== .firstChild (maybe #text)

	http://msdn2.microsoft.com/zh-tw/library/system.xml.xmlnode.removechild(VS.80).aspx
	繼承者注意事項 在衍生類別中覆寫 RemoveChild 時，為了要正確引發事件，您必須呼叫基底類別的 RemoveChild 方法。

	removeAllChild[generateCode.dLK]='replace_HTML';
	function removeAllChild(o){
	 //return removeNode(o,1);

	 //	http://blog.stevenlevithan.com/archives/faster-than-innerhtml
	 if(typeof o=='string')o=document.getElementById(o);
	 if(!o||typeof o!='object')return;
	 o.parentNode.replaceChild(o.cloneNode(false),o);
	 return o;
	}

	http://www.webreference.com/js/column43/replace.html
	The replaceNode method is much more intuitive than the removeNode method. While the removeNode method just removes the specified element and makes its descendents children of their grandfather, the replaceNode method deletes the whole subtree that is rooted at the specified element, and substitutes it with a new element.
	node_want_to_replace.removeNode(new_node)
	</code>
	 */

	/**
	 * 移除 node. TODO: also remove event handlers
	 * 
	 * @param o
	 * @param tag
	 *            tag===1: only child, undefined: remove only self, others: only
	 *            <tag> child
	 * @return
	 * @_memberOf _module_
	 */
	function remove_node(o, tag) {
		var _f = remove_node, i;
		if (typeof o === 'string')
			o = document.getElementById(o);
		if (!_.is_ELEMENT_NODE(o))
			return;

		// remove child
		if (tag) {
			if (typeof tag === 'string')
				tag = tag.toLowerCase();

			// safer: if you have any asynchronous events going. But
			// node.hasChildNodes() will always do an evaluation.
			// while(o.hasChildNodes()&&(i=o.lastChild))o.removeChild(i);
			// while(o.hasChildNodes())o.removeChild(o.lastChild);

			// don't use for()
			// http://weblogs.macromedia.com/mesh/archives/2006/01/removing_html_e.html
			// TODO: 直接用 replaceNode 就不用 recursion
			i = o.childNodes.length;
			while (i--)
				if (tag === 1 || _.is_ELEMENT_NODE(o.childNodes[i])
						&& tag === o.childNodes[i].tagName.toLowerCase())
					// _f(o.childNodes[i],tag), // TODO: 會有問題
					o.removeChild(o.childNodes[i]);
		}

		// remove self
		// 測試 o.parentNode: 預防輸入的o為create出來的
		return tag || !(i = o.parentNode) ? o : i.removeChild(o);
	}

	_// JSDT:_module_
	.remove_node = remove_node;

	/**
	 * empty node. CeL.remove_all_childrens
	 */
	_// JSDT:_module_
	.remove_all_child = _.replace_HTML;

	/**
	 * set/get/remove attribute of a element<br />
	 * in IE: setAttribute does not work when used with the style attribute (or
	 * with event handlers, for that matter).
	 * 
	 * @param _e
	 *            element
	 * @param propertyO
	 *            attributes object (array if you just want to get)
	 * @return
	 * @requires split_String_to_Object
	 * @see setAttribute,getAttribute,removeAttribute
	 *      http://www.quirksmode.org/blog/archives/2006/04/ie_7_and_javasc.html
	 * @since 2006/12/10 21:25 分離 separate from XML_node()
	 * @_memberOf _module_
	 */
	function set_attribute(_e, propertyO, ns) {
		_e = get_element(_e);
		if (!_e || !propertyO
		// || _e.nodeType === TEXT_NODE
		) {
			return;
		}

		var matched, _g,
		// Namespaces: SVG,MathML,XHTML,XLink
		_N = new_node.ns;
		if (typeof propertyO === 'string') {
			propertyO = /[=:]/.test(propertyO) ? split_String_to_Object(propertyO)
					: propertyO.split(',');
		}
		if (Array.isArray(propertyO)) {
			_g = propertyO.length === 1 ? propertyO[0] : 1;
			propertyO = split_String_to_Object(propertyO.join(','));
		}

		for ( var _l in propertyO) {
			if (_l === 'class' && !propertyO['className']) {
				propertyO[_l = 'className'] = propertyO['class'];
			}
			if (_g || (_l in propertyO) && propertyO[_l] != null) {
				/**
				 * <code>
				XML 中id不能以setAttribute設定。
				class不能以setAttribute設定@IE。
				http://www.quirksmode.org/bugreports/archives/2005/03/setAttribute_does_not_work_in_IE_when_used_with_th.html
				IE ignores the "class" setting, and Mozilla will have both a "class" and "className" attribute defined
				</code>
				 */
				if ( // _l == 'id' ||
				_l == 'className' || typeof propertyO[_l] == 'function') {
					if (_g) {
						propertyO[_l] = _e[_l];
					} else {
						_e[_l] = propertyO[_l];
					}

				} else if (_e.setAttributeNS
						&& (matched = _l.match(/^(.+):([^:]+)$/))) {
					matched = matched[1];
					if (matched.indexOf('://') == -1
							&& _N[matched.toLowerCase()]) {
						matched = W3C_BASE + _N[matched.toLowerCase()];
					}
					if (_g) {
						propertyO[_l] = _e.getAttributeNS(matched, _l);
					} else {
						_e.setAttributeNS(matched, _l, propertyO[_l]);
						if (false) {
							try {
								_e.setAttributeNS(matched, _l, propertyO[_l]);
							} catch (e) {
								alert('set_attribute: Error!');
							}
						}
					}

				} else if (_g) {
					propertyO[_l] = _e.getAttribute(_l);
				} else if (false && _e.setAttributeNS) {
					// TODO: _e.setAttribute(), _e.style.setProperty()
					_e.setAttributeNS(null, _l, propertyO[_l]);
				} else {
					_e.setAttribute(_l, propertyO[_l]);
				}
			}
		}

		return typeof _g == 'string' ? propertyO[_g] : propertyO;
	}

	_// JSDT:_module_
	.set_attribute = set_attribute;

	/**
	 * append children node to specified element
	 * 
	 * @param node
	 *            node / node id
	 * @param child_list
	 *            children node array
	 * @return
	 * @since 2007/1/20 14:12
	 * @_memberOf _module_
	 */
	function add_node(node, child_list) {
		var _s = add_node;
		if ((node = get_element(node)) && arguments.length > 2) {
			for (var _j = 1, l = arguments.length; _j < l; _j++)
				_s(node, arguments[_j]);
			return;
		}

		if (!node || !child_list
		// || node.nodeType === TEXT_NODE
		)
			return;

		// 預防 RegExp 等，需要 toString()
		if (library_namespace.is_RegExp(child_list))
			child_list = '';

		if (typeof child_list === 'object') {
			if (child_list)
				if (Array.isArray(child_list)
				// && child_list.length
				) {
					for (var _j = 0, l = child_list.length; _j < l; _j++)
						_s(node, child_list[_j]);
				} else
					try {
						// [object SVGTextElement] 亦可 appendChild().
						node.appendChild(child_list);
					} catch (e) {
						library_namespace.warn('add_node: Cannot insert node!');
						// show_node(node);
						// e.g., 'HIERARCHY_REQUEST_ERR: DOM Exception 3'
						// e.g.,
						// document.appendChild(document.createElement('div'));
						// e.g.,
						// document.createTextNode("").appendChild(document.createElement('div'));
					}
			return;
		}

		if (typeof child_list === 'string' || typeof child_list === 'number'
				&& !isNaN(child_list)) {
			// child_list = child_list.toString();
			_.node_value(node, child_list);
		}
	}

	_// JSDT:_module_
	.add_node = add_node;

	// IE 8 中，使用 (element[p] = text) 無效果，需要使用 (document.title) 設定。
	// 並且 document.getElementsByTagName('title')[0].dataset 亦無法取得 dataset。
	var need_check_title = library_namespace.is_WWW()
			&& navigator.userAgent.match(/MSIE (\d+)/);
	set_text.need_check_title = need_check_title = need_check_title
			&& need_check_title[1] < 9;

	/**
	 * 設定/取得 HTML element 的 text。
	 * 對付IE與Moz不同的text取得方法。現階段不應用innerText，應該用此函數來取得或設定內部text。
	 * 
	 * @param element
	 *            HTML element
	 * @param {String}
	 *            text the text to be set
	 * @return
	 * @see http://www.klstudio.com/post/94.html
	 * @_memberOf _module_
	 */
	function set_text(element, text, options) {
		if (!(element = get_element(element)))
			return;

		options = library_namespace.setup_options(options);

		var text_p = set_text.p;
		if (typeof text_p !== 'string' || !text_p)
			set_text.p = text_p
			// 較新的 browser
			= typeof document.body.textContent === 'string' ? 'textContent'
			// e.g., IE
			: typeof document.body.innerText === 'string' ? 'innerText'
			// old browsers
			: 'innerHTML';

		var p = typeof element.value === 'string' ? 'value' : text_p;
		if (typeof text !== 'undefined') {
			if (need_check_title && element.tagName.toLowerCase() === 'title')
				document.title = text;
			else {
				element[p] = text;
				if (element.tagName.toLowerCase() === 'input' && options.resize) {
					var min_width = String(text);
					min_width = min_width.display_width
					// CeL.data.native.display_width()
					? min_width.display_width() : min_width.length;
					// 'font-size' is in em.
					min_width = get_style(element, 'font-size', 'numeral')
							* (min_width + 1) / 2;
					if (options.min_width > 0
							&& !(min_width >= options.min_width)) {
						min_width = options.min_width;
					}
					if (options.max_width > 0 && min_width > options.max_width) {
						min_width = options.max_width;
					}
					if (element.offsetWidth < min_width)
						set_style(element, 'width', min_width + 'px');
				}
			}
		}

		// http://www-128.ibm.com/developerworks/tw/library/x-matters41.html
		if (element.nodeType === 3 || element.nodeType === 4)
			// TODO: DOM: 用 element.nodeValue
			return element.data;

		// 用 .childNodes
		if (false) {
			var s = element.children[0], t = [];
			if (s) {
				do {
					t.push(set_text(s));
				} while (s = s.nextSibling);
				return t.join('');
			}
		}

		// TODO: fire event

		var text = element[p];
		if (p === 'innerHTML') {
			// 分斷行 2003/1/25 22:40
			// html → text
			// <.+?> <[^>]+> <\s*\/?\s*[a-zA-Z](.*?)> <! 過慢?
			text = text
			// remove <s>...</s>, <del>...</del>
			.replace(/<(s|del)>[^<]*<\/\1>/gi, '').replace(/<w?br[^>]*>/gi,
					'\n').replace(/<\/?[A-Za-z][^>]*>/g, '');
		}
		return text;
	}

	_// JSDT:_module_
	.set_text = set_text;
	_// JSDT:_module_
	.get_node_text = set_text;

	_// JSDT:_module_
	.
	/**
	 * 自動填寫表單 TODO: cache name if need.
	 * 
	 * @param {Object}pairs
	 *            設定 pairs: {id/name: value}
	 * @param {HTMLElement|Object|Integer}config
	 *            submit button/form id, {submit: submit button/form id, base:
	 *            base space id}. use {} to ignore this argument.
	 */
	fill_form = function fill_form(pairs, config) {
		var name, node, base, submit, event_object, window_object = typeof window === 'object'
				&& window || {},
		// 這種 node 需要用到 list 的方法。e.g., checkbox or radio.
		use_list = function(node) {
			library_namespace.debug('test &lt;' + node.tagName + ' type="'
					+ node.type + '" name="' + node.name + '" id="' + node.id
					+ '" /&gt;', 2, 'fill_form.use_list');
			return _.is_ELEMENT_NODE(node)
					&& node.tagName.toLowerCase() === 'input'
					&& node.type.toLowerCase() in {
						radio : 1,
						checkbox : 1
					};
		}, set_node = function(name) {
			// if (!name) throw 1;
			node = base.getElementById(name);
			library_namespace.debug('.getElementById(' + name + ') = ' + node,
					3, 'fill_form.set_node');
			// IE9 quirks mode 中， .getElementById() 可以得到
			// .getElementsByName()[0]。
			if (!node || use_list(node)) {
				node = base.getElementsByName(name);
				if (library_namespace.is_debug(2)) {
					library_namespace.debug('.getElementsByName(' + name
							+ ') = ' + node, 2, 'fill_form.set_node');
					show_node(node);
				}
				if (!node[0] || !use_list(node[0])) {
					if (node.length !== 1) {
						library_namespace.warn('fill_form: 共有 ' + node.length
								+ ' 個 [name=' + name + '] 可供設定'
								+ (node.length ? '，將只設定第一個' : '') + '！');
					}
					node = node[0];
				} else {
					library_namespace.debug(
							'treat [name=' + name
									+ '] as checkbox or radio. length = '
									+ node.length, 2, 'fill_form.set_node');
				}
			}
			return node;
		}, fire_event = function(event_id) {
			// TODO: using event.initEvent()
			// https://www.webhek.com/apps/you-do-not-need-jquery/#trigger_native
			if (node[event_id]
			// 不一定都是 function?
			// && typeof node[event_id] === 'function'
			) {
				try {
					// TODO: 完整模擬 DOM event object.
					// http://msdn.microsoft.com/en-us/library/ms535863(v=vs.85).aspx
					if (!event_object) {
						library_namespace.debug('Setup event object for .'
								+ event_id, 2, 'fill_form.fire_event');
						event_object = {
							target : node
						};
						// IE. TODO: 預防所操縱的為 HTA，其 'window' !== 本身之 window。
						if ('event' in window_object) {
							event_object.srcElement = node;
							try {
								// 無法設定 window.event: Error 438 [TypeError]
								// (facility code 10): 物件不支援此屬性或方法.
								// window_object.event = event_object;
								// 行不通: window_object.event === null
								Object
										.assign(event_object,
												window_object.event);
							} catch (e) {
							}
						}
					}
					library_namespace.debug('Try to fire [' + name + '].'
							+ event_id, 2, 'fill_form.fire_event');
					node[event_id].call(node, event_object);
				} catch (e) {
					if (library_namespace.is_debug()) {
						library_namespace
								.warn('fill_form.fire_event: Error to run ['
										+ name + '].' + event_id + ': '
										+ node[event_id]);
						library_namespace.error(e);
					}
				}
			}
			return fire_event;
		},
		// 模擬鍵盤輸入事件發生。
		event_sequence = function(node, value) {
			fire_event('onfocus')('onclick')
			// ('onkeydown')('onkeypress')
			('oninput')
			// ('onkeyup')
			;

			library_namespace.debug('Set [' + name + '] = (' + (typeof value)
					+ ') [' + value + ']', 2, 'fill_form.event_sequence');
			_.node_value(node, value);

			fire_event('onpropertychange')('onchange')('onblur');
		};

		if (library_namespace.is_Object(config)) {
			submit = config.submit;
			base = config.base;
			if (config.window) {
				window_object = config.window;
				library_namespace.debug('Setup window: ' + window_object, 2,
						'fill_form');
			}
			if (!isNaN(base) && (name = window_object.document.forms[base])) {
				base = name;
			}
			if (config.no_fire)
				fire_event = function() {
					return fire_event;
				};
		}
		if (!_.is_ELEMENT_NODE(base) && !_.is_DOCUMENT_NODE(base)) {
			library_namespace.debug('Set base to window_object.document.', 2,
					'fill_form');
			base = window_object.document;
		}
		// 確定可以使用 .getElementById。
		while (!base.getElementById) {
			base = base.parentNode;
		}
		if (library_namespace.is_debug(2)) {
			library_namespace.debug('base:', 1, 'fill_form');
			show_node(base);
		}

		if (library_namespace.is_Object(pairs)) {
			for (name in pairs) {
				if (_.is_ELEMENT_NODE(set_node(name))) {
					event_sequence(node, pairs[name]);
				} else if (_.is_NodeList(node)) {
					// <input type="radio|checkbox" value="~" />
					for (var i = 0, l = node.length, n, vl = pairs[name], v; i < l; i++) {
						n = node[i];
						// TODO: 若是輸入數字，則有時會強制當作index？
						v = library_namespace.is_Object(vl) ? vl[n.value]
								: Array.isArray(vl) ? vl.indexOf(n.value) !== -1
										: vl;
						library_namespace.debug('set value [' + v + '].', 2,
								'fill_form');
						// n.value 必為 string，v 可能為數字，因此不用 `===`。
						if (n.checked !== (typeof v === 'boolean' ? v
								: v == n.value)) {
							// 有改變才 fire event。
							event_sequence(n, !n.checked);
						}
					}
				}
				// reset event_object.
				event_object = undefined;
			}
		}

		if ((node = submit)
				&& (_.is_ELEMENT_NODE(node) || typeof node === 'string'
						&& _.is_ELEMENT_NODE(set_node(node)))) {
			if (node.tagName.toLowerCase() === 'form')
				node.submit();
			else if (node.click)
				node.click();
			else
				library_namespace.warn('fill_form: Cannot submit [' + submit
						+ ']');
		} else if (!isNaN(submit)
				&& _
						.is_ELEMENT_NODE(node = window_object.document.forms[submit])) {
			fire_event('submit');
		}

		if (config && typeof config.callback === 'function') {
			config.callback();
		}
	};

	_// JSDT:_module_
	.
	/**
	 * 設定 node 之值。
	 * 
	 * @param {HTMLElement}node
	 *            所指定之 node。
	 * @param {String|Number|Boolean}value
	 *            所要設定之值
	 * @param {HTMLBodyElement|HTMLElement}base_space
	 *            base document/context
	 * @returns node 之值
	 */
	node_value = function node_value(node, value, base_space) {
		var set_value_list = function(value) {
			var i, l, v;
			if (Array.isArray(value))
				for (i = 0, l = value.length, v = Object.create(null); i < l; i++)
					v[value[i]] = true;
			else if (library_namespace.is_Object(value))
				v = value;
			else
				(v = Object.create(null))[value] = true;
			return v;
		};

		if (!node // || !library_namespace.is_WWW()
				// maybe [object SVGTSpanElement]
				|| !(typeof node === 'string' ? (node = select_node(node,
						base_space)
						|| get_element(node)) : node)) {
			if (_.is_NodeList(node) && node.length && 'checked' in node[0]) {
				if (false)
					library_namespace.debug('Nodes &lt;' + node[0].tagName
							+ '&gt;[' + node[0].name + '] = ' + value, 1,
							'node_value');
				// /checkbox|radio/
				// var type = node[i].type;
				for (var i = 0, l = node.length, v = set_value_list(value); i < l; i++) {
					if (node[i].value in v) {
						node[i].checked = !!v[node[i].value];
						// if (type === 'radio') break;
					}
				}
			}
			return;
		}

		var tag_name = _.is_ELEMENT_NODE(node) ? node.tagName.toLowerCase()
				: '', type;
		if (false)
			library_namespace.debug('Node &lt;' + tag_name + '&gt;', 1,
					'node_value');
		if ((tag_name in {
			textarea : 1,
			select : 1,
			option : 1
		}) || tag_name === 'input'
		// use only /checkbox|hidden|password|radio|text/ or undefined(default).
		// .getAttribute('type')
		&& !((type = ('' + node.type).toLowerCase()) in {
			button : 1,
			file : 1,
			image : 1,
			reset : 1,
			submit : 1
		})) {
			switch (type) {
			case 'radio':
			case 'checkbox':
				if ('checked' in node)
					// node.value 必為 string，因此不用 ===。
					node.checked = typeof value === 'boolean' ? value
							: (node.value == value);
				break;
			case 'select-multiple':
				if (Array.isArray(value))
					for (var i = 0, options = node.options, l = Math.min(
							options.length, value.length); i < l; i++)
						options[i].selected = !!value[i];
				else {
					value = set_value_list(value);
					for (var i = 0, options = node.options, l = options.length; i < l; i++) {
						if (options[i].value in v)
							options[i].selected = !!value[options[i].value];
					}
				}
				break;
			// case 'select-one':
			default:
				if (false)
					library_namespace.debug('Use default method to set value.',
							1, 'node_value');
				if ('value' in node) {
					if (tag_name === 'select') {
						// select_node.value → select_node.innerText →
						// select_node.selectedIndex
						if (value !== undefined && node.value != value) {
							node.value = value;
						}
						// check
						if (node.value != value) {
							// 未設定成功: 沒有此 options.value?
							var OK;
							for (var i = 0, options = node.options, l = options.length, v = String(
									value).trim(); i < l; i++)
								if (v == options[i].innerHTML.trim()) {
									node.value = options[i].value;
									OK = true;
									break;
								}
							if (!OK && !isNaN(value) && value >= 0
									&& value < node.options.length) {
								// .options[i].value === value
								// .selectedIndex= 的設定有些情況下會失效
								if (node.selectedIndex != value) {
									node.selectedIndex = value;
									// node.onchange && node.onchange();
								}
							}
							// TODO: alert
						} else {
							// node.onchange && node.onchange();
						}

					} else if (value !== undefined && value !== null) {
						// IE9 的相容Quirks模式中長度使用 'maxLength'.
						var kw = 'maxLength';
						if (!(kw in node))
							kw = 'maxlength';
						// 因 (''==0)，因此若 (value === 0 && node.value === '')
						// 會出問題。
						// 需要先把 value 轉成 string。
						value = String(value);
						if (false)
							library_namespace.debug('測試是否須截斷過長之設定值 of [' + kw
									+ ']。', 1, 'node_value');
						if (!isNaN(node[kw])
						// Chrome/68.0.3440.106:
						// document.createElement('input').maxLength 預設為 -1
						&& node[kw] >= 0 && value.length > node[kw]) {
							library_namespace.warn('The length of value ['
									+ value + ']: ' + value.length
									+ ' > limit ' + node[kw]
									+ ' ! I will fill the first ' + node[kw]
									+ ' characters!');
							value = value.slice(0, node[kw]);
						}
						if (node.value != value) {
							if (false)
								library_namespace.debug('Set &lt;' + tag_name
										+ '&gt; = [' + value + ']', 1,
										'node_value');
							node.value = value;
							// node.onchange && node.onchange();
						}
					}

					value = node.value;

				} else {
					library_namespace.warn('Cannot set value of node!');
					// 需要再處理. .text?
					// return true;
					value = node.innerHTML;
				}
			}

		} else if (tag_name === 'option') {
			if (!node.value)
				node.value = value;
			value = node.innerHTML = value;

		} else if (typeof value === 'string' && value.indexOf('<') !== -1) {
			// may cause error: -2146827687 未知的執行階段錯誤 e.g.,
			// XML_node('a', 0, 0, [XML_node('a'), '<br />']);
			// try{
			value = node.innerHTML = value;
			// } catch(e) { node.appendChild(XML_node('span', 0, 0, value)); }
		}

		else if (typeof value === 'string' || typeof value === 'number') {
			_.remove_all_child(node);
			// try{
			node.appendChild(document.createTextNode(value));
			value = node.innerHTML;
			// } catch(e) { alert(e.description); }
		} else {
			if (false)
				alert('node_value: Error insert contents:\n[' + value + ']');
			value = node.innerHTML;
		}
		return value;
	};

	/**
	 * <code>

	var alias={
		//	'child' || 'c' || '$' || '0' || ...
		$:'childNode',
		//	class: 'className' || 'c' ...
		c:'className'
		s:'style'
	};

	輸入 ( [{tag1:{attb:attb_val,child:[inner objects]}}, {tag2:{}}, 'br'], insertBeforeO)
	e.g.,
	([
		{
			p:[span:'>>test<<'],
			id:'a',
			c:'cls',
			s:{color:'#123'}
		},
		//	width:12 === width:'12px'
		{
			span:['<<test2>>','text'],
			s:{color:'',width:12}
		},
		'<<test3>>',
		{'hr':0},
		{'br':0},
		{
			$:tag_name,
			tag_name:[]
		},
		{
			tag_ns:0,
			ns:'http://~'
		}
	], insertSetting)

	insertSetting:
		(null)		just create & return the node
		以下：===0 則設成 document.body
		parent node/ id		appendChild
		[refO,0-4]	0:appendChild (add as lastChild), 1: add as firstChild, 2: add as nextSibling, 3: add as priviusSibling, 4: add as parent


	</code>
	 */
	// [{tag1:{attb:attb_val,child:[inner objects]}}, {tag2:{}}, 'br'];
	/**
	 * 創建新的 DOM 節點(node)。<br />
	 * createNode() 的功能補充加強版。<br />
	 * 
	 * NOTE: table 需要加 tbody.
	 * 
	 * TODO: 分割功能(set_attrib, add_child, ...), 簡化. insertAdjacentHTML /
	 * insertAdjacentText
	 * 
	 * @param {Object|Array}
	 *            nodes node structure
	 * @param {String|Array|HTMLElement}
	 *            [layer] where to layer this node. e.g., parent node
	 * @return {HTMLElement} new node created
	 * @since 2010/6/21 13:45:02
	 */
	function new_node(nodes, layer, options) {
		var node, for_each,
		// parent: parent node of layer or layer.firstChild
		parent, children = undefined, handler = new_node.handler;

		if (typeof options === 'string') {
			options = {
				NS : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		var ns = options.NS;

		if (false) {
			if (!library_namespace.is_WWW(true)
			// && !document.createElementNS
			) {
				library_namespace
						.warn('new_node: DOM error? Cannot create node ['
								+ nodes + '].');
				return;
			}

			if (node === null || ((typeof nodes) in {
				number : 1,
				'boolean' : 1,
				'undefined' : 1
			}))
				// .toString();
				nodes =
				// '(' + typeof nodes + ') '
				String(nodes);
		}

		// 造出 node.
		if (node === null || ((typeof nodes) in {
			number : 1,
			'boolean' : 1,
			'undefined' : 1
		})) {
			// new_node(true), new_node(undefined)
			node = // '(' + typeof nodes + ') '
			// nodes.toString();
			'' + nodes;

		} else if (library_namespace.is_Object(nodes)) {
			// 不更動到原先的 arguments。但無作用。
			// nodes = Object.assign(Object.create(null), nodes);

			// for test.
			// Object.seal(nodes);

			var tag_key, tag = nodes.$, n = 'className', s, ignore = {
				// attrib
				A : null,
				/**
				 * <code>
				// inner
				I : null,
				// namespace
				NS : null,
				// class
				C : null,
				// style
				S : null,
				// dataset
				D : {},
				// text / message id, support for application.locale.gettext.
				T : {},
				//	reference, usually using <title>
				R : '',
				</code>
				 */

				// tag name
				$ : null
			};

			if (typeof tag === 'undefined') {
				for (node in nodes)
					// 取第一元素。
					if (!(node in ignore)) {
						tag_key = tag = node;
						break;
					}
			} else if (tag === 0) {
				// 0: just set attributes
				if (!_.is_DOM_NODE(layer)) {
					library_namespace
							.warn('new_node: There is no tag and the layer is NOT a HTML Element!');
					return;
				}
				tag = layer;
			} else if (typeof tag !== 'undefined')
				node = tag;

			// set/create node
			if (_.is_HTML_element(tag))
				node = tag;

			else if (typeof tag !== 'string') {
				library_namespace.error('new_node: Error creating tag: ['
						+ (typeof tag) + '][' + tag + ']');
				return;

			} else {
				// 初始轉換。
				if (tag === 'T') {
					// { T : [ gettext id, ...] }
					// →
					// { 基本 text node : null, T : [ gettext id, ...] }
					tag_key = tag = 'span';
				}

				if ('NS' in nodes) {
					ignore.NS = null;
					ns = nodes.NS;
				} else if (s = tag.match(/^(.+):([^:]+)$/)) {
					tag = s[2];
					ns = s[1];
				}

				try {
					if (ns && document.createElementNS) {
						if (ns in (s = new_node.ns))
							ns = W3C_BASE + s[ns];
						node = document.createElementNS(ns, tag);
					} else
						node = tag ? document.createElement(ns ? ns + ':' + tag
								: tag)
						// : document.createTextNode();
						// 由後面判定。
						: nodes[tag];
				} catch (_e) {
					node = null;
					library_namespace.error('new_node: Error create tag: ['
							+ tag + ']');
					return;
				}
			}

			if (_.is_DOM_NODE(node)) {
				s = node.setAttributeNS ? function(n, v) {
					if (library_namespace.is_Function(v)) {
						node[n] = v;
						// TODO: _.add_listener();
						return;
					}
					var _n = n.match(/^(.+):([^:]+)$/);
					if (_n) {
						n = _n[2];
						_n = _n[1];
					}
					try {
						if (_n)
							node.setAttributeNS(_n in new_node.ns ? W3C_BASE
									+ new_node.ns[_n] : ns, n, v);
						else
							node.setAttribute(n, v);
					} catch (e) {
						library_namespace
								.error('new_node: Error to set attribute [' + n
										+ '] = [' + v + '] of '
										+ node.outerHTML.replace(/</g, '&gt;')
										+ ':');
						library_namespace.error(e);
						node.appendChild(new_node({
							em : '(new_node: Error to set attribute [' + n
									+ '])'
						}));
					}
				} : function(n, v) {
					if (library_namespace.is_Function(v))
						node[n] = v;
					else
						node.setAttribute(n, v);
				};

				// 對常用的特別處理
				// class name
				/**
				 * <code>
					XML 中id不能以setAttribute設定。
					class不能以setAttribute設定@IE。
					http://www.quirksmode.org/bugreports/archives/2005/03/setAttribute_does_not_work_in_IE_when_used_with_th.html
					IE ignores the "class" setting, and Mozilla will have both a "class" and "className" attribute defined
				</code>
				 */
				if ((n in nodes) || ((n = 'class') in nodes)
						|| ((n = 'C') in nodes)) {
					ignore[n] = null;
					if (Array.isArray(nodes[n])) {
						nodes[n] = nodes[n].join(' ');
					}
					node.className = nodes[n];
				}

				// IE 需要先 appendChild 才能操作 style，moz不用..??
				// http://www.peterbe.com/plog/setAttribute-style-IE
				// 或需要將 font-size → fontSize 之類?
				// IE6 (no firefox or IE7~) 可設定:
				// oNewDiv.style.setAttribute('border', '1px solid #000');
				// oNewDiv.style.setAttribute('backgroundColor', '#fff');
				if (((n = 'style') in nodes) || ((n = 'S') in nodes)) {
					ignore[n] = null;
					n = nodes[n];
					var i, style = node.style;
					if (typeof n === 'string')
						style.cssText = n;
					else if (library_namespace.is_Object(n))
						for (i in n)
							// is_IE?"styleFloat":"cssFloat"
							style[i === 'float' ? 'cssFloat' in style ? 'cssFloat'
									: 'styleFloat'
									: i] = n[i];
					else
						library_namespace.warn('new_node: Error set style: ['
								+ styleO + ']');
				}

				if (((n = 'dataset') in nodes) || ((n = 'D') in nodes)) {
					ignore[n] = null;
					dataset(node, nodes[n]);
				}

				if ((n = 'I') in nodes) {
					ignore[n] = null;
					children = nodes.I;

				} else if ((n = 'T') in nodes) {
					ignore[n] = null;
					n = nodes[n];
					if (Array.isArray(n)) {
						dataset(node, gettext.DOM_id_key, n[0]);
						for (var i = 1; i < n.length; i++)
							dataset(node, gettext.DOM_id_key + i, n[i]);
					} else {
						dataset(node, gettext.DOM_id_key, n);
						// for gettext.apply(null, n);
						n = [ n ];
					}
					// assert: Array.isArray(n)

					if (!(children = nodes[tag])) {
						// 不改變 nodes，否則可能造成重複利用時出現問題。
						// nodes[tag] =
						if (nodes.on_language_changed) {
							// @see gettext.translate_node()
							nodes.on_language_changed.call(node, n);
						} else {
							children = gettext.apply(null, n);
						}
					} else if (typeof children === 'string'
							|| typeof children === 'number') {
						children = dataset(node, gettext.DOM_id_key, children);
						if (nodes.on_language_changed) {
							nodes.on_language_changed.call(node, [ children ]);
						} else {
							// nodes[tag] =
							children = gettext(children);
						}
					}

					n = options.next_node;
					// 只是簡易處理，不完善。
					// @see extract_message_from_nodes() @ base.js
					if (library_namespace.is_Object(n) && ('T' in n)) {
						n = n.T;
						n = Array.isArray(n) ? gettext.apply(null, n)
								: gettext(n);
					}
					children = gettext.append_message_tail_space(children, {
						no_more_convert : true,
						next_sentence : n
					});
				}

				if ((n = 'R') in nodes) {
					ignore[n] = null;
					if (n = nodes[n]) {
						// dataset(node, gettext.DOM_id_key + '_R', n);
						n = gettext(n);
						if (!('title' in nodes)) {
							// nodes.title = n;
							node.title = n;
						}
						if (tag === 'img' && n.length < 20
						//
						&& !('alt' in nodes)) {
							// nodes.alt = n;
							node.alt = n;
						}
					}
				}

				// 設定 children nodes
				ignore[tag_key || tag] = null;
				if (children === undefined)
					children = nodes[tag_key || tag];

				// 自動作 list 的轉換
				if (tag in {
					ol : 1,
					ul : 1
				} && Array.isArray(children)) {
					var i = 0, o = [], l = children.length, t, c, change = false;
					for (; i < l; i++)
						if (c = children[i]) {
							t = typeof c === 'string' || typeof c === 'number';
							if (!t && library_namespace.is_Object(t)) {
								t = c.$;
								if (!t)
									for (t in c)
										break;
								t = t.toLowerCase() !== 'li';
							}

							if (t)
								change = true;
							o.push(t ? {
								li : c
							} : c);
						}

					// 盡量別動到原來的
					if (change)
						children = o;

				} else if (tag === 'select'
						&& library_namespace.is_Object(children)) {
					var i;
					for (i in children)
						break;

					if (i !== 'option') {
						var o = [];
						for (i in children)
							o.push({
								option : children[i],
								value : i
							});

						// 盡量別動到原來的
						children = o;
					}
				}
				// https://html.spec.whatwg.org/#the-dl-element
				// TODO: {dl: { title: description, title: description, ... } }

				// attributes
				if ('A' in nodes) {
					var a = nodes.A;
					if (typeof a === 'string')
						a = split_String_to_Object(a);

					for (n in a)
						s(n, a[n]);
				}

				for (n in nodes)
					if (!(n in ignore)) {
						if (false)
							library_namespace.debug('new_node: set attribute ['
									+ n + '] = [' + nodes[n] + ']');
						s(n, nodes[n]);
						if (false)
							library_namespace.debug('new_node: get attribute ['
									+ n + '] = [' + node.getAttribute(n) + ']');
					}
			} else if (tag && !_.is_HTML_element(node)) {
				show_node(node);
				library_namespace.warn('new_node: node is not a HTML Element!');
			}

		} else if (typeof nodes !== 'string' && !Array.isArray(nodes)
				&& !_.is_NodeList(nodes)
				&& (!_.is_HTML_element(nodes) || isNaN(nodes.nodeType))) {
			// for Safari: Array.isArray(nodes)
			if (nodes)
				library_namespace.warn('new_node: Unknown nodes [' + nodes
						+ ']');

			// release memory, free memory
			node = null;
			return;
		} else
			node = nodes;

		// layer 處理: 插入document中: 0<layer>1...2</layer>3。default: 2.
		if (typeof layer !== 'undefined' && layer !== null) {
			// 正規化 layer
			// for_each: type→handler function
			if (library_namespace.is_Function(layer))
				for_each = layer;
			else {
				if (Array.isArray(layer)) {
					for_each = layer[1];
					layer = layer[0];
				}
				// symbols
				parent = {
					before : 0,
					// insert as the first children of the HTML Element
					first : 1,
					last : 2,
					after : 3,
					// clean inner first
					clean : null
				};
				if (for_each in parent)
					for_each = parent[for_each];

				if (layer === 0)
					layer = document.body;
				else if (typeof layer === 'string')
					layer = get_element(layer);
				// [object HTMLLIElement]
				// 注意: layer 可能是.. e.g., "[object SVGTitleElement]"
				if (library_namespace.is_debug() && !_.is_DOM_NODE(layer)) {
					if (false)
						library_namespace.warn('is_ELEMENT_NODE: '
								+ _.is_ELEMENT_NODE);
					show_node(layer);
					library_namespace
							.warn('new_node: layer is not a HTML Element!');
				}

				if (for_each == 1 && (parent = layer.firstChild))
					// 1: add as firstChild of layer
					for_each = handler[1];

				else if (for_each >= 0 && for_each !== 2 && for_each < 5
						&& for_each !== null) {
					if (parent = layer.parentNode) {
						// 0: add as priviusSibling of layer.
						// 3: add as nextSibling of layer.
						// 4: add as parent of layer.
						for_each = handler[for_each];
					} else
						// 輸入的 layer 為create出來的?
						library_namespace
								.warn('new_node: No parent node found!');

				} else if (_.is_DOM_NODE(layer)) {
					// ↑ 不用 _.is_ELEMENT_NODE(layer)，
					// layer 可能是.. e.g., "[object SVGTitleElement]"

					// 若輸入 [id, null] 則先清空，相當於 replace。
					if (for_each === null)
						layer = _.remove_all_child(layer);
					// default: appendChild (add as lastChild)
					for_each = handler[2];
				}
			}

		}

		if (!library_namespace.is_Function(for_each))
			for_each = false;

		if (Array.isArray(node)) {
			// 此時 node === nodes
			// nodes = node;
			node = [];
			// 不宜個個重新呼叫是為了效能。
			for (var i = 0, l = nodes.length, n, _l = layer, _p = parent, f = for_each
					&& function(n) {
						if (false)
							console.log('new_node.Array.for_each: '
									+ [ n, _l, _p ].join(', '));
						for_each(n, _l, _p);
					} || null; i < l; i++) {
				if (false)
					alert('node[' + i + ']\n' + nodes[i]);
				n = new_node(nodes[i], f, {
					NS : ns,
					next_node : nodes[i + 1]
				});
				node.push(n);
				if (false) {
					node.push(n = new_node(nodes[i], for_each));
					if (for_each)
						try {
							for_each(n, layer, parent);
						} catch (e) {
							library_namespace.error(e);
							library_namespace.error(
							//
							'new_node: handler function execution error for node Array['
									+ i + '/' + l + ']!<br />' + for_each);
						}
				}
			}

		} else {
			// 預防 ['<a></a>','~~'] 之類。
			if (false) {
				if (typeof node === 'string' && for_each !== handler[0])
					node = document.createTextNode(nodes);
			}

			if (for_each)
				try {
					for_each(node, layer, parent);
				} catch (e) {
					library_namespace.error(e);
					library_namespace
							.error('new_node: handler function execution error!<br />'
									+ for_each);
				}

			// 設定 childNodes.
			// 先插入document而後設定childNodes是因為IE有Cross-Page Leaks.
			// http://www.blogjava.net/tim-wu/archive/2006/05/29/48729.html
			// http://www-128.ibm.com/developerworks/tw/library/x-matters41.html
			// Try to use createDocumentFragment()
			// http://wiki.forum.nokia.com/index.php/JavaScript_Performance_Best_Practices
			if (children !== null && typeof children !== 'undefined')
				new_node(children, node, ns);
		}

		// This helps to fix the memory leak issue.
		// http://www.hedgerwow.com/360/dhtml/ie6_memory_leak_fix/
		// http://jacky.seezone.net/2008/09/05/2114/
		try {
			return typeof node === 'string' ? document.createTextNode(node)
					: node;
		} finally {
			node = null;
		}
	}

	new_node.handler = [
			function(node, layer, p) {
				// 將 node 插入作為 layer 之 previousSibling.
				p.insertBefore(typeof node === 'string' ? document
						.createTextNode(node) : node, layer);
			},
			function(node, layer, p) {
				// 將 node 插入作為 layer 之 firstChild.
				layer.insertBefore(typeof node === 'string' ? document
						.createTextNode(node) : node, p);
			},
			function(n, l) {
				// layer.appendChild()
				var is_e = _.is_DOM_NODE(l), t = is_e ? l.tagName.toLowerCase()
						: null;

				if (typeof n === 'number')
					n = n.toString();

				if (t in {
					// no include <select>!
					textarea : 1,
					input : 1,
					text : 1
				}) {
					l.value = (l.value || '') + (is_e ? n.innerHTML : n);

				} else {
					if (typeof n === 'string') {
						n = n
						// for character (null)
						.replace(/\x00/g,
								'<span class="control_character">\\x00</span>')
						// '­' (hyphen) 這符號(連字符)可以自動斷行，並在斷行時自動加上個橫槓。在顯示長整數時較有用。
						.replace(/(\d{60})/g, '$1­');

						if (n.indexOf('<') === -1
						// e.g., "&CounterClockwiseContourIntegral;"
						&& !/&(?:#\d{1,8}|#x[\dA-F]{4,8}|\w{1,50});/i.test(n)) {
							if (t === 'option' && !l.value)
								l.value = n;
							try {
								l.appendChild(document.createTextNode(n));
							} catch (e) {
								// e.g., <math> @ IE8: 對方法或內容存取發出非預期的呼叫。
								// [object HTMLUnknownElement]
								library_namespace
										.warn('new_node.handler[2]: error: .appendChild(document.createTextNode('
												+ n + '))');
								library_namespace.error(e);
							}
						} else {
							// this may throw error: -2146827687 未知的執行階段錯誤
							try {
								// TODO: parse HTML.
								l.innerHTML += n;
							} catch (e) {
								// TODO: handle exception
							}
						}

					} else if (// _.is_HTML_element(n)
					// for <math>
					_.is_DOM_NODE(n)) {
						t = l.innerHTML;
						try {
							l.appendChild(n);
						} catch (e) {
							// e.g., <math> @ IE8: 對方法或內容存取發出非預期的呼叫。
							// [object HTMLUnknownElement]
							library_namespace
									.warn('new_node.handler[2]: error: .appendChild('
											+ n + ')');
							library_namespace.error(e);
						}
						if (false)
							if (t === l.innerHTML)
								library_namespace
										.warn('new_node.handler[2]: The addition does not change the layer!');

					} else if (_.is_NodeList(n)) {
						// or useing n.forEach()

						// .appendChild() 會把 child node 自 n 中移出，因此必須先轉成 {Array}。
						n = Array.from(n);
						for (var i = 0, length = n.length; i < length; i++) {
							l.appendChild(n[i]);
						}

					} else {
						library_namespace.warn('new_node.handler[2]: 類型不相符! (['
								+ (typeof n) + '] ' + n + ')');
					}
				}

				// free
				n = null;
			},

			function(node, layer, p) {
				// 將 node 插入作為 layer 之 nextSibling.
				// p: parent node of layer
				// TODO: 輸入多 node 時 cache next
				var next = layer.nextSibling;
				if (next)
					p.insertBefore(typeof node === 'string' ? document
							.createTextNode(node) : node, next);
				else
					p.appendChild(typeof node === 'string' ? document
							.createTextNode(node) : node);
			}, function(n, l, p) {
				// node.appendChild
				n.appendChild(p.replaceChild(n, l));
			} ];

	// Namespaces: SVG,MathML,XHTML,XLink,..
	new_node.ns = {
		svg : '2000/svg',
		mathml : '1998/Math/MathML',
		xhtml : '1999/xhtml',
		xlink : '1999/xlink',
		// 亦可用'1999/xhtml'
		html : 'TR/REC-html40',
		html4 : 'TR/REC-html40',
		html5 : 'TR/html5'
	};
	_// JSDT:_module_
	.new_node = new_node;

	/**
	 * <code>
	XML_node('div','id:idName');	doesn't insert, just return the object
	XML_node('div',{'id':null});	won't set id
	XML_node('div',{'id':undefined});	won't set id

	XML_node('div','id:idName',1);	insert at last of document
	XML_node('div',{id:'idName'},refO);	insert before(prepend) obj refO: refO.parentNode.insertBefore(_newNode_,refO)
	XML_node('div','id:idName',document.body);	insert at top of document
	XML_node('div','id:idName',[parent]);	append as a child of obj parent: parent.appendChild(_newNode_)
	XML_node('div','id:idName',[parent,0]);	append as a child of obj parent: parent.appendChild(_newNode_)
	XML_node('div','id:idName',[parent,refNode]);	insert before refNode: parent.insertBefore(_newNode_,refNode)
	XML_node('div','id:idName',[parent,refNode,1]);	insert after refNode: UNDO
	XML_node('div','id:idName',[parent,1]);	insert as the first child of parent: parent.insertBefore(_newNode_,parent.firstChild)
	XML_node('div','id:idName',[0,refNode]);	insert before refNode: document.body.insertBefore(_newNode_,refNode)
	XML_node('div','id:idName',[0]);	append after all: document.body.appendChild(_newNode_,refNode)

	XML_node('div','id:idName',0,'asas');	insert 'asas' as innerText
		new_node({div:'asas',id:'idName'},0);
	XML_node('div','id:idName',0,'<a>sas</a>');	insert 'asas' as innerHTML
		new_node({div:{a:'sas'},id:'idName'},0);
	XML_node('div','id:idName',0,obj);	insert obj as childNode
		new_node({div:obj,id:'idName'},0);
	XML_node('div','id:idName',0,[o1,o2]);	insert o1,o2 as childNodes
		new_node({div:[o1,o2],id:'idName'},0);


	有用到新建 HTML element 的函數執行完畢應該將所有變數，尤其是 object 重設；
	這是因為 HTML element 的存在會使函數裡的 object 變數不能被釋放。
	設成 null 是因為 null 不能設定 method，而 string, number 可以。

	http://www.blogjava.net/tim-wu/archive/2006/05/29/48729.html
	為預防IE Cross-Page Leaks，
	use:
	XML_node(++, ++, [XML_node(..., ..., [meta])]);
	instead of:
	XML_node(..., ..., [meta], XML_node(++, ++));
	P.S. 2007/11/11 似乎已修正？


	buggy 瑕疵:
	XML_node(0,0,[parent],'innerText');	return a textNode append as a child of obj parent

	TODO:
	XML 中 insertBefore(),appendChild()似乎無反應？	http://developer.mozilla.org/en/docs/SVG:Namespaces_Crash_Course
	insertAfter

	</code>
	 */
	_// JSDT:_module_
	.
	/**
	 * create new HTML/XML <a
	 * href="https://developer.mozilla.org/en/DOM/node">node</a>(<a
	 * href="https://developer.mozilla.org/en/DOM/element">element</a>)
	 * 
	 * @deprecated please use new_node() instead
	 * 
	 * @param tag
	 *            tag name
	 * @param propertyO
	 *            attributes object
	 * @param insertBeforeO
	 *            object that we wnat to insert before it
	 * @param innerObj
	 *            inner object(s)
	 * @param styleO
	 *            style object
	 * @return node object created
	 * @requires set_attribute,add_node
	 * @since 2006/9/6 20:29,11/12 22:13
	 * @_memberOf _module_
	 */
	XML_node = function(tag, propertyO, insertBeforeO, innerObj, styleO) {
		// XML 中沒有document.body！
		if (false)
			if (typeof document.body == 'undefined')
				document.body = document.getElementsByTagName('body')[0];

		if (typeof document !== 'object'
				|| (!document.createElement && !document.createElementNS)
				|| !document.body) {
			library_namespace
					.warn('XML_node: Cannot create tag [' + tag + '].');
			return;
		}

		var _NS,
		// Namespaces: SVG,MathML,XHTML,XLink
		_i = new_node.ns,
		// use Namespaces or not
		// buggy now.
		_DOM2 = document.createElementNS ? 1 : 0, _e;

		if (false) {
			// 依styleO指定 Namespace
			if (typeof styleO === 'string') {
				if (styleO.indexOf('://') != -1) {
					_NS = styleO;
					styleO = 0;
				} else if (_i[styleO]) {
					_NS = W3C_BASE + _i[styleO];
					styleO = 0;
				}
			} else {
				// buggy now.
				// undefined == null
				// _NS = styleO === null ? null : W3C_BASE + _i['XHTML'];
				_DOM2 = 0;
			}
		}

		// 指定 Namespace
		if (tag)
			if (_NS = tag.match(/^(.+):([^:]+)$/)) {
				tag = _NS[2];
				_NS = _NS[1];
				if (_NS.indexOf('://') === -1 && (_i = _i[_NS.toLowerCase()]))
					_NS = W3C_BASE + _i;
				if (false)
					library_namespace.warn('XML_node: Add [' + tag + '] of\n'
							+ _NS);
			}

		/**
		 * <code>
		for MathML:
			IE: document.createElement('m:'+tag)
				(surely 'mml:', but 'm:' is default of MathPlayer, so now <html> works without the xmlns attribute)
			NS: document.createElementNS('http://www.w3.org/1998/Math/MathML', tag)
		</code>
		 */
		try {
			_e = tag ? _DOM2 && _NS ? document.createElementNS(_NS, tag)
					: document.createElement(tag/* .replace(/[<>\/]/g,'') */)
					: document.createTextNode(innerObj || '');
		} catch (_e) {
			library_namespace.warn('XML_node: Error create tag:\n' + tag
			// + '\n' + _e.description
			);
			return;
		}
		if (tag)
			_.set_attribute(_e, propertyO);

		// IE需要先appendChild才能操作style，moz不用..??
		if (tag && styleO && _e.style)
			if (typeof styleO === 'string')
				_e.style.cssText = styleO;
			else if (typeof styleO === 'object')
				for (_i in styleO)
					// is_IE?"styleFloat":"cssFloat"
					_e.style[_i === 'float' ? 'cssFloat' in _e.style ? 'cssFloat'
							: 'styleFloat'
							: _i] = styleO[_i];
			else if (false)
				library_namespace.warn('XML_node: Error set style:\n[' + styleO
						+ ']');

		// 插入document中。先插入document而後設定childNodes是因為IE有Cross-Page Leaks
		// http://www.blogjava.net/tim-wu/archive/2006/05/29/48729.html
		// http://www-128.ibm.com/developerworks/tw/library/x-matters41.html
		if (insertBeforeO) {
			var rO = undefined/* [][1] */, tO = function(_o) {
				return typeof _o == 'string'
						&& (_i = document.getElementById(_o)) ? _i : _o;
			}, iO = tO(insertBeforeO);
			// Opera9 need {Array}iO
			if (Array.isArray(iO) && iO.length) {
				// 在disable CSS時可能會 Warning: reference to undefined property
				// iO[1]
				// rO: referrer object,
				// 以此決定以appendChild()或insertBefore()的形式插入
				rO = iO.length > 1 && tO(iO[1]) || 0;
				iO = tO(iO[0]);
			}

			if (false) {
				if (typeof iO !== 'object') {
					iO = document.body;
					if (typeof rO === 'undefined')
						rO = 0;
				}
			}
			if (typeof iO !== 'object') {
				iO = document.body;
				if (typeof rO === 'undefined')
					rO = 0;
			}

			if (typeof rO === 'undefined') {
				rO = iO;
				iO = iO.parentNode;
			}
			if (iO)
				// 預防輸入的rO為create出來的
				if (rO)
					try {
						// .firstChild == .childNodes[0]
						iO.insertBefore(_e, rO === 1 ? iO.firstChild : rO);
					} catch (e) {
						library_namespace.warn('XML_node: ' + e.message
								+ '\niO:' + iO + '\nrO:' + rO);
					}
				else
					// document.body.insertBefore(_e, iO);
					iO.appendChild(_e);
		}

		// 設定 childNodes
		if (tag)
			_.add_node(_e, innerObj);
		if (false) {
			if (tag && innerObj)
				(_i = function(_o) {
					if (typeof _o == 'object') {
						if (_o)
							if (Array.isArray(_o))// && _o.length > 0
								for (var _j = 0; _j < _o.length; _j++)
									_i(_o[_j]);
							else
								_e.appendChild(_o);
						return;
					}
					if (typeof _o == 'number' && !isNaN(_o))
						// _o+='';
						_o = _o.toString();
					if (typeof _o == 'string')
						if (_o.indexOf('<') != -1)
							_e.innerHTML += _o;
						else
							_e.appendChild(document.createTextNode(_o));
					else if (false)
						library_namespace
								.warn('XML_node: Error insert contents:\n['
										+ _o + ']');
				})(innerObj);
		}

		// this helps to fix the memory leak issue
		// http://www.hedgerwow.com/360/dhtml/ie6_memory_leak_fix/
		// http://jacky.seezone.net/2008/09/05/2114/
		try {
			return _e;
		} finally {
			_e = null;
		}
	};

	/**
	 * select/get node/elements/frame/.. 通用.<br />
	 * A simple CSS selector with iframe.<br />
	 * Support #id, type(tag name), .name, .<br />
	 * TODO: 最佳化.
	 * 
	 * @param {String}selector
	 *            CSS selector, XPath, ...
	 * @param {String|HTMLLIElement}[base_space]
	 *            base document/context
	 * @returns node
	 * @see Sizzle, <a
	 *      href="http://simonwillison.net/2003/Mar/25/getElementsBySelector/"
	 *      accessdate="2012/6/20 15:29">getElementsBySelector()</a><br />
	 *      http://www.mrmu.com.tw/2011/10/11/writing-efficient-css-selectors/
	 * 
	 */
	function select_node(selector, base_space, options) {
		if (_.is_ELEMENT_NODE(selector))
			return selector;

		library_namespace.debug('Get [' + selector + ']', 2, 'select_node');
		if (library_namespace.is_Object(base_space)) {
			base_space = base_space.base;
		}

		try {
			if (typeof base_space === 'string' && base_space) {
				base_space = select_node(base_space);
			}
			if (!base_space) {
				library_namespace.debug('Set base to window.document.', 3,
						'select_node');
				base_space = window.document;
			}
			if (library_namespace.is_debug(3)) {
				library_namespace.debug('base_space: ' + base_space
						+ ' (see below):', 3, 'select_node');
				show_node(base_space);
			}

			// http://inspire.twgg.org/programming/javascript/item/383-more-efficient-than-the-native-jquery-dom-selector-queryselector-and-queryselectorall.html
			var result;
			if (base_space.querySelectorAll)
				try {
					library_namespace.debug(
							'using native .querySelectorAll() to select ['
									+ selector.replace(/\$([_a-z][_a-z\d]*)/gi,
											'[name="$1"]') + '].', 2,
							'select_node');
					result = base_space.querySelectorAll(
					// 處理本函數特有之**非標準**功能。尚有問題！
					selector.replace(/\$([_a-z][_a-z\d]*)/gi, '[name="$1"]'));
					if (result.length > 0)
						return result.length > 1 ? result : result[0];
					library_namespace.debug('Nothing got. 嘗試本 library 傳統方法。',
							2, 'select_node');
				} catch (e) {
					library_namespace.debug(
							'可能有不支援的 selector。改回本 library 傳統方法。', 2,
							'select_node');
				}

			result = base_space;
			var tmp_node, tag_name, identifier, part,
			/**
			 * CSS selector match pattern<br />
			 * http://www.w3.org/TR/selectors/<br />
			 * [selector flagment, combinator, tagName/type ONLY or all pattern,
			 * tagName/type, selector notation, identifier/class
			 * name/pseudo-element, attribute selector]
			 */
			pattern = /\s*([>+~])?\s*(([^#.$\[:>+~\s]*)(?:(::?|[#.$])([^#.$\[:>+~\s]+)|\[([^\]]+)\])|[^#.$\[:>+~\s]+)/g,
			// .getElementById()
			get_id = function(id) {
				// if (!id) throw 1;
				// IE 8 中 .getElementById 可能是 'object'!
				var node = typeof result.getElementById !== 'undefined' ? result
						.getElementById(id)
						: base_space.getElementById(id);
				// IE 10 中，只有 <frame> 時，document.getElementById() 得不到 <frame>!
				if (!node && base_space.frames) {
					library_namespace.debug(
							'嘗試採用 document.frames[' + id + ']。', 2,
							'select_node');
					if (node = base_space.frames[id])
						node = node.document;
				}
				return node;
			};
			if (false) {
				// for test
				pattern = /\s*([>+~])?\s*(([^#.\[:>+~\s]*)(?:(::?|[#.])([^#.\[:>+~\s]+)|\[([^\]]+)\])|[^#.\[:>+~\s]+)/g;
				selector = 'node #id > node#id .class +node.class :pseudo~ node:pseudo [attr] node[attr]';
				while (part = pattern.exec(selector)) {
					if (typeof CeL === 'function')
						CeL.log(part.join('<em>|</em>'));
					else
						console.log(part.join('|') + '\n');
				}
			}

			// parse selector
			// pattern.exec('');
			while (part = pattern.exec(selector)) {
				library_namespace.debug('Pattern: [' + part.join('<em>|</em>')
						+ ']', 3, 'select_node');
				// 前置處理 node
				tmp_node = result;
				library_namespace
						.debug(
								'測試是否為從 .getElementsByName(), .getElementsByTagName(), .querySelectorAll() 等得到的 NodeList。',
								3, 'select_node');
				if (_.is_NodeList(tmp_node)) {
					if (library_namespace.is_debug(2))
						if (tmp_node.length === 1)
							library_namespace.debug(
									'It is NodeList. Move to [0].', 2,
									'select_node');
						else
							library_namespace.warn('select_node: 共有 '
									+ tmp_node.length + ' 個 node!');
					tmp_node = tmp_node[0];
				}
				library_namespace.debug('測試是否為 ELEMENT_NODE 或 DOCUMENT_NODE。',
						3, 'select_node');
				if (!_.is_ELEMENT_NODE(tmp_node)
						&& !_.is_DOCUMENT_NODE(tmp_node)) {
					library_namespace.error('select_node: 基準 node.nodeType = '
							+ tmp_node.nodeType
							+ ', '
							+ (_.is_ELEMENT_NODE(tmp_node) ? ''
									: '非 ELEMENT_NODE, ')
							+ (_.is_DOCUMENT_NODE(tmp_node) ? ''
									: '非 DOCUMENT_NODE, ') + 'exit!');
					// show_node(tmp_node);
					break;
				}
				tag_name = _.is_ELEMENT_NODE(tmp_node) ? tmp_node.tagName : '';
				library_namespace.debug('測試 &lt;' + tag_name
						+ '&gt; 是否為 frame。', 3, 'select_node');
				// '[object HTMLFrameElement]' === '' + tmp_node
				if (typeof tag_name === 'string'
						&& (tag_name.toLowerCase() in {
							frame : 1,
							iframe : 1
						})) {
					library_namespace.debug('Reset context for &lt;' + tag_name
							+ '>.', 2, 'select_node');
					base_space = tmp_node =
					/**
					 * @author CE
					 */
					tmp_node.contentWindow.document;
				}
				library_namespace.debug('Try to select ['
						+ part.join('<em>|</em>') + ']'
						+ (tag_name ? ' @ &lt;' + tag_name + '&gt;' : ''), 3,
						'select_node');

				tag_name = part[3] || part[2];
				identifier = part[5];
				switch (part[4]) {
				case '#':
					if (tmp_node = get_id(identifier))
						break;

				case '$':
					// id 與 name 互相查詢。 ** "$" 非標準!! 標準: tag[name=_name_] **
					tmp_node = typeof tmp_node.getElementsByName !== 'undefined' ? tmp_node
							.getElementsByName(identifier)
							: base_space.getElementsByName(identifier)
									|| get_id(identifier);
					break;

				case '.':
					// TODO: class name
					if (identifier && !tmp_node.querySelectorAll) {
						// library_namespace.error('select_node: unknown
						// selector: 尚未實現 class name！ [' +
						// part.join('<em>|</em>') + ']');
						if ((tmp_node = find_class(identifier, tmp_node,
								tag_name))
								&& tmp_node.length === 1) {
							library_namespace.debug('選取單一個 ' + tag_name + '.'
									+ identifier + '。', 3, 'select_node');
							tmp_node = tmp_node[0];
						} else {
							if (tmp_node && tmp_node.length === 0)
								tmp_node = undefined;
							library_namespace.warn('select_node: 共有 '
									+ (tmp_node && tmp_node.length)
									+ ' 個 node!');
						}
						break;
					}

					// case '[':
					// case '>':

				default:
					if (tmp_node.querySelectorAll)
						tmp_node = tmp_node.querySelectorAll(part[0].replace(
								/\$([_a-z][_a-z\d]*)/i, '[name="$1"]'));
					else if (tag_name) {
						tmp_node = tmp_node.getElementsByTagName ? tmp_node
								.getElementsByTagName(tag_name) : base_space
								.getElementsByTagName(tag_name);
					} else {
						library_namespace
								.error('select_node: unknown selector: 尚未實現之功能！ ['
										+ part.join('<em>|</em>') + ']');
						return tmp_node;
					}
				}

				if (tmp_node) {
					result = tmp_node;
					// show_node(result);
				} else {
					library_namespace.warn('No [' + part[0] + '] got.');
					break;
				}
			}
			return result;

		} catch (e) {
			library_namespace
					.warn('select_node('
							+ selector
							+ '): '
							+ (
							// @IE9: Error null: 5007 [TypeError] (facility code
							// 10): 無法取得屬性 'getElementsByName' 的值: 物件為 null
							// 或未經定義.
							(e.number & 0xFFFF) === 5007 ? "The base node isn't YET READY?"
									: 'error!'));
			library_namespace.error(e);
		}
	}

	_// JSDT:_module_
	.select_node = select_node;

	// ---------------------------------------------------

	/**
	 * 對 nodes 指定之每一個 node 皆執行相同操作。<br />
	 * TODO: buggy.
	 * 
	 * @example <code>
	 * CeL.for_nodes(function(n){CeL.remove_node(n);},'blockquote');
	 * </code>
	 * 
	 * @param {Function}action
	 *            指定動作。若 return true 或 throw 則回傳失敗的 node。
	 * @param {String|NodeList|Array|HTMLElement}[nodes]
	 *            指定 selector || nodes || node, filter。
	 * @param {Object}[options]
	 *            指定 options。<br />
	 *            options.self = this object<br />
	 *            options.traversal = depth/breadth: traversal: depth-first
	 *            search (DFS) / breadth-first search (BFS).
	 * 
	 * @since 2012/10/15 23:39:12
	 */
	function for_nodes(action, nodes, options) {

		if (!nodes) {
			// select all nodes
			nodes = document.querySelectorAll ? document.querySelectorAll('*')
					: select_node('*');
		} else if (typeof nodes === 'string') {
			// selector || id
			nodes = select_node(nodes) || get_element(nodes);
		}

		if (_.is_ELEMENT_NODE(nodes) || _.is_DOCUMENT_NODE(nodes)) {
			if (nodes.item && !isNaN(nodes.length))
				// for <select>.options @ IE8
				nodes = library_namespace.get_tag_list(nodes);
			else
				// HTMLElement
				nodes = [ nodes ];
		} else if (_.is_NodeList(nodes)) {
			// 固定下來，預防中途變動。
			nodes = library_namespace.get_tag_list(nodes);
		}

		if (typeof action !== 'function'
		// || !Array.isArray(nodes)
		) {
			return true;
		}

		var traversal, thisArg;
		if (length > 0)
			library_namespace
					.debug('get ' + length + ' nodes.', 2, 'for_nodes');

		if (library_namespace.is_Object(options)) {
			thisArg = options.self;
			traversal = options.traversal;
			if (traversal === 'depth')
				traversal = 1;
			else if (traversal === 'breadth')
				traversal = 2;
			else if (traversal) {
				traversal = 1;
			}

			if (traversal === 2) {
				// TODO:
				throw 'NYI: breadth-first search';
			}
		}

		for (var index = 0, length = nodes.length, child; index < length; index++) {
			var node = nodes[index];
			if (!node) {
				return;
			}

			if (traversal === 1 && (child = node.childNodes)) {
				if (child = for_nodes(action, child, options))
					// 直接跳出。
					return node;
			}

			if (!node.parentNode
			//
			|| options && options.leaf_only && node.childNodes.length > 0) {
				continue;
			}

			// use node.parentNode to get parent node
			// in traversal, node.parentNode.childNodes[index] === node
			if (thisArg ? action.call(thisArg, node, index, nodes) : action(
					node, index, nodes)) {
				// 直接跳出。
				return node;
			}
			if (false) {
				try {
					if (thisArg ? action.call(thisArg, node, index, nodes)
							: action(node, index, nodes))
						throw 0;
				} catch (e) {
					return node;
				}
			}
		}

		// return nodes;
	}

	_// JSDT:_module_
	.for_nodes = for_nodes;

	// ---------------------------------------------------

	// 在全局遍歷中，可用來代替 from_node.nextSibling
	function next_node_of(from_node) {
		var next_node = from_node.firstChild;
		if (false)
			console.log([ 'firstChild', next_node ]);
		if (!next_node) {
			if (false) {
				console.log([ 'nextSibling', from_node.nextSibling ]);
				console.log([ 'parentNode', from_node.parentNode ]);
			}
			while (!(next_node = from_node.nextSibling)
			//
			&& (from_node = from_node.parentNode)
					&& from_node !== document.body) {
				;
			}
		}

		// assert:
		// nodes = document.querySelectorAll('*');
		// next_node === nodes[nodes.indexOf(from_node) + 1]
		return next_node;
	}

	// @see traversal @ CeL.data.code
	// https://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html
	// https://www.w3.org/wiki/Traversing_the_DOM
	// @see test_querySelectorAll.htm
	function traversal_DOM(action, options, from_node) {
		if (!from_node) {
			if (_.is_ELEMENT_NODE(options)) {
				from_node = options;
				options = null;
			} else {
				from_node = document.body;
			}
		}
		if (action(from_node)) {
			return;
		}

		var next_node = next_node_of(from_node);

		if (next_node) {
			// setImmediate()
			setTimeout(function() {
				traversal_DOM(action, options, next_node);
			}, 0);
		} else if (options && typeof options.last === 'function') {
			options.last();
		}
	}

	// 在全局遍歷中，可用來代替 from_node.previousSibling
	function previous_node_of(from_node) {
		var next_node = from_node ? from_node.previousSibling : document.body;
		if (next_node) {
			// 找到本序列最後一個 child node
			while (next_node.childNodes && next_node.childNodes.length > 0) {
				next_node = next_node.childNodes[next_node.childNodes.length - 1];
			}
		} else {
			next_node = from_node.parentNode;
		}

		// assert:
		// nodes = document.querySelectorAll('*');
		// next_node === next_node === nodes[nodes.indexOf(from_node) - 1]
		return next_node;
	}

	function traversal_DOM_backward(action, options, from_node) {
		if (!from_node) {
			if (_.is_ELEMENT_NODE(options)) {
				from_node = options;
				options = null;
			}
		} else if (action(from_node)) {
			return;
		}

		var next_node = previous_node_of(from_node);

		if (next_node) {
			// setImmediate()
			setTimeout(function() {
				traversal_DOM_backward(action, options, next_node);
			}, 0);
		} else if (options && typeof options.last === 'function') {
			options.last();
		}
	}

	_.next_node_of = next_node_of;
	_.traversal_DOM = traversal_DOM;
	_.previous_node_of = previous_node_of;
	_.traversal_DOM.backward = traversal_DOM_backward;

	// ---------------------------------------------------

	/**
	 * 
	 * @param node
	 * @param actions
	 * @returns
	 */
	function for_attributes(node, actions) {
		if (typeof actions === 'string' && actions)
			actions = new RegExp(actions, 'i');

		var index = 0, attributes = node.attributes, attribute, length = attributes.length, cache,
		//
		is_RegExp = library_namespace.is_RegExp(actions);

		for (; index < length; index++) {
			// attribute = attributes[index];
			attribute = attributes.item(index);
			if (is_RegExp) {
				if (!actions.test(attribute.nodeName))
					continue;
			} else if (typeof actions === 'function')
				actions(attribute.nodeName, attribute.nodeValue, node);
			if (!cache)
				cache = Object.create(null);
			// attribute.nodeName === attribute.name
			// attribute.nodeValue === node.getAttribute(attribute_name)
			cache[attribute.nodeName] = attribute.nodeValue;
		}

		return cache;
	}

	_// JSDT:_module_
	.for_attributes = for_attributes;

	/**
	 * <code>
		用在top的index.htm中，當setTopP()後指定特殊頁面	2005/1/26 21:46
	set:	window.onload=setFrame;
		var setFrameTarget='MAIN',setFrameTargetSet={'menu.htm':'MENU','all.htm':'MENU','midi.htm':'MIDI'};

	xhtml1-frameset.dtd中<script>只能放在<head>
	</code>
	 */
	var setFrameTarget, setFrameTargetSet; // 預設target, 轉頁的target lists
	// setFrame[generateCode.dLK]='setFrameTarget,setFrameTargetSet';
	function setFrame() {
		if (false) {
			alert(window.name);
			for (var i = 0; i < window.frames.length; i++)
				alert(window.frames[i].name);
			alert(top.location.href + '\n' + location.href + '\n'
					+ (top.location.href != location.href) + '\n'
					+ (window.top != window.window));
		}
		if (// top.location.href!==location.href
		window.top !== window.window) {
			window.top.location.replace(location.href);
			return;
		}
		var l, f;
		// IE在about:blank的情況下呼叫網頁，網頁完全載入前location無法呼叫。例如從FireFox拉進IE時使用location.*有可能'沒有使用權限'，reload即可。
		try {
			l = location.hash.slice(1);
		} catch (e) {
			return;
		}
		if (typeof setFrameTargetSet != 'object')
			setFrameTargetSet = Object.create(null);
		if (l)
			try {
				l = decodeURIComponent(l);
			} catch (e) {
				l = unescape(l);
			}
		// 這一項會reload
		// location.hash='';
		if (l
				&& (f = (f = l.match(/([^\/]+)$/) ? RegExp.$1 : l)
						&& (f = f.match(/^([^?#]+)/) ? RegExp.$1 : f)
						&& (l in setFrameTargetSet) ? setFrameTargetSet[f]
						: setFrameTarget) && f != window.name
				&& window.frames[f] && window.frames[f].location.href != l) {
			if (false)
				alert(l + '\n==>\n' + f);
			window.open(l, f);
			if (false) {
				l = window.open(l, f).top;
				l.focus();
				alert(l != self.top);
				alert(l + '\n' + f);
				// moz需要等到frame
				// load之後才能得到window.frames[f].location.href==l的結果，所以可以考慮作setTimeout的延遲。但是假如真的不是預設的page，這樣會造成多load一遍。
				if (l != self.top)
					self.top.close();
			}
		}
		if (false)
			setTimeout('alert(window.frames["' + f + '"].location.href);', 900);
	}

	/**
	 * <code>
		set window.top page to certain location

		setTopP(location, search)

		search === setTopP_doTest: do a test, return window.top不為指定頁?1:0
	</code>
	 */
	var setTopPDTopP,
	// default top page(file) path
	setTopP_doTest = .234372464;
	// setTopP[generateCode.dLK]='dBasePath,getFN,setTopPDTopP,setTopP_doTest';
	function setTopP(l, s) {
		if (!setTopPDTopP)
			return 2;
		if (!l)
			l = dBasePath(setTopPDTopP) + getFN(setTopPDTopP);
		// alert(l);
		if (typeof s == 'undefined')
			try {
				// IE在about:blank的情況下呼叫網頁，網頁完全載入前location無法呼叫。
				// 例如從FireFox拉進IE時使用location.*有可能'沒有使用權限'，reload即可。
				s = window/* self */.location.search;
			} catch (e) {
				return;
			}
		var t, r = /[\/\\]$/i, ri = /[\/\\](index\.[xs]?html?)?$/i;
		try {
			// top.location.pathname在遇到local file時可能出問題。
			// 若不同domain時top.location也不能取用，應改成window.top!=window.window
			t = window.top.location.href.replace(/[?#](.*)$/, '');
		} catch (e) {
			t = '';
		}
		if (false)
			alert(t + '\n' + l + '\n' + (t != l));
		if (t != l && !(r.test(l) && ri.test(t)) && !(ri.test(l) && r.test(t)))
			if (s === setTopP_doTest)
				return 1;
			// replace() 方法可以開啟檔案，但是卻不會更動瀏覽器的瀏覽歷程（history）內容.
			// IE6 若 location.href.length > 2K，光是'location.search'這項敘述就會導致異常。
			else
				// 預設page：xx/和xx/index.htm相同
				window.top.location.replace(l + s + '#'
						+ encodeURIComponent(location.href));
	}

	// 設在body.onload，改變IE中所有<a>在滑鼠移入移出時的 window.status
	// old status,也可設定event.srcElement.ostatus等等，但考慮到將造成記憶體浪費…
	var setAstatusOS;
	// setAstatus[generateCode.dLK]='setAstatusOver,setAstatusOut';
	function setAstatus() {
		if (library_namespace.is_WWW() && typeof window.event !== 'undefined'
				&& typeof window.status === 'string'
		// ||typeof event.srcElement === 'undefined'
		)
			// 預防版本過低(4以下)的瀏覽器出現錯誤：event至IE4才出現
			for_nodes(function(o) {
				if (o.title && !o.onmouseover && !o.onmouseout)
					o.onmouseover = setAstatusOver,
							o.onmouseout = setAstatusOut;
			}, 'a');
	}
	// setAstatusOver[generateCode.dLK]=setAstatusOut[generateCode.dLK]='setAstatusOS';
	function setAstatusOver() {
		var o = window.event.srcElement;
		if (o.title) {
			setAstatusOS = window.status, window.status = o.title;
			return true;
		}
	}
	function setAstatusOut() {
		if (false) {
			var o = event.srcElement;
			if (typeof o.ostatus != 'undefined') {
				window.status = o.ostatus;
				return true;
			}
		}
		window.status = setAstatusOS;
		return true;
	}

	/**
	 * fill data to table. 增加 table 的列(row)
	 * 
	 * @param {Array|Object}
	 *            data data list
	 * @param table_element
	 *            table element
	 * @param {Array}
	 *            header header list
	 * @return
	 * @example <code>
		table_list([list1],[list2],..)
		e.g.,	table_list([1,2,3,4],[4,5,3,4]);
		table_list([[list1],[list2],..])
		e.g.,	table_list( [ [1,2,3,4],[4,5,3,4] ] );
	 </code>
	 * @since 2010/05/03 14:13:18
	 * @_memberOf _module_
	 * @see http://www.datatables.net/
	 */
	function table_list(data, table_element, header, do_clean) {
		var i = 0, l, add_list = function(array, d) {
			if (!Array.isArray(array))
				return;

			var j = 0, tr = document.createElement('tr'), td, array, L = array.length;
			for (; j < L; j++) {
				td = document.createElement(d || 'td');
				td.appendChild(document.createTextNode(array[j]));
				tr.appendChild(td);
			}
			table_element.appendChild(tr);
		};

		if (typeof table_element === 'string')
			table_element = document.getElementById(table_element);

		if (false) {
			// in Chrome/5.0.342.9 @ Ubuntu, 加了會出問題。
			try {
				if (l = table_element.getElementsByTagName('tbody'))
					table_element = l[0];
			} catch (e) {
			}
		}

		if (do_clean)
			_.remove_all_child(table_element);
		if (false) {
			try {
				// moz
				table_element.innerHTML = '';
			} catch (e) {
				try {
					// alert(table_element.rows.length);
					// IE
					for (var i = table_element.rows.length; i > 0;)
						table_element.deleteRow(--i);
				} catch (e) {
				}
			}
		}

		if (header)
			add_list(header, 'th');

		if (data.length === 1 && typeof (l = data[0]) === 'object'
				&& Array.isArray(l[0]))
			data = l;

		if (Array.isArray(data))
			for (l = data.length; i < l; i++) {
				add_list(data[i]);
			}
		else if (library_namespace.is_Object(data)) {
			for (i in data) {
				add_list([ i, data[i] ]);
			}
		} else
			library_namespace.debug('Error input: not legal data!');
	}

	_// JSDT:_module_
	.table_list = table_list;

	if (false) {

		Array.from_table(CeL.get_file(file_name))
		//
		.forEach(function(field) {
			// field === [ tr ];
		});

	}

	function Array_from_table(table_element, options) {
		if (typeof table_element === 'string')
			if (/<table\s/i.test(table_element)) {
				var data = table_element;
				(table_element = document.createElement('div')).innerHTML = data;
				// Release memory. 釋放被占用的記憶體.
				data = null;
			} else
				table_element = document.getElementById(table_element);

		var tag = table_element && table_element.tagName;
		if (tag)
			tag = tag.toLowerCase();
		if (table_element
		//
		&& tag !== 'table' && tag !== 'tbody')
			if (table_element.getElementsByTagName) {
				table_element = table_element.getElementsByTagName('table');
				if (table_element.length !== 1) {
					library_namespace.error('table element 之個數不恰好為一！');
					return;
				}
				if (library_namespace.is_debug())
					library_namespace.warn('使用指定 element 唯一之 table element！');
				table_element = table_element[0];
			} else
				table_element = null;

		if (!table_element)
			return;

		function add_TR(tr, is_header) {
			var i = 0, childNodes = tr.childNodes, length = childNodes.length, tag, list = [];
			for (; i < length; i++) {
				tag = childNodes[i].tagName.toLowerCase();
				if (tag === 'td')
					list.push(childNodes[i].innerHTML);
			}
			if (list.length > 0) {
				if (is_header)
					list.is_header = true;
				array.push(list);
			}
		}

		var tBodies = table_element.tBodies;
		if (tBodies && tBodies.length === 1)
			// 一般情況。
			table_element = tBodies[0], tBodies = null;
		else
			tBodies = [];

		var i = 0, childNodes = table_element.childNodes, length = childNodes.length, array = [];
		for (; i < length; i++) {
			tag = childNodes[i].tagName.toLowerCase();
			if (tag === 'tr' || tag === 'th')
				add_TR(childNodes[i], tag === 'th');
		}

		if (tBodies && tBodies.length > 0 && array.length === 0)
			array = Array_from_table(tBodies[0], options);

		return array;
	}

	library_namespace.set_method(Array, {
		from_table : Array_from_table
	});

	/**
	 * <code>
	Copy id(or object) to user's clipboard or Paste clipboard to id(or object).

	return the value set to clipboard
	http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_textrange.asp
	http://msdn.microsoft.com/workshop/author/dhtml/reference/collections/textrange.asp
	http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/execcommand.asp
	way 2:use window.clipboardData	http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/clipboarddata.asp

	clipboardFunction()	paste/get clipboard
	clipboardFunction(0,divObj)	paste/get clipboard to divObj
	clipboardFunction(1,'divObj name')	Copy divObj to clipboard/set clipboard
	clipboardFunction(2,'dcfvdf')	set clipboard by string
	clipboardFunction(3,divObj)	Copies divObj to the clipboard/set clipboard and then deletes it. *return the value set to clipboard
	</code>
	 */
	var clipboardFunctionObj = 'clipboardFunctionDiv';
	// clipboardFunction[generateCode.dLK]='clipboardFunctionObj';
	// method,object/(string)set value
	function clipboardFunction(m, o) {
		if (window.navigator.appName == "Microsoft Internet Explorer") {
			var t, O, tN;
			if (m == 2)
				t = o, o = '';
			else if (typeof o == 'string')
				o = document.getElementById(o);
			// try .nodeName instead of .tagName
			// http://twpug.net/modules/smartsection/item.php?itemid=35
			if ((typeof o != 'object' || !o || (tN = (o.tagName || '')
					.toLowerCase()) != 'textarea'
					&& tN != 'select'
					&& tN != 'option'
					&& (tN != 'input' || o.type != 'text') && (O = o))
					&& !(o = document.getElementById(clipboardFunctionObj)))
				// textarea,select,option,input需使用.value!
				// o.type!='INPUT'||o.type!='text'：這樣大概也沒copy的價值了吧，應該會出現錯誤。
				try {
					// 只對IE5.5之後有用
					document.body.appendChild(o = document
							.createElement('textarea')),
							o.id = clipboardFunctionObj;
				} catch (e) {
					return;
				}
			// var t=document.body.createTextRange(); t.moveToElementText(o);
			if (m == 2)
				o.value = t;
			else {
				if (O)
					o.value = O.textContent || O.innerText;
				if (m == 3)
					t = o.value;
			}
			if (o.id == clipboardFunctionObj)
				// 得出現才能execCommand()
				o.style.display = 'block';
			o.createTextRange()// TextRange Object
			.execCommand(m ? m == 3 ? "Cut" : "Copy" : "Paste");
			if (o.id == clipboardFunctionObj)
				o.style.display = 'none';
			if (false) {
				t.execCommand("ForeColor", "false", "plum"), t.execCommand(
						"BackColor", "false", "glay");
				alert(o.tagName + '\n' + o.id + '\n[' + o.innerText + ']\n'
						+ (m ? m == 3 ? "Cut" : "Copy" : "Paste"));
			}
			if (m != 3)
				t = o.value;
			if (O)
				if (O.textContent !== undefined)
					O.textContent = o.value;
				else
					O.innerText = o.value;
			return t;
		}

		// http://www.mozilla.org/xpfe/xptoolkit/clipboard.html
		// http://mozilla.org/editor/midasdemo/securityprefs.html
		// http://blog.darkthread.net/blogs/darkthreadtw/archive/2009/06/21/4850.aspx
		// http://www.webdeveloper.com/forum/archive/index.php/t-170520.html
		// http://forum.moztw.org/viewtopic.php?p=131407
		if (false) {
			// …不能用！
			if (window.navigator.appName == "Netscape") {
				if (typeof o == 'string')
					o = document.getElementById(o);
				if (m == 2 || !o || o.tagName != 'TEXTAREA'
						&& o.tagName != 'SELECT' && o.tagName != 'OPTION'
						&& (o.tagName != 'INPUT' || o.type != 'text'))
					return; // 無法設定

				if (!Zwischenablage) {
					// 初始設定
					netscape.security.PrivilegeManager
							.enablePrivilege("UniversalSystemClipboardAccess");
					// var fr = new java.awt.Frame();
					Zwischenablage = new java.awt.Frame().getToolkit()
							.getSystemClipboard();
				}

				if (m == 0) {
					var Inhalt = Zwischenablage.getContents(null);
					if (Inhalt != null)
						o.value = Inhalt
								.getTransferData(java.awt.datatransfer.DataFlavor.stringFlavor);
				} else {
					// m=1,3
					o.select();
					Zwischenablage.setContents(
							new java.awt.datatransfer.StringSelection(o.value),
							null);
				}

				return o.value;
			}
		}
	} // clipboardFunction()

	_// JSDT:_module_
	.Clipboard = Clipboard;
	function Clipboard() {
	}

	Clipboard.get = function() {
		var clip;
		if (clip = window.clipboardData) {
			clip.getData('Text');
		}
	};

	// 2010/1/15 00:17:38
	// IE, FF only
	// http://www.jeffothy.com/weblog/clipboard-copy/
	// http://bravo9.com/journal/copying-into-the-clipboard-with-javascript-in-firefox-safari-ie-opera-292559a2-cc6c-4ebf-9724-d23e8bc5ad8a/
	// http://code.google.com/p/zeroclipboard/
	Clipboard.set = function(text) {
		// TODO: use:
		// succeeded = document.execCommand('copy')

		var clip;
		if (clip = window.clipboardData) {
			clip.clearData();
			clip.setData('Text', text);
		} else if (library_namespace.is_WWW() && window.Components) {
			library_namespace
					.require_netscape_privilege(
							// 在您的機器上執行或安裝軟體
							'UniversalXPConnect',
							function() {
								// https://developer.mozilla.org/en/Using_the_Clipboard
								// [xpconnect wrapped nsIClipboardHelper]
								return Components.classes["@mozilla.org/widget/clipboardhelper;1"]
										.getService(
												Components.interfaces.nsIClipboardHelper)
										// 跳出函數即無效，因此不能 cache。
										.copyString(text);
							});
		} else if (navigator.userAgent.indexOf("Opera") != /* NOT_FOUND */-1) {
			// window.location = text;
		}
	};

	/*
	 * 2009/5/13 21:21:49 unfinished
	 */
	function clipB() {
	}
	clipB.start_op = function() {
		var o = this.temp_obj;
		if (!o) {
			document.body.appendChild(o = document.createElement('div'));
			// for modify
			o.contentEditable = true;
			// o.style.height = o.style.width = 0;
			this.temp_obj = o;
		}

		document.selection.empty();
		// initial
		_.remove_all_child(o);
		// 得出現才能 focus(), execCommand()
		o.style.display = 'block';
		o.focus();
		return o;
	};
	clipB.end_op = function() {
		var o = this.temp_obj;
		document.selection.empty();
		if (o)
			o.style.display = 'none';
	};
	// return [text, obj]
	clipB.get_obj = function(t) {
		var o;
		if (typeof t == 'object' && 'innerHTML' in t
				|| (o = document.getElementById('' + t)) && (t = o))
			return [ t.innerHTML, t ];
		return [ t ];
	};
	clipB.paste_to = function(o) {
		o = this.get_obj(o);
		if (o = o[1])
			o.innerHTML = this.get(1);
	};
	clipB.set = function(o) {
		o = this.get_obj(o);
	};
	// get HTML
	clipB.get = function(h) {
		var o = this.start_op(), r = document.selection.createRange(), t;
		r.select();
		r.execCommand('Paste');
		t = h ? r.htmlText : r.text;
		this.end_op();
		return h ? o.innerHTML : o.textContent || o.innerText;
	};
	clipB.cut_from = function(o) {
		o = this.get_obj(o);
	};

	// 從後面調過來的
	var disabledKM = 0, scrollToXY, scrollToInterval, scrollToOK, doAlertDivName, doAlertOldScrollLocation;

	_// JSDT:_module_
	.
	/**
	 * 設定document.cookie. You can store up to 20 name=value pairs in a cookie,
	 * and the cookie is always returned as a string of all the cookies that
	 * apply to the page. TODO: HTML5 localStorage (name/value item pairs). test
	 * various values. document.cookie.setPath("/");
	 * 
	 * @example <code>
		範例：
	//		delete domain
	set_cookie('domain',0);
	//		一個月(30 days)
	set_cookie('expires',30);
	//		設定name之值為jj
	set_cookie(name,'jj');
	//		設定name之值為56
	set_cookie(name,56);
	//		除去name
	set_cookie(name);
	//		設給本host全部使用
	set_cookie(_.set_cookie.f.set_root);
	//		設給本domain使用
	set_cookie(_.set_cookie.f.use_domain);
	//		依現有設定除去所有值
	set_cookie(_.set_cookie.f.delete_all);
	//		除去所有值
	set_cookie(_.set_cookie.f.delete_all_root);
	//		永久儲存（千年）
	set_cookie(_.set_cookie.f.forever);
	//		準確設定這之後只在這次瀏覽使用這些cookie，也可用set_cookie('expires',-1);
	set_cookie(_.set_cookie.f.moment);
	//		將expires設定成forever或moment後再改回來（不加expires設定）
	set_cookie('expires',0);

	 * </code>
	 * 
	 * @param {String|Object|_module_.set_cookie.f}
	 *            name set_cookie.f flag | varoius name
	 * @param value
	 *            varoius value
	 * @param {Boolean|Object}
	 *            config 若對於特殊設定僅暫時設定時，設定此項。
	 * @returns
	 * @see Chrome doesn't support cookies for local files unless you start it
	 *      with the --enable-file-cookies flag. chrome.exe
	 *      --allow-file-access-from-files --enable-extension-timeline-api
	 *      --enable-file-cookies
	 *      http://stackoverflow.com/questions/335244/why-does-chrome-ignore-local-jquery-cookies
	 *      http://code.google.com/p/chromium/issues/detail?id=535
	 * @_memberOf _module_
	 */
	set_cookie = function(name, value, config) {
		if (!library_namespace.is_WWW(true)
				|| typeof document.cookie !== 'string'
				|| typeof name === 'undefined')
			return;

		var _s = _.set_cookie, flag = _s.f, m;
		if (!config)
			// 預設傳到 default
			config = _s.c;
		else if (!library_namespace.is_Object(config))
			// document.cookie 不須每次詳細設定，但這樣可以選擇 {} / {...} / true
			config = Object.assign(Object.create(null), _s.c);

		if (library_namespace.is_Object(name)) {
			for ( var i in name)
				_s(i, name[i], config);
			return config;
		}

		try {
			/**
			 * <code>	This will cause error in Phoenix 0.1:
			Error: uncaught exception: [Exception... "Component returned failure code: 0x8000ffff (NS_ERROR_UNEXPECTED) [nsIDOMNavigator.cookieEnabled]"  nsresult: "0x8000ffff (NS_ERROR_UNEXPECTED)"  location: "JS frame :: http://lyrics.meicho.com.tw/game/game.js :: set_cookie :: line 737"  data: no]
			</code>
			 */
			if (window.navigator && !window.navigator.cookieEnabled)
				throw 1;
		} catch (e) {
			library_namespace.warn('set_cookie: We cannot use cookie!');
			return;
		}

		if (false)
			library_namespace.debug('set_cookie: ' + name + ' = [' + value
					+ ']', 1);
		if (name === flag.set_root) {
			// 設給本 host 全部使用
			name = 'path';
			value = '/';
		} else if (name === flag.use_domain) {
			// 設給本 domain 使用，尚不是很好的判別法。
			name = 'domain';
			value = location.hostname.replace(/^[^.]+\./, '.');
		} else if (name === flag.forever) {
			// 永久儲存，date之time值不能>1e16
			name = 'expires';
			value = 1e14;
		} else if (name === flag.moment) {
			// 準確設定這之後只在這次瀏覽使用這些cookie
			name = 'expires';
			value = -1;
		}

		if (typeof name === 'string'
		// detect special config / 特殊設定
		&& (m = name.match(/^(expires|path|domain|secure)$/i))) {
			name = m[1];
			if (name === 'expires' && typeof value === 'number' && value) {
				if (false) {
					// 幾日
					if (value < 8000)
						value *= 1000 * 60 * 60 * 24;
					// 3e13~千年
					value = (new Date(value < 3e13 ? (new Date).getTime()
							+ value : 1e14)).toUTCString();
				}
				value = (new Date(value < 1e14 ? value < 0 ? 0 : (new Date)
						.getTime()
						+ (value < 8e3 ? value * 1000 * 60 * 60 * 24 : value)
						: 1e14)).toUTCString();
			}
			config[name] = value;
			if (false)
				library_namespace.debug('set_cookie: ' + name + ' = [' + value
						+ ']', 1);
			return name + '=' + value + ';';

		} else {
			var set = name === flag.delete_all_root ? 'expires='
					+ (new Date(0)).toUTCString() + ';path=/;'
					: (typeof value === 'undefined' ? 'expires='
							+ (new Date(0)).toUTCString() + ';'
							: config.expires ? 'expires=' + config.expires
									+ ';' : '')
							+ (config.path ? 'path=' + config.path + ';' : '')
							+ (config.domain ? 'domain=' + config.domain + ';'
									: '') + (config.secure ? 'secure;' : '');

			if (name === flag.delete_all || name === flag.delete_all_root) {
				if (false) {
					var c = document.cookie;
					while (c.match(/([^=;]+)(=[^;]{0,})?/)) {
						c = c.substr(RegExp.lastIndex);
						if (!/expires/i.test(RegExp.$1))
							document.cookie = RegExp.$1 + '=;' + set;
					}
				}
				for (var p = document.cookie.split(';'), n, l = p.length, i = 0; i < l; i++)
					if (!/^\s*expires\s*$/i.test(n = c[i].split('=')[0]))
						document.cookie = n + '=;' + set;
				return document.cookie;

			} else {
				if (false) {
					// 可用escape(value)/unescape()來設定，速度會比較快，但佔空間。
					value = name
							+ '='
							+ (typeof value == 'undefined' ? '' : dQuote(
									'' + value).replace(
									/([\01-\11\13-\14\16-\40=;])/g,
									function($0, $1) {
										var c = $1.charCodeAt(0), d = c
												.toString(16);
										return '\\x' + (c < 16 ? '0' : '') + d;
									})) + ';' + set;
				}
				// 2004/11/23 21:11 因為cookie儲存成中文時會fault,所以只好還是使用escape()
				value = escape(name) + '='
						+ (typeof value == 'undefined' ? '' : escape(value))
						+ ';' + set;
				if (false) {
					library_namespace.debug('set_cookie: [' + value + ']', 1);
					library_namespace.debug('set_cookie: [' + document.cookie
							+ ']', 1);
				}
				// 長度過長時（約4KB）會清空，連原先的值都不復存在！
				return value.length < 4096 && (document.cookie = value) ? value
						: -1;
			}

		}
	};

	_// JSDT:_module_
	.set_cookie.f = {
		moment : -1,
		delete_all : 2,
		delete_all_root : 3,
		set_root : 4,
		use_domain : 5,
		forever : 6
	};

	_// JSDT:_module_
	.
	// 特殊設定
	set_cookie.c = {
		expires : 0,
		path : 0,
		domain : 0,
		secure : 0
	};

	/**
	 * <code>
	flag=0: only get the lastest matched value;
	flag=1: only get all matched in a array;
	other flag: auto detect by name

	//		取得name之值，亦可用RegExp：if(c=get_cookie())c['name1']==value1;
	get_cookie(name);
	//		取得所有nn開頭之組合
	get_cookie('nn[^=]*');
	//		取得所有name=value組
	get_cookie();

	因為 cookie 較容易遭到竄改或是出問題，建議設定 verify。
	</code>
	 */
	/**
	 * 取得document.cookie中所需之值。<br />
	 * 只能取得相同domain，有設定的path之cookie。
	 * 
	 * @param {String}name
	 * @param flag
	 * @param verify
	 * 
	 * @returns
	 */
	function get_cookie(name, flag, verify) {
		if (!library_namespace.is_WWW() || !document.cookie)
			return;

		var c, R = library_namespace.is_RegExp(name) ? name : new RegExp('('
				+ (name ? escape(name) :
				// \w+
				'[^;=\\s]+') + ')\\s*=\\s*([^;=\\s]*)', 'g'),
		//
		m = document.cookie.match(R);

		library_namespace.debug('[' + R + '] = [' + m + ']', 2);
		library_namespace.debug('cookie: [' + document.cookie + ']', 2);
		if (!m)
			return;

		if (R.global)
			R = library_namespace.renew_RegExp_flags(R, '-g');
		if (m.length > 1 && (flag == 0
		// 取最後一個。
		|| (typeof flag !== 'number' && name && typeof name === 'string')))
			m = m.slice(-1);

		// 表示不是因name為RegExp而得出之值。
		// TODO: bug: 找 "count" 可能找到 "data_count"!!
		if (m.length === 1 && typeof m[0] === 'string'
				&& (c = m[0].match(R))[1] === escape(name)) {

			if (false) {
				if ((m = c[2])
				// 將值為"..."或'...'轉為引號中表示之值
				&& ((c = m.charAt(0)) === '"' || c === "'")
						&& c === m.slice(-1))
					try {
						library_namespace.debug(
						//
						'get 1:\n' + m + '\n' + unescape(m), 2);
						window.eval('c=' + m);
						return c;
					} catch (e) {
					}
				return m;
			}

			return unescape(c[2]);
		}

		var r = Object.create(null), v, M, i = 0;
		library_namespace.debug(
		//
		document.cookie + '\n' + R + '\n' + m.length + '\n' + m, 2);

		for (; i < m.length; i++)
			if (typeof m[i] === 'string' && (M = m[i].match(R)))
				r[unescape(M[1])] = unescape(M[2]);

		if (false) {
			for (; i < m.length; i++) {
				M = m[i].match(R), v = unescape(M[2]);
				if (v && ((c = v.charAt(0)) === '"' || c === "'")
						&& c === v.slice(-1))
					try {
						library_namespace.debug(
						//
						'get 2:\n' + v + '\n' + unescape(v));
						window.eval('c=' + v);
						v = c;
					} catch (e) {
					}
				// 有必要可用unescape()，畢竟那是模範做法。
				r[M[1]] = v;
			}
		}

		return r;
	}

	_// JSDT:_module_
	.
	// get_cookie[generateCode.dLK]='renew_RegExp_flags';
	get_cookie = get_cookie;

	/**
	 * 取得註解部份資料：這個值會連 line separator (/\r?\n/) 都保存下來。
	 * 其實IE用document.getElementsByTagName('!')就可以了，不管幾層都能到。
	 * 註解中[!-]需要escape！IE6之div內不能沒東西，所以得加個&nbsp;（並且得在前面）之後加<!-- -->才有用。
	 * 
	 * @param node
	 *            從哪裡開始找
	 * @param level
	 *            最多往下找幾層
	 * @param return_type
	 *            回傳0:node本身,1:註解值
	 * @returns
	 */
	function get_comments(node, level, return_type) {
		if (!node)
			node = window.document;
		var i = 0, d, _f = get_comments;
		if (isNaN(_f.endLevel))
			_f.endLevel = 2;
		if (isNaN(level) || level === -1)
			_f.a = [], level = _f.endLevel;
		else if (typeof _f.a != 'object')
			_f.a = [];
		node = node.childNodes;
		for (; i < node.length; i++) {
			d = node[i];
			if (false)
				if (d.nodeType == 8)
					alert(d.tagName
							+ '\n'
							+ d.nodeName
							+ '\n'
							+ d.nodeType
							+ (d.nodeValue ? '\n' + d.nodeValue.slice(0, 30)
									: ''));
			if (d.tagName && d.tagName === '!') {
				_f.a.push(return_type ? d : d.text.replace(/^<!(--)?/, '')
						.replace(/(--)?>$/, ''));
				if (false)
					alert(d.tagName + '\n' + d.text.slice(0, 30));
			} else if (d.nodeType == 8) {
				_f.a.push(return_type ? d : d.nodeValue);
				if (false)
					alert('*	' + _f.a.length + '\n' + d.nodeValue.slice(0, 30));
				// NS
				// http://allabout.co.jp/career/javascript/closeup/CU20040307/index.htm?FM=cukj&GS=javascript
			}
			// http://www.w3.org/TR/DOM-Level-2-Core/core.html
			// ELEMENT_NODE,ATTRIBUTE_NODE,TEXT_NODE,CDATA_SECTION_NODE,ENTITY_REFERENCE_NODE,ENTITY_NODE,PROCESSING_INSTRUCTION_NODE,COMMENT_NODE,DOCUMENT_NODE,DOCUMENT_TYPE_NODE,DOCUMENT_FRAGMENT_NODE,NOTATION_NODE
			if (level && d.childNodes)
				_f(d, level - 1, return_type);
		}
		return _f.a;
	}
	if (false) {
		window.onload = function() {
			get_comments();
			alert(get_comments.a.length);
			for (var i = 0; i < get_comments.a.length; i++)
				alert('[' + get_comments.a[i] + ']');
		};
	}

	/**
	 * <code>	background image load
	 **	本函數會倒著load！請將優先度高的排後面！

	new Image看起來不是個好方法…
	http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/img.asp

	var img=new Image(width,heighr);img.onload=function(){docImageElement.src=this.src;}img.src=__SRC__;	//	onload應在前面，預防設定onload前就已被load?

	var bgLoadImgA,bgLoadImgLA;
	function bgLoadImg(){
	 if(location.protocol=='file:')return;
	 if(typeof bgLoadImgA=='string'){
	  var s=[1];
	  try{s.pop();bgLoadImgA=bgLoadImgA.split(',');setTimeout('bgLoadImg();',5000);}catch(e){}	//	測試舊版可能沒有pop()功能，會出現error
	  return;
	 }
	 if(bgLoadImgA.length){var i=new Image(1,1);i.function(){setTimeout('bgLoadImg();',0);},i.src=typeof getObjURL=='function'?getObjURL(bgLoadImgA.pop()):bgLoadImgA.pop();bgLoadImgLA.push(i);}
	}


	TODO:
	Javascript uses automatic garbage collection. Set to [null] as well.	http://www.thescripts.com/forum/thread95206.html
	須注意 JavaScript closure and IE 4-6 memory leak! IE 7 seems to have solved the memory leaks.	http://anotherblog.spaces.live.com/blog/cns!E9C5235EBD2C699D!458.entry?ppud=0&wa=wsignin1.0
	http://laurens.vd.oever.nl/weblog/items2005/closures/	http://www.blogjava.net/tim-wu/archive/2006/05/29/48729.html
	IE 6對於純粹的Script Objects間的Circular References是可以正確處理的，可惜它處理不了的是JScript與Native Object(例如Dom、ActiveX Object)之間的Circular References。
	P.S. 2007/11/11 似乎已修正？
	</code>
	 */

	/**
	 * <code>	bgLoadImg() Cookie版	2006/3/3 20:08
	 **	本函數正著load！請將優先度高的排前面！

		To use:
		,set_cookie,get_cookie,bgLoadImgId,bgLoadImgI,bgLoadImg
		bgLoadImgId='id_of_this_session',bgLoadImgA='img_url1,img_url2,...';	//	** MUST string!
		function getObjURL(bgLoadImgA_element){return the real URL of bgLoadImgA_element;}
		window.onload="bgLoadImg();"

	var bgLoadImgId='bg',bgLoadImgI;	//	loaded index
	</code>
	 */
	// bgLoadImg[generateCode.dLK]='bgLoadImgId,bgLoadImgI';
	function bgLoadImg(i) {
		var bgLoadImgM = 'bgLoadImgOK_' + bgLoadImgId;
		if (false)
			alert('_' + bgLoadImgM + ',' + bgLoadImgI);
		if (typeof bgLoadImgA != 'object') {
			// needless
			if (!bgLoadImgA || location.protocol === 'file:')
				return;
			// http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/readystate_1.asp
			var r = document.readyState;
			if (typeof r === 'string' && r !== 'complete') {
				setTimeout(bgLoadImg, 500);
				return;
			}
			// initialization
			bgLoadImgA = bgLoadImgA.replace(/,\s*,/g, ',').split(',');
			if (typeof get_cookie != 'function'
			// 全部OK後就別再來了。
			|| get_cookie(bgLoadImgM) != bgLoadImgA.length) {
				if (isNaN(bgLoadImgI))
					bgLoadImgI = 0;
				if (typeof r != 'string') {
					setTimeout(bgLoadImg, 5e3);
					return;
				}
			} else
				return;
		}

		// timeout
		if (false)
			if (!isNaN(i) && !bgLoadImgA[i].complete)
				;
		// 防止timeout的備援
		if (!isNaN(i) && i < bgLoadImgI - 1)
			return;

		// 標記已load counter
		// 假如一個圖一個圖標記，set_cookie在超過二十個之後好像就沒效了…被限制？
		_.set_cookie(bgLoadImgM, bgLoadImgI);

		if (bgLoadImgI == bgLoadImgA.length) {
			// 馬上進入判別，最後一個尚未complete
			bgLoadImgI++;
			setTimeout('bgLoadImg();', 500);
		} else if (bgLoadImgI < bgLoadImgA.length) {
			var bgLoadImgURL = typeof getObjURL == 'function' ? getObjURL(bgLoadImgA[bgLoadImgI])
					: bgLoadImgA[bgLoadImgI];
			// set timeout
			if (false)
				setTimeout('bgLoadImg(' + bgLoadImgI + ')', 5e3);
			bgLoadImgA[bgLoadImgI++] = i = new Image(1, 1);
			// 這是個多執行緒技巧：假如使用onload=bgLoadImg，有可能在下一指令碼前就已onload，這樣會造成Stack
			// overflow
			i.onload = function() {
				setTimeout('bgLoadImg();', 0);
			}, i.src = bgLoadImgURL;
			window.status = 'bgLoadImg [' + bgLoadImgURL + ']: ' + bgLoadImgI
					+ ' / ' + bgLoadImgA.length + '...';
		} else {
			if (false) {
				var f = [];
				for (i = 0; i < bgLoadImgA.length; i++)
					if (!bgLoadImgA[i].complete)
						f.push(bgLoadImgA[i].src);
				if (f.length)
					_.set_cookie(bgLoadImgM, 0);
				window.status = 'bgLoadImg '
						+ (f.length ? 'end: failed ' + f.length + ' / '
								+ bgLoadImgA.length + ' (' + f + ')'
								: 'complete!'), bgLoadImgA = 0;
			}
			var f = 0;
			for (i = 0; i < bgLoadImgA.length; i++)
				if (!bgLoadImgA[i].complete)
					f++;
			if (f)
				_.set_cookie(bgLoadImgM, 0);
			window.status = 'bgLoadImg '
					+ (f ? 'end: failed ' + f + ' / ' + bgLoadImgA.length
							: 'complete!'), bgLoadImgA = 0;
		}
	}

	/**
	 * <code>
	儲存/回存使用者輸入之form資料用。	2004/11/23 21:38
	 * 已測試過text(select-one,textarea,password,hidden)/radio/checkbox/select-multiple
		formIdA:	form id or id array.不輸入或輸入'',0等表示所有的form
		expires:	不輸入或輸入''表示回存，輸入0會以預設days代替，輸入<0會刪除掉cookie中這項設定。
		targetItemA:	要處理的name。例如'name,tel,email'。假如包括unselect，會處理除了targetItemA之外所有的。

		input type="checkbox"	value不能包含';'!
		password也會被儲存，得自己排除!
	e.g.,
	cookieForm()	recall all items of all forms
	cookieForm(0,1,'email');	save all items named 'email' of all forms
	cookieForm(0,'','email');	recall all items named 'email' of all forms
	cookieForm(0,-1);	消除所有*版面上現有form*之紀錄

	TODO:
	排除名單
	對於較多的entries,也許需要使用到Object[key]來代替String.indexOf(key)
	</code>
	 */
	// cookieForm[generateCode.dLK]='get_cookie,set_cookie';
	function cookieForm(formIdA, expires, targetItemA) {
		if (typeof document !== 'object')
			return;
		if (!formIdA)
			formIdA = library_namespace.get_tag_list('form');
		else if (typeof formIdA === 'string')
			formIdA = [ formIdA ];

		var i, n, o, handle_Object = function(o) {
			// メソッドをプロトタイプではなく、オブジェクト自身にセットしていることです。これでは継承できませんし、ECMAScript
			// のプロトタイプベースのセマンティクスから外れてしまいます。
			for (var j = 0, c = o.childNodes, sp = ';', e, cn, cv, tp; j < c.length; j++) {
				if ((e = c[j]).hasChildNodes)
					handle_Object(e);
				if ( // cv=e.tagName==='TEXTAREA'?e.innerHTML:e.value
				// TEXTAREA,SELECT,OPTION,INPUT需使用.value!
				e.name && typeof e.value != 'undefined') {
					// 假如沒有.value,利用.text代替
					if (false)
						if (!e.value && e.text)
							e.value = e.text;
					if (targetItemA)
						if (targetItemA.unselect && targetItemA[e.name]
								|| !targetItemA.unselect
								&& !targetItemA[e.name])
							continue;
					if (false)
						alert((isNaN(expires) ? 'load' : 'save') + '\n' + n
								+ '::' + e.name + '[' + e.type + ']=' + e.value);
					cn = 'cookieForm_' + n + '_' + e.name;
					cv = e.value;
					if (false)
						e.tagName == 'INPUT' ? e.type.toLowerCase() : '';
					tp = e.type.toLowerCase();
					if (isNaN(expires)) {
						if (typeof (cn = get_cookie(cn)) !== 'undefined') {
							if (tp == 'radio') {
								if (cv == cn)
									e.checked = true;
							} else if (tp == 'checkbox') {
								if (cn.indexOf(sp + cv + sp + sp) != -1)
									e.checked = true;
							} else if (tp == 'select-multiple')
								for (var i = 0; i < e.options.length; i++)
									e.options[i].selected = cn.indexOf(sp
											+ e.options[i].value + sp) != -1;
							else
								e.value = cn;
						}
					} else {
						if (tp == 'radio') {
							if (!e.checked)
								continue;
						} else if (tp == 'checkbox')
							if (cv.indexOf(sp) != -1)
								// value不能包含sp
								// checkbox之cookie形式:[;value1;;value2;value3;;value4;]:value1,3:checked
								continue;
							else
								cv = ((tp = get_cookie(cn))
										&& tp.indexOf(sp + cv + sp) == -1 ? tp
										: sp)
										+ cv + sp + (e.checked ? sp : '');
						// 可省略! 用.selectedIndex會比較快，但更改原文件可能會造成index錯誤
						// else
						// if(tp=='select-one')cv=e.options[e.selectedIndex].value;
						else if (tp == 'select-multiple') {
							cv = sp + cv + sp;
							for (var i = e.selectedIndex + 1; i < e.options.length; i++)
								if (e.options[i].selected)
									cv += e.options[i].value + sp;
						}
						if (expires)
							_.set_cookie(cn, cv);
						else
							_.set_cookie(cn);
					}
				}
			}
		};

		if (targetItemA) {
			o = targetItemA;
			targetItemA = {};
			if (typeof o == 'string')
				o = o.split(',');
			for (i in o)
				targetItemA[o[i]] = 1;
		}
		if (expires === '')
			expires = NaN;
		if (!isNaN(expires)) {
			if (expires)
				// 預設 days
				expires = 7;
			// Gecko need this
			_.set_cookie(_.set_cookie.f.set_root);
			_.set_cookie('expires', expires);
		}
		for (i = 0; i < formIdA.length; i++)
			if (o = formIdA[i]) {
				if (typeof o == 'string')
					o = document.getElementById(n = o);
				else if (!(n = o.id))
					n = o.name;
				if (o && (o.tagName || '').toLowerCase() == 'form' && n
						&& typeof n == 'string')
					handle_Object(o);
			}
		if (!isNaN(expires))
			_.set_cookie('expires', 0);

	}

	// 登入FTP IE使用者若要上傳，請開啟FTP 站台的資料夾檢視功能。
	// <input type="text" autocomplete="off" />
	/**
	 * 
	 * @param name
	 * @param password
	 * @param path
	 * @param hostname
	 */
	function loginFTP(name, password, path, hostname) {
		if (!hostname && !(hostname = location.hostname))
			return;
		if (name == 'ftp' || name == 'anonymous')
			name = '';
		if (!password && name)
			password = window.prompt('請輸入[' + name + ']之密碼：');
		if (password == null)
			// 取消輸入
			return;

		password = 'ftp://'
				+ (name ? name + (password ? ':' + password : '') + '@' : '')
				+ (hostname + '/' + (path || ''))
		// 預防有些情況下需要 '//'。對 archive.org 之類的網站，不可以簡化 '//'。
		// .replace(/\/{2,}/g, '/')
		;

		// 用location.href不能進入資料夾檢視功能.
		// location.href = password;
		window.open(password, 'ftpW');
	}

	// reference page set ==================

	/**
	 * 簡化 document.getElementById 並配合 loadReference()
	 * 
	 * @since 2004/6/25 19:33
	 * @param id
	 *            所欲找尋之 element id
	 * @param flag
	 *            {HTML Object} object: 參考此 document object {Number} flag: 參見
	 *            code
	 * @return {HTML Object} Object
	 * @requires referenceDoc,loadReferenceDone,`get_element();`
	 * @_memberOf _module_
	 */
	function get_element(id, flag) {
		if (!id || !library_namespace.is_WWW())
			return;
		if (flag)
			library_namespace.debug(id + ', ' + flag, 2);

		// 後面暫時沒用到
		// if (!flag) flag = get_element.flag.self;

		if (!document.body)
			// document 尚未 load
			return;

		if (_.is_NodeList(id))
			return id[0];
		if (// _.is_HTML_element(id) ||
		typeof id === 'object')
			return id;

		var node;
		if (flag !== get_element.flag.refOnly)
			// 僅參考 reference page 時不設定
			node = document.getElementById ? document.getElementById(id)
					: document.all ? document.all[id]
							: document.layers ? document.layers[id]
									: window[id];
		if (flag)
			library_namespace.debug(id + ',' + flag + '\nloadReferenceDone='
					+ loadReferenceDone + '\nreferenceDoc: ' + referenceDoc
					+ '\node: ' + node + '\nreferenceDoc.get: '
					+ referenceDoc.getElementById(id) + '\n'
					+ referenceDoc.body.innerHTML.slice(0, 200), 3);
		try {
			// 偶爾還是有可能'沒有使用權限'。
			typeof flag === 'object'
					&& typeof flag.getElementById === 'function'
					&& (node = flag.getElementById(id)) || node || flag
					&& loadReferenceDone === 1
					&& (node = referenceDoc.getElementById(id));
		} catch (e) {
		}
		return node;
	}
	// 在 Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6) Gecko/20040510
	// 中會出問題，所以改到函數中執行。但得先執行過一次。
	get_element.flag = {
		// 僅參考自身頁面，default
		'self' : 0,
		// 可參考 reference page
		'ref' : 1,
		// 僅參考 reference page
		'refOnly' : 2
	};
	_// JSDT:_module_
	.get_element = get_element;

	/**
	 * <code>	以外掛的reference page配置data object	2004/6/25 21:01

		toUse:
		準備好reference.htm
		在需要的文件加入	window.onload="loadReference()";
		在需要的文件body加入	<iframe id="reference"></iframe>
		function setupPageR()	initial after load of reference page

		如上，再使用 get_element() 即可得到 reference.htm 中的 obj
	</code>
	 */
	var referenceDoc, loadReferenceDone
	// ,loadReferenceCount
	;
	// loadReference[generateCode.dLK]='get_element,referenceDoc,loadReferenceDone,parseFunction';
	function loadReference(referenceURL, iframeId) {
		if (loadReferenceDone || typeof location != 'object'
				|| !location.protocol || location.protocol == 'https:') {
			// https會拒絕存取，所以直接放棄。
			return;
		}
		if (loadReferenceDone) {
			// https會拒絕存取，所以直接放棄。
			return;
		}
		var o = get_element(iframeId || 'reference');
		// referenceDoc is still contentWindow here. typeof
		// referenceDoc.document:預防使用https時產生不能讀取的權限問題。
		if (typeof referenceDoc == 'object'
				&& typeof referenceDoc.document == 'object'
				&& referenceDoc.document) {
			// 遺憾：在舊版IE不能用後者。也許是因為舊版IE連contentWindow都會重造。
			referenceDoc =
			// referenceDoc.document;
			o.contentWindow.document;
			o = referenceDoc.body;
			if (false)
				alert(o.innerHTML.length + '\n' + o.innerHTML);
			if (o/* &&referenceDoc.body.innerHTML=='string' */
					&& o.innerHTML.length) {
				if (false)
					alert(typeof o
							+ ','
							+ (o ? typeof o.innerHTML + '('
									+ o.innerHTML.length + ')\n'
									+ o.innerHTML.slice(0, 200) : '(null)'));
				// before IE5, the first argument must be a string.
				// setTimeout(function_handler,..)
				// 不一定代表setTimeout('function_handler();',..)，可能會傳入奇異的引數！
				if (typeof setupPageR == 'function')
					setTimeout(setupPageR, 9);
				loadReferenceDone = 1;
				if (false) {
					window.status = 'reference page load OK!';
					alert(window.status);
				}
			} else {
				if (false) {
					try {
								window.status = 'Wait while reference page loading..3',
								alert(window.status
										+ '\nURL:'
										+ o.contentWindow.document.src
										+ '\ncontent('
										+ o.contentWindow.document.body.innerHTML.length
										+ '):\n'
										+ o.contentWindow.document.body.innerHTML);
					} catch (e) {
					}
					if (!--loadReferenceCount)
						history.go(0);
				}
				setTimeout(function() {
					loadReference();
				}, 200);
			}
			return;
		}
		if (typeof document != 'object' || !document.body) {
			// document尚未load
			setTimeout(function() {
				loadReference();
			}, 90);
			return 1;
		}
		// 原來把設定放在這，不過反正都要在前面用到…
		// o = get_element(iframeId || 'reference');
		if (!o || (o.tagName || '').toLowerCase() != 'iframe') {
			// iframe不存在
			loadReferenceDone = 2;
			return;
		}
		if (!o.src) {
			o.style.display =
			// 'block'
			'none';
			if (false) {
				// for game.js:
				typeof relatePath == 'function' ? relatePath(0,
						'cgi-bin/game/data/reference.htm')
						: 'data/reference.htm'
			}
			o.src = referenceURL;
		}

		if (
		// for JS5 應該不能用o.contentWindow吧？怕o.contentWindow就算沒能載入文件，也會被定義
		typeof o.contentWindow == 'object'
				&& typeof o.contentWindow.document == 'object') {
			// Martin Honnen wrote: If you load a new document then certainly
			// the browser has to create a new document object.

			// o.contentWindow.document still index to a blank window here, when
			// new document load, this point to o.document won't work.
			referenceDoc = o.contentWindow;

			if (false) {
				window.status = 'Wait while reference page loading..2';
				alert(window.status + '\nURL:' + o.src);
			}
			setTimeout(function() {
				// loadReferenceCount=9;
				loadReference();
			}, 20);
		} else {
			if (false) {
				// https會拒絕存取，所以直接放棄。最晚在這就得判別
				if (location.protocol == 'https:')
					return;
			}
			if (!referenceDoc)
				// 尚未load完成時作倒數計時..假如加上if(o.contentWindow)，這方法正確嗎?
				referenceDoc = 40;
			else if (false) {
				// 異常(for https):不能用else if(isNaN(referenceDoc))
				if (isNaN(referenceDoc))
					return 3;
			}
			try {
				if (referenceDoc--) {
					if (false) {
						window.status = 'Wait while reference page loading...';
						alert(window.status);
					}
					setTimeout(function() {
						loadReference();
					}, 300);
					return 2;
				} else {
					if (false) {
						window.status = 'reference page load FAILED!';
						alert(window.status);
					}
					return 4;
				}
			} catch (e) {
				// Error: uncaught exception: Permission denied to get property
				// HTMLDocument.document
				return 5;
			}
		}
	}
	// translate object(innerHTML) from reference page to document
	// transRefObj[generateCode.dLK]='get_element';
	function transRefObj(id, id2, force) {
		if (typeof id2 != 'string' && typeof id2 != 'object')
			force = id2, id2 = typeof id == 'object' ? id.id : id;
		var o = typeof id == 'object' ? id
				: get_element(id, get_element.f.self), p;
		if (false)
			alert('transRefObj: '
					+ id2
					+ ' → '
					+ id
					+ '('
					+ (force ? '' : 'not ')
					+ 'force)\n'
					+ o
					+ '\ntarget:'
					+ (o.innerHTML ? '\n' + o.innerHTML.slice(0, 200)
							: ' (null)'));
		if (o
				&& (force || !o.innerHTML)
				&& (p = typeof id2 == 'object' ? id2 : get_element(id2,
						get_element.f.refOnly)) && (force || p.innerHTML))
			try {
				if (false) {
					alert('transRefObj: DO ' + id2 + ' → ' + id + '('
							+ (force ? '' : 'not ') + 'force)\n');
				}
				o.appendChild(p.cloneNode(true));
			} catch (e) {
				/**
				 * <code>
				   try{
					//alert('transRefObj: try2');
					var i=0;while(i<p.childNodes.length)o.appendChild(p.childNodes[i++].cloneNode(true));
				   }catch(e){
				</code>
				 */
				// alert('transRefObj: try3');
				// serialize(p)
				// serialize方法把一个node串行化成字符串。在ie环境的具体实现上，对于XmlDocument，使用node.xml，对于HtmlDocument，使用node.outerHTML。
				// http://my.opera.com/gisor/blog/index.dml/tag/SVG
				// p.cloneNode(true);
				o.innerHTML = p.innerHTML;
				/**
				 * <code>
				   } // try{try2}catch(e){}
				</code>
				 */
			}
		return o;
	}

	// ↑reference page set ==================

	// 設定自動捲動
	var setAutoScrollTimer, setAutoScrollInterval;
	// setAutoScroll[generateCode.dLK]='setAutoScrollTimer,setAutoScrollInterval';
	function setAutoScroll(interval, force) {
		if (!force)
			if (typeof document != 'object' || setAutoScrollTimer
					|| document.onmousedown || document.ondblclick)
				return;
		if (interval)
			setAutoScrollInterval = interval;
		else if (!setAutoScrollInterval
				&& !(setAutoScrollInterval = get_cookie('setAutoScrollInterval')))
			// 5,50,100,200,500
			setAutoScrollInterval = 200;
		// 無論如何，先把執行中的幹掉。
		clearInterval(setAutoScrollTimer);
		setAutoScrollTimer = 0;
		if (setAutoScrollInterval < 0) {
			document.onmousedown = document.ondblclick = null;
			return;
		}
		document.onmousedown = function() {
			if (setAutoScrollTimer)
				window.clearInterval(setAutoScrollTimer),
						setAutoScrollTimer = 0;
		};
		document.ondblclick = function() {
			if (setAutoScrollTimer)
				return;
			setAutoScrollTimer = window.setInterval(function() {
				if (false)
					window.scrollTo(0, document.body.scrollTop + 1);
				window.scrollBy(0, 1);
			}, setAutoScrollInterval);
		};
	}

	/**
	 * <code>	捲到設定的定點，因為某些多工慢速環境中只設定一次沒有用，所以…
	 下面一行調到檔案頭
	 var scrollToXY,scrollToInterval,scrollToOK;
	 </code>
	 */
	// scrollTo[generateCode.dLK]='scrollToXY,scrollToInterval,scrollToOK,get_window_status';
	function scrollTo(y, x) {
		// initial
		if (typeof scrollToXY != 'object')
			scrollToXY = {};

		if (typeof y == 'object' && (!isNaN(y.x) || !isNaN(y.y))) {
			if (!isNaN(y.x))
				scrollToXY.x = y.x;
			if (!isNaN(y.y))
				scrollToXY.y = y.y;
		} else if (Array.isArray(y))
			scrollToXY.x = y[0], scrollToXY.y = y[1];
		else {
			if (typeof x != 'undefined')
				scrollToXY.x = x;
			if (typeof y != 'undefined')
				scrollToXY.y = y;
		}
		if (isNaN(scrollToXY.x))
			scrollToXY.x = 0;
		if (isNaN(scrollToXY.y))
			scrollToXY.y = 0;

		// main function
		setTimeout(function() {
			window.scrollTo(scrollToXY.x, scrollToXY.y);
		}, 9);
		var _w = get_window_status();
		if (false)
			status = scrollToInterval + ',' + scrollToOK + ';' + _w.scrollLeft
					+ ',' + scrollToXY.x + ';' + _w.scrollTop + ','
					+ scrollToXY.y;
		if (_w.scrollLeft == scrollToXY.x && _w.scrollTop == scrollToXY.y) {
			if (!--scrollToOK && scrollToInterval)
				window.clearInterval(scrollToInterval), scrollToInterval = 0;
		} else if (!scrollToInterval) {
			// 預防萬一：總會跳回原處
			scrollToInterval = window.setInterval(scrollTo, 90);
			scrollToOK = 3;
		}
	}

	/**
	 * <code>	doAlert() & doAlertAccess：彈出使用注意事項視窗
	 下面一行調到檔案頭
	 var doAlertDivName,doAlertOldScrollLocation;

	 TODO
	 設定其不可作用之 background object

	 使用方法：
	 <head>
	 <script type="text/javascript" src="function.js"></script>
	 <script type="text/javascript">
	 window.onload=init;window.onscroll=window.onresize=doAlertScroll;
	 function init(){doAlertInit('kousi');}
	 </script>

	 <style type="text/css"><!--

	 /*	kousi用	加上filter:alpha(opacity=10);：因為IE5.5不吃DXImageTransform.Microsoft.Alpha，這樣用不能以.filters.alpha.opacity控制。	* /
	 #kousi{color:blue;background:#e2e0f8;border:double 3px red;padding:.5em;filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=80,Style=0);filter:Alpha(Opacity=80,Style=0);z-index:2;overflow:auto;}
	 #kousiBg{background:blue;filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=30,Style=0);filter:Alpha(Opacity=30,Style=0);z-index:1;}
	 #kousiI{color:brown;background-color:#e6e6ff;cursor:pointer;border:1 solid red;white-space:nowrap;padding:2px;margin:2px;filter:Alpha(Opacity=80,Style=0);}

	 #kousi h2{color:brown;margin-left:2em;}
	 #kousi input{color:#114f12;background-color:#fddbfb;border:1 brown solid;}

	 --></style>
	 </head>

	 <body>
	 <!--div id="kousiBg"></div--><div id="kousi">
	 <h2>使用注意事項</h2>

	 注意事項

	 <hr style="color:#928cd9" />
	 <table style="width:90%;text-align:center;"><tr><td><input type="button" onclick="top.location.href='http://www.hinet.net';" value="誰管你！" /></td>
	 <td><input type="button" onclick="doAlertAccess();//this.parentNode.parentNode.parentNode.parentNode.parentNode.id" value="我願意遵守上述規定" /></td>
	 <td><input type="button" onclick="set_cookie(set_cookie.f.forever),set_cookie('doAlert',doAlertDivName),doAlertAccess();" value="我往後皆會遵守上述規定" /></td></tr></table>
	 </div>

	 <a href="#" onclick="doAlert();">注意事項</a>

	 正文

	 </body>
	 </code>
	 */
	// 確保置中
	function doAlertResize() {
		if (typeof doAlertDivName != 'string' || !doAlertDivName
				|| !(o = document.getElementById(doAlertDivName)))
			return;

		o.style.position = 'absolute', o.style.display = 'block',
				o.style.width = '70%';
		// 因為'%'是以整體長寬為主，故不適用。
		if (false) {
			var t = Math.round(50 * (1 - o.offsetHeight
					/ document.body.clientHeight));
			if (t < 0)
				o.style.width = '99%', o.style.top = '0';
			else
				o.style.top = t + '%';
			t = Math
					.round(50 * (1 - o.offsetWidth / document.body.clientWidth));
			o.style.left = t < 0 ? '0' : t + '%';
		}
		if (false)
			alert(o.style.offsetHeight + ',' + window.offsetHeight + ','
					+ window.innerHeight + ',' + window.outerHeight);
		if (typeof window.innerHeight == 'undefined')
			window.innerHeight = document.body.clientHeight;
		if (typeof window.innerWidth == 'undefined')
			window.innerWidth = document.body.clientWidth;
		var t = (window.innerHeight - o.offsetHeight) / 2;
		if (t < 0)
			o.style.width = o.style.height = '99%', o.style.top = 0;
		else
			o.style.top = t + 'px';
		t = (window.innerWidth - o.offsetWidth) / 2;
		// 不用marginTop與marginLeft，因為這裡要放置div
		o.style.left = t < 0 ? 0 : t + 'px';

	}
	// 初始化
	// doAlertInit[generateCode.dLK]='set_cookie,doAlert';
	// n:div name
	function doAlertInit(n) {
		// 防止重複執行
		if (false && typeof doAlertDone != 'undefined' && doAlertDone)
			return;
		// doAlertInit()重設
		if (!n) {
			// Gecko need this
			_.set_cookie(_.set_cookie.f.set_root);
			_.set_cookie('doAlert');
			return;
		}
		var d = document.getElementById(n);
		if (d) {
			if (typeof doAlertDivName == 'undefined')
				doAlertDivName = n;
			doAlert();
		}
	}
	// 出現警告
	// doAlert[generateCode.dLK]='doAlertInit,doAlertResize,doAlertAccess,doAlertScroll,doAlertDivName,doAlertOldScrollLocation,get_cookie,get_window_status';
	// n:name,m:mode=1:use alert(),icon div的文字內容
	function doAlert(n, m, iconContent) {
		if (!n && typeof doAlertDivName == 'string' && doAlertDivName)
			n = doAlertDivName;
		var o = document.getElementById(n), oBg = document.getElementById(n
				+ 'Bg'), oI = document.getElementById(n + 'I');
		if (!document.body || !o || m && !alert(o.innerHTML)) {
			// alert()會return undefined
			return;
		}
		if (!oI)
			try {
				// 只對IE5.5之後有用
				// document.body.insertBefore();
				o.parentNode
						.insertBefore(oI = document.createElement('div'), o);
				oI.id = n + 'I';
				oI.onclick = function() {
					doAlertInit();
					doAlert();
				};
				oI.title = "注意事項";
				oI.innerHTML = iconContent || '別忘了';
				oI.doAlertScrollT = oI.doAlertScrollL = 0;
			} catch (e) {
				return;
			}
		if (!oBg)
			try {
				// 只對IE5.5之後有用
				o.parentNode.insertBefore(oBg = document.createElement('div'),
						o);
				oBg.id = n + 'Bg';
			} catch (e) {
				return;
			}
		if (false)
			if (!oI || !oBg)
				alert('No index or bg div!');
		disableKM(2);
		doAlertResize();
		window.Oonresize = window.onresize;
		window.onresize = doAlertResize;
		oI.style.display = 'none';
		oI.style.position = 'absolute';
		oI.style.right = '.1em';
		oI.style.top = '.1em';
		// offset*:唯讀
		oBg.style.position = 'absolute';
		oBg.style.left = -parseInt(document.body.leftMargin);
		oBg.style.top = -parseInt(document.body.topMargin);
		oBg.style.width = height = '110%';
		oBg.style.display = 'inline';
		if (o.filters) {
			// try{}catch(e){}
			o.filters.alpha.opacity = 85;
		}
		if (oBg.filters)
			try {
				oBg.filters.alpha.opacity = 30;
			} catch (e) {
			}
		else {
			// for Moz
			o.style.position = 'fixed';
			oBg.style.position = 'fixed';
			oBg.style.opacity = oBg.style['-moz-opacity'] = .3;
			oBg.style.left = oBg.style.top = 0;
			oBg.style.width = oBg.style.height = '100%';
		}
		if (get_cookie('doAlert') == n)
			doAlertAccess(n);
		else {
			// 奇怪的是，直接執行scrollTo(0,0)沒啥用。
			o = get_window_status();
			doAlertOldScrollLocation = [ o.scrollLeft, o.scrollTop ];
			setTimeout('scrollTo(0,0);', 0);
		}
	}
	// pass
	function doAlertAccess(n) {
		if (!n && typeof doAlertDivName == 'string' && doAlertDivName)
			n = doAlertDivName;
		var o = document.getElementById(n), oBg = document.getElementById(n
				+ 'Bg');
		if (oBg)
			oBg.style.display = 'none';
		o.style.display = 'none';
		disableKM(0);
		window.onresize = window.Oonresize || null;
		if (doAlertOldScrollLocation)
			scrollTo(doAlertOldScrollLocation);
		doAlertScroll(1);
	}
	// icon div的捲動：置於右上角
	// doAlertScroll[generateCode.dLK]='get_window_status';
	function doAlertScroll(m) {
		var oI;
		if (typeof doAlertDivName != 'string' || !doAlertDivName
				|| !(oI = document.getElementById(doAlertDivName + 'I')))
			return;
		if (typeof m != 'undefined') {
			oI.style.display = m ? 'block' : 'none';
			oI.doAlertScrollL = oI.offsetWidth + (m || 0);
			if (oI.currentStyle) {
				// IE
				if (m = parseInt(oI.currentStyle.paddingTop))
					oI.doAlertScrollT = m;
				m = parseInt(oI.currentStyle.paddingLeft);
				if (m = parseInt(oI.currentStyle.paddingRight))
					oI.doAlertScrollL += m;
			} else {
				oI.style.position = 'fixed';
				if (false) { // Moz...but useless
					if (m = oI.offsetTop)
						oI.doAlertScrollT = m;
					m = oI.offsetLeft;
					if (m = oI.offsetRight)
						oI.doAlertScrollL += m;
				}
			}
		}
		if (false) {
			window.status = m = window.scrollX + ',' + window.scrollY + ','
					+ window.innerWidth + ',' + window.innerHeight + ';'
					+ document.body.scrollLeft + ',' + document.body.scrollTop
					+ ',' + document.body.offsetWidth + ','
					+ document.body.clientWidth + ',' + oI.offsetWidth + ','
					+ document.body.scrollWidth;
			alert(m);
		}
		m = get_window_status();
		oI.style.left =
		// -document.body.leftMargin-document.body.rightMargin
		m.scrollLeft + m.windowW - oI.doAlertScrollL + 'px';
		// 只有在padding用px時有效！
		oI.style.top = m.scrollTop - oI.doAlertScrollT + 'px';
	}

	/**
	 * Sets / adds class of specified element.<br />
	 * TODO:<br />
	 * 1. 一次處理多個 className。<br />
	 * 2. 以字串處理可能較快。<br />
	 * 3. 用 +/- 設定。<br />
	 * 4. https://developer.mozilla.org/en/DOM/element.classList
	 * 
	 * TODO: using element.classList
	 * https://www.webhek.com/post/you-do-not-need-jquery.html
	 * 
	 * @param element
	 *            HTML elements
	 * @param class_name
	 *            class name || TODO: {class name 1: true, class name 2: false,
	 *            ...}
	 * @param options
	 *            default: just add the specified className options.reset: reset
	 *            className (else just add) options.status: return {className1:,
	 *            className2:, ...} options.remove: remove className
	 * @return
	 * @see <a
	 *      href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-95362176"
	 *      accessdate="2009/12/14 22:26">className of type DOMString</a>, <a
	 *      href="https://developer.mozilla.org/En/DOM/Element.className"
	 *      accessdate="2009/12/14 22:27">element.className - MDC</a>
	 * @_memberOf _module_
	 */
	function set_class(element, class_name, options) {
		if (element && typeof element === 'string')
			element = document.getElementById(element);

		if (!_.is_ELEMENT_NODE(element))
			return;

		if (!options)
			options = Object.create(null);

		var c;

		if (class_name && !library_namespace.is_Object(class_name)
				&& !options.remove) {
			c = Array.isArray(class_name) ? class_name.join(' ') : class_name;
			c = c.trim();
			if (options.reset) {
				element.className = c;
			} else if (!(' ' + element.className + ' ').includes(' ' + c + ' ')) {
				// add 時不 detect 多重 class 是為了速度。
				element.className += ' ' + c;
			}

			if (!options.status)
				return;
		}

		if (false)
			library_namespace.debug('set_class: remove [' + class_name
					+ '] from [' + o.className + ']');
		c = element.className.split(/\s+/);
		var r = Object.create(null), i, changed = options.reset;

		// 設定原先的 className. TODO: 增進效率。
		if (!changed)
			for (i in c)
				r[c[i]] = true;

		if (library_namespace.is_Object(class_name)) {
			// 僅更動 class_name 指涉的部分。
			for (c in class_name)
				if (r[c] !== (i = !!class_name[c]))
					changed = true, r[c] = i;
			// 已處理過，忽略 options.remove，不再處理。
			class_name = null;
		}

		if (options.remove && class_name) {
			if (!Array.isArray(class_name))
				class_name = [ class_name ];
			for (i in class_name) {
				c = class_name[i];
				if (c in r) {
					// 有做變動.
					changed = true;
					delete r[c];
				}
			}
		}

		if (changed) {
			c = [];
			for (i in r)
				if (r[i])
					c.push(i);
			element.className = c.join(' ').trim();
			if (false)
				library_namespace.debug('set_class: → [' + element.className
						+ ']');
		}

		return r;
	}
	_// JSDT:_module_
	.set_class = set_class;

	function clear_class(element) {
		if (element && typeof element === 'string')
			element = document.getElementById(element);

		if (('className' in element) && _.is_ELEMENT_NODE(element))
			element.className = '';
	}
	_// JSDT:_module_
	.clear_class = clear_class;

	// if class_name is RegExp, class_name should NOT has global flag.
	function has_class(element, class_name) {
		var n = element.className, i;
		// class_name = class_name.trim();
		if (!n || !class_name)
			return;

		if (Array.isArray(class_name)) {
			for (i = n = 0; i < class_name.length; i++)
				if (has_class(element, class_name[i]))
					n++;
			return n;
		}

		if (class_name = has_class.pattern(class_name))
			return class_name.test(n);

		return n == class_name;
	}

	has_class.pattern = function(class_name) {
		if (class_name) {
			if (!library_namespace.is_RegExp(class_name))
				class_name = new RegExp('(?:^|\\s)' + class_name + '(?:$|\\s)'/* ,i */);
			return class_name;
		}
	};

	_// JSDT:_module_
	.
	/**
	 * If HTML element has specified class
	 * 
	 * @param {HTMLElement}element
	 *            HTML elements
	 * @param {String}
	 *            class_name class_name_1[ class_name_2 ...]
	 * @return {Boolean}
	 */
	has_class = has_class;

	function find_class(class_name, parent_node, tag_name, selector, options) {
		var list = [], pattern, i,
		//
		elements = library_namespace.get_tag_list(tag_name || '*', parent_node
				|| window.document),
		//
		length = elements.length;

		if (length > 0) {
			if (typeof selector !== 'function')
				selector = false;
			if ((pattern = has_class.pattern(class_name)) || selector) {
				library_namespace.debug('length: ' + length + ', pattern: '
						+ pattern, 2);
				for (i = 0; i < length; i++) {
					library_namespace.debug('#' + i + ': '
							+ elements[i].className, 2);
					if ((!pattern || pattern.test(elements[i].className))
							&& (!selector || selector.call(elements[i]))) {
						list.push(elements[i]);
					}
				}
			} else {
				list = elements;
			}
		}

		return list;
	}

	_// JSDT:_module_
	.
	/**
	 * @param {String}
	 *            class_name class_name_1[ class_name_2 ...]
	 * @param {HTMLElement}element
	 *            HTML elements
	 * @param {HTMLElement}
	 *            parent_node parent node
	 * @param {String}
	 *            tag_name tag name
	 * @return {[HTMLElement]} nodes
	 * @see document.getElementsByClassName in prototype.js, jquery('.class')
	 * 
	 * document.querySelectorAll() http://www.w3.org/TR/selectors-api/
	 * http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/04/17/document-queryselector-in-ie8.aspx
	 */
	find_class = find_class;

	/**
	 * <code>	處理 popup 用。
		對className的tag作popup處理。
		window.onload="set_up_popup()";
		<b title="注釋">正文</b>
	</code>
	 */
	// set_up_popup[generateCode.dLK]='sPop,has_class';
	function set_up_popup(tag, classN, func) {
		if (!tag)
			// 'span'
			tag = 'b';

		/**
		 * <code>
			http://enable.nat.gov.tw/document/4_2.jsp
			http://ccca.nctu.edu.tw/~hlb/tavi/ABBRorACRONYM
			應該用abbr(abbreviation/abbrevitated form/簡稱)
			abbr包含acronym(頭文字/首字母縮寫,通常這個字的發音像一個字)
			根據W3C的規範說，中日文的縮寫格式要套用的是abbr標籤。
			XHTML2.0把acronym移掉了，只剩下abbr標籤。
			http://www.sovavsiti.cz/css/abbr.html
			if(!!document.all)document.body.innerHTML=document.body.innerHTML.replace(/<\s*(\/?)\s*abbr([>\s])/gi,'<$1span$2');
		</code>
		 */

		var i, j, o = library_namespace.get_tag_list(tag), popup_window_type;
		set_up_popup.list = [];
		if (o.length)
			for (i = 0; i < o.length; i++) {
				if (classN && !has_class(o[i], classN) || func && func(o[i]))
					continue;
				// 測試是否有特定標籤
				for (j = 0, popup_window_type = ''; j < sPopP.allTypes.length; j++)
					if (o[i][sPopP.allTypes[j]]) {
						popup_window_type = sPopP.allTypes[j];
						break;
					}
				if (popup_window_type
						// 有的話設定 event。
						&& (popup_window_type = sPop(o[i],
								sPopF[popup_window_type] | sPopF.nopop))) {
					if (false)
						o[i].innerHTML += '<b style="color:peru">['
								+ sPopP.types[popup_window_type] + ']<\/b>';

					set_up_popup.list.push(o[i]);
					if (popup_window_type == sPopF.window) {
						if (!o[i].onclick) {
							o[i].popup_type = popup_window_type;
							o[i].onclick = function() {
								sPop(this, this.popup_type);
							};
							o[i].style.cursor = 'pointer';
						}
					} else if (popup_window_type == sPopF.popup) {
						if (!o[i].onmouseover) {
							// o[i].ruby = o[i].popup = '';
							o[i].onmouseover = function() {
								sPop(this, this.popup_type);
							};
							if (!o[i].onmouseout)
								o[i].onmouseout = function() {
									sPop(this, sPopF.clearPop);
								};
							if (!o[i].onclick) {
								o[i].onclick = function() {
									this.onmouseout = null;
									sPop(this, popup_window_type);
								};
								o[i].style.cursor = 'pointer';
							}
						} else if (false) {
							alert(popup_window_type + '\n'
									+ sPopF[popup_window_type] + '\n'
									+ typeof o[i].onmouseover + '\n'
									+ o[i].onmouseover);
						}
					}
				}
			}
	}

	_.set_up_popup = set_up_popup;

	/**
	 * <code>	注釋(reference) / show popup-window or ruby	2004/4/3 17:20
		http://www.comsharp.com/GetKnowledge/zh-CN/TeamBlogTimothyPage_K742.aspx

	example:
		<b onmouseover="sPop(this,sPopF._type_,'注釋')">txt</b>
		<b onmouseover="sPop(this,sPopF._type_)" title="注釋">txt</b>
		window.onload="set_up_popup()"; + <b title="注釋">txt</b>,<b sPop="注釋">txt</b>
		<b onmouseover="sPop('●',this)">txt</b>	在每個字旁邊加上[[w:ja:圏点]] [●]或[○]
		sPop('txt')	popup txt(自動設成sPopF.popup)
		sPop('txt',sPopF.window)	popup txt by window

	flag & type:
		sPopF.title/sPopF.auto	（依字數）自動選取
		sPopF.ruby	採用<ruby>
		sPopF.popup	採用popup window
		sPopF.window	將資料開在新視窗

		sPopF.nopop	just test, don't popup(for ruby)
		sPopF.repeat	repeat ruby
		sPopF.clearPop	clear popup window
		sPopF.force	若是不能使用此種表示方法，則放棄顯示。(for popup @ Mozilla)

	style class application(應用):
		sPopP.DclassName中所定之className為觸發事件時會設定的class

	執行環境environment:
		JScript @ HTML

	include function:
		String.repeat()
		parseFunction()
		set_Object_value()

	TODO:
	submenu
		http://dynamicdrive.com/dynamicindex1/popupmenu.htm
	Tipped - The Javascript Tooltip Framework
		http://projects.nickstakenburg.com/tipped

	How to Create a Valid Non-Javascript Lightbox | Carsonified
	http://carsonified.com/blog/design/css/how-to-create-a-valid-non-javascript-lightbox/

	move/resize/最小化: popup dialog
		http://deluxepopupwindow.com/html-popup-dialog-vista-graphite.html

	獨佔 window, 訊息列, 多功能(HTML+Script)內容
		http://vision-media.ca/resources/jquery/jquery-popup-plugin-review

	key (Esc)
	time limit

	</code>
	 */
	// sPop properties object
	var sPopP,
	// flag
	sPopF = {
		title : 0,
		auto : 0,
		nopop : 8,
		repeat : 16,
		clearPop : 32,
		force : 64
	},
	// for error
	sPopError;

	// 初始值設定 & 設定flag
	function sPopInit() {
		if (/* global. */sPopP) {
			alert('sPopP 已被佔用！');
			return;
		}

		sPopP = Object.create(null);
		// 預設style class name:(null:used last time),ruby,popup,window
		sPopP.DclassName = ',popupedTxt_ruby,popupedTxt,popupedTxt'.split(',');
		// 已登記的背景style,請在CSS中加入[sPopC]_[body class name]
		sPopP.bgS = 'bgb,bgn';
		{
			var i = 0, t = sPopP.bgS.split(',');
			sPopP.bgS = Object.create(null);
			for (; i < t.length; i++)
				sPopP.bgS[t[i]] = i + 1;
		}
		// popup window style
		sPopP.popupS = "color:blue;padding:.5em;overflow:auto;position:absolute;top:0;left:0;width:100%;height:100%;scrollbar-face-color:khaki;scrollbar-arrow-color:teal;border:1px solid green;font:normal 10pt tahoma;filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=#ffd700, EndColorStr=#ffffff);";
		// chars to repeat(for ruby) 著重號（‧）
		// https://ja.wikipedia.org/wiki/圏点
		sPopP.RepeatC = '‧•◦．。ヽ﹅﹆○●◎◉☆★※＊＃▽▼△▲◆◇□■↓↑'
		// .turnU()
		;
		// types:auto,這些attribute可被處理，且將被視為自動選取type。
		sPopP.autoTypes = 'title,_sPop'
		// +',_'+sPopP.functionName
		;
		// types,最多七種
		// +div(參考showLinkPopup() @ link.js)
		sPopP.types = 'ruby,popup,window';
		// 所有可用的types，可用來detect是否能為sPop()所接受。但Mozilla中無法使用title之外的attribute。
		sPopP.allTypes = (sPopP.autoTypes + ',' + sPopP.types).split(',');
		// function name
		sPopP.functionName = '';
		if (false)
			sPopP.functionName = library_namespace.parse_function().funcName;
		// popup window(for popup)
		if (library_namespace.is_WWW()
				&& typeof window.createPopup != 'undefined')
			sPopP.window = window.createPopup();
		{
			var i = 0, t = sPopP.types.split(','), T = '';
			for (; i < t.length;)
				sPopF[t[i]] = ++i;
			if (false)
				sPopF['_' + sPopP.functionName] = 0;
		}
		// sPopP.types[index] = type name
		sPopP.types = (
		// '_' + sPopP.functionName +
		',' + sPopP.types).split(',');
		// 註解
		sPopP.commentTitle = 'Comment';
		sPopP.commentTitlePattern = sPopP.commentTitle + ' of %s';
		// close message: 關閉視窗或popup
		sPopP.close_message = 'Close';
		// bigger message: 放大
		sPopP.bigger_message = 'Bigger';
		// reset size message: 回復原大小
		sPopP.reset_message = 'Reset size';
	}
	sPopInit();

	// 只有 IE 5, firefox 38 提供ruby，所以沒有的時候不宜加入旁點功能。IE, Chrome 旁點顯示正確，但 firefox
	// 字體過小，僅 2/3。
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby
	var has_ruby_tag = library_namespace.platform({
		ie : 5,
		firefox : 38,
		chrome : 5,
		safari : 5
	});

	// TODO: 點選文字後在下方出現全橫幅的layer以展示訊息，再點選可隱藏。
	// e.g.,
	// https://www.twreporter.org/a/bookreview-i-generation-discrimination-micro-aggression

	// 主object(正文或主object，會從之取得正文與注釋)[, flag, text string or
	// object(注釋,會蓋過從主object取得之text), 使用的class name]
	// sPop[generateCode.dLK]='sPopP,sPopF,sPopInit,*sPopInit();';
	function sPop(oPos, flag, oTxt, classN) {
		if (false)
			if (flag & sPopF.clearPop) {
				if (sPopP.window)
					sPopP.window.hide();
				return;
			}

		// input value test & 修正
		if (!oPos && !oTxt)
			return;

		var limitW = screen.width - 50, limitH = screen.height >> 1;
		if (!sPopP.width)
			sPopP.width = 250;
		if (sPopP.width > limitW)
			sPopP.width = limitW;
		if (!sPopP.height)
			sPopP.height = 100;
		if (sPopP.height > limitH)
			sPopP.height = limitH;

		// 初始值設定
		if (!sPopP.functionName
				&& (sPopP.functionName = library_namespace.parse_function()))
			sPopF[sPopP.types[0] = '_'
					+ (sPopP.functionName = sPopP.functionName.funcName)] = 0;
		else
			sPopP.functionName = '';

		var repopMark = 'repop', repop = oPos === repopMark, nopop = flag
				& sPopF.nopop, popup_window_type = flag & 7, useAttbTxt = false,
		// 轉成br用
		brReg = /\r*\n/g, brT = '<br />\n';

		if (repop) {
			if (!sPopP.popObj || typeof sPopP.popObj != 'object'
					|| typeof sPopP.popObj.innerHTML != 'string'
					|| !sPopP.popObj.innerHTML)
				return;
			// 重新 pop up 時不作其他判別處置
			oPos = sPopP.popObj;
			popup_window_type = sPopF.popup;
		} else {

			// 處理 object
			if (typeof oPos == 'string' && oPos)
				if (oPos.length < 32 && document.getElementById(oPos)) {
					// 輸入object name時轉成object
					oPos = document.getElementById(oPos);
				} else if (!oTxt) {
					// 若只輸入oPos，將之當作注釋(oTxt)。
					oTxt = oPos;
					if (false)
						oPos = typeof null == 'object' ? 0 : null;
					// 若是typeof null=='object',請設成false
					oPos = 0;
				}

			// 設定oTxt 1/4
			if (typeof oTxt == 'object' && oTxt.innerHTML)
				oTxt = oTxt.innerHTML;
			else if (oTxt) {
				// 轉成string
				oTxt += '';
			}

			// (自動)判別使用的type
			var useAutoTxt;
			if (popup_window_type == sPopF.auto) {
				// 設定oTxt 2/4 : 知道是自動判別後先設定
				if (typeof oPos == 'object' && (!oTxt || oTxt == 0))
					if (oPos[sPopP.types[0]])
						oTxt = oPos[sPopP.types[0]], useAutoTxt = true;
					else if (oPos.title) {
						// 以<b title="~">的用法來說，這是最常經過的path
						oTxt = oPos.title;
						useAutoTxt = true;
					}

				// 假如沒有oTxt.gText()，改成oTxt.replace(/<[^>]*>/g,'')之即可。這是為了預防HTML的情形。
				var popup_length = typeof oTxt == 'string' ? oTxt.length
				// :typeof oTxt=='object'&&oTxt.innerHTML?oTxt.innerHTML.length
				: 0;
				if (false)
					alert(popup_length + ',' + (popup_length * .7) + ','
							+ oPos.innerHTML.length);
				var inner_length = (typeof oPos.innerText == 'string' ? oPos.innerText
						: _.HTML_to_Unicode(oPos.innerHTML
						// .replace(/<[a-z][^<>]*>/g, '')
						)).length;
				if (typeof oPos == 'object'
						&& (oPos.doneRuby || !oPos.innerHTML.match(/<\s*ruby/i)
						// auto-detect the type to use.
						&& popup_length < 60 && popup_length < 3 * inner_length
								&& popup_length * .7 - 9 < inner_length)) {
					// ruby的條件
					popup_window_type = 'ruby';
				} else if (sPopP.window && popup_length < 300) {
					popup_window_type = 'popup';
					if (typeof oPos == 'object' && oPos.title === oTxt)
						oPos[sPopP.types[0]] = oTxt, oPos.title = '';
				} else {
					popup_window_type = 'window';
				}

				// 設定oTxt 3/4 & type
				if (typeof oPos == 'object' && (!oTxt || oTxt == 0))
					if (oPos[popup_window_type])
						oTxt = oPos[popup_window_type], useAutoTxt = true;

				popup_window_type = sPopF[popup_window_type];
			}

			// 設定oTxt 4/4
			if (!oTxt || oTxt == 0 && typeof oPos != 'object') {
				if ((oTxt = oPos[sPopP.types[popup_window_type]])
						|| (oTxt = oPos[sPopP.types[0]]) || (oTxt = oPos.title))
					useAutoTxt = true;
				else
					return;
			}

			// 設定className與position
			// popup left,popup top初始值
			sPopP.left = 0, sPopP.top = 20;
			if (!oPos || typeof oPos != 'object') {
				// popup 在滑鼠指標處
				// see: add_listener()
				try {
					sPopP.left += event.offsetX, sPopP.top += event.offsetY;
				} catch (e) {
				}
			} else if (!oPos.className && sPopP.DclassName[popup_window_type]) {
				if (!classN && (classN = document.body.className)
						&& !sPopP.bgS[classN])
					classN = 0;
				oPos.className = sPopP.DclassName[popup_window_type]
						+ (classN ? '_' + classN : '');
				var w, s = oPos.style;
				if (!s.fontWeight && (w = oPos.parentNode)
						&& (w = w.style.fontWeight)) {
					// 除非有明確設定font-weight，否則通常不會有效
					s.fontWeight = w;
				}
			}
		}

		// 修正
		if (popup_window_type == sPopF.popup && !sPopP.window
				&& !(flag & sPopF.force))
			// Mozilla中無法顯示popup
			popup_window_type = sPopF.window;

		if (false)
			alert(sPopP.types[popup_window_type] + ','
					+ (sPopP.window || flag & sPopF.force) + ',' + oTxt);
		// 處理pop
		if (popup_window_type == sPopF.ruby) {
			if (typeof oPos != 'object' || !oPos.innerHTML)
				// oPop非HTML element就return
				return;
			if (oPos.doneRuby)
				// 已經處理過<ruby>就pass
				return popup_window_type;
			// 處理repeat
			if (flag & sPopF.repeat || sPopP.RepeatC.indexOf(oTxt) !== -1) {
				oPos.title = '';
				oTxt = has_ruby_tag ? oTxt
						.repeat((typeof oPos.innerText == 'string' ? oPos.innerText
								: _.HTML_to_Unicode(oPos.innerHTML
								// .replace(/<[a-z][^<>]*>/g, '')
								)).length
								/ oTxt.length)
						: '';
			}

			try {
				// 標準可以沒 <rb>。
				// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby
				oPos.innerHTML = '<ruby><rb>'
						+ oPos.innerHTML
						+ '<\/rb><rp>'
						// 半形與全形的括弧
						+ (oTxt ? window.navigator.userAgent.indexOf("Opera") >= 0
								|| /^[a-z\d\s_,.;"'\[\]{}+\-*\/]*$/i.test(oTxt) ? '(<\/rp><rt>'
								+ oTxt + '<\/rt><rp>)'
								: '（<\/rp><rt>' + oTxt + '<\/rt><rp>）'
								: '<\/rp><rt><\/rt><rp>') + '<\/rp><\/ruby>';
			} catch (e) {
				var n = e.number & 0xFFFF;
				if (n == 601
						&& (typeof sPopError == 'undefined' || sPopError != n))
					alert('Error: ' + e.description + ' at\n' + oPos.outerHTML
							+ '\n\n★也許是在這之前的tag出錯，例如有<b>卻沒有<\/b>。');
				sPopError = n;
			}
			oPos.doneRuby = true;

		} else if (popup_window_type == sPopF.popup) {
			if (nopop || !sPopP.window)
				return popup_window_type;
			if (!repop) {
				if (useAutoTxt)
					oTxt = oTxt.replace(brReg, brT);
				// 這是一種註解功能，在mouseout後，假定讀者繼續讀下去，所以就讓popup
				// object消失。想要多看一點的，會去按他，這時才讓popup object繼續存在。
				sPopP.window.document.body.innerHTML = // oTxt=
				'<div style="'
						+ sPopP.popupS
						+ '" onblur="parent.sPopP.window.hide();" title="reference">[<b style="color:peru;cursor:pointer;" onclick="parent.sPopP.window.hide();">'
						+ sPopP.close_message
						+ '<\/b>] [<b style="color:green;cursor:pointer;" onclick="parent.sPopP.width+=100,parent.sPopP.height+=50,parent.'
						+ sPopP.functionName
						+ '(\''
						+ repopMark
						+ '\');">'
						+ sPopP.bigger_message
						+ '<\/b>] [<b style="color:orange;cursor:pointer;" onclick="parent.sPopP.width=parent.sPopP.height=0,parent.'
						+ sPopP.functionName + '(\'' + repopMark + '\');">'
						+ sPopP.reset_message
						+ '<\/b>]<hr style="color:purple;height:1px" />'
						+ oTxt.replace(/'/g, '&#39;') + '<\/div>';
				// object handling now(for popup:repop)
				sPopP.popObj = oPos || document.body;
				if (false)
					if (typeof oPos.onmouseout != 'undefined')
						oPos.onmouseout = function() {
							sPopP.window.hide();
						};
			}
			if (false)
				alert(sPopP.width + ',' + sPopP.height);
			if (flag & sPopF.clearPop)
				sPopP.window.hide();
			else
				sPopP.window.show(sPopP.left, sPopP.top, sPopP.width,
						sPopP.height, oPos || document.body);

		} else if (popup_window_type == sPopF.window) {
			if (nopop)
				return popup_window_type;
			if (false)
				if (typeof netscape == 'object')
					// 創造無邊框視窗:titlebar=no dependent:ns only 全螢幕：channelmode
					// 带有收藏链接工具栏的窗口：directories
					// 网页对话框：'dialogWidth:400px;dialogHeight:300px;dialogLeft:200px;dialogTop:150px;center:yes;help:yes;resizable:yes;status:yes'
					netscape.security.PrivilegeManager
							.enablePrivilege("UniversalBrowserWrite");
			/**
			 * <code>
			dialogHeight: iHeight 设置对话框窗口的高度。
			dialogWidth: iWidth 设置对话框窗口的宽度。 　　
			dialogLeft: iXPos 设置对话框窗口相对于桌面左上角的left位置。
			dialogTop: iYPos 设置对话框窗口相对于桌面左上角的top位置。
			center: {yes | no | 1 | 0 } 指定是否将对话框在桌面上居中，默认值是“yes”。
			help: {yes | no | 1 | 0 } 指定对话框窗口中是否显示上下文敏感的帮助图标。默认值是“yes”。 　　
			resizable: {yes | no | 1 | 0 } 指定是否对话框窗口大小可变。默认值是“no”。
			status: {yes | no | 1 | 0 } 指定对话框窗口是否显示状态栏。对于非模式对话框窗口，默认值是“yes”；对于模式对话框窗口，默认值是 “no”。

			window.showModalDialog(), window.showModelessDialog(): IE only. 不如用Ajax
			</code>
			 */
			var w = 'titlebar=no,dependent,resizable=1,menubar=0,toolbar=0,location=0,scrollbars=1,width=550,height=400'// ,fullscreen
			;
			try {
				// old IE
				w = window.open('', 'comment', w, false);
			} catch (e) {
				// Chrome/89.0.4389.9
				w = window.open('', 'comment', w);
			}
			// head
			var t = sPopP.commentTitle,
			// document.title
			_t = oPos.innerHTML && oPos.innerHTML.length < 9 ? sPopP.commentTitlePattern
					.replace(/%s/, oPos.innerHTML)
					: t;
			if (false)
				if (typeof netscape == 'object')
					netscape.security.PrivilegeManager
							.disablePrivilege("UniversalBrowserWrite");
			if (document.title)
				t += ' @ [' + document.title + ']', _t += ' @ '
						+ document.title;
			else if (false)
				t += ' @ [<a href="' + location.href + '">' + location.pathname
						+ '<\/a>]';
			w.document.open();
			w.document
					.write(
					/**
					 * <code>'<?xml version="1.1" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html;charset=utf-8" /><title>'
					+ _t + '<\/title><script type="text/javascript">window.onblur=function(){window.close();};<\/script><\/head><body><b style="color:#11f;">' + t + ':<\/b>'
					</code>
					 */
					'<script type="text/javascript">window.onblur=function(){window.close();};<\/script><b style="color:#11f;">'
							+ t
							+ ':<\/b>'
							// "white-space:normal;width:500px;" :useless **
							// 這邊會對<b title="..等造成影響！
							+ (oPos.innerHTML ? '<div id="s" style="color:#488;background-color:#FF8;">\n'
									+ oPos.innerHTML.replace(/\n/g, '<br />')
											.replace(/ /g, '&nbsp;')
									+ '\n<\/div><hr />'
									: '')
							+ '<div id="c" style="color:#404;background-color:#8FF;">\n'
							+ oTxt.replace(/\n/g, '<br />')
							// 以不換行(pre)的方式顯示.patch
							.replace(/ /g, '&nbsp;')
							+ '\n<\/div><hr />[ <b style="cursor:pointer;color:#40f;" onclick="javascript:opener.focus();self.close();">'
							+ sPopP.close_message + '<\/b> ]'
					// + '</body></html>'
					);
			w.document.close();
			w.document.title = _t;
			w.focus();
			// open出來的窗口即使close了，它的window對象還是存在的，要記得刪除引用
			// http://www.blogjava.net/tim-wu/archive/2006/05/29/48729.html
			w = null;
		} else if (false)
			alert('type error: ' + popup_window_type + '!');

		// 回傳決定的type
		return popup_window_type;
	}

	/**
	 * <code>	開啟連結於 target
	 **	最好將openAtInit();設在onload
		JScript solution for attribute 'target' @ XHTML1.1	<a target="tag">之取代策略
		way 1:	,captureE,openAtInit,"openAtInit();",openAt
		onload: + openAtInit()		,captureE,openAtInit,"openAtInit();",openAt
		target="tag"	→	onclick="return openAt('tag')"
		target="_blank"	→	onclick="return openAt()"
		target="_self"	→	onclick="return openAt(1)"
		way 2:	,openAt
		target="_blank"	→	onclick="return openAt(0,this.href)"
		target="_self"	→	onclick="return openAt(1,this.href)"
		http://tohoho.wakusei.ne.jp/js/event.htm

	TODO:
	http://hi.baidu.com/monyer/blog/item/56f1c88095fc96d79023d931.html
	a{text:expr/*XSS* /ession(target="_blank");}

	http://blog.fanstown.net/blogs/jerry/archive/2007/04/04/HTML_8476_rel_5E5C2760E68BE3890230_.aspx
	原來這樣寫的代碼：
	<a href="document.html" target="_blank"> 打開一個新窗口</a>
	現在要寫成這樣：
	<a href="document.html" rel="external">打開一個新窗口</a>
	這是符合strict標準的方法。當然還必須配合一個javascript才有效。
	 **	應該 binding a.onclick 或 a.keypress
	rel是relationship的英文縮寫.rel與rev具有互補的作用,rel指定了向前鏈接的關係,rev指定了反向鏈接的關係.

	</code>
	 */
	var captureE;
	// 初始化設定
	// openAtInit[generateCode.dLK]='captureE';
	function openAtInit() {
		if (typeof captureE != 'object'
				&& (typeof Event == 'object' || typeof Event == 'function')) {
			// for moz
			// http://developer.mozilla.org/en/docs/DOM:element.addEventListener
			// http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event
			if (Event.mousedown)
				window.captureEvents(Event.mousedown);
			if (Event.keydown)
				window.captureEvents(Event.keydown);
			window.onmousedown = window.onkeydown = function(_event) {
				// alert('openAtInit: '+_event.target.tagName);
				captureE = _event;
			};
		}
		for (var i, a = library_namespace.get_tag_list('a'); i < a.length; i++)
			if (a[i].onclick && !a[i].onkeypress
					&& ('' + a[i].onclick).indexOf('openAt') != -1)
				a[i].onkeypress = a[i].onclick;
	}
	// open h(ref) in tag(et)
	// openAt[generateCode.dLK]='captureE,openAtInit';
	function openAt(tag, h) {
		if (// typeof tag=='undefined'||
		!tag)
			tag = '_blank';
		else if (tag === 1)
			tag = '_self';
		var t;
		if (!h && typeof event == 'object')
			h = event.srcElement.href;

		// 對Gecko等使用標準(?)Document Object Model的
		// http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
		if (!h && typeof captureE == 'object'
				&& typeof captureE.target == 'object') {
			t = captureE.target;
			while (!(h = t.href) && (t = t.parentNode))
				;
		}

		if (false)
			alert(h + ',' + tag + '\n' + captureE.target.parentNode.tagName
					+ ":"
			// +captureE.target.parentElement().tagName
			);
		if (h)
			window.open(h, tag).focus();
		return false;
	}

	/**
	 * <code>	display mark to valid document
	<div id="valid">&nbsp;</div>
	window.onload="addValid()";
	搞定之後把自己網站提交到W3C Sites收錄。	http://www.w3csites.com/

	for RSS:
	http://rss.scripting.com/?url=http%3A%2F%2Flyrics.meicho.com.tw%2Fgame%2Frss.xml
	http://feedvalidator.org/check.cgi?url=http%3A%2F%2Flyrics.meicho.com.tw%2Fgame%2Frss.xml
	</code>
	 */
	// object to insert valid, target window/frame
	function addValid(v, tf) {
		if (location.protocol == 'file:')
			return;
		if (!v)
			v = 'valid';
		if (typeof v != 'object')
			v = document.getElementById(v);
		if (!v)
			return 1;
		if (v.innerHTML.replace(/&nbsp;/g, '').replace(/\s+/g, ''))
			return 2;

		if (typeof tf === 'undefined') {
			// tf = dQuote(tf);
			// tf = tf ? ' target="' + tf + '"' : '';
			tf = 'valid_window';
		}
		var i = 0, t = '', d, addValidData = [
				'Valid XHTML 1.1! by W3C	http://validator.w3.org/check?uri=referer	http://www.w3.org/Icons/valid-xhtml11'
				// ,'Valid XML 1.0! by W3C '
				// http://jigsaw.w3.org/css-validator/validator?uri=~
				,
				'Valid CSS! by W3C	http://jigsaw.w3.org/css-validator/check/referer	http://jigsaw.w3.org/css-validator/images/vcss',
				'Validome Validation Services	http://www.validome.org/referer	http://www.validome.org/images/valid/set2/valid_xhtml_1_1.png',
				'Another HTML-lint check	http://openlab.ring.gr.jp/k16/htmllint/htmllint.cgi?ViewSource=o	http://openlab.ring.gr.jp/k16/images/ahl-blue.gif',
				'Bobby WAI-AAA Approved by bobby@watchfire.com	http://bobby.watchfire.com/bobby/bobbyServlet?URL=~&output=Submit&gl=wcag1-aaa	http://bobby.watchfire.com/bobby/html/en/images/approved_aaa.gif',
				'Bobby 508 Approved by bobby@watchfire.com	http://bobby.watchfire.com/bobby/bobbyServlet?URL=~&output=Submit&gl=sec508	http://bobby.watchfire.com/bobby/html/en/images/approved_508.gif'
		// http://webxact.watchfire.com/
		];
		for (; i < addValidData.length; i++)
			if (d = addValidData[i].split('	'), d[1])
				t += ' <a title="'
						+ d[0]
						+ '" href="'
						+ d[1].replace(/~/g, encodeURI(location.href))
						+ '" target="'
						+ tf
						+ '">'
						+ (d[2] ? '<img style="display:inline;width:88px;" alt="'
								// IE不通
								// '" onclick="return openAt(\''+tf+'\');"><img
								// style="display:inline;" alt="'
								+ d[0] + '" src="' + d[2] + '" />'
								: d[0]) + '<\/a>'; // tf.focus()
			else
				alert('Validate data defined error!');
		v.innerHTML = 'Validate this document:<br />' + t;
		v.style.display = 'block';
		return t;
	}

	/**
	 * <code>	延遲執行: 加強版的 setTimeout?

	id=delayRun(function[,ms=0])

	id=delayRun([function,[args],this] [,ms=0])

	</code>
	 */
	function delayRun(f, ms) {
		var _f = delayRun, i;
		if (!_f.fL)
			_f.fL = [];
		i = _f.fL.length;
		_f.fL.push(f);
		setTimeout('delayRun.run(' + i + ');', ms || 0);
		return i;
	}
	delayRun.clear = function(i) {
		// clearTimeout(): 為求簡單省略
		delete this.fL[i];
	};
	delayRun.run = function(i) {
		var _t = this, f = _t.fL[i];
		if (f) {
			if (typeof f == 'function')
				f();
			else if (Array.isArray(f))
				f[0].apply(f[2] || null, f[1]);
			else
				eval(f);
			delete _t.fL[i];
		}
	};

	var VBalert_flags = {
		ret : 0,

		// http://msdn.microsoft.com/library/en-us/script56/html/vsfctmsgbox.asp
		vbOK : 1,
		vbCancel : 2,
		vbAbort : 3,
		vbRetry : 4,
		vbIgnore : 5,
		vbYes : 6,
		vbNo : 7,

		vbOKOnly : 0,
		vbOKCancel : 1,
		vbAbortRetryIgnore : 2,
		vbYesNoCancel : 3,
		vbYesNo : 4,
		vbRetryCancel : 5,

		// Critical Message icon (x)
		vbCritical : 16,
		// Warning Query icon (?)
		vbQuestion : 32,
		// Warning Message icon (!)
		vbExclamation : 48,
		// Information Message icon(i)
		vbInformation : 64,

		vbDefaultButton1 : 0,
		vbDefaultButton2 : 256,
		vbDefaultButton3 : 512,
		vbDefaultButton4 : 768,
		vbApplicationModal : 0,
		vbSystemModal : 4096
	};
	/**
	 * <code>	MsgBox, InputBox Titlebars Prefixed with 'VBScript'	http://support.microsoft.com/default.aspx?scid=kb;en-us;234742
		http://asp.programmershelp.co.uk/vbscriptmsgbox.php
		http://17.webmasters.com/caspdoc/html/vbscript_msgbox_function.htm
	請加入下面一段中介function
	<script type="text/vbscript">
	Function VBalert_vbf()
		VBalert_flags.ret = MsgBox(VBalert_flags.prompt, VBalert_flags.buttons, VBalert_flags.title, VBalert_flags.helpfile, VBalert_flags.context)
	End Function
	</script>

	or use:
	window.execScript( sExpression, sLanguage );
	</code>
	 */
	function VBalert(prompt, buttons, title, helpfile, context) {
		if (typeof prompt == 'undefined')
			return;

		VBalert_flags.prompt = prompt || '',
				VBalert_flags.buttons = buttons || 0,
				VBalert_flags.title = title || '';
		// Not available on 16-bit platforms.
		// http://msdn.microsoft.com/library/en-us/script56/html/vsfctmsgbox.asp
		VBalert_flags.helpfile = helpfile || '',
				VBalert_flags.context = context || 0;
		try {
			VBScript: VBalert_vbf();
			return VBalert_flags.ret;
		} catch (e) {
			// alert('VBalert error:' + e.message);
			alert(VBalert_flags.prompt);
		}
	}
	// initialization.
	// VBalert();
	if (false)
		alert(VBalert('12', VBalert_flags.vbInformation
				+ VBalert_flags.vbDefaultButton3));

	// TODO: get_size(node = window) = Object.create(null);

	/**
	 * <code>	get window status	取得視窗可利用的size。現在還得用種方法，真是羞恥。	2005/1/13 20:0
		get_window_status(event object)
		http://www.mozilla.org/docs/dom/domref/dom_window_ref.html
		http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/body.asp
		http://www.howtocreate.co.uk/tutorials/index.php?tut=0&part=16
		http://www.webdevtips.com/webdevtips/faq/javascript/index.shtml
		http://www.quirksmode.org/viewport/compatibility.html
		http://cgi.din.or.jp/~hagi3/JavaScript/JSTips/Mozilla/eventhandle.htm

	 ** untested !!

	</code>
	 */

	var event_Object;
	/**
	 * 取得當前 window status
	 * 
	 * @param node
	 *            HTML element or Event object
	 * @returns {Object} status
	 */
	function get_window_status(node) {
		var t = get_window_status.scroll(), r = {
			scrollLeft : t[0],
			scrollTop : t[1]
		};

		// 能scroll的範圍:不準,yet test The height of the total page (usually the body
		// element)
		// t:test, true:all but Explorer Mac, false:Explorer Mac, would also
		// work in Explorer 6 Strict, Mozilla and Safari
		var t = typeof document.body.scrollHeight != 'undefined'
				&& typeof document.body.offsetHeight != 'undefined'
				&& document.body.scrollHeight > document.body.offsetHeight;

		r.scrollW = t ? document.body.scrollWidth
				: typeof document.body.offsetWidth != 'undefined' ? document.body.offsetWidth
						: null;
		r.scrollH = t ? document.body.scrollHeight
				: typeof document.body.offsetHeight != 'undefined' ? document.body.offsetHeight
						: null;

		// window 大小
		// 2009/3/23 1:15:29
		var NewIE = navigator.appVersion.indexOf("MSIE") != -1
				&& parseInt(navigator.appVersion.split("MSIE")[1]) > 6;
		r.windowW = typeof window.innerWidth != 'undefined' ? window.innerWidth
				: /* typeof offsetWidth!='undefined'?offsetWidth: */!NewIE
						&& typeof document.body.clientWidth != 'undefined' ? document.body.clientWidth
						: document.documentElement
								&& !isNaN(document.documentElement.clientWidth) ? document.documentElement.clientWidth
								// +offsetLeft
								: null;
		r.windowH = typeof window.innerHeight != 'undefined' ? window.innerHeight
				: /* typeof offsetHeight!='undefined'?offsetHeight: */!NewIE
						&& typeof document.body.clientHeight != 'undefined' ? document.body.clientHeight
						: document.documentElement
								&& !isNaN(document.documentElement.clientHeight) ? document.documentElement.clientHeight
								// +offsetTop
								: null;

		var noEmu;
		if (!node)
			if (typeof window.event === 'object')
				node = window.event;
			else if (typeof e === 'object')
				node = e;
			else if (typeof event_Object === 'object')
				noEmu = true, node = event_Object;

		if (node) {
			// Safari: yet test
			var isSafari = /Safari/i.test(window.navigator.appName);

			// window相對於screen位置:不準, yet test
			r.windowX = node.clientX - ((isSafari) ? r.scrollLeft : 0);
			r.windowY = node.clientY - ((isSafari) ? r.scrollTop : 0);
			// mouse位置
			// http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_event.asp
			// http://www.mozilla.org/docs/dom/domref/dom_event_ref.html
			r.mouseX = node.clientX + ((!isSafari) ? r.scrollLeft : 0);
			r.mouseY = node.clientY + ((!isSafari) ? r.scrollTop : 0);
			if (!noEmu)
				// 模擬event obj，因為event obj不能在event發生時之function執行完後再取得
				event_Object = {
					'clientX' : node.clientX,
					'clientY' : node.clientY
				};
			if (false)
				alert(r.scrollLeft + ',' + r.scrollTop + '\n' + o.clientX + ','
						+ o.clientY);
		}

		return r;
	}

	// IE7遵照標準，不用 document.body.scrollLeft 而用
	// document.documentElement.scrollLeft
	// http://hkom.blog1.fc2.com/blog-entry-423.html
	// http://diaspar.jp/node/47
	get_window_status.scroll = function(node) {
		var box_model, od = node && node.ownerDocument;

		try {
			// from jQuery
			var div = document.createElement('div');
			div.style.width = div.style.paddingLeft = '1px';

			document.body.appendChild(div);
			_.get_window_status.box_model = box_model = div.offsetWidth === 2;
			if (!node)
				od = div.ownerDocument;
			document.body.removeChild(div).style.display = 'none';

			div = null;

		} catch (e) {
			// TODO: handle exception
		}

		// 到這邊，若是 od 未設定，則所有取值與 node 無關。
		// 因為大多有 ownerDocument，所以預設編入。
		// 新的 browser，od 與 dv 皆應有設定。

		/**
		 * <code>

		Firefox/3.6.6: ownerDocument: [object HTMLDocument], defaultView: [object Window], box_model: true, pageXOffset: 0, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: 0
		Chrome/6.0.453.1 Safari/534.2: ownerDocument: [object HTMLDocument], defaultView: [object DOMWindow], box_model: true, pageXOffset: 0, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: 0
		Safari/533.16: ownerDocument: [object HTMLDocument], defaultView: [object DOMWindow], box_model: true, pageXOffset: 0, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: 0
		Opera/9.80 Presto/2.6.30: ownerDocument: [object HTMLDocument], defaultView: [object Window], box_model: true, pageXOffset: 0, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: 0


		MSIE 5.0 @ MSIE 9.0 test: ownerDocument: [object], defaultView: undefined, box_model: false, pageXOffset: undefined, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: undefined
		MSIE 7.0 @ MSIE 9.0 test: ownerDocument: [object], defaultView: undefined, box_model: true, pageXOffset: undefined, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: undefined

		MSIE 8.0: ownerDocument: [object HTMLDocument], defaultView: undefined, box_model: true, pageXOffset: undefined, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: undefined
		MSIE 9.0 test: ownerDocument: [object HTMLDocument], defaultView: [object Window], box_model: true, pageXOffset: 0, body.scrollLeft: 0, documentElement.scrollLeft: 0, scrollX: undefined

		</code>
		 */
		// IE5-8: od: true, dv: false
		var doc = node && od || window.document, body = doc.body, dv = doc.defaultView, win = dv
				|| doc.parentWindow;
		library_namespace.debug('ownerDocument: ' + od + ', defaultView: ' + dv
				+ ', box_model: ' + box_model + ', pageXOffset: '
				+ win.pageXOffset + ', body.scrollLeft: ' + body.scrollLeft
				+ ', documentElement.scrollLeft: '
				+ doc.documentElement.scrollLeft + ', scrollX: ' + win.scrollX,
				2, 'get_window_status.scroll');

		// ** 順序有關係! 但在未設置 box_model 前，body.scrollLeft 排在
		// documentElement.scrollLeft 前面。現在已按照 jQuery 改過。
		// TODO: do test
		// [scrollLeft, scrollTop, clientLeft, clientTop]
		return (get_window_status.scroll = !isNaN(win.pageXOffset) ?
		// 預設 box_model === true
		function(n) {
			// '|| window.document': for Range (see get_selection())
			var d = n && n.ownerDocument || window.document, w = d.defaultView;
			d = d.documentElement;
			return [ w.pageXOffset, w.pageYOffset, d.clientLeft, d.clientTop ];
		} :

		// IE7(6?)~8
		box_model && !isNaN(doc.documentElement.scrollLeft) ? function(n) {
			var d = (n && n.ownerDocument || window.document).documentElement;
			return [ d.scrollLeft, d.scrollTop, d.clientLeft, d.clientTop ];
		} :

		// IE5(6?)
		!isNaN(body.scrollLeft) ? function(n) {
			var b = (n && n.ownerDocument || window.document).body;
			return [ b.scrollLeft, b.scrollTop, b.clientLeft, b.clientTop ];
		}
				: !isNaN(win.scrollX) ?
				// untested
				function() {
					var b = document.body;
					return [ window.scrollX, window.scrollY, b.clientLeft,
							b.clientTop ];
				} :

				function() {
					return [ 0, 0, 0, 0 ];
				})(node);

	};

	_// JSDT:_module_
	.get_window_status = get_window_status;

	function set_style(element, name, value) {
		if (element && typeof element === 'string')
			element = document.getElementById(element);

		if (typeof element.style !== 'object') {
			library_namespace.warn('The element has no .style property!');
			return;
		}

		if (typeof name === 'object' && !value) {
			Object.assign(element.style, name);
			if (false) {
				var pair = name;
				for (name in pair) {
					value = pair[name];
					set_style(element, name, value);
				}
			}
			return;
		}

		if (!(name in element.style)) {
			library_namespace.warn('There is no property [' + name
					+ '] in the element!');
			return;
		}

		element.style[name] = value;
	}

	_.set_style = set_style;

	/**
	 * get current computed style property of specified HTML element. TODO: 整合
	 * get_node_offset, _.set_style
	 * 
	 * TODO: using getComputedStyle(element)[name]
	 * 
	 * @param element
	 *            HTML element
	 * @param name
	 *            W3C style property name, rule_name (e.g., no
	 *            '-webkit-background-clip')
	 * @return
	 * @see http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug,
	 *      http://www.comsharp.com/GetKnowledge/zh-CN/TeamBlogTimothyPage_K983.aspx,
	 * curCSS @ jQuery, http://api.jquery.com/category/css/, <a
	 *        href="http://www.quirksmode.org/dom/getstyles.html"
	 *        accessdate="2010/4/1 15:44">JavaScript - Get Styles</a>, <a
	 *        href="http://www.javaeye.com/topic/140784?page=2"
	 *        accessdate="2010/4/1 15:41">style.display取值不对，难道是浏览器bug？讨论第2页: -
	 *        JavaScript - web - JavaEye论坛</a> 大體上，currentStyle 相當於
	 *        getComputedStyle，而 runtimeStyle 相當於
	 *        getOverrideStyle。但是它們還是有很重要的區別。那就是，IE的CSS計算步驟其實是不合標準的。
	 *        document.defaultView 在 mozilla 中是指向 window obj 的,但是很有可能在其他 broswer
	 *        中就不指向 window obj.. 因為 w3c 中沒有強行規定 document.defaultView 一定是一個global
	 *        obj.
	 * 
	 * 返回頁內樣式表定義的類，那麼可以使用DOM樣式表對象來訪問： var oCssRulers =
	 * document.styleSheets[0].cssRulers || document.styleSheets[0].rulers;
	 * (前者是DOM方法，後者是IE私有方法) alert(oCssRulers[0].style.display);
	 * @since 2010/4/2 00:14:09 refactoring 重構
	 * @_memberOf _module_
	 */
	function get_style(element, name, options) {
		// CeL.get_style(element, 'display')
		// window.getComputedStyle(element).display
		if (element && typeof element === 'string')
			element = document.getElementById(element);

		options = library_namespace.setup_options(options);
		// TODO: options.no_computed

		// opacity

		if (!element || !name)
			return;

		var value, style_interface, e;
		name = name.toLowerCase();
		// IE: element.style.styleFloat, firefox, chorme, safari:
		// element.style.cssFloat
		if (false)
			if (name === 'float')
				name = 'cssFloat' in element.style ? 'cssFloat' : 'styleFloat';

		if (style_interface =
		// window.getComputedStyle
		document.defaultView) {
			try {
				if ((value = element.ownerDocument)
						&& (value = value.defaultView))
					style_interface = value;
				else
					// library_namespace.node_description() @
					// application.debug.log
					library_namespace
							.debug('Cannot get .ownerDocument.defaultView of '
									+ (library_namespace.node_description ? library_namespace
											.node_description(element)
											: 'node') + ' !');

				if (false)
					if (/[A-Z]/.test(name))
						name = name.replace(/([A-Z])/g, '-$1').toLowerCase();
				// width 之類可能 === "auto"!!
				value = style_interface.getComputedStyle(element, null)
				// [name]
				.getPropertyValue(name);

				// from curCSS @ jQuery: return a number for opacity
				if (name === 'opacity' && value === '')
					value = 1;
			} catch (e) {
				library_namespace.warn('get_style(name: ' + name + ') error!');
				library_namespace.error(e);
			}

		} else if (style_interface = element.currentStyle) {
			// IE 5-8
			// IE: \w+\W\w+ (e.g., margin-bottom), firefox, chorme, safari:
			// \w+-\w+
			// IE8 中 width 之類可能 === "auto"!!
			value = style_interface[name === 'float' ? 'styleFloat' : name
					.replace(/-([a-z])/g, function($0, $1) {
						return $1.toUpperCase();
					})];
			// Dean Edwards（Base2類庫的作者）的hack
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		} else if ((style_interface = element.style)
				&& (name in style_interface)) {
			value = style_interface[name];

		} else {
			// we should directly get it from element itself
			if (!(value = element['offset' + name.charAt(0).toUpperCase()
					+ name.slice(1).toLowerCase()]))
				value = '';
		}

		// 處理 px, pt, em, ...

		library_namespace.debug((library_namespace.node_description
		//
		? library_namespace.node_description(element) : 'node')
		//
		+ '.style[' + name + '] = [' + value + ']'
		//
		+ (style_interface === document.defaultView
		//
		? ' (use W3C .getComputedStyle)'
		//
		: style_interface === element.currentStyle
		//
		? ' (use IE .currentStyle)' : ''));

		if (options.numeral && typeof value === 'string') {
			var matched = value.match(/^(\d+(\.\d+)?)px$/);
			if (matched) {
				value = +matched[1];
			}
		}

		return value;
	}

	_// JSDT:_module_
	.get_style = get_style;

	// not yet tested.
	function get_style_sheets(filter, limit) {
		var filter_name, filter_item, filter_item_is_RegExp, i, sheet_property, length, tmp_style_sheets,
		// tag_list_default(document.styleSheets)
		style_sheets = document.styleSheets;
		if (!style_sheets || !style_sheets.length)
			return [];

		if (library_namespace.is_Object(filter)) {
			for (filter_name in filter) {
				filter_item = filter[filter_name];
				filter_item_is_RegExp = library_namespace
						.is_RegExp(filter_item);
				tmp_style_sheets = [];
				for (i = 0, length = style_sheets.length; i < length
						&& (!limit || tmp_style_sheets.length < limit); i++) {
					sheet_property = style_sheets[i][filter_name] || '';
					if (filter_item_is_RegExp ? filter_item
							.test(sheet_property) : sheet_property
							.indexOf(filter_item) !== -1)
						tmp_style_sheets.push(style_sheets[i]);
				}
				style_sheets = tmp_style_sheets;
			}
		}

		return style_sheets;
	}
	;

	_// JSDT:_module_
	.get_style_sheets = get_style_sheets;
	_// JSDT:_module_
	.get_style_sheet = function(filter) {
		return get_style_sheets(filter, 1)[0];
	};

	/**
	 * get the actual position [left,top,width,height] of an HTML node object
	 * 
	 * @param node
	 *            HTML node object
	 * @return
	 * @_memberOf _module_
	 * @deprecated use get_style(), jQuery.offset(), jQuery.position()
	 * @see http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug,
	 *      http://www.comsharp.com/GetKnowledge/zh-CN/TeamBlogTimothyPage_K983.aspx,
	 *      http://msdn.microsoft.com/library/en-us/dndude/html/dude04032000.asp,
	 *      http://www.mail-archive.com/mochikit@googlegroups.com/msg00584.html,
	 *      http://hartshorne.ca/2006/01/20/javascript_positioning/,
	 *      http://www.jb51.net/article/18340.htm,
	 *      http://blog.csdn.net/wangjj_016/archive/2010/04/09/5467507.aspx
	 */
	function get_node_offset(node) {
		if (!(node = get_element(node)))
			return {};

		var _s = _.get_node_offset, offset = 'offsetWidth' in node ? {
			width : node.offsetWidth,
			height : node.offsetHeight
		} : {};

		if (node.getBoundingClientRect) {

			// also see: getClientRects()

			var s = get_window_status.scroll(node), box = node
					.getBoundingClientRect();

			offset = {
				left : box.left + s[0] - s[2],
				top : box.top + s[1] - s[3],
				width : box.right - box.left,
				height : box.bottom - box.top
			};

		} else if (_.is_HTML_element(node)) {
			if (false)
				alert(node.id + ':' + node.offsetLeft + ',' + node.offsetTop
						+ ';' + node.offsetWidth + ',' + node.offsetHeight);
			var l = 0, t = 0, p;
			// var n, countH = window.navigator.userAgent.indexOf("MSIE") >= 0,
			// add = 1, outsideBLOCK = 1;
			if (false)
				if (typeof node.offsetWidth !== 'undefined') {
					var _w = node.offsetWidth, _h = node.offsetHeight;
					// var _o = window.getComputedStyle ?
					// document.defaultView.getComputedStyle(node, null) : null;

					if (false) {
						// http://www.quirksmode.org/dom/getstyles.html
						if (_o) {
							// moz未包含margin+border+padding
							// 這些值可能會有'em'等等的出現，不一定都是px！
							if (false)
										alert(_o
												.getPropertyValue('border-left-width')
												+ ','
												+ _o
														.getPropertyValue('border-right-width')),
										_w += parseInt(_o
												.getPropertyValue('border-left-width'))
												+ parseInt(_o
														.getPropertyValue('border-right-width')),
										_h += parseInt(_o
												.getPropertyValue('border-top-width'))
												+ parseInt(_o
														.getPropertyValue('border-bottom-width'));
						} else if (_o = node.currentStyle) {
							// IE
							// IE的offset已經包含margin+border+padding的部份??另，這些值可能會有'em'等等的出現，不一定都是px。
							_w += parseInt(_o['borderLeftWidth'])
									+ parseInt(_o['borderRightWidth']);
							_h += parseInt(_o['borderTopWidth'])
									+ parseInt(_o['borderBottomWidt']);
						}
					}
					r.width = _w;
					r.height = _h;
				}

			// 下面這段依瀏覽器而有不同 (-_-)!!
			// position:absolute

			// for debug
			// var tt='';
			// 2006/2/14: 經由 offset 一個個溯源
			var _o = node;
			while (_o && !isNaN(_o.offsetLeft)) {
				// IE在用style:class時會出現誤差。

				if (false) {
					n = _o.tagName;
					if (false)
						if (!/^T(ABLE|BODY|R)$/.test(n = _o.tagName)
								&& (countH || !/^H\d$/.test(n)))
							l += _o.offsetLeft, t += _o.offsetTop;
					if (n == 'DIV')
						add = outsideBLOCK;
					else if (n == 'TD' || countH && /^H\d$/.test(n))
						add = 1;
					outsideBLOCK =
					// _o.style.display
					n == 'TABLE' || n == 'DIV';
					tt += (add ? '' : '#')
							+ n
							+ (_o.style.display ? '(' + _o.style.display + ')'
									: '') + ':' + _o.offsetLeft + ','
							+ _o.offsetTop
							+ (outsideBLOCK ? ', outside BLOCK' : '') + '\n';
					if (add)
						add = 0, l += _o.offsetLeft, t += _o.offsetTop;
				}

				l += _o.offsetLeft || 0, t += _o.offsetTop || 0;
				_o =
				// .parentNode
				_o.offsetParent;
			}

			// 有些會用到overflow，影響位置。 2008/5/31 0:10:7
			_o = node;
			while ((_o = _o.parentNode) && _o.tagName.toLowerCase() != 'body')
				l -= _o.scrollLeft || 0, t -= _o.scrollTop || 0;

			// need to enable definition of tt above
			if (false)
				alert('l ' + l + ',t ' + t + ',w ' + r.w + ',h ' + r.h
						+ (typeof tt == 'string' ? '\n' + tt : ''));

			offset.left = l;
			offset.top = t;
		}

		return offset;
	}

	_// JSDT:_module_
	.get_node_offset = get_node_offset;

	/**
	 * <code>
	//		get the [left,top,width,height] of obj
	function get_node_offset2(obj){
	 if(typeof obj=='string'){var o=document.getElementById(obj);if(o)obj=o;}	//	若loc為id
	 if(typeof obj=='object'&&typeof obj.offsetLeft!='undefined'){	//	若obj為Document Object
	  //alert(obj.id+':'+obj.offsetLeft+','+obj.offsetTop+';'+obj.offsetWidth+','+obj.offsetHeight);
	  var l=obj.offsetLeft,t=obj.offsetTop,n,add,outsideBLOCK,countH=window.navigator.userAgent.indexOf("MSIE")>=0,r=[];
	  if(typeof obj.offsetWidth!='undefined')r[2]=r.width=r.w=r.W=obj.offsetWidth,r[3]=r.height=r.h=r.H=obj.offsetHeight;

	  //	下面這段依瀏覽器而有不同 (-_-)!!
	  //	position:absolute
	  //var tt=obj.tagName+':'+obj.offsetLeft+','+obj.offsetTop+'\n';	//	for debug
	  while(isNaN((obj=obj.parentNode).offsetLeft)){	//	IE在用style:class時會出現誤差。
	   n=obj.tagName;
	   //if( !/^T(ABLE|BODY|R)$/.test(n=obj.tagName) && (countH||!/^H\d$/.test(n)) )l+=obj.offsetLeft,t+=obj.offsetTop;
	   if(n=='DIV')add=outsideBLOCK;
	   else if(n=='TD' || countH&&/^H\d$/.test(n))add=1;
	   outsideBLOCK= n=='TABLE'||n=='DIV';	//	obj.style.display
	   //tt+=(add?'':'#')+n+(obj.style.display?'('+obj.style.display+')':'')+':'+obj.offsetLeft+','+obj.offsetTop+(outsideBLOCK?', outside BLOCK':'')+'\n';
	   if(add)add=0,l+=obj.offsetLeft,t+=obj.offsetTop;
	  }
	  //alert('l'+l+',t'+t+',w'+w+',h'+h+'\n'+tt);	//	need to enable definition of tt above
	  r[0]=r.left=r.l=r.L=l,r[1]=r.top=r.t=r.T=t;
	  return r;
	 }
	}
	</code>
	 */

	/**
	 * <code>	locate a object(obj/div, dialogue box, popup dialog) on where we want followed window location	2005/1/12 19:-13 21:22
		此函數會盡量不使obj超出window範圍的大小，除非設定了noResize/noMove或發生錯誤。若moveable+resizable(default)，會嘗試先move再resize。
	obj:
		node or id.
		node 需要已經插入在 document.body 中。
	loc:
		[left,top]/[left,top,width,height]/reference obj or id/0||'mouse':by mouse loc
			若left,top設定成%或是0.-，會當作相對於螢幕的比例。
	margin:
		0/num=[num,num]/[offset x,offset y]
			在可能的情況下（不會造成超出window範圍）與loc之間空出的距離（所作的位移）。假如未輸入則自動設定。
	flag:	locate_node_flag.~	!表示未實作
		下面幾項為預設模式
		auto[Locate]	自動調整位置(default)，若設定abs/rel則不會自動調整。
		resizable	可調整obj大小(default) ↔ noResize
		moveable	可移動obj(default) ↔ noMove
		下面幾項為模式選擇，擇一。
		auto[Locate]	自動判定並調整位置(default)，若設定abs/rel則不會自動調整。
		abs[olute]	這裡的loc為絕對location。假如有提供margin，則會嘗試定位於loc+margin處。
		rel[ative]	這裡的loc為相對於window左上角的location。假如有提供margin，則會嘗試定位於loc+margin處。
		asDialog,dialog	預設是普通obj，但當設定為此項(dialog)時，loc會被當成reference obj。
				作為某obj(loc)之附屬obj（對話框/說明等），會避開主obj(reference obj)之顯示範圍。
				假如提供的loc並非obj，則會假設主obj是個從loc開始，長寬為margin的object。
		dialogDown,dialogUp,dialogRight,dialogLeft	預設是擺在下面，此flag可改成上面或其他不同方位。
		擇一
		resizable	可調整obj大小(default) ↔ noResize
		noResize	不可調整obj大小，若可移動會將整個obj移到能看清的邊界。
		擇一
		moveable	可移動obj(default) ↔ noMove
		noMove		不可移動obj，若可調整大小會將整個obj縮到能看清的大小。
		下面幾項可任喜好選購（笑）
		keepDisplay	是否維持顯示之display mode。沒有時則顯示之。
		create		假如不存在此obj就造出來。預設若無法取得此obj則會直接return

		!		!假如沒足夠空間則不顯示，或是僅顯示警告。

	 *	假如在事件中設定'event_Object=event'可掌握mouse event

	TODO:
	locate_nodeClip=[l,t,w,h]:	resizable時將obj限制在這個範圍內

	to top:
	var locate_node_flag;
	library_namespace.set_Object_value('locate_node_flag','resizable=0,moveable=0,autoLocate=0,auto=0,absolute=1,abs=1,relative=2,rel=2,asDialog=3,dialog=3,modeFlag=3,dialogDown=3,dialogUp=7,dialogRight=11,dialogLeft=15,dialogFlag=15,dialogForce=16,noResize=32,noMove=64,keepDisplay=128,create=256',1);	//	revise
	</code>
	 */
	var locate_node_flag = {
		resizable : 0,
		moveable : 0,
		autoLocate : 0,
		auto : 0,
		absolute : 1,
		abs : 1,
		relative : 2,
		rel : 2,
		asDialog : 3,
		dialog : 3,
		modeFlag : 3,
		dialogDown : 3,
		dialogUp : 7,
		dialogRight : 11,
		dialogLeft : 15,
		dialogFlag : 15,
		dialogForce : 16,
		noResize : 32,
		noMove : 64,
		keepDisplay : 128,
		create : 256
	};
	// locate_node[generateCode.dLK]='event_Object,locate_node_flag,get_window_status,locate_node';
	function locate_node(obj, loc, margin, flag) {
		// 前置處理

		// setup obj
		if (!flag)
			flag = locate_node_flag.auto;
		if (!obj)
			return;
		if (typeof obj == 'string') {
			var id = obj;
			if (!(obj = document.getElementById(id))
					&& (flag & locate_node_flag.create))
				document.body.appendChild(obj = document.createElement('div')),
						obj.id = id;
		}

		// 在 dialog 時之預設位移
		var dMargin = {
			'X' : 2,
			'Y' : 2
		}, Display = flag & locate_node_flag.keepDisplay ? obj.style.display
				: 'block', Visibility = flag & locate_node_flag.keepDisplay ? obj.style.visibility
				: 'visible', win, dialog = (flag & locate_node_flag.modeFlag) == locate_node_flag.dialog ? flag
				& locate_node_flag.dialogFlag
				: 0, turnPercent = function(p, v) {
			if (typeof p == 'string') {
				var t = parseFloat(p.match(/([\d.]+)/));
				p = t ? t < 2 ? t * v : t < 200 ? t * v / 100 : t : 0;
			} else if (
			// typeof p1='undefined'&&
			isNaN(p))
				p = 0;
			return p;
		}, handle_percent = function(o, t) {
			// t: 0:loc, 1:margin

			// 是否重新指定
			var d = 0;
			if (typeof o == 'string')
				o = o.split(','), d = 1;
			if (!dialog && typeof o == 'object') {
				// 取百分比%
				if (typeof o[t ? 'left' : 'X'] == 'undefined'
						&& typeof o[0] != 'undefined')
					d = 1, o = t ? {
						'X' : o[0],
						'Y' : o[1]
					} : {
						'left' : o[0],
						'top' : o[1],
						// 假如o[2]未定義，width也會未定義（但有index）
						'width' : o[2],
						'height' : o[3]
					};
				if (t)
					o.X = turnPercent(o.X, win.windowW), o.Y = turnPercent(o.Y,
							win.windowH);
				else {
					o.left = turnPercent(o.left, win.windowW),
							o.top = turnPercent(o.top, win.windowH);
					if (typeof o.width == 'undefined') {
						delete o.width;
						delete o.height;
					} else
						o.width = turnPercent(o.width, win.windowW),
								o.height = turnPercent(o.height, win.windowH);
				}
			}
			if (d)
				if (t)
					margin = o;
				else
					loc = o;
		}, makeFit = function(l, t, r, b, hc) {
			// test if out of range &
			// 將box調整在range[left,top,right,bottom]內：先move，再resize
			if (boxL < l)
				boxL = l;
			if (boxT < t)
				boxT = t;
			var d = r - obj.offsetWidth;
			if (boxL > d)
				if (l > d)
					boxW = r - (boxL = l);
				else
					boxL = d;
			d = b - obj.offsetHeight;
			if (boxT > d)
				if (t > d)
					boxH = b - (boxT = t);
				else
					boxT = d;
			else if (hc && (boxT = hc - obj.offsetHeight / 2) < t)
				boxT = t;
		};

		obj.style.overflow = obj.style.visibility = 'hidden';
		if (obj.style.width)
			obj.style.width = '';
		if (obj.style.height)
			// 重設obj。
			obj.style.height = '';
		// 得設定obj之display，因為不這樣不能定offset。但可不顯現出來…只是好像沒啥效果。
		obj.style.display = 'block';

		if (false)
			if (dialog != locate_node_flag.dialogDown
					&& dialog != locate_node_flag.dialogUp)
				dialog = 0;
		// setup loc#1: handle dialog
		if (typeof loc == 'string') {
			// 若loc為id
			var o = document.getElementById(loc);
			if (o)
				loc = o;
		}
		if (typeof loc == 'object' && typeof loc.offsetLeft != 'undefined') {
			// 若loc為Document Object

			if (false) {
				if (false)
					alert(loc.id + ':' + loc.offsetLeft + ',' + loc.offsetTop
							+ ';' + loc.offsetWidth + ',' + loc.offsetHeight);
				var l = loc.offsetLeft, t = loc.offsetTop, w, h, n, add, outsideBLOCK,
				// 真妙...moz表示在<H\d>中的obj時不把H\d當作parent算進去
				countH = window.navigator.userAgent.indexOf("MSIE") >= 0;
				if (typeof loc.offsetWidth != 'undefined') {
					// loc.offsetWidth可能未定義？
					w = loc.offsetWidth;
					h = loc.offsetHeight;
				}
				// for debug
				// var tt = loc.tagName + ':' + loc.offsetLeft + ',' +
				// loc.offsetTop + '\n';
				// 下面這段依瀏覽器而有不同 (-_-)!!
				while (isNaN((loc = loc.parentNode).offsetLeft)) {
					// IE在用style:class時會出現誤差。
					n = loc.tagName;
					if (false)
						if (!/^T(ABLE|BODY|R)$/.test(n = loc.tagName)
								&& (countH || !/^H\d$/.test(n)))
							l += loc.offsetLeft, t += loc.offsetTop;
					if (n == 'DIV')
						add = outsideBLOCK;
					else if (n == 'TD' || countH && /^H\d$/.test(n))
						add = 1;
					outsideBLOCK = n == 'TABLE' || n == 'DIV';
					// loc.style.display
					if (false) {
						tt += (add ? '' : '#')
								+ n
								+ (loc.style.display ? '(' + loc.style.display
										+ ')' : '') + ':' + loc.offsetLeft
								+ ',' + loc.offsetTop
								+ (outsideBLOCK ? ', outside BLOCK' : '')
								+ '\n';
					}
					if (add)
						add = 0, l += loc.offsetLeft, t += loc.offsetTop;
				}
				if (false) {
					// need to enable definition of tt above
					alert(l + ',' + t + '\n' + tt);
				}
				loc = {
					'left' : l,
					'top' : t,
					'width' : w,
					'height' : h
				};
			}

			loc = get_node_offset(loc);
			if ((flag & locate_node_flag.modeFlag) == locate_node_flag.auto)
				flag += locate_node_flag.dialog - locate_node_flag.auto,
						dialog = locate_node_flag.dialog;
		}

		// setup margin
		win = get_window_status();
		if (!margin)
			margin =
			// dialog ? dMargin : {'X' : 0, 'Y' : 0};
			dMargin;
		else
			handle_percent(margin, 1);

		// setup loc#2: handle abs/rel
		if (!loc || loc == 'mouse')
			loc = {
				left : win.mouseX || 0,
				top : win.mouseY || 0
			};
		else {
			if ((flag & locate_node_flag.modeFlag) == locate_node_flag.auto
					&& typeof loc == 'string' && /[%.]/.test(loc))
				flag += locate_node_flag.rel - locate_node_flag.auto;
			handle_percent(loc);
		}
		if (false)
			alert(loc.left + ',' + loc.top + ';' + margin.X + ',' + margin.Y);
		if ((flag & locate_node_flag.modeFlag) == locate_node_flag.auto)
			// 到這裡還沒決定就很奇怪了
			flag += locate_node_flag[loc.width && loc.height
					&& loc.top < win.windowH && loc.left < win.windowW ? (dialog = locate_node_flag.dialog)
					&& 'dialog'
					: 'abs']
					- locate_node_flag.auto;

		// 調整與判別
		if (false) {
			alert(loc.left + ',' + loc.top + ';' + margin.X + ',' + margin.Y);
			alert(loc.left + margin.X + ',' + (loc.top + margin.Y));
			alert('dialog:' + dialog);
		}

		if ((flag & locate_node_flag.modeFlag) == locate_node_flag.rel) {
			// 改成絕對座標。此後僅存abs/dialog
			flag += locate_node_flag.abs - locate_node_flag.rel
			// - (flag & locate_node_flag.modeFlag)
			;
			loc.left += win.scrollLeft;
			loc.top += win.scrollTop;
		}

		// 最後要設定的值
		var resizable = !(flag & locate_node_flag.noResize), boxL = loc.left, boxT = loc.top, boxW = -1, boxH = -1;
		if (flag & locate_node_flag.noMove)
			if (resizable)
				makeFit((boxL += margin.X) - margin.X, (boxT += margin.Y)
						- margin.Y, win.scrollLeft + win.windowW, win.scrollTop
						+ win.windowH);
			else {
				if (margin.X < 0
						|| boxL + margin.X >= win.scrollLeft
						&& boxL + margin.X + obj.offsetWidth < win.scrollLeft
								+ win.windowW)
					boxL += margin.X;
				if (margin.Y < 0
						|| boxT + margin.Y >= win.scrollTop
						&& boxT + margin.Y + obj.offsetHeight < win.scrollTop
								+ win.windowH)
					boxT += margin.Y;
			}
		else if (!dialog)
			// abs
			boxL += margin.X, boxT += margin.Y, makeFit(win.scrollLeft,
					win.scrollTop, win.scrollLeft + win.windowW, win.scrollTop
							+ win.windowH);
		else {
			// 自動調整位置
			if (dialog) {
				if (!loc.width)
					loc.width = 0;
				if (!loc.height)
					loc.height = 0;
			} else
				// abs時, 相當於dialog在(0,0)大小(0,0)
				loc = {
					'left' : win.scrollLeft,
					'top' : win.scrollTop,
					'width' : 0,
					'height' : 0
				};
			if (!obj.innerHTML)
				// 起碼先設定個大小以安排位置
				obj.innerHTML = '&nbsp;';

			var lA = win.scrollTop + win.windowH - loc.top - loc.height, lB = loc.top
					- win.scrollTop, lC = win.scrollLeft + win.windowW
					- loc.left - loc.width, lD = loc.left - win.scrollLeft,
			// args for makeFit()
			m1 = win.scrollLeft, m2 = win.scrollTop, m3 = win.scrollLeft
					+ win.windowW, m4 = win.scrollTop + win.windowH
			// move kind set use locate_node_flag.dialog~ flag
			, movekind;
			if (false)
				alert(lA + ',' + lB + ',' + lC + ',' + lD + '\n'
						+ obj.offsetWidth + ',' + obj.offsetHeight);

			/**
			 * <code>
			+---------------------+
			|        ^            |
			|        | lB         |	<--screen (active frame)
			|        |            |
			|<---->#####<-------->|	###:reference obj
			|  lD    |      lC    |
			|        |            |
			|        | lA         |
			|        |            |
			+---------------------+
			</code>
			 */
			// 決定 mode
			if (dialog && (flag & locate_node_flag.dialogForce))
				movekind = dialog;
			else {
				if (obj.offsetWidth < win.windowW
						&& (dialog != locate_node_flag.dialogRight
								&& dialog != locate_node_flag.dialogLeft || obj.offsetHeight >= win.windowH))
					if (obj.offsetHeight < lA
							&& (dialog != locate_node_flag.dialogUp || obj.offsetHeight >= lB))
						movekind = locate_node_flag.dialogDown;
					else if (obj.offsetHeight < lB)
						movekind = locate_node_flag.dialogUp;
				if (!movekind && obj.offsetHeight < win.windowH)
					if (obj.offsetWidth < lC
							&& (dialog != locate_node_flag.dialogLeft || obj.offsetWidth >= lD))
						movekind = locate_node_flag.dialogRight;
					else if (obj.offsetWidth < lD)
						movekind = locate_node_flag.dialogLeft;
				if (!movekind)
					movekind =
					// 以較大、可視的為準
					dialog != locate_node_flag.dialogRight
							&& dialog != locate_node_flag.dialogLeft ?
					// 沒考慮假如lA<5時...
					lA < lB && resizable ? locate_node_flag.dialogUp
							: locate_node_flag.dialogDown :
					//
					lC < lD && resizable ? locate_node_flag.dialogLeft
							: locate_node_flag.dialogRight;
			}

			// alert(movekind);
			// 決定location
			if (movekind == locate_node_flag.dialogDown) {
				m2 = loc.top + loc.height;
				boxT += loc.height;
				if (!m1)
					m1 = loc.left;
			} else if (movekind == locate_node_flag.dialogUp) {
				m4 = loc.top;
				boxT -= obj.offsetHeight;
				margin.Y = -margin.Y;
				if (!m1)
					m1 = loc.left;
			} else if (movekind == locate_node_flag.dialogRight)
				m1 = loc.left + loc.width, boxL += loc.width;
			else
				m3 = loc.left, boxL -= obj.offsetWidth, margin.X = -margin.X;
			// else if(movekind==locate_node_flag.dialogLeft)

			// 加上偏移
			boxL += margin.X, boxT += margin.Y;
			if (!resizable) {
				if (boxL < m1 && margin.X < 0 || boxL + obj.offsetWidth > m3
						&& margin.X > 0)
					boxL -= margin.X;
				if (boxT < m2 && margin.Y < 0 || boxT + obj.offsetHeight > m4
						&& margin.Y > 0)
					boxT -= margin.Y;
				// 確保不會撞到
				m3 += obj.offsetWidth, m4 += obj.offsetHeight;
			}
			// 奇怪的是，alert(obj.offsetWidth)後obj.offsetWidth就變成0了。可能因為這值需要出函數之後再改。
			if (false)
				alert(resizable + '\n' + m1 + ',' + m2 + ',' + m3 + ',' + m4
						+ ',' + movekind + '\n' + obj.offsetWidth + ','
						+ obj.offsetHeight);
			makeFit(m1, m2, m3, m4, movekind == locate_node_flag.dialogRight
					|| movekind == locate_node_flag.dialogLeft ? loc.top : 0);
		}

		// 需要設在如 auto_TOC() layer 之上。
		obj.style.zIndex = 100;
		// 設定位置
		if (false)
			alert(boxL + ',' + boxT + ',' + boxW + ',' + boxH + ',' + Display);
		obj.style.position = 'absolute';
		obj.style.left = boxL + 'px';
		obj.style.top = boxT + 'px';
		if (boxW >= 0 || boxH >= 0) {
			obj.style.overflow = 'auto';
			if (false)
				alert(obj.style.width + ',' + obj.style.height + '\n'
						+ typeof obj.style.width + '\n→w,h:' + boxW + ','
						+ boxH);
			if (boxW >= 0)
				obj.style.width = boxW + 'px';
			if (boxH >= 0)
				obj.style.height = boxH + 'px';
		}
		obj.style.display = Display;
		obj.style.visibility = Visibility;

		if (false)
			alert(obj.style.width + ',' + obj.style.height + '\n'
					+ obj.offsetWidth + ',' + obj.offsetHeight);
		return obj;
	}

	_.locate_node = locate_node;

	/** {private} */
	function limit_input_maxlength() {
		if (this.value.length > this.maxLength)
			this.value = this.value.slice(0, this.maxLength);
	}

	/** {private} */
	function limit_input_maxlength_onkeydown() {
		return this.value.length <= this.maxLength;
	}

	/** {private} */
	function check_input_pattern_onkeydown() {
		if (false)
			if (this.value > this.getAttribute('max'))
				this.value = this.getAttribute('max');
		return this.validator.test(this.value);
	}

	/** {private} */
	function check_input_onkeydown(event) {
		// console.log([ this.value, this.maxLength, this.validator ]);
		// console.log(event);

		// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode
		// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
		if (event.ctrlKey || event.altKey || [
		// backspace
		8,
		// tab
		9,
		// enter
		13,
		// delete
		46,
		// End
		35,
		// Home
		36,
		// arrow keys<^>v
		37, 38, 39, 40 ].includes(event.which)) {
			return true;
		}

		// https://stackoverflow.com/questions/8354975/how-can-i-limit-possible-inputs-in-a-html5-number-element
		if (window.getSelection && window.getSelection().toString()
		// when select text and input
		|| document.selection && document.selection.type !== 'Control'
				&& document.selection.createRange().text) {
			return true;
		}

		return (!(this.maxLength >= 0) || this.value.length < this.maxLength)
				&& (!this.validator || this.validator.test(this.value
						+ event.key));
	}

	_.adapt_input_validation = function adapt_input_validation() {
		for_nodes(function(node) {
			// console.log(node);
			if (node.type === 'number'
					&& (node.hasAttribute('max') || node.hasAttribute('min'))) {
				node.setAttribute('maxlength', Math.max(node
						.getAttribute('max')
						&& node.getAttribute('max').length || 0, node
						.getAttribute('min')
						&& node.getAttribute('min').length || 0));
			}

			if (node.hasAttribute('maxlength')) {
				_.add_listener('change', limit_input_maxlength, node);
				if (false) {
					// useless @ Chrome/61.0.3163.100
					_.add_listener('keydown', limit_input_maxlength_onkeydown,
							node, true);
				} else {
					if (!node.onkeydown)
						node.onkeydown = check_input_onkeydown;
					if (false && !node.oninput)
						node.oninput = check_input_onkeydown;
				}
			}

			if (node.hasAttribute('pattern')) {
				var validator = node.getAttribute('pattern');
				try {
					// e.g., "\d*"
					validator = new RegExp('^' + validator + '$');
					node.validator = validator;
					if (!node.onkeydown)
						node.onkeydown = check_input_onkeydown;
					if (false && !node.oninput)
						node.oninput = check_input_onkeydown;
				} catch (e) {
					library_namespace.error({
						T : [ 'Invalid pattern: %1', validator ]
					});
				}
			}
		},
		// "input[type="number"][maxlength]"
		'input');
	};

	// 2007/4/25-27 0:48:22 RFC 3492 IDNA Punycode 未最佳化
	// http://stackoverflow.com/questions/183485/can-anyone-recommend-a-good-free-javascript-for-punycode-to-unicode-conversion
	// http://xn-punycode.com/
	function Punycode() {
	}

	Punycode.map = 'abcdefghijklmnopqrstuvwxyz0123456789';
	Punycode.Dmap = 0;
	Punycode.base = Punycode.map.length;
	Punycode.tmin = 1;
	Punycode.tmax = 26;
	Punycode.skew = 38;
	Punycode.damp = 700;
	// 偏移
	Punycode.initial_bias = 72;
	// 128
	Punycode.initial_n = 0x80;
	// the default ACE prefix
	Punycode.prefix = "xn--";
	Punycode.delimiter = '-';
	Punycode._b = Punycode.base - Punycode.tmin;
	// Punycode._t = (Punycode._b * Punycode.tmax) >> 1;
	Punycode._t = Math.floor(Punycode._b * Punycode.tmax / 2);

	// IDNA ToASCII
	Punycode.encodeDomain = function(UURL) {
		var m = UURL.match(/^([\w\-]+:\/\/)?([^\/]+)/), UDomain = m ? m[2] : '', i = (m = UDomain) ? UURL
				.indexOf(m)
				: 0;
		if (false)
			document.write('<hr />Punycode.encodeDomain UDomain: [' + i + ']['
					+ m + ']<br />');
		if (m && m.replace(/[\x01-\x7f]+/g, ''))
			m = m.replace(/([^.]+)\./g, function($0, $1) {
				if (false)
					document.write($1 + '→' + encode($1) + '<br />');
				return Punycode.prefix + Punycode.encode($1) + '.';
			}), UURL = encodeURI(UURL.slice(0, i) + m
					+ UURL.slice(i + UDomain.length));
		return UURL;
	};

	// IDNA ToUnicode
	Punycode.decodeDomain = function(PURL) {
		var m = PURL.match(/^([\w\-]+:\/\/)?([^\/]+)/), PDomain = m ? m[2] : '', i = (m = PDomain) ? PURL
				.indexOf(m)
				: 0;
		if (false)
			document.write('<hr />Punycode.decodeDomain PDomain: [' + i + ']['
					+ m + ']<br />');
		if (m) {
			m = m.replace(new RegExp(Punycode.prefix + '([^.]+)\\.', 'g'),
					function($0, $1) {
						if (false)
							document.write($1 + '→' + Punycode.decode($1)
									+ '<br />');
						return Punycode.decode($1) + '.';
					});
			if (m != PDomain) {
				PURL = PURL.slice(0, i) + m + PURL.slice(i + PDomain.length);
				try {
					PURL = decodeURI(PURL);
				} catch (e) {
					PURL = unescape(PURL);
				}
			}
		}
		return PURL;
	};

	Punycode.adapt = function(delta, numpoints, firsttime) {
		if (false)
			document.write('*adapt: ' + delta + ', ' + numpoints + ', '
					+ firsttime + ', _b=' + _b + ', _t=' + _t + '<br />');
		delta =
		// Math.floor(delta/(firsttime?damp:2));
		firsttime ? Math.floor(delta / Punycode.damp) : delta >> 1;
		delta += Math.floor(delta / numpoints);
		var k = 0;
		for (; delta > _t; k += Punycode.base)
			delta = Math.floor(delta / Punycode._b);
		return k
				+ Math.floor((Punycode._b + 1) * delta
						/ (delta + Punycode.skew));
	};

	Punycode.encode = function(UString) {
		var n = Punycode.initial_n, cA = [], m, mA = [], i = 0, c, q, delta = 0, bias = Punycode.initial_bias, output = UString
				.replace(/[^\x01-\x7f]+/g, ''), h = output.length, b = h;
		if (false)
			document.write('<hr />Punycode.encode begin: [' + output
					+ ']<br />');
		if (b)
			output += Punycode.delimiter;

		for (; i < UString.length; i++) {
			cA.push(c = UString.charCodeAt(i));
			if (c > n)
				mA.push(c);
		}
		mA.sort(library_namespace.descending);

		while (h < cA.length) {
			// 預防重複
			do {
				c = mA.pop();
			} while (m == c);
			m = c;
			if (false)
				if (m - n > (Number.MAX_VALUE - delta) / (h + 1)) {
					alert('Punycode: overflow');
					return;
				}
			// should test overflow
			delta += (m - n) * (h + 1);
			n = m;
			for (i = 0; i < cA.length; i++) {
				// fail on overflow
				if (false)
					if (c = cA[i], c < n && !++delta) {
						alert('Punycode: overflow');
						return;
					}
				if (c = cA[i], c < n)
					++delta;
				if (false)
					document.write('<b>'
							+ UString.charAt(i)
							+ ' '
							+ (c.toString(16) + ',' + n.toString(16))
									.toUpperCase() + '</b><br />');
				if (c == n) {
					for (q = delta, k = Punycode.base;; k += Punycode.base) {
						t = k <= bias/* +Punycode.tmin: not needed */? Punycode.tmin
								: k >= bias + tmax ? Punycode.tmax : k - bias;
						if (q < t)
							break;
						output += Punycode.map.charAt(t + (q - t)
								% (Punycode.base - t));
						if (false)
							document.write('<b>' + output + '</b><br />');
						q = Math.floor((q - t) / (base - t));
					}
					output += Punycode.map.charAt(q);
					bias = Punycode.adapt(delta, h + 1, h == b);
					if (false)
						document.write('h=' + h + '/' + cA.length + ', bias='
								+ bias + ', ' + output + '<br />');
					delta = 0, h++;
				}
			}
			delta++, n++;
		}
		if (false)
			document.write(UString + '→' + output + '<br />');
		return output;
	};

	Punycode.decode = function(PCode) {
		var n = Punycode.initial_n, i = 0, p = PCode
				.lastIndexOf(Punycode.delimiter), bias = Punycode.initial_bias, output = p == -1 ? ''
				: PCode.slice(0, p), oldi, w, digit, l;
		if (false)
			document.write('<hr />Punycode.decode begin: [' + output
					+ ']<br />');
		if (!Punycode.Dmap)
			for (w = 0, Punycode.Dmap = {}; w < Punycode.map.length; w++) {
				Punycode.Dmap[Punycode.map.charAt(w)] = w;
				if (false)
					document.write('Punycode.Dmap[' + Punycode.map.charAt(w)
							+ ']=' + w + '<br />');
			}
		while (p < PCode.length - 1) {
			for (oldi = i, w = 1, k = Punycode.base;; k += Punycode.base) {
				if (++p >= PCode.length) {
					alert('Punycode: invalid input: out of range');
					return PCode;
				}
				if (false)
					document.write('PCode.charAt(' + p + ')' + ' = '
							+ PCode.charAt(p) + ' → '
							+ Punycode.Dmap[PCode.charAt(p)] + '<br />');
				if (isNaN(digit = Dmap[PCode.charAt(p)])) {
					alert('Punycode: invalid input');
					return PCode;
				}
				if (false)
					if (digit > (Number.MAX_VALUE - i) / w) {
						alert('Punycode: overflow');
						return;
					}
				i += digit * w;
				t = k <= bias/* +Punycode.tmin: not needed */? Punycode.tmin
						: k >= bias + Punycode.tmax ? Punycode.tmax : k - bias;
				if (false)
					document.write('i=' + i + ', t=' + t + ', digit=' + digit
							+ ', k=' + k + '<br />');
				if (digit < t)
					break;
				if (false)
					if (w > Number.MAX_VALUE / (base - t)) {
						alert('Punycode: overflow');
						return;
					}
				w *= Punycode.base - t;
			}
			bias = Punycode.adapt(i - oldi, l = output.length + 1, oldi == 0);
			if (false)
				document.write('bias=' + bias + ', n=' + n + ', i=' + i
						+ ', l=' + l + '<br />');
			if (false)
				if (i / l > Number.MAX_VALUE - n) {
					alert('Punycode: overflow');
					return;
				}
			n += Math.floor(i / l);
			i %= l;
			if (false)
				document
						.write('[' + output.length + ']' + output + '+' + n
								+ '(0x' + n.toString(16).toUpperCase() + ')@'
								+ i + '→');
			output = output.slice(0, i) + String.fromCharCode(n)
					+ output.slice(i);
			if (false)
				document.write('[' + output.length + ']' + output + '<br />');
			i++;
		}
		if (false)
			document.write(PCode + '→' + output + '<br />');
		return output;
	};

	if (false) {
		var testC = 'Hello-Another-Way--fc4qua05auwb3674vfr0b', rC;
		document
				.write('<hr />'
						+
						// Punycode.encodeDomain('http://國際.計畫.org/國際.計畫.htm')
						Punycode
								.decodeDomain('http://xn--9cs229l.xn--gpyr35b.org/%E5%9C%8B%E9%9A%9B.%E8%A8%88%E7%95%AB.htm')
						// Punycode.encode('463578')

						+ Punycode.decode('ihqwcrb4cv8a8dqg056pqjye')
						+ '<hr />'
						+ Punycode.encode('他们为什么不说中文')

						+ Punycode.decode('ihqwctvzc91f659drss3x8bo0yb')
						+ '<hr />'
						+ Punycode.encode('他們爲什麽不說中文')

						+ '<hr />'
						+ (rC = Punycode.decode(testC))
						+ '<hr />'
						+ (rC = Punycode.encode(rC))
						+ '<hr />'
						+ (testC == rC ? 'OK'
								: '<b style="color:red">FAILED</b>:<br />'
										+ testC + '<br />' + rC));
	}

	/**
	 * <code>	一個非常不好的 handle onload 方法。只在onload不具有arguments時有用，應該亦可用setTimeout('~',0)
	 where	0:back,1:front

	 for IE:
	 <!--[if IE]><script defer type="text/javascript">
	 //	onload code
	 </script><![endif]-->

	 c.f.	http://www.brothercake.com/	http://simonwillison.net/2004/May/26/addLoadEvent/
	 GO1.1 Generic onload by Brothercake
	 window.addEventListener,document.addEventListener,typeof window.attachEvent
	 c.f.	setTimeout('~',0);	不過這不能確定已經load好
	 </code>
	 */
	if (false) {
		var addonload = function(s, where) {
			if (!s || typeof window != 'object')
				return 1;
			if (typeof s == 'function') {
				s = library_namespace.parse_function(s);
				if (!s || !s.funcName)
					return 2;
				s = s.funcName + '()';
			}
			var o = window.onload ? typeof window.onload == 'string' ? window.onload
					: library_namespace.parse_function(window.onload).contents
					: '';
			window.onload = new Function(where ? s + ';\n' + o : o + ';\n' + s);
		}
	}

	_// JSDT:_module_
	.DOM_loaded = function() {
		if (winodow.document.readyState === "complete" || winodow.document.body) {
			_.DOM_loaded = function() {
				return true;
			};
			return true;
		}

		return false;
	};

	if (false) {
		// The DOM ready check for Internet Explorer
		try {
			document.documentElement.doScroll('left');
		} catch (e) {
			setTimeout(arguments.callee, 50);
			return;
		}
	}

	_// JSDT:_module_
	.
	/**
	 * 比較好點的 add onload。 比起 add_listener()，本函數在已經 load 時依然會執行，而 add_listener
	 * 因為是用榜定的方法，因此 load 完就不再觸發(?)。 這東西頂多只能擺在 include 的 JS file 中，不能 runtime
	 * include。
	 * 
	 * @example <code>
	CeL.run('net.web');
	CeL.on_load(function(){sl(1);},'sl(2);');
	</code>
	 * 
	 * @requires _.add_listener,_.DOM_loaded
	 * @see jQuery: $(document).ready(listener); DOMContentLoaded
	 *      http://webdesign.piipo.com/jquery/jquery_events 可直接參考 SWFObject。
	 *      TODO: <a href="http://javascript.nwbox.com/IEContentLoaded/"
	 *      accessdate="2010/6/3 11:15" title="IEContentLoaded - An alternative
	 *      for DOMContentLoaded on Internet Explorer">IEContentLoaded</a>
	 *      DOMContentLoaded是firefox下特有的Event, 當所有DOM解析完以後會觸發這個事件。
	 *      DOMContentLoaded與DOM中的onLoad事件與其相近。但onload要等到所有頁面元素加載完成才會觸發,
	 *      包括頁面上的圖片等等。 <a
	 *      href="http://blog.darkthread.net/blogs/darkthreadtw/archive/2009/06/05/jquery-ready-vs-load.aspx"
	 *      accessdate="2010/6/3 11:17">jQuery ready vs load - 黑暗執行緒</a>
	 *      $(document).ready(fn)發生在"網頁本身的HTML"載入後就觸發，而$(window).load(fn)則會等到"網頁HTML
	 *      標籤中引用的圖檔、內嵌物件(如Flash)、IFrame"等拉哩拉雜的東西都載入後才會觸發。
	 * @_memberOf _module_
	 */
	on_load = function on_load() {
		var _s = _.on_load, loaded = _.DOM_loaded(), i = 0, a = arguments, l = a.length;
		for (; i < l; i++)
			if (loaded)
				a[i].call(document);
			else
				_.add_listener('load', a[i], document);
	};

	_// JSDT:_module_
	.
	/**
	 * bind/add listener. register event control, setup code to run. listener
	 * 應該加上 try{}catch{}，否則會搞不清楚哪裡出問題。 ** 對同樣的 object，事件本身還是會依照 call
	 * add_listener() 的順序跑，不會因為 p_first 而改變。 ** NOT TESTED!! TODO:
	 * remove_listener(): .removeEventListener(); .detachEvent(); default 'this'
	 * 自訂 event
	 * 
	 * @param {string}type
	 *            listen to what event type. event name/action.
	 *            http://www.whatwg.org/specs/web-apps/current-work/#event-handler-event-type
	 * @param listener
	 *            listener function/function array/function string, 須 String 之
	 *            recursive function 時可 "(function(){return function
	 *            f(){f();};})()" function(e){var
	 *            target=e?e.target:(e=window.event).srcElement;if(e.stopPropagation)e.stopPropagation();else
	 *            e.cancelBubble=true;if(e.preventDefault)e.preventDefault();else
	 *            e.returnValue=false;return false;}
	 * @param [target_element]
	 *            bind/attach to what HTML element
	 * @param [p_first]
	 *            parentNode first
	 * @return
	 * @since 2010/1/20 23:42:51
	 * @see c.f., GEvent.add_listener()
	 * @_memberOf _module_
	 */
	add_listener = function add_listener(type, listener, target_element,
			p_first) {

		// _s: self
		var _s = _.add_listener, i, adder;

		// 進階功能.
		// type is Object or Array.
		if (library_namespace.is_Object(type) || Array.isArray(type)) {
			// type is Object:
			// usage: add_listener({unload:Unload},target_element);
			// usage:
			// add_listener({load:{true:[function(){sl(1);},'sl(2);']}},target_element);
			// type is Array:
			// usage:
			// add_listener([{load:load},{unload:Unload}],target_element);

			// 此時 listener 已被忽略，shift arguments。
			if (!(listener = get_element(listener)))
				return;

			for (i in type) {
				library_namespace.debug(i + ': ' + type[i], 2, 'add_listener');

				Array.isArray(type) ? _s(type[i], listener, target_element)
						: _s(i, type[i], listener, target_element);
			}

			return;
		}

		if (!type || !listener)
			return;

		if (typeof listener === 'string')
			listener = new Function('e', listener);

		if (typeof target_element === 'string')
			target_element = get_element(target_element);

		if (typeof p_first !== 'boolean')
			p_first = typeof p_first === 'undefined' ? _s.p_first : !!p_first;

		// listener is Array or Object.
		if (library_namespace.is_Object(listener) || Array.isArray(listener)) {
			// usage: add_listener('unload',{true:Unload1});
			// usage: add_listener('unload',[Unload1,Unload2]);
			// 因為 Array 會從最小的開始照順序出，所以這邊不再判別是否為 Array。
			for (i in listener) {
				if (false)
					if (isNaN(f)
					// ||i==1||i===true
					) {
						sl('add_listener: to ' + i);
						_s.p_first = i === 'true';
					}
				_s(type, listener[i], target_element, i === 'true'
						|| (i === 'false' ? false : undefined));
				if (false)
					sl((typeof i) + ' [' + i + '] ' + _s.p_first);
			}

		} else if (library_namespace.is_Function(listener)) {
			/**
			 * 先設定好 native listener adding function
			 */
			if (target_element)
				adder = target_element.addEventListener;
			else if (!(adder = _s.global_adder) && adder !== null)
				_s.global_adder = adder = _s.get_adder();

			// $(document).ready(listener);

			// 使 listener 能以 this 取得 target_element
			i = function(e) {
				// this_event
				if (!e)
					e = window.event;

				if (false)
					library_namespace.debug('fire ' + type, 0, 'add_listener');

				// 正規化 <a
				// href="http://www.w3.org/TR/2009/WD-DOM-Level-3-Events-20090908/#interface-Event">Document
				// Object Model (DOM) Level 3 Events</a>.
				// 這邊的附加設定應盡量只添上 native object, 預防 memory leak.
				if (!e.currentTarget)
					e.currentTarget = target_element;
				if (!e.target)
					e.target = e.srcElement || target_element;

				// from fix in jQuery

				// check if target is a textnode (safari)
				if (e.target && e.target.nodeType === TEXT_NODE)
					e.target = e.target.parentNode;

				// Add relatedTarget, if necessary
				if (!e.relatedTarget && e.fromElement)
					e.relatedTarget = e.fromElement === e.target ? e.toElement
							: e.fromElement;

				// 取得滑鼠座標
				// http://hartshorne.ca/2006/01/23/javascript_cursor_position/
				// http://hartshorne.ca/2006/01/18/javascript_events/
				if (isNaN(e.pageX) && !isNaN(e.clientX)) {
					var s = get_window_status.scroll();
					e.pageX = e.clientX + s[0] - s[2];
					e.pageY = e.clientY + s[1] - s[3];
				}

				// .call: 使 listener 可以用 'this' 來指涉 element
				return listener.call(target_element, e);
			};

			// 主要核心動作設定之處理
			// TODO: 在 onload 時使 target_element = null
			if (false)
				sl(type
						+ ' ('
						+ ((typeof p_first == 'undefined' ? _s.p_first
								: !!p_first) ? 'p_first' : 'run first') + '): '
						+ listener);
			if (adder) {
				try {
					// 直接用 target_element.addEventListener 不會有問題。
					// .call(window.document):
					// for Chrome 'Illegal invocation' issue
					// http://stackoverflow.com/questions/1007340/javascript-function-aliasing-doesnt-seem-to-work
					// 但 IE9 需要 .call(target_element) 或者別用 .call，否則會得到 "Invalid
					// procedure call or argument"
					adder.call(target_element, type, i, p_first);
				} catch (e) {
					adder.call(window.document, type, i, p_first);
				}
				return;
			}

			if (target_element) {
				if (false)
					library_namespace
							.warn('add_listener: Cannot get element.addEventListener! element.attachEvent: '
									+ target_element.attachEvent);
			}
			return target_element && (adder = target_element.attachEvent) ?
			// http://msdn.microsoft.com/en-us/library/ms536343(VS.85).aspx
			adder('on' + type, i)
			//
			: _s.default_adder(type, i, p_first, target_element);
		}

	};

	_// JSDT:_module_
	.
	/**
	 * useCapture: parentNode first
	 * 
	 * @see <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-flow"
	 *      accessdate="2010/4/16 22:40">Document Object Model (DOM) Level 3
	 *      Events Specification</a>, <a
	 *      href="http://www.w3.org/TR/DOM-Level-3-Events/#interface-EventTarget"
	 *      accessdate="2010/4/16 22:42">Interface EventTarget</a>
	 */
	add_listener.p_first = false;

	_// JSDT:_module_
	.
	/**
	 * get (native) global listener adding function. TODO: 只設定一次 historical for
	 * Netscape Navigator, mozilla: window.captureEvents, document.captureEvents
	 */
	add_listener.get_adder = function() {
		/**
		 * moz (gecko), safari 1.2, ow5b6.1, konqueror, W3C standard:
		 * window.addEventListener
		 * 
		 * @ignore
		 * @see <a
		 *      href="https://developer.mozilla.org/en/DOM/element.addEventListener"
		 *      accessdate="2010/4/16 22:35">element.addEventListener - MDC</a>
		 *      <a href="http://simonwillison.net/2004/May/26/addLoadEvent/"
		 *      accessdate="2010/4/16 22:36">Executing JavaScript on page load</a>
		 */
		return window.addEventListener
		/**
		 * opera 7.50, ie5.0w, ie5.5w, ie6w: window.attachEvent opera 7.50:
		 * document.attachEvent
		 */
		|| typeof window.attachEvent === 'function'
				&& function(type, listener) {
					window.attachEvent('on' + type, listener);
				}
				/**
				 * MSN/OSX, opera 7.50, safari 1.2, ow5b6.1:
				 * document.addEventListener
				 */
				|| document.addEventListener
				/**
				 * ie5m, MSN/OSX, ie5.0w, ie5.5w ie6w:
				 * document.onreadystatechange
				 */
				|| null;
	};

	_// JSDT:_module_
	.
	/**
	 * 最原始的，含括其他情況。 all: window.onload. TODO: use queue
	 * 
	 * @param type
	 *            listen to what event type
	 * @param listener
	 *            listener function/function array
	 * @param [p_first]
	 *            parentNode first
	 * @param [target_element]
	 *            bind/attach to what HTML element
	 * @return
	 * @see http://blog.othree.net/log/2007/02/06/third-argument-of-addeventlistener/
	 */
	add_listener.default_adder = function(type, listener, p_first,
			target_element) {
		if (!target_element)
			target_element = window;

		var old = target_element[type = 'on' + type];
		if (false)
			library_namespace.debug('adder ' + type
					+ (old ? ' with old listener: ' + old : ''), 0,
					'add_listener.default_adder');

		return target_element[type] = old ?
		// TODO: typeof old === 'string'
		p_first ? function(e) {
			if (!e)
				e = window.event;
			if (false)
				library_namespace.debug('fire ' + type + ' (parentNode first)',
						0, 'add_listener.default_adder');
			old.call(target_element, e);
			listener.call(target_element, e);
		} : function(e) {
			if (!e)
				e = window.event;
			if (false)
				library_namespace.debug(
						'fire ' + type + ' (parentNode latter)', 0,
						'add_listener.default_adder');
			listener.call(target_element, e);
			old.call(target_element, e);
		} : function(this_event) {
			if (false)
				library_namespace.debug('fire ' + type, 0,
						'add_listener.default_adder');
			listener.call(target_element, this_event || window.event);
		};
	};

	_// JSDT:_module_
	.
	/**
	 * TODO: listener list. 當無法執行 DOM 操作時（尚未載入、版本太舊不提供支援等）以此為主。
	 * add_listener.list[node][event type]=[listener list]
	 */
	add_listener.list = Object.create(null);

	_// JSDT:_module_
	.
	/**
	 * TODO: 觸發函數. 當無法執行 DOM 操作時（尚未載入、版本太舊不提供支援等）以此為主。
	 * add_listener.list[type]=[listener list]
	 */
	add_listener.list = Object.create(null);

	_// JSDT:_module_
	.
	/**
	 * 阻止 JavaScript 事件冒泡傳遞，使 event 不傳到 parentNode。
	 * 
	 * @param {Event}event
	 *            event handler
	 * @param {Boolean}cancel
	 *            cancel bubble
	 * @see http://www.jb51.net/html/200705/23/9858.htm
	 * @_memberOf _module_
	 */
	stop_event = function(event, cancel) {
		if (!event)
			event = window.event;

		if (typeof event.preventDefault === 'function') {
			// 在拖曳時可阻止預定動作，例如跳頁展示圖片或檔案。
			event.preventDefault();
		} else {
			event.returnValue = false;
		}

		if (cancel) {
			// cancelBubble 在IE下有效，stopPropagation 在 Firefox 下有效。
			// 停止冒泡，事件不會上升，我們就可以獲取精確的鼠標進入元素。 http://realazy.org/lab/bubble/
			if (typeof event.stopPropagation === 'function') {
				// IE9 & Other Browsers
				event.stopPropagation();
			} else {
				// IE8 and Lower
				event.cancelBubble = true;
			}
		}

		// for using in <a>
		return false;
	};

	// comparator([key, original index])
	function sort_nodes(node_list, comparator, key_generator) {

		if (typeof key_generator !== 'function')
			key_generator = function(n) {
				return n;
			};

		var i = 0, length = node_list.length, list = [];
		for (; i < length; i++)
			list.push([ key_generator(node_list[i]), i ]);

		list.sort(comparator);

		// 依照次序排列 nodes。
		// TODO: 採用 .insertBefore() 時的最佳演算法，最小化（最少化）.insertBefore() 操作。
		// 找出 sort 後之連續 node list，有需要更動時才改。
		// TODO: 最佳化 table list。
		// TODO: 先 hide 是否會較快?
		for (i = 0; i < length; i++) {
		}
	}

	_// JSDT:_module_
	.
	/**
	 * 獲取頁面上選中的選取區資訊。
	 * 
	 * @example <code>
		CeL.add_listener('mouseup', function (e) { var s = CeL.get_selection(); if (s && s.text) CeL.debug('select @' + this + '(' + s.element + ')' + ' (' + s.left + '+' + s.width + ',' + s.top + '+' + s.height + '), (' + e.pageX + ',' + e.pageY + '): ' + s.text); }, target_element);
	 * </code>
	 * 
	 * @param {Number}
	 *            [index] TODO: 第幾選取區, default: all or 0 if there's only
	 *            ONE/ZERO selection
	 * @return {Object} { left: {Number} in px, top: {Number} in px, width:
	 *         {Number} in px, height: {Number} in px, text: {String} 文字,
	 *         element: {HTMLElement}, selection: selection object (browser
	 *         dependent) }
	 * @return {undefined} error.
	 * @see http://plugins.jquery.com/project/selectedText, Gecko:
	 *      https://developer.mozilla.org/en/DOM/Selection
	 * @_memberOf _module_
	 */
	get_selection = function(index) {
	};

	try {

		if (window.getSelection)
			_.get_selection = function(index) {
				// Firefox, Opera, Safari
				// http://help.dottoro.com/ljcvonpc.php
				// Although the selection object is supported by Opera, it is
				// only partially suppported. The window.getSelection method
				// provides more complex functionality in that browser.
				// http://www.dotvoid.com/2001/03/using-the-range-object-in-mozilla/
				var e = document.activeElement,
				// 在 Opera 中，e 為 [object Text]
				tag = e && e.tagName && e.tagName.toLowerCase(), s = window
						.getSelection();
				if (!s.rangeCount)
					// 點擊而無選擇?
					// 最起碼回應能得知的資訊
					return {
						text : '',
						element : s,
						selection : s
					};

				// 超出範圍可能會 Error: INDEX_SIZE_ERR: DOM Exception 1
				s = s.getRangeAt(!isNaN(index) && 0 <= index
						&& index < s.rangeCount ? index : 0);

				// Gecko: https://developer.mozilla.org/en/DOM/range
				// 除了 Gecko 外，都有 s.getBoundingClientRect 但無
				// s.endContainer.getBoundingClientRect。
				// Gecko 可以取 mouse event 作 workaround
				if (false)
					library_namespace.debug(s.endContainer.parentNode);
				var offset = _.get_node_offset(s.getBoundingClientRect ? s
						: s.endContainer.parentNode);

				return {
					// TODO: offset
					// TODO: do test
					// s.startOffset,
					left : offset.left,
					top : offset.top,
					// s.endOffset,
					width : offset.width,
					height : offset.height,
					text : tag === 'textarea' || tag === 'input'
							|| tag === 'select' ? e.value.substring(
							e.selectionStart, e.selectionEnd) : s.toString(),
					element :
					// s.endContainer
					s,
					selection : s
				};

			};

		else if (document.selection && document.selection.createRange) {
			// Internet Explorer
			// http://msdn.microsoft.com/en-us/library/ms534692%28VS.85%29.aspx
			// TODO: http://help.dottoro.com/ljefwsqm.php

			document.execCommand
					&& document.execCommand('MultipleSelection', true, true);

			_.get_selection = function(input) {
				var s = document.selection.createRange();

				return s.type !== 'None' && {
					// TODO: do test
					// http://msdn.microsoft.com/en-us/library/ms535872%28v=VS.85%29.aspx
					// s.offsetLeft, s.offsetTop 較不準
					left : s.boundingLeft,
					top : s.boundingTop,
					width : s.boundingWidth,
					height : s.boundingHeight,
					text : s.text,
					// TODO
					// element: null,
					selection : s
				};

			};

		} else if (document.getSelection)
			_.get_selection = function(input) {
				return {
					// TODO: get offset from mouse location
					text : document.getSelection()
				};
			};

	} catch (e) {
		// TODO: handle exception
	}

	// ↑HTML only -------------------------------------------------------

	var is_IE = /* @cc_on!@ */!true;

	// http://www.real-blog.com/programming/259
	// http://fettig.net/weblog/2006/10/09/detecting-ie7-in-javascript/
	if (false)
		if (typeof window.XMLHttpRequest != "undefined") {
			// IE 7, mozilla, safari, opera 9
		} else {
			// IE6, old browsers
		}

	/**
	 * <code>
	http://www.cnlei.org/blog/article.asp?id=337
	在IE下：
	>> 支持keyCode
	>> 不支持which和charCode,二者值為 undefined

	在Firefox下：
	>> 支持keyCode，除功能鍵外，其他鍵值始終為 0
	>> 支持which和charCode，二者的值相同

	在Opera下：
	>> 支持keyCode和which，二者的值相同
	>> 不支持charCode，值為 undefined

	</code>
	 */
	_// JSDT:_module_
	.
	/**
	 * 條碼器(Barcode Scanner)/雷射讀碼器的輸入可用 onkeypress 取得
	 * 
	 * @param callback
	 *            callback
	 * @return
	 * @since 2008/8/26 23:10
	 * @example <code>
	 * //	usage:
	 * deal_with_barcode(function(t) {
	 * 	if (t.length > 9 && t.length < 17)
	 * 		document.getElementById("p").value = t,
	 * 		document.forms[0].submit();
	 * });
	 * </code>
	 * 
	 * @_memberOf _module_
	 */
	deal_with_barcode = function(callback) {
		var k, lt = 0, st = 0;
		document.onkeypress = function(this_event) {
			var c = new Date();
			if (
			// 前後不超過 800，
			c - st > 800 ||
			// 與上一輸入不超過 90
			c - lt > 90) {
				st = c;
				k = "";
			}
			lt = c;
			c = this_event || window.event;
			c = c.keyCode || c.which || c.charCode;
			if (c > 32 && c < 120)
				k += String.fromCharCode(c);
			else if (c == 13)
				callback(k, this_event);
		};

	};

	// https://addons.mozilla.org/js/search-plugin.js
	// TODO, & Chrome
	function add_engine() {
		// NYI
		throw 'TODO';
	}

	// for string encoding
	// -------------------------------------------------------

	var HTML_Entities_predefined = {
		quot : '"',
		amp : '&',
		apos : "'",
		lt : '<',
		gt : '>'
	}, HTML_Entities_predefined_values = Object
			.values(HTML_Entities_predefined),
	// @see
	// https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
	HTML_Entities = Object.assign({
		nbsp : ' ',
		iexcl : '¡',
		cent : '¢',
		pound : '£',
		curren : '¤',
		yen : '¥',
		brvbar : '¦',
		sect : '§',
		uml : '¨',
		copy : '©',
		ordf : 'ª',
		laquo : '«',
		not : '¬',
		shy : '­',
		reg : '®',
		macr : '¯',
		deg : '°',
		plusmn : '±',
		sup2 : '²',
		sup3 : '³',
		acute : '´',
		micro : 'µ',
		para : '¶',
		middot : '·',
		cedil : '¸',
		sup1 : '¹',
		ordm : 'º',
		raquo : '»',
		frac14 : '¼',
		frac12 : '½',
		frac34 : '¾',
		iquest : '¿',
		Agrave : 'À',
		Aacute : 'Á',
		Acirc : 'Â',
		Atilde : 'Ã',
		Auml : 'Ä',
		Aring : 'Å',
		AElig : 'Æ',
		Ccedil : 'Ç',
		Egrave : 'È',
		Eacute : 'É',
		Ecirc : 'Ê',
		Euml : 'Ë',
		Igrave : 'Ì',
		Iacute : 'Í',
		Icirc : 'Î',
		Iuml : 'Ï',
		ETH : 'Ð',
		Ntilde : 'Ñ',
		Ograve : 'Ò',
		Oacute : 'Ó',
		Ocirc : 'Ô',
		Otilde : 'Õ',
		Ouml : 'Ö',
		times : '×',
		Oslash : 'Ø',
		Ugrave : 'Ù',
		Uacute : 'Ú',
		Ucirc : 'Û',
		Uuml : 'Ü',
		Yacute : 'Ý',
		THORN : 'Þ',
		szlig : 'ß',
		agrave : 'à',
		aacute : 'á',
		acirc : 'â',
		atilde : 'ã',
		auml : 'ä',
		aring : 'å',
		aelig : 'æ',
		ccedil : 'ç',
		egrave : 'è',
		eacute : 'é',
		ecirc : 'ê',
		euml : 'ë',
		igrave : 'ì',
		iacute : 'í',
		icirc : 'î',
		iuml : 'ï',
		eth : 'ð',
		ntilde : 'ñ',
		ograve : 'ò',
		oacute : 'ó',
		ocirc : 'ô',
		otilde : 'õ',
		ouml : 'ö',
		divide : '÷',
		oslash : 'ø',
		ugrave : 'ù',
		uacute : 'ú',
		ucirc : 'û',
		uuml : 'ü',
		yacute : 'ý',
		thorn : 'þ',
		yuml : 'ÿ',
		OElig : 'Œ',
		oelig : 'œ',
		Scaron : 'Š',
		scaron : 'š',
		Yuml : 'Ÿ',
		fnof : 'ƒ',
		circ : 'ˆ',
		tilde : '˜',
		Alpha : 'Α',
		Beta : 'Β',
		Gamma : 'Γ',
		Delta : 'Δ',
		Epsilon : 'Ε',
		Zeta : 'Ζ',
		Eta : 'Η',
		Theta : 'Θ',
		Iota : 'Ι',
		Kappa : 'Κ',
		Lambda : 'Λ',
		Mu : 'Μ',
		Nu : 'Ν',
		Xi : 'Ξ',
		Omicron : 'Ο',
		Pi : 'Π',
		Rho : 'Ρ',
		Sigma : 'Σ',
		Tau : 'Τ',
		Upsilon : 'Υ',
		Phi : 'Φ',
		Chi : 'Χ',
		Psi : 'Ψ',
		Omega : 'Ω',
		alpha : 'α',
		beta : 'β',
		gamma : 'γ',
		delta : 'δ',
		epsilon : 'ε',
		zeta : 'ζ',
		eta : 'η',
		theta : 'θ',
		iota : 'ι',
		kappa : 'κ',
		lambda : 'λ',
		mu : 'μ',
		nu : 'ν',
		xi : 'ξ',
		omicron : 'ο',
		pi : 'π',
		rho : 'ρ',
		sigmaf : 'ς',
		sigma : 'σ',
		tau : 'τ',
		upsilon : 'υ',
		phi : 'φ',
		chi : 'χ',
		psi : 'ψ',
		omega : 'ω',
		thetasym : 'ϑ',
		upsih : 'ϒ',
		piv : 'ϖ',
		ensp : ' ',
		emsp : ' ',
		thinsp : ' ',
		zwnj : '‌',
		zwj : '‍',
		lrm : '‎',
		rlm : '‏',
		ndash : '–',
		mdash : '—',
		lsquo : '‘',
		rsquo : '’',
		sbquo : '‚',
		ldquo : '“',
		rdquo : '”',
		bdquo : '„',
		dagger : '†',
		Dagger : '‡',
		bull : '•',
		hellip : '…',
		permil : '‰',
		prime : '′',
		Prime : '″',
		lsaquo : '‹',
		rsaquo : '›',
		oline : '‾',
		frasl : '⁄',
		euro : '€',
		image : 'ℑ',
		weierp : '℘',
		real : 'ℜ',
		trade : '™',
		alefsym : 'ℵ',
		larr : '←',
		uarr : '↑',
		rarr : '→',
		darr : '↓',
		harr : '↔',
		crarr : '↵',
		lArr : '⇐',
		uArr : '⇑',
		rArr : '⇒',
		dArr : '⇓',
		hArr : '⇔',
		forall : '∀',
		part : '∂',
		exist : '∃',
		empty : '∅',
		nabla : '∇',
		isin : '∈',
		notin : '∉',
		ni : '∋',
		prod : '∏',
		sum : '∑',
		minus : '−',
		lowast : '∗',
		radic : '√',
		prop : '∝',
		infin : '∞',
		ang : '∠',
		and : '∧',
		or : '∨',
		cap : '∩',
		cup : '∪',
		int : '∫',
		there4 : '∴',
		sim : '∼',
		cong : '≅',
		asymp : '≈',
		ne : '≠',
		equiv : '≡',
		le : '≤',
		ge : '≥',
		sub : '⊂',
		sup : '⊃',
		nsub : '⊄',
		sube : '⊆',
		supe : '⊇',
		oplus : '⊕',
		otimes : '⊗',
		perp : '⊥',
		sdot : '⋅',
		lceil : '⌈',
		rceil : '⌉',
		lfloor : '⌊',
		rfloor : '⌋',
		lang : '〈',
		rang : '〉',
		loz : '◊',
		spades : '♠',
		clubs : '♣',
		hearts : '♥',
		diams : '♦'
	}, HTML_Entities_predefined);

	// 可適用perl: HTML::Entities::encode_entities()
	// 需要escape的: [\<\>\"\'\%\;\)\(\&\+], tr/A-Za-z0-9\ //dc
	// http://www.cert.org/tech_tips/malicious_code_mitigation.html

	_// JSDT:_module_
	.
	/**
	 * Translate HTML code to Unicode text. 將 HTML:&#ddd; → Unicode text
	 * 
	 * @param {String}
	 *            HTML HTML code
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項 or {Boolean}only_numeric
	 * @returns
	 * @_memberOf _module_
	 * 
	 * @see function escape_ampersand(text) @ CeL.application.storage.EPUB
	 */
	HTML_to_Unicode = function HTML_to_Unicode(HTML, options) {
		if (options === true) {
			options = {
				entity : true,
				numeric : true
			};
		} else if (!options) {
			options = {
				predefined : true,
				entity : true,
				numeric : true
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		// 使用\0可能會 Warning: non-octal digit in an escape sequence that
		// does not
		// match a back-reference
		var unicode_text = HTML.valueOf();

		if (options.is_URI) {
			try {
				// 必須先採用 decodeURIComponent()，
				// CeL.HTML_to_Unicode() 往後的程式碼僅為了解碼 &#*。
				// 否則:
				// CeL.DOM.HTML_to_Unicode('%EF%BC%BB %EF%BC%BD')
				// !== decodeURIComponent('%EF%BC%BB %EF%BC%BD')
				unicode_text = decodeURIComponent(unicode_text);
			} catch (e) {
				// URIError: URI malformed
			}
		}

		// --------------------------------------
		// numeric character references

		function convert_digital(all, digital) {
			// digital: &#111; 之版本
			if (digital > 0x10FFFF)
				return all;
			var char = String.fromCodePoint(digital);
			return !options.predefined
			//
			&& HTML_Entities_predefined_values.includes(char) ? all : char;
		}
		function convert_hex(all, hex) {
			// &#x11; 之版本
			var digital = parseInt(hex, 16);
			return convert_digital(all, digital);
		}
		if (options.numeric) {
			// decodeURIComponent()
			unicode_text = unicode_text
			// \d{2,8}: 比起所允許的7位數多一位數，預防在不是以 ";" 為結尾的情況下，有無效數字。
			.replace(/&#0*(\d{2,8});?/g, convert_digital)
			// ";?": Allow CeL.HTML_to_Unicode('&#32&#65&#66&#67')
			.replace(/&#[xX]0*([\dA-Fa-f]{2,6});?/g, convert_hex);
			// .replace(): JScript 5.5~
			if (false && options.is_URI) {
				// 2022/5/10 6:22:20 一般HTML中的%dd不會被解碼。
				// is_URI 已經在前面處理完了，看起來根本不需要這一段。
				unicode_text = unicode_text.replace(/%([\dA-Fa-f]{2})/g,
						convert_hex);
			}
		}

		// --------------------------------------
		// named character references, named entities

		if (options.entity) {
			// HTML Entities (HTML character entity)
			// "&CounterClockwiseContourIntegral;"
			unicode_text = unicode_text.replace(/&([a-z]\w{0,49});/ig,
			//
			function(entity, name) {
				return (options.predefined
				//
				|| !(name in HTML_Entities_predefined))
				//
				&& (name in HTML_Entities) ? HTML_Entities[name]
				//
				: entity;
				// name = name.toLowerCase();
			});
		}

		return unicode_text;
	};

	_.HTML_to_Unicode.entities = HTML_Entities;

	_// JSDT:_module_
	.
	/**
	 * Translate Unicode text to HTML
	 * 
	 * @param {String}
	 *            text Unicode text
	 * @param mode
	 *            mode='x':&#xhhh;
	 * @return {String} HTML
	 * @_memberOf _module_
	 */
	to_HTML = function(text, mode) {
		var html = '', t, i = 0;
		for (; i < text.length; i++) {
			t = text.charCodeAt(i);
			html += '&#' + (mode === 'x' ? 'x' + t.toString(16) : t) + ';';
		}

		return html;
	};

	_// JSDT:_module_
	.
	/**
	 * Translate Unicode text to HTML code. escape chars
	 * 
	 * @param text
	 *            Unicode text
	 * @param flags
	 *            flags, f&1!=0: turn \t, (f&2)==0: \n→<br />, f==4: to quoted
	 * @param ignore_tags
	 *            e.g.,
	 *            {object:{src:/^https?:\/\//},img:{src:/^https?:\/\//},a:{href:/^https?:\/\//}}
	 * @return
	 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML
	 * @_memberOf _module_
	 */
	Unicode_to_HTML = function(text, flags, ignore_tags) {
		text = ('' + text)
		// "&"這個字元得要首先escape
		.replace(/&/g, '&amp;')
		// 就是會出現這奇怪情況。但是卻也不能否認有特別想要表示"&amp;"這樣的情況。
		// .replace(/&amp;amp;/g, '&amp;')
		.replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');

		if (ignore_tags)
			text = text.replace(/<([^>]+)>/g, function($0, $1) {
				if (!($1 in ignore_tags))
					return '&lt;' + $1;
				var s = $1.split(/ /),
				//
				i = 1, l = s.length, c = ignore_tags[$1];
				for (; i < l; i++) {
					m = s[i].match(/^([^=]+)(.+?)/);
					if (!(m[1] in c)
							|| !(library_namespace.is_type(c[m[1]], 'RegExp')
									&& c[m[1]].test(m[2]) || library_namespace
									.is_Function(c[m[1]])
									&& c[m[1]](m[2])))
						s[i] = '';
					return s.join(' ');
				}
			});
		else
			text = text.replace(/</g, '&lt;');

		if (flags == 4)
			return text;

		text = text.replace(/ /g, '&nbsp;');

		// if (!f) f = 0;
		if (flags & 1)
			text = text.replace(/	/g,
					'<span style="margin-left:3em;">&nbsp;</span>');
		if (!(flags & 2)) {
			text = text.replace(/(\r?\n)/g, '<br />$1')
			// +'<br />\n'
			;
		}
		return text;
	};

	// Ucode: \uhhhh及\xhh之意
_
	// JSDT:_module_
	.Unicode_unescape = function(U) {
		var T = U.replace(/\\\\|\\u005[cC]|\\x5[cC]|\\134/g, "\0");
		if (false) {
			// way 1
			T = T.replace(/\\u([\dA-Fa-f]{4})/g, function($0, $1) {
				return String.fromCharCode(parseInt($1, 16));
			}).replace(/\\x([\dA-Fa-f]{2})/g, function($0, $1) {
				return String.fromCharCode(parseInt($1, 16));
			}).replace(/\\([0-7]{1,3})/g, function($0, $1) {
				return String.fromCharCode(parseInt($1, 16));
			});
			// way 2
			T = T.replace(/\\(u[\dA-Fa-f]{4}|x[\dA-Fa-f]{2})/g,
					function($0, $1) {
						return String.fromCharCode(parseInt($1.substr(1), 16));
					}).replace(/\\([0-7]{1,3})/g, function($0, $1) {
				return String.fromCharCode(parseInt($1, 16));
			});
		}
		// way 3
		T = T.replace(/\\(u[\dA-Fa-f]{4}|x[\dA-Fa-f]{2}|[0-7]{1,3})/g,
		//
		function($0, $1) {
			var t = $1.charAt(0);
			return String.fromCharCode(parseInt(t == 'u' || t == 'x' ? $1
					.substr(1) : $1, 16));
		});

		if (T.indexOf("\\") != -1)
			T = T.replace(/\\t/g, "<Tab>").replace(/\\n/g, "<Line Feed>")
					.replace(/\\v/g, "<Vertical Tab>").replace(/\\f/g,
							"<Form Feed>").replace(/\\r/g, "<Carriage Return>")
					.replace(/\\(.)/g, "$1");

		return T.replace(/\0/g, "\\");
	};

	_// JSDT:_module_
	.
	// Unicode escape sequence
	// TODO: 效能
	Unicode_escape = function(text, max_code) {
		var i = 0, U = '', t;
		if (isNaN(max_code))
			max_code = 256;
		for (; i < text.length; i++)
			U += (t = text.charCodeAt(i)) < max_code ? text.charAt(i)
					: "\\u0000".substr(0, 6 - (t = t.toString(16)).length) + t;
		return U;
	};

	function CSSToTxt(C) {
		return C.replace(/\\\\|\\0{0,4}5[cC][ \t\r\n\f]?/g, "\0").replace(
				/\\([\dA-Fa-f]{1,6})[ \t\r\n\f]?/g, function($0, $1) {
					return String.fromCharCode(parseInt($1, 16));
				}).replace(/\\(.)/g, "$1").replace(/\0/g, "\\");
	}
	function TxtToCSS(T, r, sp) {
		// r:radio,sp:separator
		var i = 0, C = '', t, p = r && r > 3 && r < 9 ? '0'.repeat(r - 1) : '';
		if (!sp)
			sp = '';
		sp += '\\';

		for (; i < T.length; i++) {
			t = T.charCodeAt(i).toString(16);
			// (p&&r>t.length?p.substr(0,r-t.length):''):如果length是0或負值，會傳回空字串。
			C += sp + p.substr(0, r - t.length) + t;
		}
		return C.slice(sp.length - 1);
	}

	_// JSDT:_module_
	.
	/**
	 * Translate a query string to a native Object contains key/value pair set.
	 * 
	 * @param {String}
	 *            query_string query string. default: location.search
	 * @param {Object}
	 *            add_to append to this object
	 * @return key/value pairs
	 * @type Object
	 * @since 2010/6/16 15:18:50
	 * @_memberOf _module_
	 * @see
	 */
	get_query = function(query_string, add_to) {
		if (!query_string)
			query_string = window/* self */.location.search.slice(1);
		else if (typeof query_string !== 'string') {
			// TODO
		}

		var i, q = query_string.replace(/\+/g, ' ').split('&'), p, s = add_to
				|| Object.create(null), k, v;
		for (i in q)
			try {
				if (p = q[i].match(/^([^=]*)=(.*)$/)) {
					k = decodeURIComponent(p[1]);
					v = decodeURIComponent(p[2]);
					if (k in s)
						if (typeof s[k] === 'string')
							s[k] = [ s[k], v ];
						else
							s[k].push(v);
					else
						s[k] = v;
				} else
					s[decodeURIComponent(q[i])] = undefined;
			} catch (e) {
				// TODO: handle exception
			}

		return s;
	};

	_// JSDT:_module_
	.
	/**
	 * Translate a native Object contains key/value pair set to a query string.
	 * TODO: 增進效率。
	 * 
	 * @param {Object}
	 *            query_Object query Object.
	 * @return {String} query string
	 * @type String
	 * @_memberOf _module_
	 * @see jQuery.param
	 */
	to_query_string = function(query_Object) {
		if (!library_namespace.is_Object(query_Object))
			return;

		var name, query_list = [];
		for (name in query_Object)
			query_list.push(encodeURIComponent(name) + '='
					+ encodeURIComponent(query_Object[name]));
		return query_list.join('&');
	};

	/**
	 * 簡化 HTML (word)。 simplify HTML.
	 * 
	 * 目標：剩下語意部分，去掉 style。
	 * 
	 * TODO: 保留 b, em
	 */

	var has_RegExp_group = false;

	try {
		has_RegExp_group = (new RegExp('(\\d)\\1')).test('00');
	} catch (e) {
	}

	// 保留 color: return style string to add
	// reduce_HTML.keep_color =
	reduce_HTML._keep_color = function(c) {
		if (c !== 'black')
			return c;
	};
	reduce_HTML.file = function(FP, enc) {
		// sl('reduce_HTML [' + FP + ']');
		var t = simpleRead(FP, enc || simpleFileAutodetectEncode), l;
		if (!t) {
			error('Open [' + FP + '] failed.');
			return;
		}

		l = t.length;
		t = this(t);

		FP = FP.replace(/\.[xs]?html?$/i, function($0) {
			return '.reduced' + $0;
		});
		if (false)
			sl('reduce_HTML: ' + l + '→' + t.length + ' ('
					+ parseInt(100 * t.length / l) + '%)'
					+ ', save to [<a href="' + encodeURI(FP) + '">' + FP
					+ '</a>].');
		simpleWrite(FP, t, 'utf-8');
	};
	function reduce_HTML(t) {
		if (!t)
			return;
		var _f = reduce_HTML, f = function($0, $1, $2) {
			return $1 != $2 || ($1.toLowerCase() in {
				a : 1,
				p : 1,
				head : 1
			}) ? $0 : '';
		};
		if (false) {
			if (m = t.match(/<!--\[if [^\]]+\]>[\s\S]*?<!\[endif\]-->/))
				sl(m[0].replace(/</g, '&lt;'));
			if (m = t.match(/<!\[if !vml\]>[\s\S]*?<!\[endif\]>/))
				sl(m[0]);
		}

		t = t
				.replace(
						/[\s\n]*<(t[dh])([^>]+)>[\s\n]*/ig,
						function($0, $1, $2) {
							var a = $2
									.match(/[\s\n](col|row)span=['"]?\d{1,3}['"]?/ig);
							return '<' + $1 + (a ? a.join('') : '') + '>';
						})
				.replace(/<\?xml:namespace[^>]+>/g, '')
				.replace(/[\s\n]*(<\/t[dh]>)[\s\n]*/ig, '$1')
				.replace(/<wbr[^>]*>/ig, '<br />')
				.replace(
						/<([bh]r)[\s\n]+([^>]*)\/?>/ig,
						function($0, $1, $2) {
							var m = $2
									.match(/[\s\n;"'][\s\n]*page-break-before[\s\n]*:[\s\n]*([^\s\n;"']+)/);
							return '<'
									+ $1
									+ (m ? ' style="page-break-before:' + m[1]
											+ '"' : '') + '>';
						})
				.replace(
						/<(span|font|p|div|b|u|i)[\s\n]+([^>]*)>/ig,
						function($0, $1, $2) {
							var t = '<' + $1, s = '', m;
							if (
							// /Italic/i.test($2)
							$2.indexOf('Italic') !== -1)
								s += 'font-style:italic;';
							// TODO: <u>, <b>
							if (_f.keep_color
									&& (m = $2
											.match(/[\s\n;"'][\s\n]*color[\s\n]*:[\s\n]*([^\s\n;"']+)/))
									&& (m = _f.keep_color(m[1])))
								// 保留 color
								s += 'color:' + m + ';';
							return t + (s ? ' style="' + s + '"' : '') + '>';
						})
				.replace(/<(tr|table)[\s\n]+([^>]*)>/ig, '<$1>')
				// 不能用 .+|\n ，IE8 sometimes crash
				.replace(/<span>([\s\S]*?)<\/span>/ig, '$1')
				// need several times
				.replace(/<span>([\s\S]*?)<\/span>/ig, '$1')
				.replace(/<font>([\s\S]*?)<\/font>/ig, '$1')
				// 2 times
				.replace(/<([a-z\d]+)>[\s\n]*<\/([a-z\d]+)>/ig, f)
				.replace(/<([a-z\d]+)>[\s\n]*<\/([a-z\d]+)>/ig, f)

				.replace(/<o:p>([\s\S]*?)<\/o:p>/ig, '$1')
				.replace(/<st1:[^>]+>([\s\S]*?)<\/st1:[^>]+>/ig, '$1')
				.replace(/<!\[if !vml\]>([\s\S]*?)<!\[endif\]>/ig, '$1')
				.replace(/<o:SmartTagType [^>]+\/>/ig, '')
				/**
				 * <code>
				<td>
				<p>&nbsp;</p>
				</td>
				</code>
				 */
				.replace(
						/<(span|p|div|t[dr])([^>]*>)<(span|p)>(([\s\n]+|&nbsp;)*?)<\/(span|p)><\/(span|p|div|t[dr])>/ig,
						'<$1$2$4</$7>')
				.replace(/[\s\n]*<\/p>([\s\n]*<br\s*\/?>)*[\s\n]*<p[^>]*>/ig,
						'<br />\n')
				.replace(
						/<link rel=(File-List|colorSchemeMapping|themeData|Edit-Time-Data)[^>]+>/ig,
						'')
				.replace(/^[\s\n]*<\html[^>]*>[\s\n]*/, '<\html>')
				.replace(/[\s\n]*<\body[^>]+>[\s\n]*/, '<\body>')
				.replace(
						/[\s\n]*<!--\[if [^\]]+\]>[\s\S]*?<!\[endif\]-->(\r?\n)*/ig,
						'').replace(
						/[\s\n]*<\style[^>]*>[\s\S]*?<\/style>[\s\n]*/ig, '')
				.replace(/[\s\n]*<\meta[\s\n][^>]+>[\s\n]*/ig, '')

				// from HTML_to_Unicode()
				// 預防 error 之版本
				.replace(/&#0*(\d{2,7});/ig, function($0, $1) {
					return $1 > 0x10FFFF ? $0 : String.fromCharCode($1);
				}).replace(/([\s\n]+|&nbsp;)+$|^([\s\n]+|&nbsp;)+/g, '');

		if (has_RegExp_group) {
			t = t.replace(/<([bis])[\s\n]*>([^<]*)<\/\1>([\s\n]*)<\1>/ig, '$2');
		}

		if (/<(img|table)[>\s\n]/.test(t)) {
			library_namespace.debug('Has table or images.');
			t = t
					.replace(
							/<\/head>/i,
							'<\style type="text/css">table,th,td{border:1px solid #888;border-collapse:collapse;}img{border:0;max-width:99%;}</style></head>');
		}

		return t;
	}
	;

	/**
	 * 傳回 element's data-* attributes 相對應帶有連字符號的 name。
	 * 
	 * @param {String}[name]
	 *            dataset name.
	 * 
	 * @returns {String} element's data-* attributes 相對的 name。
	 * 
	 * @since 2012/11/9 23:15:30
	 */
	function to_hyphenated(name) {
		if (library_namespace.is_debug() && /-[a-z]/.test(name))
			throw new SyntaxError(
					'The dataset name "'
							+ name
							+ '" contains a U+002D HYPHEN-MINUS character (-) followed by a lowercase ASCII letter.');

		// 'data-': dataset prefix.
		return 'data-' + name.replace(/[A-Z]/g, function($0) {
			return '-' + $0.toLowerCase();
		});
	}

	/**
	 * 設定 dataset。<br />
	 * 以 node.dataset 為準，node.attributes 為輔。<br /> ** 注意: IE8 中無法設定 <title> 之
	 * .dataset，會被忽略掉。即使從 .outerHTML 亦無法取得。
	 * 
	 * @example <code>
	 * //	get value
	 * CeL.DOM_data(node, name);
	 * 
	 * //	set value
	 * CeL.DOM_data(node, name, value);
	 * 
	 * //	delete value
	 * CeL.DOM_data(node, name, undefined);
	 * </code>
	 * 
	 * @param {HTMLElement}node
	 *            所指定之 node。
	 * @param {String|Object}[name]
	 *            dataset name.
	 * @param [value]
	 *            設成 undefined 時，將 delete 此 name。
	 * 
	 * @returns value of dataset[name]
	 * 
	 * @since 2012/11/9 23:15:30
	 */
	function dataset_compatible(node, name, value) {
		if (!node || node.nodeType === TEXT_NODE)
			// IE8 中，甚至不能設定 node.dataset，會出現 "物件不支援此屬性或方法"。
			return;

		if (!node.dataset)
			// initialization.
			// 給予個預設值，省略判斷，簡化流程。
			node.dataset = Object.create(null);

		if (!name) {
			// get all dataset.
			return dataset_synchronize(node);
			return node.dataset;
		}

		var d = node.dataset;

		if (arguments.length > 2) {
			// need to set value.
			if (value === undefined)
				delete d[name];
			else
				d[name] = String(value);

			// 同步。保證全程使用此函數時，同時也會設定好 the element's data-* attributes。
			if (value === undefined)
				node.removeAttribute(to_hyphenated(name));
			else
				node.setAttribute(to_hyphenated(name), value);

		} else if (library_namespace.is_Object(name)) {
			// 此時 name = { name : value };
			// 因為並非單純的指定到 .dataset，因此不用 Object.assign()。
			for ( var n in name)
				dataset_compatible(node, n, name[n]);
			return node.dataset;

		} else if ((value = node.getAttribute ? node
				.getAttribute(to_hyphenated(name)) : node[to_hyphenated(name)]) !== undefined) {
			// 同步。
			d[name] = String(value);
		}

		return d[name];
	}

	/**
	 * 同步 / synchronize / update / prepare dataset。<br /> //
	 * https://github.com/remy/polyfills/blob/master/dataset.js //
	 * https://github.com/eligrey/Xccessors We won't use
	 * Element.prototype.__defineGetter__('dataset', ...): IE 7 have no
	 * Object.prototype.__defineGetter__ or Object.defineProperty.
	 * 
	 * TODO: remove attribute.
	 * 
	 * @param {HTMLElement}node
	 *            所指定之 node。
	 * @param {Boolean}[from_attributes]
	 *            from the element's data-* attributes.<br />
	 *            預設為 dataset ↔ attribute。設定此 flag 將會作單向設定。
	 * 
	 * @since 2012/11/9 23:35:30
	 */
	function dataset_synchronize(node, from_attributes) {
		if (!node || node.nodeType === TEXT_NODE)
			// IE8 中，甚至不能設定 node.dataset，會出現 "物件不支援此屬性或方法"。
			return;

		var d = node.dataset, name;

		// if (!d) return;
		// assert: node.dataset 已經設定好了。

		if (from_attributes === undefined || from_attributes) {
			library_namespace.debug('attribute → dataset.', 2,
					'dataset_synchronize');

			for_attributes(node, function(name, value) {
				// library_namespace.debug('attribute → dataset: test [' +
				// name
				// + '].', 2, 'dataset_synchronize');
				if (name = name.match(/^data-([^A-Z]+)$/))
					d[name[1].replace(/-([a-z])/g, function($0, $1) {
						return $1.toUpperCase();
					})] = value;
			});

			if (false) {
				for (var i = 0, attributes = node.attributes, length = attributes.length, attribute; i < length; i++) {
					if (false)
						library_namespace.debug('attribute → dataset: test ['
								+ i + '][' + attributes[i].name + '].', 2,
								'dataset_synchronize');
					if (name = (attribute = attributes[i].name)
							.match(/^data-([^A-Z]+)$/)) {
						d[name[1].replace(/-([a-z])/g, function($0, $1) {
							return $1.toUpperCase();
						})] = node.getAttribute(attribute);
					}
				}
			}

		}

		if (!from_attributes) {
			library_namespace.debug('dataset → attribute.', 2,
					'dataset_synchronize');
			for (name in d)
				node.setAttribute(to_hyphenated(name), d[name]);
		}

		return d;
	}

	// http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#dom-dataset
	// http://dev.w3.org/html5/spec/single-page.html#dom-dataset
	// detect dataset support.
	var support_dataset, dataset;
	try {
		// Element.prototype.__lookupGetter__("dataset")
		_.support_dataset = support_dataset = library_namespace.is_WWW(true)
				&& library_namespace.is_type(document.body.dataset,
						'DOMStringMap');
	} catch (e) {
	}

	if (support_dataset)
		dataset = function(node, name, value) {
			var d = node.dataset;
			// test node has NO .dataset
			if (!name || !d)
				return d;

			if (arguments.length > 2)
				if (value === undefined)
					delete d[name];
				else
					// String(value): for Symbol value
					d[name] = String(value);

			else if (library_namespace.is_Object(name)) {
				// 此時 name = { name : value };
				for ( var n in name)
					d[n] = name[n];
				return d;
			}

			return d[name];
		};

	else {
		// The browser does not support dataset!
		library_namespace
				.debug('The runtime environment does not support dataset!');
		dataset = dataset_compatible;
	}

	_.DOM_data = dataset;

	// ↑for string encoding -----------------------------------------------

	/** {Boolean}support CSS position sticky */
	var CSS_position_sticky = library_namespace.platform({
		firefox : 32,
		chrome : 56,
		safari : 5
	}), is_Safari = library_namespace.platform({
		safari : 5
	});

	/**
	 * 動態[生成/顯示][目錄/目次]。<br>
	 * automatically generated menu / list / table of contents.<br>
	 * TODO: fix dataset bug. mouseover → popup TOC.
	 * 
	 * @example <code>
	CeL.run([ 'application.locale', 'interact.DOM' ], function() {
		CeL.gettext.use_domain('', function() {
			CeL.auto_TOC();
		});
	});
	 * </code>
	 * 
	 * @param {String|HTMLElement}[content_node]
	 *            針對指定 node 列出目錄。
	 * @param {Object}[options]
	 *            附加參數/設定特殊功能與選項
	 */
	function auto_TOC(content_node, options) {
		options = library_namespace.setup_options(options);
		/** {Integer}to <h\d>. default: 6. */
		var level = options.level;
		/** {Integer}0:auto, 1:re-show, 2: force show. */
		var force = options.force;
		if (!(content_node = get_element(content_node)))
			content_node = document.body;
		if (!force && content_node.scrollHeight < 4 * screen.height)
			return;

		// 設定目錄 height。
		function set_height() {
			if (!CSS_position_sticky) {
				return;
			}
			if (node.style.position) {
				TOC_list.style.height = '';
				return;
			}
			var height = window.innerHeight;
			if (!isNaN(height)
			// 當 TOC_list 的高度超出可見區域時，方縮小之。
			&& (height = (height - 40) | 0) < TOC_list.offsetHeight) {
				TOC_list.style.height = height + 'px';
			}
		}

		function add_TOC_node(node) {
			library_namespace.debug('&lt;' + node.tagName + '&gt;\n'
					+ node.innerHTML.slice(0, 200), 3);

			head_array.push(node);
			title = set_text(node);
			// l: title 長度在規範內。
			i = title.length < auto_TOC.max_length;
			// l: tagName
			// CSS 分大小寫。
			l = node.tagName.toLowerCase();
			if (!node.id && !node.name) {
				node.id = encodeURIComponent(title);
				if (false) {
					// from wiki
					node.id = node.id.replace(/%/g, '.').replace(/\s/g, '');
				}
			}

			// 實際上應該用<li>，但<h\d>可能不會有 nested 層疊結構。
			list_array.push({
				div : {
					a : i ? title : [ title.slice(0, auto_TOC.max_length), {
						span : '..',
						C : auto_TOC.CSS_prefix + 'more'
					} ],
					href : href + (node.id || node.name),
					// subtitle
					R : (i ? '' : title + (node.title ? '\n' : ''))
							+ (node.title || ''),
					target : '_self',
					onclick : function() {
						// 先緊縮目錄。
						toggle_display(TOC_list, false);
					}
				},
				C : auto_TOC.CSS_prefix
						+ l
						+ (l === 'header' ? '' : ' ' + auto_TOC.CSS_prefix
								+ 'header')
			});

		}

		var list_array = [], head_array = [], node = content_node.firstChild, matched, title, i, l,
		// Chrome 22 在遇上 /p/cgi.cgi?_=_ 時，僅指定 href : #~ 會變成 /p/#~。因此需要
		// workaround。
		href = location.href.replace(/#.*$/, '') + '#';
		if (is_Safari) {
			// encodeURI(): Safari 5.1.7 needs this.
			// But Opera will broken on this.
			href = encodeURI(href);
		}

		level |= 0;
		level = new RegExp('^(h[1-' + (level >= 1 && level <= 6 ? level : 6)
				+ ']|header)$', 'i');

		while (node) {
			if ((matched = node.tagName) && matched.match(level))
				add_TOC_node(node);

			// 表層遍歷。
			// TODO: 增加對更深層的探索。
			node = node.nextSibling;
		}

		if (list_array.length === 0)
			// <h2> 為最常利用之中級結構。
			for_nodes(add_TOC_node, 'h2');

		if (list_array.length > 1) {
			var TOC_list, id = set_attribute(content_node, 'id'),
			// gettext_config:{"id":"↑back-to-toc"}
			back_title = gettext('↑Back to TOC');

			title = set_attribute(content_node, 'title');
			if (!title) {
				node = content_node.firstChild;
				// 當 firstChild 為 <header> 時，採用其內容為標題。
				if (/^h[1-3]$/i.test(node.tagName))
					title = set_text(node);
			}
			if (!title)
				title = id;

			id = auto_TOC.CSS_prefix + (id || Math.random());
			TOC_list = id + '_list';

			// 回來修改各 <header>
			for (i = 0, l = head_array.length; i < l; i++) {
				if (false && i > 0) {
					// Firefox/38.0 在兩個 hade 相鄰的情況，anchor 似乎無法正常作動。
					// 只好手動助之加入 <p>
					// ** 無用! 需於 <html> 中手動加入!
					matched = node.nextSibling;
					while (matched.nodeType === TEXT_NODE)
						matched = matched.nextSibling;
					if (matched === head_array[i])
						new_node({
							p : ' '
						}, [ node, 3 ]);
				}
				set_class(node = head_array[i], auto_TOC.CSS_prefix + 'head');
				new_node({
					a : '📑',
					href : href + id,
					C : auto_TOC.CSS_prefix + 'back',
					// T : '↑Back to TOC',
					R : back_title,
					target : '_self'
				// TODO: element 本身可能是浮動的，因此應跳到下一個內文本文的元素，並採用
				// .nextElementSibling.scrollIntoView()。
				// @see function go_to_anchor(anchor) @ reviews.original.js
				}, [ node, 1 ]);
			}

			list_array = [
			// 設定目錄定位。
			{
				span : [ {
					span : CSS_position_sticky ? auto_TOC.icon.unpin : '',
					onclick : function() {
						node.style.position = node.style.position
						//
						? '' : 'static';
						this.innerHTML = auto_TOC.icon[
						//
						node.style.position ? 'pin' : 'unpin'];
						set_height();
					},
					// gettext_config:{"id":"pin-unpin-the-toc"}
					R : 'Pin/unpin the TOC'
				}, {
					span : auto_TOC.icon.right,
					onclick : function() {
						node.style.cssFloat = node.style.cssFloat
						//
						? '' : 'right';
						this.innerHTML = auto_TOC.icon[
						//
						node.style.cssFloat ? 'left' : 'right'];
					},
					// gettext_config:{"id":"set-toc-to-left-or-right"}
					R : 'Set TOC to left or right'
				} ],
				C : auto_TOC.CSS_prefix + 'position_control'
			}, {
				// U+1F4D1 BOOKMARK TABS
				// http://www.utf8-chartable.de/unicode-utf8-table.pl?start=128000
				// http://www.fileformat.info/info/emoji/list.htm
				// http://codepoints.net/U+1F4D1
				div : [ '📑', {
					// gettext_config:{"id":"contents-of-$1"}
					T : title ? [ 'Contents of [%1]', options.title_name
					//
					&& options.title_name(title) || title ]
					// gettext_config:{"id":"contents"}
					: 'Contents'
				} ],
				C : auto_TOC.CSS_prefix + 'control',
				// gettext_config:{"id":"expand"}
				title : gettext('expand'),
				onclick : function() {
					var expand_now = toggle_display(TOC_list) !== 'none';
					// show/hide (顯示/隱藏), 展開/收合目錄 click to expand
					// gettext_config:{"id":"collapse"}
					this.title = gettext(expand_now ? 'collapse'
					// gettext_config:{"id":"expand"}
					: 'expand');
					if (expand_now)
						set_height();
				}
			}, {
				div : list_array,
				id : TOC_list,
				C : auto_TOC.CSS_prefix + 'list'
			} ];

			var class_name = auto_TOC.CSS_prefix
			// 若是不具有此屬性，則明確指定不使用此屬性；預防有瀏覽器雖然已實現此屬性，但是並沒有被本函式庫偵測出來。
			+ (CSS_position_sticky ? 'box' : 'box_no_sticky');
			if (node = get_element(id)) {
				_.remove_all_child(node);
				set_class(node, class_name);
				new_node(list_array, node);
			} else {
				node = new_node({
					div : list_array,
					id : id,
					C : class_name
				}, [ content_node, 1 ]);
			}

			// auto_TOC.set_text(id);

			// 作 cache。
			TOC_list = get_element(TOC_list);

			// 載入 CSS resource(s)。
			// include resources of module.
			library_namespace.run(library_namespace.get_module_path(
					module_name, 'auto_TOC.css'));
		} else
			library_namespace.warn('auto_TOC: No ' + level + ' found.');

		// Release memory. 釋放被占用的記憶體.
		head_array = list_array = null;
	}

	// title 最大長度 in px。
	auto_TOC.max_length = 80;
	// CSS class name 前綴。
	auto_TOC.CSS_prefix = 'TOC_';

	// TODO: set domain
	auto_TOC.set_text = function(id) {
		// 目錄
		gettext.translate_nodes(get_element(id).childNodes);
		// ↑回到目錄
		gettext.translate_nodes('.' + auto_TOC.CSS_prefix + 'back');
	};

	auto_TOC.icon = {
		pin : '⚓',
		unpin : '⇧',
		left : '⇦',
		right : '⇨'
	};

	_// JSDT:_module_
	.auto_TOC = auto_TOC;

	// ---------------------------------------------------------------------//

	function random_color(from, gap) {
		function scale(from, gap) {
			return from + (Math.random() * gap) | 0;
		}
		from |= 0;
		if (from < 0 || from > 255)
			from = 0;
		if (!gap)
			gap = 256 - from;
		var color = [], i = 3;
		while (i--)
			color.push(scale(from, gap));
		return 'rgb(' + color + ');';
	}

	function parse_frame(document_node) {
		function parse_frameset(frameset) {
			var nodes = frameset.childNodes, i = 0, length = nodes.length, tag, list = [], cols = frameset.cols
					.trim(), cell, node, background = random_color(210),
			//
			get_info = function() {
				var name = node.name + '(' + layout.shift() + ')';
				return node.src ? {
					b : name,
					title : node.src
				} : name;
			},
			// IE 先看 cols，之後才看 rows。
			layout = (cols || frameset.rows.trim()).split(/\s*,\s*/);
			// cols = !!cols;

			for (; i < length; i++) {
				if ((tag = (node = nodes[i]).tagName)
						&& (cell = (tag = tag.toLowerCase()) === 'frame' ? {
							a : get_info(),
							href : '#',
							onclick : function() {
								// application.debug.show_value first
								if (library_namespace.show_value)
									// Error null: 462 [Error] (facility
									// code
									// 10): 遠端伺服器不存在或無法使用
									try {
										library_namespace.show_value(this,
												this.id || this.name);
									} catch (e) {
										library_namespace.error(e);
									}
								else {
									library_namespace.warn(
									//
									'Need to include application.debug first!'
									//
									+ ' Trying now...');
									library_namespace.run('application.debug');
								}
								return false;
							}.bind(node)
						} : tag === 'frameset' && [ {
							div : get_info(),
							S : 'width:100%;color:#e73;background-color:'
							//
							+ background + ';'
						}, parse_frameset(node) ])) {
					cell = {
						td : cell,
						S : 'background-color:' + background + ';'
					};
					list.push(cols ? cell : {
						tr : cell
					});
				}
			}

			return {
				table : {
					tbody : cols ? {
						tr : list
					} : list
				},
				S : 'width:100%;border-collapse:collapse;'
			};
		}

		try {
			// IE 只會取第一個 <frameset>。
			var frameset = document_node.getElementsByTagName('frameset')[0];
			if (frameset)
				library_namespace.log(parse_frameset(frameset));
			else if (library_namespace.is_debug())
				library_namespace.warn('No frameset detected.');
		} catch (e) {
			library_namespace.error(e);
		}
	}

	_.parse_frame = parse_frame;

	return (_// JSDT:_module_
	);

}

});
// application.net
/**
 * @name CeL function for net
 * @fileoverview 本檔案包含了處理網路傳輸相關功能的 functions。
 * @since
 */

// --------------------------------------------------------------------------------------------
// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net',

	// includes() @ data.code.compatibility.
	require : 'data.code.compatibility.' + '|data.native.'
	//
	+ '|application.OS.Windows.get_WScript_object'
	//
	+ '|interact.DOM.HTML_to_Unicode',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {
	'use strict';

	var module_name = this.id;
	// @see PATTERN_has_URI_invalid_character @ library_namespace.character
	var PATTERN_has_URI_invalid_character = /[^a-zA-Z0-9;,/?:@&=+$\-_.!~*'()#]/;
	var check_encoding = function(encoding) {
		// console.trace(encoding);
		if (encoding && !/^UTF-?8$/i.test(encoding)) {
			library_namespace.warn('您必須先載入 CeL.! 這訊息只會顯示一次!');
			check_encoding = null;
		}
	},
	// 本函數亦使用於 CeL.application.net.work_crawler
	// 本函式將使用之 encodeURIComponent()，包含對 charset 之處理。
	// @see function_placeholder() @ module.js
	encode_URI_component = function(string, encoding) {
		if (library_namespace.character) {
			library_namespace.debug('採用 ' + library_namespace.Class
			// 有則用之。 use CeL.data.character.encode_URI_component()
			+ '.character.encode_URI_component 編碼 ' + encoding, 1, module_name);
			encode_URI_component = library_namespace.character.encode_URI_component;
			check_encoding = null;
			return encode_URI_component(string, encoding);
		}
		check_encoding(encoding);
		return encodeURIComponent(string);
	};
	var encode_URI = function(string, encoding) {
		if (library_namespace.character) {
			library_namespace.debug('採用 ' + library_namespace.Class
			// 有則用之。 use CeL.data.character.encode_URI()
			+ '.character.encode_URI 編碼 ' + encoding, 1, module_name);
			encode_URI = library_namespace.character.encode_URI;
			check_encoding = null;
			return encode_URI(string, encoding);
		}
		check_encoding(encoding);
		return encodeURI(string);
	};
	var decode_URI_component = function(string, encoding) {
		if (library_namespace.character) {
			library_namespace.debug('採用 ' + library_namespace.Class
			// 有則用之。 use CeL.data.character.decode_URI_component()
			+ '.character.decode_URI_component 解碼 ' + encoding, 1, module_name);
			decode_URI = library_namespace.character.decode_URI;
			decode_URI_component = library_namespace.character.decode_URI_component;
			check_encoding = null;
			return decode_URI_component(string, encoding);
		}
		check_encoding(encoding);
		return decodeURIComponent(string);
	};
	var decode_URI = decode_URI_component;

	// requiring
	var KEY_not_native = library_namespace.env.not_native_keyword;
	var get_WScript_object = this.r('get_WScript_object'), HTML_to_Unicode = this
			.r('HTML_to_Unicode');

	/**
	 * null module constructor
	 * 
	 * @class net 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	var NOT_FOUND = ''.indexOf('_');

	// ------------------------------------------------------------------------

	function is_IP(host, IPv6_only) {
		return !IPv6_only
		// for IPv4 addresses
		&& /^[12]?\d{1,2}(?:\.[12]?\d{1,2}){3}$/.test(host)
		// for IPv6 addresses
		|| /^[\dA-F]{1,4}(?::[\dA-F]{1,4}){7}$/i.test(host);
	}

	_.is_IP = is_IP;

	/**
	 * get full path.
	 */
	function get_full_URL(relative_path, base_URL) {
		if (/([a-z\d]+:)\/\//.test(relative_path)) {
			// e.g., "https://host.name/"
			return relative_path;
		}
		if (relative_path.startsWith('/')) {
			// e.g., "/path/to/file"
			var matched = base_URL.match(/([a-z\d]+:)\/\/[^\/]+/);
			if (matched) {
				return matched[0] + relative_path;
			}
		}
		// e.g., "relative/path/to/file"
		return base_URL.replace(/[^\/]+$/, '') + relative_path;
	}

	_.get_full_URL = get_full_URL;

	// gethost[generateCode.dLK]='Sleep';
	/**
	 * get host name & IP 2005/3/1 22:32 只能用於WinXP, Win2000
	 * server（換個版本指令以及輸出可能就不同！），而且非常可能出狀況！ Win98 不能反查，只能 check local IP
	 * 
	 * @deprecated 改用 getNetInfo()
	 */
	function gethost(host) {
		var IP, p, c, t, i, f, cmd;
		// 決定shell cmd 對於 ".. > ""path+filename"" " 似乎不能對應的很好，
		// 所以還是使用 "cd /D path;.. > ""filename"" "
		try {
			c = '%COMSPEC% /U /c "', WshShell.Run(c + '"');
			p = WScript.ScriptFullName.replace(/[^\\]+$/, '');
			c += 'cd /D ""' + p + '"" && ';
			cmd = 1;
		} catch (e) {
			try {
				c = '%COMSPEC% /c ';
				WshShell.Run(c);
				p = 'C:\\';
			} catch (e) {
				return;
			}
		}
		if (host) {
			if (/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(host))
				IP = host, host = 0;
		} else {
			f = 'ipconfig.tmp.txt';
			// winipcfg
			WshShell.Run(c + 'ipconfig > ' + (cmd ? '""' + f + '"" "' : p + f),
					0, true);
			if (t = simpleRead(f = p + f)) {
				// TODO: use t.between()
				if ((i = t.indexOf('PPP adapter')) !== NOT_FOUND)
					t = t.slice(i);
				else if ((i = t.indexOf('Ethernet adapter')) !== NOT_FOUND)
					t = t.slice(i);
				if ((i = t.indexOf('IP Address')) !== NOT_FOUND)
					t = t.slice(i);
				if (t.match(/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/))
					IP = RegExp.$1;
			}
			try {
				fso.DeleteFile(f);
			} catch (e) {
			}
			if (!IP)
				return [ 0, 0 ];
		}
		if (!cmd)
			// Win98沒有nslookup
			return [ host, IP ];
		f = 'qDNS.tmp.txt';
		WshShell.Run(c
				+ 'nslookup '
				+ (cmd ? '""' + (IP || host) + '"" > ""' + f + '"" "'
						: (IP || host) + '>' + p + f), 0, true);
		// /C:執行字串中所描述的指令然後結束指令視窗 (x)因為用/c，怕尚未執行完。
		// try { WScript.Sleep(200); } catch (e) { }
		if ((t = simpleRead(f = p + f)) && t.match(/Server:/)
				&& t.match(/Address:\s*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)) {
			t = t.slice(RegExp.lastIndex);
			host = t.match(/Name:\s*(\S+)/) ? RegExp.$1 : 0;
			IP = t.match(/Address:\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) ? RegExp.$1
					: 0;
			// library_namespace.debug(host + '\n' + IP);
		} else
			host = IP = 0;
		try {
			fso.DeleteFile(f);
		} catch (e) {
		}
		return [ host, IP ];
	}

	// for element.dataset
	if (false)
		if (!library_namespace.global.DOMStringMap)
			library_namespace.global.DOMStringMap = library_namespace.setting_pair;

	// ------------------------------------------------------------------------

	var port_of_protocol = {
		// https://tools.ietf.org/html/rfc1928#section-3
		// The SOCKS service is conventionally located on TCP port 1080.
		// https://github.com/TooTallNate/node-socks-proxy-agent/blob/master/src/agent.ts
		socks4 : 1080,
		socks4a : 1080,
		socks5 : 1080,
		socks : 1080,
		socks5h : 1080,
		ftp : 21,
		http : 80,
		https : 443
	};

	_.port_of_protocol = port_of_protocol;

	var PATTERN_URI =
	// [ all, 1: `protocol:`, 2: '//', 3: host, 4: path ]
	/^([\w\-]{2,}:)?(\/\/)?(\/[A-Z]:|(?:[^@]*@)?[^\/#?&:.][^\/#?&:]+(?::\d{1,5})?)?(.*)$/i
	// /^(?:(https?:)\/\/)?(?:([^:@]+)(?::([^@]*))?@)?([^:@]+)(?::(\d{1,5}))?$/
	;

	/**
	 * URI class.
	 * 
	 * 本組函數之目的:<br />
	 * 1. polyfill for W3C URL API.<br />
	 * 2. CeL.Search_parameters() 採用{Object}操作 hash 更方便重複利用，且可支援 charset。
	 * 
	 * new URLSearchParams() 會將數值轉成字串。 想二次利用 {Object}, {Array}，得採用 new CeL.URI()
	 * 而非 new URL()。
	 * 
	 * @example <code>

	// 警告: 這不能保證 a 和 fg 的順序!! 僅保證 fg=23 → fg=24。欲保持不同名稱 parameters 間的順序，請採用 {String}parameter+parameter。
	var url = new CeL.URI('ftp://user:cgh@dr.fxgv.sfdg:4231/3452/dgh.rar?fg=23&a=2&fg=24#hhh');
	alert(url.hostname);
	// to URL()
	new URL(url).toString() === url.toString()
	// parameters to URLSearchParams() 
	new URLSearchParams(url.search_params.toString()).toString() === url.search_params.toString();
	
	</code>
	 * 
	 * <code>

	test:
	/fsghj.sdf
	a.htm
	http://www.whatwg.org/specs/web-apps/current-work/#attr-input-pattern
	file:///D:/USB/cgi-bin/lib/JS/_test_suit/test.htm
	//www.whatwg.org/specs/web-apps/current-work/#attr-input-pattern

	TODO:
	file:///D:/USB/cgi-bin/lib/JS/_test_suit/test.htm
	→ .file_path:
	D:\USB\cgi-bin\lib\JS\_test_suit\test.htm

	eURI : /^((file|telnet|ftp|https?)\:\/\/|~?\/)?(\w+(:\w+)?@)?(([-\w]+\.)+([a-z]{2}|com|org|net))?(:\d{1,5})?(\/([-\w~!$+|.,=]|%[\dA-F]{2})*)?(\?(([-\w~!$+|.,*:]|%[\dA-F]{2})+(=([-\w~!$+|.,*:=]|%[\dA-F]{2})*)?&?)*)?(#([-\w~!$+|.,*:=]|%[\dA-F]{2})*)?$/i,

	TODO:
	input [ host + path, search, hash ]
	URI, IRI, XRI
	WHATWG URL parser

	 * </code>
	 * 
	 * @param {String}uri
	 *            URI to parse
	 * @param {String}[base_uri]
	 *            當做基底的 URL。 see
	 *            CeL.application.storage.file.get_relative_path()
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @return parsed object
	 * 
	 * @since 2010/4/13 23:53:14 from parseURI+parseURL
	 * @since 2021/2/27 6:10:25 Parses URI, function parse_URI(uri) → new
	 *        URI(uri)
	 * 
	 * @_memberOf _module_
	 * 
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/URL_API
	 * @see RFC 1738, RFC 2396, RFC 3986, Uniform Resource Identifier (URI):
	 *      Generic Syntax, http://tools.ietf.org/html/rfc3987,
	 *      http://flanders.co.nz/2009/11/08/a-good-url-regular-expression-repost/,
	 *      http://www.mattfarina.com/2009/01/08/rfc-3986-url-validation,
	 *      https://developer.mozilla.org/en/DOM/window.location, also see
	 *      batURL.htm
	 */
	function URI(uri, base_uri, options) {
		if (!is_URI(this)) {
			// Call URI(value), like String(value)
			if (is_URI(uri))
				return uri;

			return new URI(uri, base_uri, options);
		}

		options = library_namespace.new_options(options);
		if (options.charset === 'buffer') {
			// Although the content is buffer, the URI itself should be not.
			delete options.charset;
		}
		if ((uri instanceof URL) || is_URI(uri)) {
			// uri.href
			uri = uri.toString();
		}

		if (!uri
		// 不能用 instanceof String!
		|| typeof uri !== 'string') {
			throw new Error('Invalid URI type: (' + (typeof uri) + ') ' + uri);
		}

		var href = library_namespace.simplify_path(uri);
		if (/^\/\//.test(uri)) {
			// CeL.simplify_path('//hostname') === '/hostname'
			href = '/' + href;
		}
		var matched = href.match(PATTERN_URI), path;
		if (!matched) {
			throw new Error('Invalid URI: (' + (typeof uri) + ') ' + uri);
		}

		// console.log(href);
		library_namespace.debug('parse [' + uri + ']: '
				+ matched.join('<br />\n'), 8, 'URI');

		// console.trace([ matched, base_uri, options ]);
		uri = base_uri && URI(base_uri) || options.as_URL
		//
		|| library_namespace.is_WWW() && {
			// protocol包含最後的':',search包含'?',hash包含'#'.
			// file|telnet|ftp|https
			protocol : location.protocol,
			hostname : location.hostname,
			port : location.port,
			host : location.host,
			// local file @ IE: C:\xx\xx\ff, others: /C:/xx/xx/ff
			pathname : location.pathname
		};
		if (library_namespace.need_avoid_assign_to_setter) {
			for ( var key in uri) {
				if (key !== 'search'
				// &&key !== 'hash'
				) {
					this[key] = uri[key];
				}
			}
			uri = this;
		} else {
			uri = Object.assign(this, uri);
		}
		// uri.uri = href;

		/**
		 * ** filename 可能歸至m[4]!<br />
		 * 判斷準則:<br />
		 * gsh.sdf.df#dhfjk filename|hostname<br />
		 * gsh.sdf.df/dhfjk hostname<br />
		 * gsh.sdf.df?dhfjk filename<br />
		 * gsh.sdf.df filename<br />
		 */
		href = matched[3] && matched[3].toLowerCase() || '';
		path = matched[4] || '';
		// 可辨識出為 domain 的這個 hostname. e.g., gTLD
		// https://en.wikipedia.org/wiki/Generic_top-level_domain
		if (/(?:\w+\.)+(?:com|org|net|info)$/i.test(href)) {
			// e.g., URI("www.example.com")
			path = path || '/';
			if (uri.protocol === 'file:')
				uri.protocol = 'https:';
		}

		if (matched[1])
			uri.protocol = matched[1].toLowerCase();
		// uri._protocol = uri.protocol.slice(0, -1).toLowerCase();
		// library_namespace.debug('protocol [' + uri._protocol + ']', 2);

		if (href && !/^\/[A-Z]:$/i.test(href)
				&& (path.charAt(0) === '/' || /[@:]/.test(href))) {
			// 處理 username:password
			if (matched = href.match(/^([^@]*)@(.+)$/)) {
				matched.user_passwords = matched[1].match(/^([^:]+)(:(.*))?$/);
				if (!matched.user_passwords)
					return;
				uri.username = matched.user_passwords[1];
				if (matched.user_passwords[3])
					uri.password = matched.user_passwords[3];
				href = matched[2];
			} else {
				// W3C URL API 不論有沒有帳號密碼皆會設定這兩個值
				uri.password = '';
				uri.username = '';
			}

			// [ all, host, (integer)port ]
			matched = href.match(/^([^\/#?&\s:]+)(?::(\d{1,5}))?$/);
			if (!matched) {
				throw new Error('Invalid host: ' + href);
			}

			// 處理 host
			// host=hostname:port
			uri.hostname = uri.host = matched[1];
			if (matched[2]
					&& matched[2] != port_of_protocol[uri.protocol.slice(0, -1)
							.toLowerCase()]) {
				// uri[KEY_port] = parseInt(matched[2], 10);
				uri.port = String(parseInt(matched[2], 10));
				uri.host += ':' + uri.port;
			} else if (false) {
				uri[KEY_port] = parseInt(matched[2]
						|| port_of_protocol[uri.protocol.slice(0, -1)
								.toLowerCase()]);
			}

		} else {
			// test uri.protocol === 'file:'
			path = href + path;
			href = '';
			// uri.protocol === 'file:'
			uri.port = uri.port || '';
			uri.host = uri.host || '';
			uri.hostname = uri.hostname || '';
			uri.username = uri.username || '';
			uri.password = uri.password || '';
		}

		uri.origin = uri.protocol + '//' + uri.host;

		// Normalize Windows path
		// "d:\\p\\" → "d:/p/"
		path = path.replace(/\\/g, '/');
		if (/^[A-Z]:/i.test(path)) {
			// "d:/p/" → "/d:/p/"
			path = '/' + path;
		}
		if (!href) {
			// test /C:/path
			if (!/^\/[A-Z]:/i.test(path)) {
				if (!base_uri) {
					library_namespace.debug(
					// 將 [' + path + '] 當作 pathname! not hostname!
					'Treat [' + path + '] as pathname!', 1, 'URI');
				}
				if (uri.pathname) {
					if (/^\//.test(path)) {
						// path 為 absolute path
						matched = !/^\/[A-Z]:/i.test(path)
								&& uri.pathname.match(/^\/[A-Z]:/i);
						if (matched)
							path = matched[0] + path;
					} else {
						// 僅取 uri.pathname 之 directory path
						path = uri.pathname.replace(/[^\\\/]+$/, '') + path;
					}
					path = library_namespace.simplify_path(path);
				}
			}
			// console.trace(path);
		}
		// upper-cased driver letter: "/d:/p/" → "/D:/p/"
		path = path.replace(/^\/[a-z]:/g, function($0) {
			return $0.toUpperCase();
		});
		if (library_namespace.is_WWW()) {
			library_namespace.debug('local file: [' + location.pathname + ']',
					9, 'URI');
		}

		// NG: /^([^%]+|%[\dA-F]{2})+$/
		// prevent catastrophic backtracking. e.g., '.'.repeat(300)+'%'
		// Thanks for James Davis.
		if (false && path && !/^(?:[^%]|%[\dA-F]{2})+$/i.test(path)) {
			library_namespace.warn('URI: encoding error: [' + path + ']');
		}

		// console.trace([ href, path, uri ]);
		library_namespace.debug('parse path: [' + path + ']', 9);
		if (path && (matched = path
		// https://cdn.dongmanmanhua.cn/16189006774011603165.jpg?x-oss-process=image/quality,q_90
		.match(/^(([^#?]*\/)?([^\/#?]*))?(\?([^#]*))?(#.*)?$/))) {
			library_namespace.debug('pathname: [' + matched + ']', 9);
			// pathname={path}filename
			uri.pathname = matched[1] || '';
			if (/%[\dA-F]{2}/i.test(uri.pathname)) {
				try {
					// console.trace([ uri.pathname, decodeURI(uri.pathname) ]);
					// Try to get decoded path.
					uri.pathname = decodeURI(uri.pathname);
				} catch (e) {
					// uri.pathname = decode_URI(uri.pathname, charset);
				}
			}
			if (PATTERN_has_URI_invalid_character.test(uri.pathname)) {
				// console.trace([ uri.pathname, encode_URI(uri.pathname,
				// options.charset) ]);
				uri.pathname = encode_URI(uri.pathname, options.charset);
			}
			// .directory_path 會隨不同 OS 之 local file 表示法作變動!
			uri.directory_path = /^\/[A-Z]:/i.test(uri.pathname) ? matched[2]
					.slice(1).replace(/\//g, '\\')
			// e.g., 'file:///D:/directory/file.name'
			// → D:\directory\
			: /^[A-Z]:(?:\/([^\/]|$)|$)/i.test(uri.pathname) ? matched[2]
					.replace(/\//g, '\\') : matched[2];
			uri.filename = matched[3];
			// request path used @ node.js http.request(options)
			// uri.path = uri.pathname + uri.search
			// uri.path = uri.pathname + (matched[5] ? '?' + matched[5] : '');

			var _options;
			if (Object.defineProperty[KEY_not_native]) {
				// hash without '#': using uri.hash.slice(1)
				uri.hash = matched[6];
				uri.search = matched[4];
				_options = Object.assign({
					// @see (typeof options.URI === 'object')
					URI : uri
				}, options);
			} else {
				Object.defineProperty(uri, KEY_hash, {
					value : matched[6] ? matched[6].slice(1) : '',
					writable : true
				});
				_options = options;
			}
			matched = matched[5];
			// console.trace([ matched, _options ]);
		} else {
			if (!href) {
				throw new Error('Invalid URI: ' + uri);
			}
			if (uri.pathname) {
				uri.directory_path = uri.pathname.replace(/[^\/]+$/, '');
				// uri.path = uri.pathname;
			}
			matched = '';
		}

		if (options.as_URL) {
			// 盡可能模擬 W3C URL()
			// library_namespace.debug('search: [' + matched[5] + ']', 2);
			// https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
			uri.searchParams = new URLSearchParams(matched, _options);
		} else {
			// do not set uri.search_params directly.
			_options = Object.assign({
				URI : uri
			}, _options);
			// console.trace(_options);
			uri.search_params = new Search_parameters(matched, _options);
		}

		if (options.charset)
			uri.charset = options.charset;

		library_namespace.debug('path: [' + uri.path + ']', 9);

		if (Object.defineProperty[KEY_not_native]) {
			library_namespace.debug('Generate .href of URI by URI_toString()',
					10);
			uri.toString();
		}
		// console.trace(uri);

		library_namespace.debug('href: [' + uri.href + ']', 8);
		// return uri;
	}

	Object.defineProperties(URI.prototype, {
		hash : {
			enumerable : true,
			get : function get() {
				if (!this[KEY_hash])
					return '';
				return '#' + this[KEY_hash];
			},
			set : function set(value) {
				value = String(value);
				if (value.startsWith('#')) {
					value = value.slice(1);
				}
				this[KEY_hash] = value;
			}
		},
		// URI.prototype.search
		search : {
			enumerable : true,
			get : search_getter,
			set : function set(value) {
				var search_params = this.search_params || this.searchParams;
				if (false && this.search_params) {
					this.search_params[KEY_URL] = this;
				}

				// search_params.clean_parameters();
				search_clean_parameters(search_params);

				// node.js v0.10.48 有 bug? 需要取得 search_params 一次才不會造成
				// ReferenceError: CeL is not defined
				// @ URI.prototype.href.set
				// @ site_name #17 @ _test suite/test.js
				URL[KEY_not_native] && search_params && Math.abs(0);

				value = String(value);
				if (value.startsWith('?')) {
					value = value.slice(1);
				}
				if (value) {
					// search_params.set_parameters(value);
					search_set_parameters.call(search_params, value);
				}
			}
		},
		// URI.prototype.href
		href : {
			enumerable : true,
			get : Object.defineProperty[KEY_not_native] ? URI_toString
					: URI_href,
			set : function set(href) {
				URI.call(this, href);
			}
		},
		toString : {
			value : Object.defineProperty[KEY_not_native] ? URI_toString
					: URI_href
		}
	});

	function search_getter(options) {
		// library_namespace.debug('normalize properties by search_getter');
		// library_namespace.debug(this.search_params);

		if (false && this.search_params) {
			this.search_params[KEY_URL] = this;
		}

		var uri = this;
		// console.trace([ uri, uri.searchParams ]);
		var search = 'search_params' in uri
		// function parameters_toString(options)
		? uri.search_params.toString(options)
		// options.as_URL?
		: uri.searchParams.toString();
		return search ? '?' + search : '';
	}

	function URI_href() {
		var uri = this;
		// console.trace([ uri, uri.search ]);
		// href=protocol:(//)?username:password@hostname:port/path/filename?search#hash
		var href = (uri.protocol ? uri.protocol + '//' : '')
				+ (uri.username || uri.password ? uri.username
						+ (uri.password ? ':' + uri.password : '') + '@' : '')
				+ uri.host
				// assert: uri.pathname is encodeURI()-ed.
				+ uri.pathname + uri.search + uri.hash;
		return href;
	}

	// options: 'charset'
	function URI_toString(options) {
		var uri = this;
		// assert: !!Object.defineProperty[KEY_not_native] === true
		uri.search = search_getter.call(uri, options);
		if ((uri.hash = String(uri.hash)) && !uri.hash.startsWith('#')) {
			uri.hash = '#' + uri.hash;
		}
		// console.trace(uri.search);
		return uri.href = URI_href.call(uri);
	}

	_// JSDT:_module_
	.URI = URI;

	function is_URI(value) {
		return value instanceof URI;
	}

	_.is_URI = is_URI;

	// ------------------------------------------------------------------------

	var NO_EQUAL_SIGN = typeof Symbol === 'function' ? Symbol('NO_EQUAL_SIGN')
	//
	: {
		NO_EQUAL_SIGN : true
	};

	function decode_URI_component_no_throw(value, charset) {
		try {
			return decode_URI_component(value, charset);
		} catch (e) {
		}

		// decode_URI_component() should be decodeURIComponent()
		return value.replace(/%([\dA-F]{2})/g, function(encoded, code) {
			return String.fromCharCode(parseInt(code, 16));
		});
	}

	/**
	 * parse_parameters({String}parameter) to hash
	 * 
	 * CeL.net.Search_parameters()
	 * 
	 * 新版本與 charset 編碼無關的話，應該使用 new URLSearchParams(parameters).toString()。
	 * 
	 * @param {String}search_string
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
	 */
	function Search_parameters(search_string, options) {
		// Similar to:
		// return new URLSearchParams(search_string);
		// but with charset and forward compatibility
		// and re-usable {Object} data structure.

		if (!is_Search_parameters(this)) {
			// `CeL.Search_parameters(search_string)`
			if (is_Search_parameters(search_string))
				return search_string;
			return new Search_parameters(search_string, options);
		}

		options = library_namespace.setup_options(options);
		var parameters = this;
		var data, name, value, matched;
		if (typeof search_string === 'string') {
			// http://stackoverflow.com/questions/14551194/how-are-parameters-sent-in-an-http-post-request
			data = search_string.replace(/\+/g, '%20').split(/&/);
		} else if (Array.isArray(search_string)) {
			data = search_string;
		} else if (typeof search_string === 'object') {
			// https://github.com/whatwg/url/issues/27
			// Creation of URLSearchParams from Object/Map
			if (library_namespace.is_Map(search_string)) {
				// input {Map}.
				Array.from(search_string.entries()).forEach(function(entry) {
					parameters[entry[0]] = entry[1];
				});
			} else if (search_string instanceof URLSearchParams) {
				Array.from(search_string.keys()).unique().forEach(
						function(key) {
							var values = search_string.getAll(key);
							parameters[key] = values.length > 1 ? values
									: values[0];
						});
			} else {
				// {Object}search_string.
				// assert: library_namespace.is_Object(search_string)
				Object.assign(parameters, search_string);
			}
		} else {
			if (search_string) {
				// Invalid search 無法處理之 parameters
				library_namespace.debug({
					// gettext_config:{"id":"enter-a-non-string-parameter-$1"}
					T : [ '輸入了非字串之參數：[%1]', search_string ]
				}, 1, 'Search_parameters');
			}
		}

		// 不可設置 parameters.charset，會加在 request URL 裡面。
		var charset = options.charset;

		for (var i = 0, l = data && data.length || 0; i < l; i++) {
			if (!data[i])
				continue;
			if (library_namespace.is_Object(data[i])) {
				this.set_parameters(data[i], options);
				continue;
			}
			if (typeof data[i] !== 'string') {
				library_namespace
						.error('Must input {String} as search parameter!');
				console.error(data[i]);
				return;
			}

			// Warning: Search_parameters() 僅接受 UTF-8。
			// 欲設定 charset，必須自行先處理 .search！

			// var index = parameter.indexOf('=');
			if (matched = data[i].match(/^([^=]+)=(.*)$/)) {
				name = matched[1];
				value = decode_URI_component_no_throw(matched[2], charset);
			} else {
				name = data[i];
				value = 'default_value' in options ? options.default_value
						: /* name */NO_EQUAL_SIGN;
			}
			try {
				name = decode_URI_component_no_throw(name, charset);
			} catch (e) {
				// TODO: handle exception
			}

			if (ignore_search_properties
			// Warning: for old environment, may need ignore some keys
			&& (name in ignore_search_properties)) {
				continue;
			}

			if (library_namespace.is_debug(2)) {
				try {
					library_namespace.debug('[' + (i + 1) + '/' + l + '] '
					//
					+ (parameters[name] ? '<span style="color:#888;">('
					//
					+ parameters[name].length + ')</span> [' + name
					//
					+ '] += [' + value + ']' : '[' + name + '] = ['
					//
					+ value + ']'));
				} catch (e) {
				}
			}

			if (options.split_pattern && typeof value === 'string'
			//
			&& (matched = value.split(options.split_pattern)).length > 1) {
				if (name in parameters) {
					if (Array.isArray(parameters[name])) {
						Array.prototype.push.apply(parameters[name], matched);
					} else {
						matched.unshift(parameters[name]);
						parameters[name] = matched;
					}
				} else
					parameters[name] = matched;
			} else {
				search_add_1_parameter.call(parameters, name, value);
			}
		}

		if (options.Array_only) {
			Object.keys(parameters).forEach(function(key) {
				if (!ignore_search_properties
				// Warning: for old environment, may need ignore some keys
				|| !(key in ignore_search_properties)) {
					if (!Array.isArray(parameters[name]))
						parameters[name] = [ parameters[name] ];
				}
			});
		}

		if (typeof options.URI === 'object') {
			Object.defineProperty(parameters, KEY_URL, {
				value : options.URI
			});
		}
	}

	function search_add_1_parameter(key, value, options) {
		if (key in this) {
			var original_value = this[key];
			if (Array.isArray(original_value))
				original_value.push(value);
			else
				this[key] = [ original_value, value ];
		} else {
			// Warning: if Array.isArray(value),
			// next value will push to the value!
			this[key] = value;
		}
	}

	/**
	 * set / append these parameters
	 * 
	 * @inner
	 */
	function search_set_parameters(parameters, options) {
		// console.trace([ this, parameters, options ]);
		options = Object.assign({
			charset : this.charset || this[KEY_URL] && this[KEY_URL].charset
		}, options);
		if (!library_namespace.is_Object(parameters))
			parameters = Search_parameters(parameters, options);
		// console.trace([ this, parameters, options ]);
		// Object.keys() 不會取得 Search_parameters.prototype 的屬性。
		Object.keys(parameters).forEach(function(key) {
			if (!ignore_search_properties
			// Warning: for old environment, may need ignore some keys
			|| !(key in ignore_search_properties)) {
				var value = parameters[key];
				if (options.append) {
					search_add_1_parameter.call(this,
					//
					key, value, options);
				} else {
					this[key] = value;
				}
			}
		}, this);
		return this;
	}

	// @inner
	function search_clean_parameters(object) {
		// if (!object)
		object = this;
		if (!object) {
			// @ node.js v0.10.48
			// https://github.com/kanasimi/CeJS/runs/2105831296?check_suite_focus=true
			return this;
		}

		Object.keys(object).forEach(function(key) {
			if (!ignore_search_properties
			// Warning: for old environment, may need ignore some keys
			|| !(key in ignore_search_properties)) {
				delete object[key];
			}
		});
		return this;
	}

	// {Object}this parameter hash to String
	// https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/toString
	function parameters_toString(options) {
		var charset;
		if (typeof options === 'string') {
			charset = options;
			options = Object.create(null);
		} else {
			options = library_namespace.setup_options(options);
			charset = options.charset;
		}
		if (charset === undefined) {
			// console.trace([ this, this[KEY_URL] ]);
			charset = this.charset || this[KEY_URL] && this[KEY_URL].charset;
		}

		var search = [], key;
		function append(value) {
			if (library_namespace.is_debug(9) && typeof value !== 'string'
					&& typeof value !== 'number' && value !== NO_EQUAL_SIGN) {
				try {
					library_namespace.debug({
						T : [
								// gettext_config:{"id":"set-$1-to-a-non-string-$2"}
								'設定 %1 成非字串之參數：%2',
								typeof JSON === 'object' ? JSON.stringify(key)
										: String(key),
								typeof JSON === 'object' ? JSON
										.stringify(value) : String(value) ]
					}, 1, 'parameters_toString.append');
				} catch (e) {
					// TypeError: Converting circular structure to JSON
				}
			}

			// console.trace([ key, value ]);
			try {
				search.push(value === NO_EQUAL_SIGN ? key : key + '='
						+ encode_URI_component(String(value), charset));
				// console.trace(search);
			} catch (e) {
				library_namespace.error(e);
				console.error(e);
				console.trace([ key, value ]);
			}
		}

		// console.trace([ this, charset ]);
		for (var index = 0, key_list = Object.keys(this); index < key_list.length; index++) {
			key = key_list[index];
			if (ignore_search_properties && (key in ignore_search_properties)) {
				// Warning: for old environment, may need ignore some keys
				continue;
			}

			var value = this[key];
			key = encode_URI_component(key, charset);
			// console.trace(key + ' = ' + value);
			if (!Array.isArray(value)) {
				append(value);
			} else if (Object.getOwnPropertyDescriptor(value, 'toString')) {
				// assert: 自行定義 {Function}.toString()
				append(value.toString());
			} else {
				value.forEach(append);
			}
		}

		library_namespace.debug([ {
			// gettext_config:{"id":"a-total-of-$1-parameters"}
			T : [ '共%1個參數：', search.length ]
		}, '<br />\n', search.map(function(parameter) {
			return parameter.length > 400 ? parameter.slice(0,
			//
			library_namespace.is_debug(6) ? 2000 : 400) + '...' : parameter;
		}).join('<br />\n') ], 9, 'parameters_toString');

		search = search.join('&');
		if (this[KEY_URL]) {
			// @see URI.prototype.search
			this[KEY_URL].search = search;
		}

		return search;
	}

	// @private
	var KEY_hash = typeof Symbol === 'function' ? Symbol('hash') : '\0hash';
	var KEY_URL = !Object.defineProperty[KEY_not_native]
			&& typeof Symbol === 'function' ? Symbol('URL') : '\0URL';
	// search_properties
	Object.assign(Search_parameters.prototype, {
		clean_parameters : search_clean_parameters,
		set_parameters : search_set_parameters,
		// valueOf
		toString : parameters_toString
	});
	var ignore_search_properties;
	if (Object.defineProperty[KEY_not_native]) {
		// 皆已採用 Object.keys(), Object.entries()
		// Object.keys() 不會取得 Search_parameters.prototype 的屬性。
		// ignore_search_properties = Object.clone(Search_parameters.prototype);
		ignore_search_properties = Object.create(null);

		// @ WScript.exe 會採用 (key in ignore_search_properties) 的方法，
		// 因此 KEY_URL 必須是 {String}。
		if (typeof KEY_URL !== 'string')
			KEY_URL = String(KEY_URL);
		ignore_search_properties[KEY_URL] = true;
		// alert(Object.keys(ignore_search_properties));
	}

	_.Search_parameters = Search_parameters;

	function is_Search_parameters(value) {
		return value instanceof Search_parameters;
	}

	_.is_Search_parameters = is_Search_parameters;

	// --------------------------------

	// 有缺陷的 URL()
	function defective_URL(url) {
		// Object.assign() will not copy toString:URI_toString()
		// Object.assign(this, URI(url));

		return new URI(url, null, {
			// 盡可能模擬 W3C URL()
			as_URL : true
		});
	}

	// 有缺陷的 URLSearchParams()
	function defective_URLSearchParams(search_string, options) {
		// library_namespace.debug(search_string);
		// Warning: new Map() 少了許多必要的功能! 不能完全替代!
		var search = Object.entries(
		//
		new Search_parameters(search_string, options));
		if (ignore_search_properties) {
			search = search.filter(function(entry) {
				return !(entry[0] in ignore_search_properties);
			});
		}
		// library_namespace.info(search.length);

		// alert(Array.isArray(search));
		try {
			Map.call(this, search);
			if (!this.forEach)
				throw 1;
			return;
		} catch (e) {
			// node.js 0.11: Constructor Map requires 'new'
		}

		search = new Map(search);
		// Copy all methods
		Object.assign(search, defective_URLSearchParams.prototype);
		return search;
	}

	// https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Inheritance
	Object.assign(defective_URLSearchParams.prototype = Object
			.create(Map.prototype), {
		constructor : defective_URLSearchParams,

		clean : function clean() {
			var search = this;
			var keys = Array.from(this.keys());
			keys.forEach(function(key) {
				search['delete'](key);
			});
			return this;
		},

		// URLSearchParams() 會存成字串，不會保留原先的資料結構。
		set : function set(key, value) {
			key = String(key);
			value = String(value);
			Map.prototype.set.call(this, key, value);
		},
		append : function append(key, value) {
			key = String(key);
			value = String(value);
			// defective_URLSearchParams.prototype.toString
			if (this.has(key)) {
				var original_value = Map.prototype.get.call(this, key);
				if (Array.isArray(original_value)) {
					original_value.push(value);
				} else {
					Map.prototype.set
							.call(this, key, [ original_value, value ]);
				}
			} else {
				Map.prototype.set.call(this, key, value);
			}
		},

		// Return the first one
		get : function get(key) {
			key = String(key);
			var original_value = Map.prototype.get.call(this, key);
			if (Array.isArray(original_value))
				return original_value[0];
			return original_value;
		},
		getAll : function getAll(key) {
			key = String(key);
			if (!this.has(key))
				return [];
			var original_value = Map.prototype.get.call(this, key);
			if (Array.isArray(original_value))
				return original_value;
			return [ original_value ];
		},

		// 注意: 本 library 模擬之 URLSearchParams.prototype.toString 只能得到等價
		// href，不完全相同。
		toString : function toString() {
			// defective_URLSearchParams.prototype.toString
			var list = [];
			this.forEach(function(value, key) {
				// console.trace([ value, key ]);
				key = encodeURIComponent(key) + '=';
				if (Array.isArray(value)) {
					value.forEach(function(v) {
						list.push(key + encodeURIComponent(String(v)));
					});
				} else {
					list.push(key + encodeURIComponent(String(value)));
				}
			});
			return list.join('&');
		}
	});

	// ------------------------------------------------------------------------

	/**
	 * <code>
	https://pubs.opengroup.org/onlinepubs/007908799/xbd/notation.html
	The following table lists escape sequences and associated actions on display devices capable of the action.

	https://pubs.opengroup.org/onlinepubs/007908799/xcu/printf.html
	the escape sequences listed in the XBD specification, File Format Notation  (\\, \a, \b, \f, \n, \r, \t, \v), which will be converted to the characters they represent
	</code>
	 */
	var to_file_name_escape_sequences = {
		'\n' : '＼n',
		'\r' : '＼r',
		'\t' : '＼t'
	};

	/**
	 * 正規化 file name，排除會導致 error 的字元。 normalize file name
	 * 
	 * @param {String}file_name
	 *            file name
	 * @param {Boolean}do_escape
	 *            是否作 escape
	 * 
	 * @returns {String}正規化 file name
	 * 
	 * @see data.is_matched.string_pre_handler(),
	 *      application.storage.file.get_file_name()
	 * @since 2012/10/13 13:31:21
	 */
	function to_file_name(file_name, do_escape) {
		file_name = file_name.trim();

		// 處理 illegal file name. 去除檔名中不被允許的字元。
		// http://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words

		if (do_escape)
			file_name = file_name
			// 若本來就含有這些 functional 字元的情況，須作 escape。
			.replace(/([＼／｜？＊])/g, '＼$1');
		// else: make result readable.

		file_name = file_name.replace(/[\0-\x1f]/g, function($0) {
			if ($0 in to_file_name_escape_sequences)
				return to_file_name_escape_sequences[$0];

			var c = $0.charCodeAt(0).toString(16), l = c.length;
			if (l === 1 || l === 3)
				c = '0' + c;
			else if (4 < l && l < 8)
				c = '000'.slice(l - 5) + c;
			return '＼' + (c.length === 2 ? 'x' : 'u') + c;
		});

		file_name = file_name
		// functional characters in RegExp.
		.replace(/[\\\/|?*]/g, function($0) {
			return {
				'\\' : '＼',
				// Fraction slash '⁄'
				// Division slash '∕'
				'/' : '／',
				'|' : '｜',
				'?' : '？',
				'*' : '＊'
			}[$0];
		});

		file_name = file_name
		// normalize string.
		// 全寬引號（fullwidth quotation mark）[＂]
		.replace(/"([^"'“”＂]+)"/g, '“$1”').replace(/"/g, '”')
				.replace(/:/g, '：').replace(/</g, '＜').replace(/>/g, '＞');

		if (library_namespace.platform.is_Windows()) {
			file_name = file_name
			// 若是以 "." 結尾，在 Windows 7 中會出現問題，無法移動或刪除。
			.replace(/(.)\.$/, '$1._');
		}

		// 限制長度.
		// http://en.wikipedia.org/wiki/Filename#Length_restrictions
		// http://msdn.microsoft.com/en-us/library/aa365247.aspx#maxpath
		// https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation
		if (file_name.length > 255) {
			library_namespace
					.warn('to_file_name: The file name will be cutted! ['
							+ file_name.length + '] [' + file_name + ']');
			file_name = file_name.slice(0, 255);
		}

		return file_name;
	}

	_// JSDT:_module_
	.to_file_name = to_file_name;

	var
	/**
	 * 取得副檔名。
	 * 
	 * @type {RegExp}
	 */
	PATTERN_extension = /\.([a-z\d\-]+)$/i,
	/**
	 * 一般字元，非特殊字元之 folder 名。<br />
	 * [...]{1,512}<br />
	 * 
	 * @type {RegExp}
	 */
	PATTERN_ordinary_folder_name = /^[a-z\d ~!@#$%^&()-_+={}[],.]+[\\\/]$/i,

	TARGET_FILE_EXISTS = new Error, NO_EXECUTABLE_FILE = new Error, NOT_YET_IMPLEMENTED = new Error;

	TARGET_FILE_EXISTS.name = 'TARGET_FILE_EXISTS';
	NO_EXECUTABLE_FILE.name = 'NO_EXECUTABLE_FILE';
	NOT_YET_IMPLEMENTED.name = 'NOT_YET_IMPLEMENTED';

	/**
	 * 取得 URI/取得器
	 * 
	 * @param {Function}[module]
	 *            use what module/command to get.
	 * @returns getter
	 * @throws No
	 *             module to use.
	 */
	function URI_accessor(module, setting) {

		if (!module)
			if (URI_accessor.default_module)
				module = URI_accessor.default_module;
			else {
				// detect what module/command to use.
				for (module in URI_accessor.module)
					if (!URI_accessor.test_module(module)) {
						URI_accessor.default_module = module;
						break;
					}
				if (!URI_accessor.default_module)
					module = undefined;
			}

		if ((module in URI_accessor.module)
				&& library_namespace
						.is_Function(module = URI_accessor.module[module]
								(setting)))
			return module;

		throw new Error('No module' + (module ? ' [' + module + ']' : '')
				+ ' to use!');
	}

	// return undefined: OK, others: error.
	URI_accessor.test_module = function(module_name) {
		library_namespace.debug('test module: [' + module_name + ']', 1,
				'URI_accessor.test_module');
		try {
			get_WScript_object().WshShell.Run(module_name, 0, true);
		} catch (e) {
			// 若不存在此執行檔案，將 throw。
			library_namespace.error(e);
			return (e.number & 0xFFFF) === 2 ? NO_EXECUTABLE_FILE : e;
		}
		library_namespace.debug('test module: [' + module_name + ']: OK.', 1,
				'URI_accessor.test_module');
	};

	/**
	 * 從 URI 抽取 file name
	 * 
	 * @param URI
	 *            URI
	 * @returns file name
	 * @throws decodeURIComponent
	 *             error
	 */
	URI_accessor.extract_file_name = function(URI) {
		// 須處理非標準之符號，可能會有 &#x27; 之類的東西。因此對 #hash 之處理得放在 HTML_to_Unicode() 後面。
		var m = URI.replace(/([^&])#.*/, '$1')
		//
		.match(/(([^\/\\]+)[\/\\]+)?([^\/\\]*)$/);
		if (m) {
			return URI_accessor.regularize_file_name(
			// 因為 escape 會多出不必要符號，因此不 escape。
			HTML_to_Unicode(m[3] || m[1]), false);
		}
	};

	// 正規化 file name
	URI_accessor.regularize_file_name = to_file_name;

	URI_accessor.setting = {
		// referer : '',
		window_style : function() {
			// 0: hidden, 1: show, 2: Activate & minimize,
			// 7: Minimize. The active window remains active.
			return library_namespace.is_debug() ? 1 : 0;
		},
		// 指定當檔名具有特殊字元時之暫存檔。
		// temporary_file : 'URI_accessor.tmp',
		// temporary_file : 'C:\\URI_accessor.tmp',
		// temporary_file : function(URI, save_to, FSO) { return
		// temporary_file_path; },
		// temporary_file : function(URI, save_to, FSO) { return save_to +
		// '.unfinished'; },
		temporary_file : function(URI, save_to) {
			var extension = save_to.match(PATTERN_extension),
			// 應該用 save_to 的 md5 值。
			hash_id = Math.ceil(Math.random() * 1e9);
			return 'URI_accessor.'
					+ (extension ? 'temp.' + hash_id + extension[0] : hash_id
							+ '.temp');
		},

		// do not overwrite:
		// target_exist : false

		// when target file exists, save to ..
		// target_exist : function(target, FSO) { return save_to || skip; },

		// when target file exists, rename old to ..
		// target_exist : [ save new to, rename old to ],

		target_exist : [],

		user_agent : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.29 Safari/537.22'
	};

	URI_accessor.target_exist = {
		rename : function(target, FSO) {
			var proto = target + '.old', move_to = proto, i = 0;
			// TODO: when error occurred..
			while (FSO.FileExists(move_to))
				move_to = proto + ++i;
			try {
				FSO.MoveFile(target, move_to);
			} catch (e) {
			}
			return target;
		},
		// save new to, rename old to
		move : function(save_to, move_to, FSO) {
			if (!move_to)
				move_to = save_to + '.old';
			if (FSO.FileExists(move_to))
				try {
					FSO.DeleteFile(move_to);
				} catch (e) {
				}
			try {
				FSO.MoveFile(save_to, move_to);
			} catch (e) {
			}
			return save_to;
		}
	};

	/**
	 * <code>
	default command modules.
	取得方法：
	wget
	curl
	lftp
	prozilla
	puf
	CuteFTPPro.TEConnection

	XMLHttp
	Msxml2.DOMDocument
	InternetExplorer.Application
	WinHttp.WinHttpRequest.5.1
		深入挖掘Windows腳本技術(5) - 網頁特效代碼 - IT學習者	http://www.itlearner.com/Article/2008/4024_5.shtml
		獲取軟件下載的真實地址！再談獲取Response.redirect重定向的URL-asp教程-asp學習網	http://www.aspxuexi.com/xmlhttp/example/2006-8-8/852.htm
		http://www.360doc.com/content/11/0108/11/597197_84935972.shtml
		從msdn得知，WinHttp.WinHttpRequest.5.1 是 msxml 4.0 的底層對象，也就是說 XMLHTTP/ServerXMLHTTP 也是在它的基礎上封裝而來。

	XMLHTTP組件在處理包含Location頭的302消息時太智能了，直接跳轉到最後的頁面

	TODO:
	先知道 file size
	use $PATH
	</code>
	 */
	URI_accessor.module = {
		curl : function(user_setting) {
			// http://curl.haxx.se/docs/httpscripting.html

			// The ORDINAL 2821 could not be located in the dynamic link library
			// LIBEAY32.dll
			// This is caused by a conflict in the version of LIBEAY32.DLL
			// Solution: install the latest version of Win32 OpenSSL
			// http://www.slproweb.com/products/Win32OpenSSL.html

			if (false) {
				library_namespace.debug('URI_accessor.setting.temporary_file:'
						+ URI_accessor.setting.temporary_file, 2,
						'URI_accessor.module.curl');
				library_namespace.debug('user_setting.temporary_file:'
						+ user_setting.temporary_file, 2,
						'URI_accessor.module.curl');
			}
			var setting = new library_namespace.setting_pair(Object
					.create(null), URI_accessor.setting, user_setting),
			//
			value = setting('user_agent'),
			//
			tmp = setting('cookie') || setting('cookie_file'),
			//
			command_array = [
					'curl --remote-time --insecure --compressed '
							+ (library_namespace.is_debug(2) ? '-v ' : '')
							+ (setting('additional_options') ? setting('additional_options')
									+ ' '
									: '')
							// --cookie STRING/FILE String or file to read
							// cookies from (H)
							+ (tmp ? '--cookie "' + tmp + '" ' : '')
							+ ((tmp = setting('cookie_file')
									|| setting('cookie')) ? '--cookie-jar "'
									+ tmp + '" ' : '') + '--output "', '',
					(value ? '" --user-agent "' + value : '') + '"' ];

			if (setting('POST')) {
				setting('POST_index', command_array.length + 1);
				command_array.push(' --data "', '', '"');
			}

			command_array[command_array.length - 1] += ' --referer "';

			tmp = '" "';
			if (value = setting('referer')) {
				library_namespace.debug([ 'referer: ', {
					a : value,
					href : value
				} ], 2, 'URI_accessor.module.curl');
				command_array[command_array.length - 1] += value + tmp;
			} else
				setting('referer_index', command_array.length), command_array
						.push('', tmp);

			command_array.push('', '"');

			library_namespace.debug('command_array: ' + command_array, 2,
					'URI_accessor.module.curl');
			if (false)
				library_namespace.debug('temporary_file: ['
						+ (typeof setting('temporary_file')) + ']'
						+ setting('temporary_file'), 2,
						'URI_accessor.module.curl');

			return URI_accessor.default_getter(setting, command_array,
					URI_accessor.default_apply_command);
		},

		wget : function(user_setting) {
			var setting = new library_namespace.setting_pair(Object
					.create(null), URI_accessor.setting, user_setting), value = setting('user_agent'), tmp = '" "', command_array = [
					'wget --timestamping --keep-session-cookies --no-check-certificate '
							+ (library_namespace.is_debug(2) ? '-d ' : '')
							+ (setting('additional_options') ? setting('additional_options')
									+ ' '
									: '') + '--output-document="', '',
					(value ? '" --user-agent="' + value : '') + '"' ];

			if (setting('POST')) {
				setting('POST_index', command_array.length + 1);
				command_array.push(' --post-data="', '', '"');
			}

			command_array[command_array.length - 1] += ' --referer="';

			if (value = setting('referer')) {
				library_namespace.debug([ 'referer: ', {
					a : value,
					href : value
				} ], 2, 'URI_accessor.module.wget');
				command_array[command_array.length - 1] += value + tmp;
			} else
				setting('referer_index', command_array.length), command_array
						.push('', tmp);

			command_array.push('', '"');

			library_namespace.debug('command_array: ' + command_array, 2,
					'URI_accessor.module.wget');
			if (false)
				library_namespace.debug('temporary_file: ['
						+ (typeof setting('temporary_file')) + ']'
						+ setting('temporary_file'), 2,
						'URI_accessor.module.wget');

			return URI_accessor.default_getter(setting, command_array,
					URI_accessor.default_apply_command);
		}
	};

	URI_accessor.default_apply_command = function(setting, command_array, URI,
			save_to, temporary_file_used) {
		command_array[1] = temporary_file_used || save_to;
		command_array[command_array.length - 2] = URI;
		var i;
		if (i = setting('referer_index'))
			command_array[i] = URI;
		if (i = setting('POST_index'))
			command_array[i] = setting('POST') || '';
	};

	URI_accessor.default_getter = function(setting, command_array,
			apply_command) {
		if (false)
			library_namespace.debug('get_WScript_object: ['
					+ (typeof get_WScript_object) + ']' + get_WScript_object,
					2, 'URI_accessor.default_getter');
		var WSO = get_WScript_object();
		if (false)
			library_namespace.debug('WSO: [' + (typeof WSO) + ']' + WSO, 2,
					'URI_accessor.default_getter');
		if (!WSO) {
			library_namespace.warn('No WScript objects got!');
			return;
		}

		var WshShell = WSO.WshShell, FSO = WSO.FSO,
		//
		normalize_directory = function(id) {
			var directory = setting(id);
			if (directory && !/[\\\/]$/.test(directory))
				setting(id, directory + library_namespace.env.path_separator);
		}, normalize_function = function(id) {
			if (typeof setting(id) !== 'function')
				setting(id, undefined);
		},
		//
		window_style = setting('window_style'), temporary_file = setting('temporary_file');
		library_namespace.debug('temporary_file: [' + (typeof temporary_file)
				+ ']' + temporary_file, 2, 'URI_accessor.default_getter');

		WSO = null;

		var getter = function(URI, save_to) {
			var start_time = new Date, result, temporary_file_used, tmp;

			if (library_namespace.is_Object(save_to)) {
				setting(save_to);
				normalize_directory('directory');
				normalize_function('callback');
				save_to = setting('save_to');
			}

			// 若沒有輸入 save_to，從 URI 取得。
			if (!save_to)
				save_to = URI_accessor.extract_file_name(URI);

			// 得放在偵測 temporary file 之前，預防 directory
			// 包含非普通的(unordinary)字符。
			if (tmp = setting('directory'))
				save_to = tmp + save_to;

			if (FSO.FileExists(save_to) && ('target_exist' in setting())) {
				if (Array.isArray(tmp = setting('target_exist')))
					tmp = URI_accessor.target_exist.move(tmp[0] || save_to,
							tmp[1], FSO);
				else if (typeof tmp === 'string' && tmp.charAt(0) === '*')
					tmp = URI_accessor.target_exist[tmp.slice(1)];

				if (typeof tmp === 'function')
					tmp = tmp(save_to, FSO);

				if (typeof tmp === 'string' && tmp)
					save_to = tmp;
				else {
					library_namespace
							.debug(
									'Skip ['
											+ URI
											+ ']: target file ['
											+ save_to
											+ '] exists and target_exist of setting refused rename or overwrite.',
									2, 'URI_accessor.default_getter.getter');
					result = TARGET_FILE_EXISTS;
					if (tmp = setting('callback'))
						tmp(save_to, URI, result);
					return result;
				}
			}

			// 只有非常用字母才需要 temporary file。
			if (temporary_file && !/^[\x20-\x7e]+$/.test(save_to)) {
				temporary_file_used = typeof temporary_file === 'function' ? temporary_file(
						URI, save_to, FSO)
						: temporary_file;
				library_namespace.debug('temporary file: ['
						+ temporary_file_used + ']←[' + temporary_file + ']',
						2, 'URI_accessor.default_getter.getter');
			}

			library_namespace.debug('Downloading [<a href="'
					+ URI
					+ '" target="_blank">'
					+ URI
					+ '</a>]'
					+ (temporary_file_used ? '→[' + temporary_file_used + ']'
							: '') + '→[' + save_to + ']..', 1,
					'URI_accessor.default_getter.getter');

			apply_command(setting, command_array, URI, save_to,
					temporary_file_used);
			library_namespace.debug(
					'Execute: [' + command_array.join('') + ']', 2,
					'URI_accessor.default_getter.getter');
			library_namespace.debug('WshShell: [' + (typeof WshShell) + ']'
					+ WshShell, 3, 'URI_accessor.default_getter.getter');

			try {
				// WshShell.Run("cmd.exe /c set > env.txt", 1, true);
				result = WshShell.Run(command_array.join(''),
				// Window Style
				1,
				// typeof window_style === 'function' ? window_style() :
				// window_style,
				// true: 等調用的程序退出後再執行。
				true);
				if (result) {
					// result = EXIT CODE
					this.lastest_errorno = result;
					save_to = '[error] ' + save_to;
				}

				if (temporary_file_used)
					if (FSO.FileExists(temporary_file_used))
						// 出問題還是照搬。
						// 需注意出問題過，原先就存在的情況。
						FSO.MoveFile(temporary_file_used, save_to);
					else
						library_namespace
								.warn('temporary file does not exists: ['
										+ temporary_file_used + ']');

				library_namespace.debug('['
						+ URI
						+ ']→[<a href="'
						+ save_to
						+ '" target="_blank">'
						+ save_to
						+ '</a>] @ '
						+ Math.round((new Date - start_time) / 1000)
						+ ' sec '
						+ (result ? ', <em>error code ' + result + '</em>.'
								: ''));

			} catch (e) {
				// library_namespace.error(e);
				if ((e.number & 0xFFFF) === 2)
					// 若不存在此執行檔案，將 throw。
					// '找不到執行檔: wget。您可能需要安裝此程式後再執行。'
					// http://users.ugent.be/~bpuype/wget/
					result = NO_EXECUTABLE_FILE;
				else {
					library_namespace.error(e);
					result = e;
				}
			}

			if (tmp = setting('callback'))
				tmp(save_to, URI, result, setting);
			return result;
		};

		if (false)
			library_namespace.debug('WshShell: [' + (typeof WshShell) + ']'
					+ WshShell, 2, 'URI_accessor.default_getter');

		// binding prototype
		if (false)
			library_namespace.set_method(URI_accessor.prototype,
					getter.prototype);
		else
			getter.prototype = URI_accessor.prototype;

		normalize_directory('directory');
		normalize_function('callback');

		return getter;
	};

	library_namespace.set_method(URI_accessor.prototype, {
		// TODO
		list : function(URI_array, index_URI, index_save_to) {
			throw NOT_YET_IMPLEMENTED;
		},
		process : function(index) {
			throw NOT_YET_IMPLEMENTED;
		}
	});

	_// JSDT:_module_
	.URI_accessor = URI_accessor;

	/**
	 * get URI / URI 取得器.
	 * 
	 * @example <code>
	 * get_URI('http://lyrics.meicho.com.tw/game/index.htm');
	 * </code>
	 * 
	 * @param {String}URI
	 *            URI to get
	 * @param {String}[save_to]
	 *            path save to
	 * 
	 * @returns error
	 */
	function get_URI(URI, save_to, setting) {
		if (get_URI.getter && (!setting
		// 有可能使用相同的 setting object，但僅改變了部分內容，如 temporary_file。
		// || get_URI.setting === setting
		))
			return get_URI.getter(URI, save_to);

		var i, getter, result;
		for (i in URI_accessor.module) {
			result = (getter = new URI_accessor(i, setting))(URI, save_to);
			if (result !== NO_EXECUTABLE_FILE) {
				// cache default setting
				get_URI.getter = getter;
				get_URI.setting = setting;
				break;
			}
		}

		return result;
	}

	_// JSDT:_module_
	.get_URI = get_URI;

	// @since 2021/2/27 6:29:0 remove get_video() for 下載 Youtube 影片檔案與播放清單:
	// 年久失修且網站改版，無法使用且沒想要維護了。

	/**
	 * 自動組態設定檔/自動設定網址
	 * 
	 * url: 完整的URL字串, host: 在 URL字串中遠端伺服器的網域名稱。該參數祇是為了 方便而設定的，是與URL在 :// 和 /
	 * 中的文字是一模 一樣。但是傳輸阜（The port number）並不包含其中 。當需要的時候可以從URL字串解讀出來。
	 * 
	 * <code>
	http://contest.ks.edu.tw/syshtml/proxy-pac.html
	Proxy Auto-Config File Format	http://lyrics.meicho.com.tw/proxy.pac
	http://openattitude.irixs.org/%E7%BC%96%E5%86%99-pac-proxy-auto-config-%E6%96%87%E4%BB%B6/
	http://www.atmarkit.co.jp/fwin2k/experiments/ieproxy/ieproxy_01.html
	http://www.cses.tcc.edu.tw/~chihwu/proxy-pac.htm
	you should configure your server to map the .pac filename extension to the MIME type:
		application/x-ns-proxy-autoconfig

	網域名稱之長度，經punycode轉碼後，不得超過63字元,大約二十個中文字以內。

	FindProxyForURL 將會傳回一個描寫Proxy組態設定的單一字串。假如該字串為空字串，則表示瀏覽器不使用 Proxy 伺服器。
	假如有多個代理伺服器設定同時存在，則最左邊的設定將第一個使用，直 到瀏覽器無法建立連線才會更換到第二個設定。而瀏覽器將會在30分鐘後 自動對於先前無回應的 PROXY 伺服器重新連線。而瀏覽器將會於一個小時 後自動再連線一次（每一次的重新連線都會增加30分鐘）。
	如果說所有的 PROXY 伺服器都當掉了，也沒有將 DIRECT 設定在 .pac 檔 案，那麼瀏覽器在嘗試建立連線 20 分鐘後將會詢問是否要暫時忽略 Proxy 服器直接存取網路，下一次詢問的時間則是在 40 分鐘後（注意！每一次 詢問都會增加20分鐘)

	http://www.microsoft.com/technet/prodtechnol/ie/ieak/techinfo/deploy/60/en/corpexjs.mspx?mfr=true
	The isInNet, isResolvable, and dnsResolve functions query a DNS server.
	The isPlainHostName function checks to see if there are any dots in the hostname. If so, it returns false; otherwise, the function returns true.
	The localHostOrDomainIs function is executed only for URLs in the local domain.
	The dnsDomainIs function returns true if the domain of the hostname matches the domain given.

	DIRECT - 不調用代理，直接連接
	PROXY host:port - 調用指定代理(host:port)
	SOCKS host:port - 調用指定SOCKS代理(host:port)
	如果是選用由分號分割的多塊設置，按照從左向右，最左邊的代理會被最優先調用，除非瀏覽器無法成功和proxy建立連接，那麼下一個配置就會被調 用。如果瀏覽器遇到不可用的代理服務器，瀏覽器將在30分鐘後自動重試先前無響應的代理服務器，一個小時後會再次進行嘗試，依此類推，每次間隔時間為 30 分鐘。
	</code>
	 */
	function FindProxyForURL(url, host) {
		var lch = host.toLowerCase();

		// isPlainHostName(lch) || isInNet(lch,"192.168.0.0","255.255.0.0") ||
		// isInNet(lch,"127.0.0.0","255.255.0.0") || dnsDomainIs(lch,".tw")
		// ?"DIRECT";
		return (
		/**
		 * <code>
		//dnsDomainIs(lch,"holyseal.net") || dnsDomainIs(lch,".fuzzy2.com") ? "PROXY 211.22.213.114:8000; DIRECT":	//	可再插入第二、三順位的proxy
		http://www.cybersyndrome.net/

		http://www.publicproxyservers.com/page1.html
		curl --connect-timeout 5 -x 219.163.8.163:3128 http://www.getchu.com/ | grep Getchu.com
		curl --connect-timeout 5 -x 64.34.113.100:80 http://www.getchu.com/ | grep Getchu.com
		curl --connect-timeout 5 -x 66.98.238.8:3128 http://www.getchu.com/ | grep Getchu.com

		dnsDomainIs(lch, ".cn") || dnsDomainIs(lch, "pkucn.com") ? "PROXY proxy.hinet.net:80; DIRECT" :	//	2009/8/16 14:20:32	用 HiNet 網際網路 Proxy Server 上大陸網速度還滿快的	http://www.ltivs.ilc.edu.tw/proxy/proxy/hinet.htm
		dnsDomainIs(lch, ".getchu.com") ? "PROXY 219.163.8.163:3128; PROXY 64.34.113.100:80; PROXY 66.98.238.8:3128; DIRECT" :
		dnsDomainIs(lch, ".minori.ph") ? "PROXY 219.94.198.110:3128; PROXY 221.186.108.237:80; DIRECT" :	//	Japan Distorting Open Proxy List	http://www.xroxy.com/proxy--Distorting-JP-nossl.htm
		//	slow:	http://www.cybersyndrome.net/country.html
		dnsDomainIs(lch, ".tactics.ne.jp") ? "PROXY 202.175.95.171:8080; PROXY 203.138.90.141:80; DIRECT" :
		dnsDomainIs(lch,".ys168.com")		? "PROXY 76.29.160.230:8000; DIRECT":	//	永硕E盘专业网络硬盘服务
		</code>
		 */
		dnsDomainIs(lch, "erogamescape.dyndns.org")
		//
		? "PROXY 211.22.213.114:8000; DIRECT"
		// http://www.twnic.net.tw/proxy.pac 將中文網域名稱轉成英文網域名稱
		// :/^[a-z\.\d_\-]+$/.test(lch)?"DIRECT":"PROXY
		// dnsrelay.twnic.net.tw:3127"
		: "DIRECT");
	}

	// http://help.globalscape.com/help/cuteftppro8/
	// setupCuteFTPSite[generateCode.dLK]='parse_URI';
	function setupCuteFTPSite(targetS, site) {
		if (typeof targetS === 'string')
			targetS = new URI(targetS, {
				protocol : 'ftp:'
			});
		if (!targetS)
			return;

		if (site) {
			try {
				site.Disconnect();
			} catch (e) {
			}
			try {
				site.Close();
			} catch (e) {
			}
		}
		try {
			site = null;
			site = WScript.CreateObject("CuteFTPPro.TEConnection");
			site.Host = targetS.host;
			// http://help.globalscape.com/help/cuteftppro8/setting_protocols.htm
			// The default Protocol is FTP, however SFTP (SSH2), FTPS (SSL),
			// HTTP, and HTTPS can also be used.
			site.Protocol = targetS.protocol.replace(/:$/, '').toUpperCase();
			if (targetS.username)
				site.Login = targetS.username;
			if (targetS.password)
				site.Password = targetS.password;

			site.useProxy = "off";
			site.TransferType = 'binary';

			site.Connect();

			// site.TransferURL("http://lyrics.meicho.com.tw/run.js");
		} catch (e) {
			return;
		}
		return site;
	}

	/*
	 * TODO: transferURL(remote URI,remote URI)
	 */
	// transferURL[generateCode.dLK]='parsePath,parse_URI,setupCuteFTPSite';
	function transferURL(from_URI, to_URI) {
		// var connectTo = from_URI.includes('://') ? from_URI : to_URI,
		// CuteFTPSite = setupCuteFTPSite(connectTo);
		var
		// isD: use download (else upload)
		isD, CuteFTPSite,
		// lF: local file
		lF,
		// rP: remote path
		rP;
		if (from_URI.includes('://'))
			isD = 0;
		else if (to_URI.includes('://'))
			isD = 1;
		else
			// local to local?
			return;
		lF = parsePath(isD ? to_URI : from_URI);
		CuteFTPSite = setupCuteFTPSite(rP = new URI(isD ? from_URI : to_URI, {
			protocol : 'ftp:'
		}));
		if (!CuteFTPSite || !CuteFTPSite.IsConnected)
			return;

		// 到這裡之後，就認定 CuteFTPPro.TEConnection 的 initial 沒有問題，接下來若出問題，會嘗試重新
		// initial CuteFTPPro.TEConnection.

		// initial local folder
		try {
			if (!site.LocalExists(site.LocalFolder = lF.directory))
				site.CreateLocalFolder(lF.directory);
		} catch (e) {
			return;
		}
		site.RemoteFolder = rP.pathname;

		if (isD) {
			site.Download(rP.fileName, lF.fileName || rP.fileName);
			if (!site.LocalExists(lF.path))
				return;
		} else {
			site.Upload(lF.fileName, rP.fileName || lF.fileName);
			if (!site.LocalExists(rP.path))
				return;
		}

		// get list
		// site.GetList('/OK', '', '%NAME');
		// var l = site.GetResult().replace(/\r\n?/g, '\n').split('\n');

		// close
		try {
			site.Disconnect();
		} catch (e) {
		}
		site.Close();

		return 1;
	}

	// ---------------------------------------------------------------

	// var globalThis = library_namespace.env.global;
	if (library_namespace.is_WWW(true) || library_namespace.platform.nodejs) {
		library_namespace.set_method(library_namespace.env.global, {
			// defective polyfill for W3C URL API, URLSearchParams()
			URL : defective_URL,
			URLSearchParams : defective_URLSearchParams
		});

		// https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
		// URLSearchParams_set_parameters(parameters)
		URLSearchParams.prototype.set_parameters = function set_parameters(
				parameters, options) {
			if (Array.isArray(parameters))
				parameters = parameters.join('&');
			// assert: typeof parameters === 'object'
			// || typeof parameters === 'string'
			parameters = new URLSearchParams(parameters);

			var search = this;
			parameters.forEach(function(value, key) {
				search.append(key, value);
			});
			return this;
		};
	}

	return (_// JSDT:_module_
	);
}

});
// CeL.application.net.wiki.namespace
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): basic 工具函數, namespace,
 *       site configuration
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2020/5/24 6:21:13 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.namespace',

	require : 'data.native.'
	// for library_namespace.get_URL
	// + '|application.net.Ajax.'
	// for library_namespace.URI()
	+ '|application.net.'

	// CeL.DOM.HTML_to_Unicode(), CeL.DOM.Unicode_to_HTML()
	+ '|interact.DOM.'
	// setup module namespace
	+ '|application.net.wiki.',

	// 設定不匯出的子函式。
	no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki;

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	// --------------------------------------------------------------------------------------------

	wiki_API.general_parameters = {
		format : 'json',
		// https://www.mediawiki.org/w/api.php?action=help&modules=json
		// 加上 "&utf8", "&utf8=1" 可能會導致把某些 link 中 URL 編碼也給 unescape 的情況！
		utf8 : 1
	};
	// 設定可被匯入 general_parameters 的屬性。
	wiki_API.general_parameters_normalizer = {
		// for cross-domain AJAX request (CORS)
		origin : function(value) {
			if (value === true)
				value = '*';
			return value;
		},

		format : 'string',
		utf8 : 'boolean|number|string'
	};

	// CeL.wiki.KEY_SESSION
	/** {String}KEY_wiki_session old key: 'wiki' */
	var KEY_SESSION = 'session', KEY_HOST_SESSION = 'host';

	// @inner TODO: MUST re-design
	function get_wikimedia_project_name(session) {
		return wiki_API.is_wiki_API(session)
		// e.g., commons, wikidata
		&& session.family === 'wikimedia'
		// https://meta.wikimedia.org/wiki/Special:SiteMatrix
		// TODO: using session.project_name or something others
		// using get_first_domain_name_of_session()
		&& session.language;
	}

	// https://en.wikipedia.org/wiki/Wikipedia:Naming_conventions_(technical_restrictions)#Forbidden_characters
	var PATTERN_page_name = /((?:&#(?:\d{1,8}|x[\da-fA-F]{1,8});|[^\[\]\|{}<>\n#�])+)/,
	/**
	 * {RegExp}wikilink內部連結的匹配模式v2 [ all_link, page_and_anchor, page_name,
	 * anchor / section_title, pipe_separator, displayed_text ]
	 * 
	 * 頁面標題不可包含無效的字元：[\n\[\]{}�]，經測試 anchor 亦不可包含[\n\[\]{}]，<br />
	 * 但 display text 表達文字可以包含 [\n]
	 * 
	 * @see PATTERN_link
	 */
	PATTERN_wikilink = /\[\[(((?:&#(?:\d{1,8}|x[\da-fA-F]{1,8});|[^\[\]\|{}<>\n#�])+)(#(?:-{[^\[\]{}\n\|]+}-|[^\[\]{}\n\|]+)?)?|#[^\[\]{}\n\|]+)(?:(\||{{\s*!\s*}})([\s\S]+?))?\]\]/,
	//
	PATTERN_wikilink_global = new RegExp(PATTERN_wikilink.source, 'g');

	var
	/**
	 * 匹配URL網址。
	 * 
	 * [http://...]<br />
	 * {{|url=http://...}}
	 * 
	 * matched: [ URL ]
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 */
	PATTERN_URL_GLOBAL = /(?:https?:)?\/\/(?:[^\s\|<>\[\]{}]+|{[^{}]*})+/ig,

	/**
	 * 匹配URL網址，僅用於 parse_wikitext()。
	 * 
	 * "\0" 應該改成 include_mark。
	 * 
	 * matched: [ all, previous, URL, protocol without ":", others ]
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 */
	PATTERN_URL_WITH_PROTOCOL_GLOBAL =
	// 照理來說應該是這樣的。
	/(^|[^a-z\d_])((https?|s?ftp|telnet|ssh):\/\/([^\0\s\|<>\[\]{}\/][^\0\s\|<>\[\]{}]*))/ig,
	// MediaWiki實際上會parse的。
	// /(^|[^a-z\d_])((https?|s?ftp|telnet|ssh):\/\/([^\0\s\|<>\[\]{}]+))/ig,

	/**
	 * 匹配以URL網址起始。
	 * 
	 * matched: [ prefix ]
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 */
	PATTERN_URL_prefix = /^(?:(?:https?|s?ftp|telnet|ssh):)?\/\/[^.:\\\/]+\.[^.:\\\/]+/i;
	// ↓ 這會無法匹配中文域名。
	// PATTERN_URL_prefix = /^(?:https?:)?\/\/([a-z\d\-]{1,20})\./i,

	// 嘗試從 options 取得 API_URL。
	function API_URL_of_options(options) {
		// library_namespace.debug('options:', 0, 'API_URL_of_options');
		// console.log(options);
		var session = session_of_options(options);
		if (session) {
			return session.API_URL;
		}
	}

	/**
	 * 測試看看指定值是否為API語言以及頁面標題或者頁面。
	 * 
	 * @param value
	 *            value to test. 要測試的值。
	 * @param {Boolean|String}[type]
	 *            test type: true('simple'), 'language', 'URL'
	 * @param {Boolean|String}[ignore_api]
	 *            ignore API, 'set': set API
	 * 
	 * @returns {Boolean}value 為 [ {String}API_URL/language, {String}title or
	 *          {Object}page_data ]
	 */
	function is_api_and_title(value, type, ignore_api) {
		// console.trace(value);

		if (!Array.isArray(value) || value.length !== 2
		//
		|| get_page_content.is_page_data(value[0])) {
			// 若有必要設定，應使用 wiki_API.normalize_title_parameter(title, options)。
			// 此時不能改變傳入之 value 本身，亦不能僅測試是否有 API_URL。
			return false;
		}

		var API_URL = value[0];

		if (type === true) {
			// type === true: simple test, do not test more.
			return !API_URL || typeof API_URL === 'string';
		}

		var title = value[1];

		// test title: {String}title or {Object}page_data or {Array}titles
		if (!title || typeof title !== 'string'
		// value[1] 為 titles (page list)。
		&& !Array.isArray(title)
		// 為了預防輸入的是問題頁面。
		&& !get_page_content.is_page_data(title)
		// 處理 is_id。
		&& (!(title > 0)
		// 注意：這情況下即使是{Natural}page_id 也會pass!
		|| typeof ignore_api !== 'object' || !ignore_api.is_id)) {
			library_namespace.debug('輸入的是問題頁面 title: ' + title, 2,
					'is_api_and_title');
			return false;
		}

		// test API_URL: {String}API_URL/language
		if (!API_URL) {
			if (typeof ignore_api === 'object') {
				library_namespace.debug('嘗試從 options[KEY_SESSION] 取得 API_URL。',
						2, 'is_api_and_title');
				// console.log(ignore_api);
				// console.log(API_URL_of_options(ignore_api));

				// ignore_api 當作原函數之 options。
				API_URL = API_URL_of_options(ignore_api);
				if (API_URL) {
					value[0] = API_URL;
				}
				// 接下來繼續檢查 API_URL。
			} else {
				return !!ignore_api;
			}
		}

		if (typeof API_URL !== 'string') {
			// 若是未設定 action[0]，則將在 wiki_API.query() 補設定。
			// 因此若為 undefined || null，此處先不回傳錯誤。
			return !API_URL;
		}

		// for property = [ {String}language, {String}title or {Array}titles ]
		if (type === 'language') {
			return PATTERN_PROJECT_CODE_i.test(API_URL);
		}

		// 處理 [ {String}API_URL/language, {String}title or {Object}page_data ]
		var metched = PATTERN_URL_prefix.test(API_URL);
		if (type === 'URL') {
			return metched;
		}

		// for key = [ {String}language, {String}title or {Array}titles ]
		// for id = [ {String}language/site, {String}title ]
		return metched || PATTERN_PROJECT_CODE_i.test(API_URL);
	}

	/**
	 * 規範化 title_parameter
	 * 
	 * setup [ {String}API_URL, title ]
	 * 
	 * @param {String|Array}title
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Array}action = [ {String}API_URL, {Search_parameters}parameters ]
	 * 
	 * @see api_URL
	 */
	function normalize_title_parameter(title, options) {
		options = library_namespace.setup_options(options);
		if (false && library_namespace.is_Set(title)) {
			title = Array.from(title);
		}
		var action = options.multi && Array.isArray(title)
				&& title.length === 2
				// 即便設定 options.multi，也不該有 /^https?:\/\/.+\.php/i 的標題。
				&& !/^https?:\/\/.+\.php$/.test(title[0])
				|| !is_api_and_title(title, true) ? [ , title ]
		// title.clone(): 不改變原 title。
		: Array.isArray(title) ? title.clone() : [];

		if (false && library_namespace.is_Set(action[1])) {
			action[1] = Array.from(action[1]);
		}
		if (options.slice_size >= 1) {
			// console.trace(action);
			if (Array.isArray(action[1])) {
				if (action[1].length > options.slice_size) {
					var titles_left = action[1].splice(options.slice_size,
							action[1].length);
					if (Array.isArray(options.titles_left)) {
						Array.prototype.unshift.apply(options.titles_left,
								titles_left);
					} else {
						if (options.titles_left) {
							throw new Error(
							// Warning:
							'normalize_title_parameter: Invalid usage: options.titles_left is not {Array}!');
							titles_left.push(options.titles_left);
						}
						options.titles_left = titles_left;
						library_namespace
								.warn('normalize_title_parameter: 將 title list 切分成 slice: '
										+ action[1].length
										+ ' + '
										+ options.titles_left.length + '。');
					}
				}
			} else if (!action[1] && Array.isArray(options.titles_left)) {
				action[1] = options.titles_left.splice(0, options.slice_size);
				library_namespace
						.log('normalize_title_parameter: 接續取得 title list slice: '
								+ action[1].length
								+ ' + '
								+ options.titles_left.length + '。');
			}
		}
		if (Array.isArray(options.titles_left)
				&& options.titles_left.length === 0) {
			delete options.titles_left;
		}

		// console.trace([ title, action ]);
		if (!is_api_and_title(action, false, options)) {
			// console.trace('normalize_title_parameter: Invalid title!');
			library_namespace.warn([ 'normalize_title_parameter: ', {
				// gettext_config:{"id":"invalid-title-$1"}
				T : [ 'Invalid title: %1',
				//
				wiki_API.title_link_of(title)
				//
				|| '(title: ' + JSON.stringify(title) + ')' ]
			} ]);
			// console.trace(JSON.stringify(title));
			return;
		}

		// 處理 [ {String}API_URL, title ]
		action[1] = wiki_API.query.title_param(action[1], true, options.is_id);

		if (options.redirects) {
			// 舊版毋須 '&redirects=1'，'&redirects' 即可。
			action[1].redirects = 1;
		}

		// console.trace(action);
		return action;
	}

	/**
	 * set / append additional parameters of MediaWiki API.
	 * 
	 * @param {Array}action
	 * @param {Object}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @inner
	 */
	function set_parameters(action, options) {
		if (!options.parameters) {
			return;
		}

		// Should use
		// `action = wiki_API.extract_parameters(options, action, true);`
		if (typeof action[1] === 'string' && !/^[a-z]+=/.test(action[1])) {
			library_namespace
					.warn('set_parameters: Did not set action! Will auto add "action=".');
			console.trace(action);
			action[1] = 'action=' + action[1];
		}
		// action[1] =
		// wiki_API.extract_parameters(options.parameters, action[1], true);
		action[1] = library_namespace.Search_parameters(action[1]);
		action[1].set_parameters(options.parameters);
	}

	// --------------------------------------------------------------------------------------------

	// 工具函數。

	// https://phabricator.wikimedia.org/rOPUP558bcc29adc3dd7dfebbc66c1bf88a54a8b09535#3ce6dc61
	// server:
	// (wikipedia|wikibooks|wikinews|wikiquote|wikisource|wikiversity|wikivoyage|wikidata|wikimediafoundation|wiktionary|mediawiki)

	// e.g., [[s:]], [[zh-classical:]], [[zh-min-nan:]], [[test2:]],
	// [[metawikipedia:]], [[betawikiversity:]]
	// @see [[m:Help:Interwiki linking#Project titles and shortcuts]],
	// [[:zh:Help:跨语言链接#出現在正文中的連結]]
	// https://www.wikidata.org/w/api.php?action=help&modules=wbsearchentities
	// 警告: 應配合 get_namespace.pattern 排除 'Talk', 'User', 'Help', 'File', ...
	var PATTERN_PROJECT_CODE = /^[a-z][a-z\d\-]{0,14}$/,
	// 須亦能匹配 site key:
	// https://www.wikidata.org/w/api.php?action=help&modules=wbgetentities
	PATTERN_PROJECT_CODE_i = new RegExp(PATTERN_PROJECT_CODE.source, 'i');

	// 可用來拆分 language, family。以防 incase wikt, wikisource
	// testwikidatawiki → [,testwikidata,wiki]
	// https://www.wikidata.org/w/api.php?action=help&modules=wbsearchentities
	// e.g., 'zh_min_nanwikibooks'
	// MariaDB [zhwiki_p]> SHOW DATABASES;
	// e.g., "wikimania2018wiki_p"
	// 2020/5 left:
	// ["centralauth_p","heartbeat_p","information_schema","information_schema_p","meta_p"]
	// [ all, language code, family ]
	var PATTERN_SITE = /^([a-z\d\_]{2,13})(wiki|wikibooks|wiktionary|wikiquote|wikisource|wikinews|wikiversity|wikivoyage|wikimedia)$/;

	/**
	 * Wikimedia projects 的 URL match pattern 匹配模式。
	 * 
	 * matched: [ 0: protocol + host name, 1: protocol, 2: host name,<br />
	 * 3: 第一 domain name (e.g., language code / project),<br />
	 * 4: 第二 domain name (e.g., family: 'wikipedia') ]
	 * 
	 * @deprecated using wiki_API.hostname_of_API_URL() or wiki_API.site_name()
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_PROJECT_CODE
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 */
	var PATTERN_wiki_project_URL = /^(https?:)?(?:\/\/)?(([a-z][a-z\d\-]{0,14})\.([a-z]+)+(?:\.[a-z]+)+)/i;

	// @see wiki_API.api_URL()
	function hostname_of_API_URL(API_URL) {
		if (!/\/api\.php$/.test(API_URL))
			return;
		var url = new library_namespace.URI(API_URL);
		return url && url.hostname;
	}

	/**
	 * Get the API URL of specified project.
	 * 
	 * project = language_code.family
	 * 
	 * @param {String}project
	 *            wiki project, domain or language. 指定維基百科語言/姊妹計劃<br />
	 *            e.g., 'en', 'en.wikisource'.
	 * 
	 * @returns {String}API URL
	 * 
	 * @see https://en.wikipedia.org/wiki/Wikipedia:Wikimedia_sister_projects
	 *      TODO:
	 *      https://zh.wikipedia.org/wiki/Wikipedia:%E5%A7%8A%E5%A6%B9%E8%AE%A1%E5%88%92#.E9.93.BE.E6.8E.A5.E5.9E.8B
	 */
	function api_URL(project, options) {
		if (!project) {
			var session = wiki_API.session_of_options(options);
			return session && session.API_URL || wiki_API.API_URL;
		}

		project = String(project);
		var lower_case = project.toLowerCase();
		if (lower_case in api_URL.alias) {
			project = api_URL.alias[lower_case];
		}
		library_namespace.debug('project: ' + project, 3, 'api_URL');
		// PATTERN_PROJECT_CODE_i.test(undefined) === true
		if (PATTERN_PROJECT_CODE_i.test(project)) {
			if (lower_case in api_URL.wikimedia) {
				project += '.wikimedia';
			} else if (lower_case in api_URL.family) {
				// (wiki_API.language || 'www') + '.' + project
				project = wiki_API.language + '.' + project;
			} else if (/wik[it]/i.test(project)) {
				// e.g., 'mediawiki' → 'www.mediawiki'
				// e.g., 'wikidata' → 'www.wikidata'
				project = 'www.' + project;
			} else {
				// e.g., 'en' → 'en.wikipedia' ({{SERVERNAME}})
				// e.g., 'zh-yue' → 'zh-yue.wikipedia', 'zh-classical'
				// e.g., 'test2' → 'test2.wikipedia' ({{SERVERNAME}})
				project += '.wikipedia';
			}
		}
		// @see PATTERN_PROJECT_CODE
		if (/^[a-z][a-z\d\-]{0,14}\.[a-z]+$/i.test(project)) {
			// e.g., 'en.wikisource', 'en.wiktionary'
			project += '.org';
		}

		// console.trace(wiki_API.API_URL);
		var url = new library_namespace.URI(project,
		//
		/:\/\//.test(wiki_API.API_URL) && wiki_API.API_URL);
		if (url && url.hostname) {
			// 先測試是否為自訂 API。
			return /\/api\.php$/.test(project) ? project
			// e.g., '//zh.wikipedia.org/'
			// e.g., 'https://www.mediawiki.org/w/api.php'
			// e.g., 'https://www.mediawiki.org/wiki/'
			: (url.protocol || api_URL.default_protocol || 'https:') + '//'
					+ url.hostname + '/w/api.php';
		}

		library_namespace.error('api_URL: Unknown project: [' + project
				+ ']! Using default API URL.');
		return wiki_API.API_URL;
	}

	// the key MUST in lower case!
	// @see https://www.wikimedia.org/
	// @see [[Special:Interwiki]] 跨維基資料 跨 wiki 字首
	api_URL.wikimedia = {
		meta : true,
		commons : true,
		species : true,
		incubator : true,

		// mul : true,
		phabricator : true,
		wikitech : true,
		// https://quarry.wmflabs.org/
		quarry : true,
		releases : true
	}
	// shortcut, namespace aliases.
	// the key MUST in lower case!
	// @see [[m:Help:Interwiki linking#Project titles and shortcuts]],
	// [[mw:Manual:InitialiseSettings.php]]
	// https://noc.wikimedia.org/conf/highlight.php?file=InitialiseSettings.php
	// [[:zh:Help:跨语言链接#出現在正文中的連結]]
	// @see [[Special:Interwiki]] 跨維基資料 跨 wiki 字首
	// @see two-letter project code shortcuts
	// [[m:Requests_for_comment/Set_short_project_namespace_aliases_by_default_globally]]

	api_URL.alias = {
		// project with language prefix
		// project: language.*.org
		w : 'wikipedia',
		n : 'wikinews',
		// 維基教科書
		b : 'wikibooks',
		q : 'wikiquote',
		s : 'wikisource',
		// 維基學院
		v : 'wikiversity',
		voy : 'wikivoyage',
		wikt : 'wiktionary',

		// project: *.wikimedia.org
		m : 'meta',
		// 這一項會自動判別語言。
		metawikipedia : 'meta',
		c : 'commons',
		wikispecies : 'species',
		phab : 'phabricator',
		download : 'releases',

		// project: www.*.org
		d : 'wikidata',
		mw : 'mediawiki',
		wmf : 'wikimedia',

		betawikiversity : 'beta.wikiversity'
	};
	// families must with language prefix
	// the key MUST in lower case!
	api_URL.family = 'wikipedia|wikibooks|wikinews|wikiquote|wikisource|wikiversity|wikivoyage|wiktionary'
			.split('|').to_hash();

	// api_URL.shortcut_of_project[project] = alias
	api_URL.shortcut_of_project = Object.create(null);
	Object.keys(api_URL.alias).forEach(function(shortcut) {
		api_URL.shortcut_of_project[api_URL.alias[shortcut]] = shortcut;
	});

	/**
	 * setup API URL.
	 * 
	 * @param {wiki_API}session
	 *            正作業中之 wiki_API instance。
	 * @param {String}[API_URL]
	 *            language code or API URL of MediaWiki project
	 * 
	 * @inner
	 */
	function setup_API_URL(session, API_URL) {
		library_namespace.debug('API_URL: ' + API_URL + ', default language: '
				+ wiki_API.language, 3, 'setup_API_URL');
		// console.log(session);
		// console.trace(wiki_API.language);
		if (API_URL === true) {
			// force to login.
			API_URL = session.API_URL || wiki_API.API_URL;
		}

		if (API_URL && typeof API_URL === 'string'
		// && wiki_API.is_wiki_API(session)
		) {
			session.API_URL = api_URL(API_URL);
			// remove cache
			delete session.last_page;
			delete session[KEY_HOST_SESSION];
			// force to login again: see wiki_API.login
			// 據測試，不同 projects 間之 token 不能通用。
			delete session.token.csrftoken;
			delete session.token.lgtoken;
			// library_namespace.set_debug(6);

			if (library_namespace.platform.nodejs) {
				// 初始化 agent。
				// create and keep a new agent. 維持一個獨立的 agent。
				// 以不同 agent 應對不同 host。
				var agent = library_namespace.application.net
				//
				.Ajax.setup_node_net(session.API_URL);
				session.get_URL_options = {
					// start_time : Date.now(),
					// API_URL : session.API_URL,
					agent : agent
				};
				if (false) {
					// set User-Agent to use:
					// Special:ApiFeatureUsage&wpagent=CeJS script_name
					wiki.get_URL_options.headers['User-Agent'] = library_namespace.get_URL.default_user_agent;
				}
			} else {
				// e.g., using XMLHttpRequest @ WWW
				session.get_URL_options = {};
			}

		}

		// TODO: 這只是簡陋的判別方法。
		var matched = wiki_API.site_name(session, {
			get_all_properties : true
		});
		// console.trace(matched);
		if (matched && (matched.family in api_URL.family)) {
			// e.g., "wikipedia"
			session.family = matched.family;
		}
	}

	// @see set_default_language(), language_to_site_name()
	function setup_API_language(session, language_code) {
		if (!language_code || typeof language_code !== 'string')
			return;

		language_code = language_code.toLowerCase();
		var site_name = wiki_API.site_name(language_code,
				add_session_to_options(session, {
					get_all_properties : true
				}));
		if (site_name && site_name.language
				&& site_name.language !== 'multilingual') {
			// e.g., API_URL=zh.wiktionary
			language_code = site_name.language;
		}

		if (PATTERN_PROJECT_CODE_i.test(language_code)
				// 不包括 test2.wikipedia.org 之類。
				&& !/^test|wik[it]/i.test(language_code)
				// 排除 'Talk', 'User', 'Help', 'File', ...
				&& !(session.configurations.namespace_pattern || get_namespace.pattern)
						.test(language_code)) {
			if (language_code === 'simple') {
				session.first_damain_name = language_code;
				// [[w:en:Basic English]]
				// language_code = 'en-basiceng';
				language_code = 'en';
			} else if (language_code in wiki_API.language_code_to_site_alias) {
				// e.g., 'cmn'
				language_code = wiki_API.language_code_to_site_alias[language_code];
			}

			// [[m:List of Wikipedias]]
			session.language
			// e.g., 'zh-classical', 'zh-yue', 'zh-min-nan'
			= language_code;
			site_name = wiki_API.site_name(session, {
				get_all_properties : true
			});
			// console.trace([ language_code, site_name ]);
			if (site_name.language === 'multilingual'
			// e.g., language_code === 'commons'
			&& language_code === site_name.project) {
				// default: English
				session.language = 'en';
			}
			site_name = site_name.site;
			var time_interval_config = wiki_API.query.edit_time_interval;
			// apply local lag interval rule.
			if (!(session.edit_time_interval >= 0)
					&& ((site_name in time_interval_config) || (language_code in time_interval_config))) {
				session.edit_time_interval = time_interval_config[site_name]
						|| time_interval_config[language_code];
				library_namespace.debug('Use interval '
						+ session.edit_time_interval + ' for language '
						+ language_code, 1, 'setup_API_language');
			}
		}
	}

	// --------------------------------------------------------------------------------------------

	// @inner
	function get_first_domain_name_of_session(session) {
		var first_damain_name;
		if (session) {
			first_damain_name =
			// e.g., 'simple'
			session.first_damain_name
			// assert: typeof session.API_URL === 'string'
			// 注意:在取得 page 後，中途更改過 API_URL 的話，session.language 會取得錯誤的資訊！
			|| session.language
			// 應該採用來自宿主 host session 的 language. @see setup_data_session()
			|| get_first_domain_name_of_session(session[KEY_HOST_SESSION]);
		}
		return first_damain_name;
	}

	// [[en:Help:Interwikimedia_links]] [[Special:Interwiki]]
	// https://zh.wikipedia.org/wiki/Special:GoToInterwiki/testwiki:
	// TODO: link prefix: e.g., 'zh:n:' for zh.wikinews
	// [[:phab:T102533]]
	// [[:gerrit:gitweb?p=mediawiki/core.git;a=blob;f=RELEASE-NOTES-1.23]]

	/**
	 * language code → Wikidata site code / Wikidata site name / Wikimedia
	 * project name. get_project()<br />
	 * 將語言代碼轉為 Wikidata API 可使用之 site name。 [[yue:]] → zh-yue → zh_yuewiki。 亦可自
	 * options 取得 wikidata API 所須之 site parameter。
	 * 
	 * @example<code>

	// e.g., 'enwiki', 'zhwiki', 'enwikinews'
	CeL.wiki.site_name(wiki)

	</code>
	 * 
	 * @param {String|wiki_API}language
	 *            語言代碼。 language / family / project code / session. default
	 *            language: wiki_API.language e.g., 'en', 'zh-classical', 'ja',
	 *            ...
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項<br />
	 *            options.get_all_properties: return
	 *            {language,family,site,API_URL}
	 * 
	 * @returns {String}wiki_project, Wikidata API 可使用之 site name parameter。
	 * 
	 * @see mediaWiki.config.get('wgWikiID')
	 *      https://www.mediawiki.org/wiki/ResourceLoader/Core_modules#mediaWiki.config
	 * @see set_default_language()
	 * @see [[:en:Help:Interwiki linking#Project titles and shortcuts]],
	 *      [[:zh:Help:跨语言链接#出現在正文中的連結]]
	 * @see [[meta:List of Wikimedia projects by size]]
	 * @see [[m:List of Wikipedias]] IETF language tag language code for
	 *      gettext()
	 * @see https://www.wikidata.org/w/api.php?action=help&modules=wbgetentities
	 * 
	 * @since 2017/9/4 20:57:8 整合原先的 language_to_project(),
	 *        language_to_site_name()
	 */
	function language_to_site_name(language, options) {
		// console.trace(language);
		var session;

		// 擷取出維基姊妹項目各種 type: 先要能擷取出 language code + family
		// types: 'API', 'db', 'site', 'link', 'dump', ...

		// 不能保證 wiki_API.is_wiki_API(language) → is_Object(language)，
		// 因此使用 typeof。
		if (language && typeof language === 'object') {
			// treat language as options with session.
			session = wiki_API.session_of_options(language);
			// options.language 較 session 的設定優先。
			// language.language
			language = get_first_domain_name_of_session(language)
			// wikidata 沒有 session.language，會用
			// session[KEY_HOST_SESSION].language。
			|| get_first_domain_name_of_session(session)
			// || language
			;
			if (false && typeof language === 'object')
				console.trace(language);
		}
		// console.log(session);
		// console.trace(session.family);

		/**
		 * Wikimedia project / family. e.g., wikipedia, wikinews, wiktionary.
		 * assert: family && /^wik[it][a-z]{0,9}$/.test(family)
		 * 
		 * @type {String}
		 */
		var family;
		/** {wiki_API}in what wiki session */
		var in_session;

		if (typeof options === 'string') {
			// shift arguments
			family = options;
			options = null;
		} else {
			in_session = wiki_API.session_of_options(options);
			family = options && options.family;
		}
		// console.trace(language);

		var page_name;
		var matched = typeof language === 'string' && !language.includes('://')
				&& language.match(/^[:\s]*(\w+):(?:(\w+):)?(.*)/);
		if (matched) {
			matched.family = api_URL.alias[matched[1]];
			page_name = matched[3];
			if (matched.family) {
				if (matched[2]) {
					// e.g., "n:zh:title"
					language = matched[2];
				} else {
					// e.g., "n:", "n:zh", "n:title"
					language = matched[3];
				}
			} else if (matched.family = api_URL.alias[matched[2]]) {
				// e.g., "zh:n:title"
				language = matched[1];
			} else {
				// e.g., "zh:title"
				language = matched[1];
			}
			family = family || matched.family;
		}
		// console.trace(language);

		matched = wiki_API.namespace(language, options);
		// console.trace([ matched, language ]);
		if (matched && !isNaN(matched)
		//
		&& (matched !== wiki_API.namespace.hash.project
		// e.g., 'wikidata'
		|| language.trim().toLowerCase() === 'project')) {
			// e.g., input "language" of [[Category:title]]
			// 光是只有 "Category"，代表還是在本 wiki 中，不算外語言。
			language = null;
		}
		// console.trace(language);
		// console.trace(in_session);
		// 正規化。
		language = String(language
		// || in_session && in_session.language
		|| get_first_domain_name_of_session(in_session)
		// else use default language
		// 警告: 若是沒有輸入，則會直接回傳預設的語言。因此您或許需要先檢測是不是設定了 language。
		|| wiki_API.language).trim().toLowerCase()
		// zh_yue → zh-yue
		.replace(/[_ ]/g, '-');
		// console.trace(language);

		var API_URL;

		var interwiki_pattern = in_session && in_session.configurations
				&& in_session.configurations.interwiki_pattern;
		var interwikimap = library_namespace.is_RegExp(interwiki_pattern)
				&& in_session.latest_site_configurations
				&& in_session.latest_site_configurations.interwikimap;
		// console.trace([ interwiki_pattern, interwikimap ]);
		if (Array.isArray(interwikimap)) {
			matched = language.match(interwiki_pattern);
			if (matched && interwikimap.some(function(map) {
				if (map.prefix === matched[1]) {
					// console.log(map);
					// API_URL = map.url;
					return matched = map
					//
					.url.replace(/\/wiki\/\$1/, '/w/api.php')
					//
					.replace(/\$1/, '');
				}
			})) {
				language = matched;
			}
		} else if (language in language_code_to_site_alias) {
			// e.g., 'lzh' → 'zh-classical'
			language = language_code_to_site_alias[language];
		} else if (!family && session && !session.family
				&& !session[KEY_HOST_SESSION] && session.API_URL) {
			// e.g., API_URL: 'https://zh.moegirl.org.cn/api.php'
			// console.trace([ language, family ]);
			language = session.API_URL;
		}

		var site, project,
		// 是為猜測的語言。
		is_guessing_language;
		matched = language
		// e.g., 'zh-min-nan' → 'zh_min_nan'
		.replace(/-/g, '_')
		// 'zhwikinews' → zh.wikinews
		.match(PATTERN_SITE);
		if (matched) {
			language = matched[1];
			family = family || matched[2];

		} else if (matched = language.match(/^[a-z\d\-]{2,13}$/)) {
			// e.g., 'zh-classical', 'zh-min-nan'
			language = matched[0];
			if (language === 'wikidata') {
				family = language;
				language = 'www';
			}
			// console.trace([ language, family ]);

		} else if (matched = wiki_API.hostname_of_API_URL(language)) {
			// treat language as API_URL.
			API_URL = language;
			// console.trace(matched);
			// console.trace(session);
			library_namespace.debug(language, 4, 'language_to_site_name');
			if (library_namespace.is_IP(matched)) {
				// We cannot get information from IP.
				matched = [ matched.replace(/\./g, '_') ];
			} else {
				matched = matched.split('.');
				if (matched.length === 2) {
					// e.g., "lingualibre.org"
					matched.unshift('');
				}
			}
			/**
			 * 去掉 '.org' 之類。 language-code.wikipedia.org e.g.,
			 * zh-classical.wikipedia.org
			 */
			family = family || matched[1];
			// incase 'https://test.wikidata.org/w/api.php'
			language = !/^test|wik[it]/i.test(matched[0]) && matched[0];
			if (!language) {
				is_guessing_language = true;
				language = wiki_API.language;
			}

		} else if (matched = language.match(/^([a-z\d\-_]+)\.([a-z\d\-_]+)/)) {
			language = matched[1];
			family = family || matched[2];

		} else {
			library_namespace.error('language_to_site_name: Invalid language: '
					+ language);
			if (false) {
				console.trace([ language,
						wiki_API.hostname_of_API_URL(language), session,
						in_session ]);
			}
		}

		// console.trace(family);
		family = family || session && session.family || in_session
				&& in_session.family;
		// console.trace(family);
		if (!family || family === 'wiki')
			family = 'wikipedia';

		API_URL = API_URL || session && session.API_URL
				|| api_URL(language + '.' + family);
		// console.trace(API_URL);

		if (family === 'wikidata') {
			// wikidatawiki_p
			site = family + 'wiki';
		} else if (family === 'wikimedia' && language === 'en'
		//
		|| (site = API_URL.match(/\/\/([\w]+)\./))
		// e.g., API_URL === 'https://test.wikipedia.org/w/api.php'
		&& /^test/i.test(site = site[1])) {
			// e.g., @ console @ https://commons.wikimedia.org/
			project = site;
			// assert: (project in wiki_API.api_URL.wikimedia)

			// 'commonswiki'
			site += 'wiki';
		} else {
			site = is_guessing_language ? '' : language.toLowerCase().replace(
					/-/g, '_');
			// e.g., 'zh' + 'wikinews' → 'zhwikinews'
			site += (family === 'wikipedia'
			// using "commonswiki" instead of "commonswikimedia"
			|| (language in wiki_API.api_URL.wikimedia) ? 'wiki' : family);
		}
		// console.trace(site);
		library_namespace.debug(site, 3, 'language_to_site_name');

		project = project || language === 'www' ? family
				: language in wiki_API.api_URL.wikimedia ? language : null;
		if (project) {
			// e.g., get from API_URL
			// wikidata, commons: multilingual
			language = 'multilingual';
		} else {
			project = is_guessing_language ? family : language + '.' + family;
		}

		// throw site;
		if (options && options.get_all_properties) {
			var family_prefix = wiki_API.api_URL.shortcut_of_project[family];
			// for API_URL==="https://lingualibre.org/api.php",
			// is_guessing_language=true && family_prefix===undefined
			site = {
				// en, zh
				language : language,
				is_guessing_language : is_guessing_language,
				// family: 'wikipedia' (default), 'wikimedia',
				// wikibooks|wiktionary|wikiquote|wikisource|wikinews|wikiversity|wikivoyage
				family : family,
				family_prefix : family_prefix,
				// interwikimap prefix. 在像是 https://lingualibre.org/ 的情況下不設定
				interwiki_prefix : (is_guessing_language ? undefined
						: (family_prefix || family) + ':' + language + ':'),
				// Wikimedia project name: wikidata, commons, zh.wikipedia
				project : project,

				// wikidata API 所須之 site name parameter。 wikiID
				// site_namewiki for Wikidata API. e.g., zh-classical →
				// zh_classicalwiki

				// for database: e.g., zh-classical → zh_classicalwiki_p
				// e.g., 'zhwiki'. `.wikiid` @ siteinfo

				// Also for dump: e.g., 'zhwikinews'
				// https://dumps.wikimedia.org/backup-index.html

				// @see wikidatawiki_p.wb_items_per_site.ips_site_id
				// wikidatawiki, commonswiki, zhwiki
				site : site,
				// API URL (default): e.g.,
				// https://en.wikipedia.org/w/api.php
				// https://www.wikidata.org/w/api.php
				API_URL : API_URL
			};

			if (session && session.configurations
			// e.g., for Fandom sites
			&& session.configurations.sitename) {
				site.sitename = session.configurations.sitename;
			}
			if (session && session.site_name) {
				site.site_name = session.site_name;
			}

			var project = session && session.latest_site_configurations
					&& session.latest_site_configurations.general.wikiid;
			if (project) {
				site.wikiid = project;
			}
			if (page_name) {
				site.page_name = page_name;
			}
		}

		// assert: {String}site
		return session && session.site_name || site;
	}

	// --------------------------------------------------------------------------------------------

	/**
	 * get NO of namespace
	 * 
	 * @param {String|Integer}namespace
	 *            namespace or page title
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Integer|String|Undefined}namespace NO.
	 */
	function get_namespace(namespace, options) {
		options = library_namespace.setup_options(options);
		var is_page_title = options.is_page_title;
		if (wiki_API.is_page_data(namespace)) {
			namespace = namespace.title;
			is_page_title = true;
		}
		if (!is_page_title && (namespace == Math.floor(namespace))) {
			if (options.get_name) {
				// e.g., `wiki.namespace(NS_Category, {get_name: true});`
				namespace = String(namespace);
			} else {
				// {Integer}namespace
				return namespace;
			}
		}
		var session = session_of_options(options);
		var namespace_hash = options.namespace_hash || session
				&& session.configurations.namespace_hash || get_namespace.hash;

		if (Array.isArray(namespace)) {
			namespace = namespace.join('|');
		}

		// console.log(namespace);
		if (typeof namespace === 'string') {
			var list = [];
			// e.g., 'User_talk' → 'User talk'
			namespace = namespace.replace(/[\s_]+/g, ' ');
			(is_page_title ? [ namespace.toLowerCase() ]
			//
			: namespace.toLowerCase()
			// for ',Template,Category', ';Template;Category',
			// 'main|file|module|template|category|help|portal|プロジェクト'
			// https://www.mediawiki.org/w/api.php?action=help&modules=main#main.2Fdatatypes
			.split(/(?:[,;|\u001F]|%7C|%1F)/)).forEach(function(n) {
				if (is_page_title && n.startsWith(':')) {
					// e.g., [[:title]]
					n = n.slice(1);
				}
				// get namespace `_n` only.
				// e.g., 'wikipedia:sandbox' → 'wikipedia'
				var _n = n.replace(/:.*$/, '').trim();
				if (!_n) {
					// _n === ''
					list.push(0);
					return;
				}
				if (!is_page_title && (!isNaN(_n)
				// 要指定所有值，請使用*。 To specify all values, use *.
				|| _n === '*')) {
					// {Integer}_n
					list.push(_n);
					return;
				}
				if (_n in namespace_hash) {
					list.push(namespace_hash[_n]);
					return;
				}
				if (is_page_title) {
					list.push(0);
					return;
				}
				if (namespace_hash === get_namespace.hash) {
					// console.trace(namespace);
					library_namespace.debug('Invalid namespace: ['
					//
					+ n + '] @ namespace list ' + namespace,
					//
					1, 'get_namespace');
					// console.trace(arguments);
				} else {
					list.push(is_page_title === false
					// is_page_title === false 亦即
					// options.is_namespace === true
					&& _n !== 'main' ? undefined : 0);
				}
			});
			if (list.length === 0) {
				return;
			}
			// list.sort().unique_sorted().join('|');
			list = list.unique();
			if (options.get_name) {
				var name_of_NO = options.name_of_NO || session
						&& session.configurations.name_of_NO
						|| get_namespace.name_of_NO;
				list = list.map(function(namespace_NO) {
					return namespace_NO in name_of_NO
					//
					? name_of_NO[namespace_NO] : namespace_NO;
				});
			}
			return list.length === 1 ? list[0] : list.join('|');
		}

		if (namespace) {
			library_namespace.warn('get_namespace: Invalid namespace: ['
					+ namespace + ']');
			// console.trace(arguments);
		}
		return;
	}

	/**
	 * The namespace number of the page. 列舉型別 (enumeration)
	 * 
	 * assert: 正規名稱必須擺在最後一個，供 function namespace_text_of_NO() 使用。
	 * 
	 * CeL.wiki.namespace.hash
	 * 
	 * {{NAMESPACENUMBER:{{FULLPAGENAME}}}}
	 * 
	 * @type {Object}
	 * 
	 * @see https://en.wikipedia.org/wiki/Wikipedia:Namespace
	 */
	get_namespace.hash = {
		// Virtual namespaces
		media : -2,
		special : -1,

		// 0: (Main/Article) main namespace 主要(條目內容/內文)命名空間/識別領域
		// 條目 条目 entry 文章 article: ns = 0, 頁面 page: ns = any. 章節/段落 section
		main : 0,
		'' : 0,
		// 討論對話頁面
		talk : 1,

		// 使用者頁面
		user : 2,
		'user talk' : 3,

		// ----------------------------

		// NS_PROJECT
		// the project namespace for matters about the project
		// Varies between wikis
		project : 4,

		// https://meta.wikimedia.org/wiki/Requests_for_comment/Set_short_project_namespace_aliases_by_default_globally
		// [[w:ja:Wikipedia:バグの報告#WPショートカットが機能しない]]
		// [[phab:rOMWCa30603ab09d162fd30ff4081f85054df81a0ae49]]
		// https://noc.wikimedia.org/conf/highlight.php?file=InitialiseSettings.php
		wp : 4,
		wb : 4,
		wv : 4,
		ws : 4,
		wn : 4,
		wq : 4,
		wt : 4,

		// WD : 4,
		wikidata : 4,
		// [[commons:title]] @ enwiki 會造成混亂
		// commons : 4,
		// COM : 4,

		// https://en.wikinews.org/wiki/Help:Namespace
		// WN : 4,
		wikinews : 4,

		// WP : 4,
		// 正規名稱必須擺在最後一個，供 function namespace_text_of_NO() 使用。
		wikipedia : 4,

		// ----------------------------

		// Varies between wikis
		'project talk' : 5,
		// 正規名稱必須擺在最後一個，供 function namespace_text_of_NO() 使用。
		'wikipedia talk' : 5,

		// image
		file : 6,
		'file talk' : 7,
		// [[MediaWiki:title]]
		mediawiki : 8,
		'mediawiki talk' : 9,
		// 模板
		template : 10,
		'template talk' : 11,
		// [[Help:title]], [[使用說明:title]]
		// H : 12,
		// 正規名稱必須擺在最後一個，供 function namespace_text_of_NO() 使用。
		help : 12,
		'help talk' : 13,
		// https://commons.wikimedia.org/wiki/Commons:Administrators%27_noticeboard#Cleaning_up_after_creation_of_CAT:_namespace_redirect
		// CAT : 14,
		// 正規名稱必須擺在最後一個，供 function namespace_text_of_NO() 使用。
		category : 14,
		'category talk' : 15,

		// 主題/主題首頁
		portal : 100,
		// 主題討論
		'portal talk' : 101,
		book : 108,
		'book talk' : 109,
		draft : 118,
		'draft talk' : 119,
		// Education Program
		'education program' : 446,
		// Education Program talk
		'education program talk' : 447,
		// TimedText
		timedtext : 710,
		// TimedText talk
		'timedtext talk' : 711,
		// 模块 模塊 模組
		module : 828,
		'module talk' : 829,
		// Gadget
		gadget : 2300,
		'gadget talk' : 2301,
		// Gadget definition
		'gadget definition' : 2302,
		'gadget definition talk' : 2303,
		// 話題 The Flow namespace (prefix Topic:)
		topic : 2600
	};

	// Should use `CeL.wiki.namespace.name_of(NS, session)`
	// NOT `wiki_API.namespace.name_of_NO[NS]`
	get_namespace.name_of_NO = [];

	/**
	 * build session.configurations.namespace_pattern || get_namespace.pattern
	 * 
	 * @inner
	 */
	function generate_namespace_pattern(namespace_hash, name_of_NO) {
		var source = [];
		for ( var namespace in namespace_hash) {
			name_of_NO[namespace_hash[namespace]] = upper_case_initial(
					namespace)
			// [[Mediawiki talk:]] → [[MediaWiki talk:]]
			.replace(/^Mediawiki/, 'MediaWiki');
			if (namespace)
				source.push(namespace);
		}

		// namespace_pattern matched: [ , namespace, title ]
		return new RegExp('^(' + source.join('|').replace(/ /g, '[ _]')
				+ '):(.+)$', 'i');
	}
	get_namespace.pattern = generate_namespace_pattern(get_namespace.hash,
			get_namespace.name_of_NO);
	// console.log(get_namespace.pattern);

	function namespace_text_of_NO(NS, options) {
		if (!NS)
			return '';

		var session = session_of_options(options);
		if (NS === session && session.configurations.namespace_hash ? session.configurations.namespace_hash.wikipedia
				: get_namespace.hash.wikipedia) {
			if (session && session.family) {
				return wiki_API.upper_case_initial(
				// e.g., commons, wikidata
				get_wikimedia_project_name(session) || session.family);
			}
			// e.g., testwiki:
			return 'Wikipedia';
		}

		var name_of_NO = session && session.configurations.name_of_NO
				|| wiki_API.namespace.name_of_NO;
		return wiki_API.upper_case_initial(name_of_NO[NS]);
	}

	// CeL.wiki.namespace.name_of(NS, session)
	get_namespace.name_of = namespace_text_of_NO;

	/**
	 * remove namespace part of the title. 剝離 namespace。
	 * 
	 * wiki.remove_namespace(), wiki_API.remove_namespace()
	 * 
	 * TODO: wiki.remove_namespace(page, only_remove_this_namespace)
	 * 
	 * @param {String}page_title
	 *            page title 頁面標題。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String}title without namespace
	 */
	function remove_page_title_namespace(page_title, options) {
		page_title = wiki_API.normalize_title(page_title, options);
		if (typeof page_title !== 'string') {
			library_namespace.debug(page_title, 5,
					'remove_page_title_namespace');
			return page_title;
		}
		var session = session_of_options(options);
		var namespace_pattern = session
				&& session.configurations.namespace_pattern
				|| get_namespace.pattern;
		var matched = page_title.match(namespace_pattern);
		library_namespace.debug('Test ' + wiki_API.title_link_of(page_title)
				+ ', get [' + matched + '] using pattern ' + namespace_pattern,
				4, 'remove_page_title_namespace');
		if (matched) {
			// namespace_pattern matched: [ , namespace, title ]
			return (matched ? matched[2] : page_title).trim();
			// do not normalize page title.
		}
		// Leave untouched
		return page_title;
	}

	function namespace_of_options(options) {
		// 必須預防 {Object}options。
		var namespace = !options ? 0 : typeof options === 'number' ? options
				: typeof options === 'string' ? library_namespace
						.is_digits(options) ? +options : options
						: options.namespace;
		return namespace;
	}

	// TODO: is_namespace(page_title, 'Wikipedia|User')
	function page_title_is_namespace(page_title, options) {
		var namespace = namespace_of_options(options);
		var page_ns;
		if (wiki_API.is_page_data(page_title)) {
			page_ns = page_title.ns;
		} else {
			page_title = wiki_API.normalize_title(page_title, options);
			page_ns = get_namespace(page_title, Object.assign({
				// for wiki_API.namespace()
				is_page_title : true
			}, options));
		}
		return page_ns === get_namespace(namespace, Object.assign({
			is_page_title : false
		}, options));
	}

	function convert_page_title_to_namespace(page_title, options) {
		var namespace = namespace_of_options(options);
		namespace = get_namespace(namespace, Object.assign({
			get_name : true
		}, options)) + ':';

		page_title = wiki_API.normalize_title(page_title, options);
		// console.trace(page_title);

		function to_namespace(page_title) {
			return namespace + remove_page_title_namespace(page_title, options);
		}

		if (Array.isArray(page_title)) {
			return page_title.map(to_namespace);
		}
		return to_namespace(page_title);
	}

	// ------------------------------------------

	function is_talk_namespace(namespace, options) {
		// wiki_API.is_page_data(namespace, options) ||
		// wiki_API.is_Page(namespace)
		if (typeof namespace === 'object') {
			namespace = namespace.ns >= 0 ? namespace.ns : namespace.title;
		}

		if (typeof namespace === 'string') {
			namespace = wiki_API.normalize_title(namespace, options)
					.toLowerCase();
			var session = session_of_options(options);
			var name_of_NO = session && session.configurations.name_of_NO
					|| wiki_API.namespace.name_of_NO;
			if (session) {
				// assert: {Number|Undefined}namespace
				namespace = wiki_API.namespace(namespace, options);
			} else {
				// treat ((namespace)) as page title
				// get namespace only. e.g., 'wikipedia:sandbox' → 'wikipedia'
				if (namespace.includes(':')) {
					// get namespace only, remove page title
					var _namespace = namespace.replace(/:.*$/, '');
					if (_namespace in name_of_NO)
						namespace = name_of_NO[_namespace];
					else
						return PATTERN_talk_prefix.test(namespace)
								|| PATTERN_talk_namespace_prefix
										.test(namespace);
				}
				namespace = +namespace;
			}
		}

		if (typeof namespace === 'number') {
			// 單數: talk page
			return namespace > 0 && namespace % 2 === 1;
		}
	}

	// 討論頁面不應包含 [[Special talk:*]]。
	function to_talk_page(page_title, options) {
		options = Object.assign({
			// for wiki_API.namespace()
			is_page_title : true
		}, options);
		// console.log(options);
		var session = session_of_options(options), namespace;
		if (wiki_API.is_page_data(page_title)) {
			// assert: {Number}namespace
			namespace = page_title.ns;
			page_title = wiki_API.title_of(page_title);

		} else {
			page_title = wiki_API.normalize_title(page_title, options);
			if (!session) {
				// 模組|模塊|模块 → Module talk
				if (/^(Special|特殊|特別|Media|媒體|媒体|メディア|Topic|話題|话题):/i
						.test(page_title)) {
					// There is no talk page for Topic or virtual namespaces.
					return;
				}

				// for zhwiki only. But you should use session.to_talk_page() !
				page_title = page_title.replace(/^(?:模組|模塊|模块):/i, 'Module:');
			}
			// assert: {Number|Undefined}namespace
			namespace = wiki_API.namespace(page_title, options);
		}
		// console.log([ namespace, page_title ]);

		if (!page_title || typeof page_title !== 'string' || namespace < 0)
			return;

		// console.log([ namespace, page_title ]);
		if (is_talk_namespace(namespace, options)) {
			library_namespace.debug('Is already talk page: ' + page_title, 3,
					'to_talk_page');
			return page_title;
		}

		var name_of_NO = session && session.configurations.name_of_NO
				|| wiki_API.namespace.name_of_NO;
		if (namespace >= 0) {
			namespace = name_of_NO[namespace + 1];
			if (!namespace)
				return;
			// 剝離 namespace。
			page_title = wiki_API.remove_namespace(page_title, options);
			page_title = namespace + ':' + page_title;
			if (name_of_NO === wiki_API.namespace.name_of_NO) {
				page_title = wiki_API.normalize_title(page_title, options);
			}
			return page_title;
		}

		// assert: namespace === undefined

		var matched = page_title
				.match(/^([^\[\]\|{}<>\n#�:]+):(\S.*)$/ && /^([a-z_ ]+):(.+)$/i);
		// console.log([matched,page_title]);
		if (!matched
				|| /^[a-z _]+$/i.test(namespace = matched[1])
				&& isNaN(get_namespace(namespace, add_session_to_options(
						session, options)))) {
			// assert: main page (namespace: 0)
			return 'Talk:' + page_title;
		}

		return namespace + ' talk:' + matched[2];
	}

	var PATTERN_talk_prefix = /^(?:Talk|討論|讨论|ノート|토론):/i;
	var PATTERN_talk_namespace_prefix = /^([a-z _]+)(?:[ _]talk|討論|讨论|‐ノート|토론):/i;
	function talk_page_to_main(page_title, options) {
		options = Object.assign({
			// for wiki_API.namespace()
			is_page_title : true
		}, options);
		var namespace;
		if (wiki_API.is_page_data(page_title)) {
			// assert: {Number}namespace
			namespace = page_title.ns;
			page_title = wiki_API.title_of(page_title);

		} else {
			page_title = wiki_API.normalize_title(page_title, options);
			// assert: {Number|Undefined}namespace
			namespace = wiki_API.namespace(page_title, options);
		}

		if (!page_title || typeof page_title !== 'string')
			return page_title;

		if (namespace <= 0 || namespace % 2 === 0) {
			library_namespace.debug('Is already NOT talk page: ' + page_title,
					3, 'to_talk_page');
			return page_title;
		}

		var session = session_of_options(options);
		var name_of_NO = session && session.configurations.name_of_NO
				|| wiki_API.namespace.name_of_NO;
		if (namespace > 0) {
			namespace = name_of_NO[namespace - 1];
			// 剝離 namespace。
			page_title = wiki_API.remove_namespace(page_title, options);
			if (namespace) {
				page_title = namespace + ':' + page_title;
				if (name_of_NO === wiki_API.namespace.name_of_NO) {
					page_title = wiki_API.normalize_title(page_title, options);
				}
			}
			return page_title;
		}

		// assert: namespace === undefined

		if (PATTERN_talk_prefix.test(page_title))
			return page_title.replace(PATTERN_talk_prefix, '');

		if (PATTERN_talk_namespace_prefix.test(page_title)) {
			return page_title.replace(PATTERN_talk_namespace_prefix, '$1:');
		}

		return page_title;
	}

	// ------------------------------------------------------------------------

	// wikitext to plain text
	// CeL.wiki.plain_text(wikitext)
	// @seealso function get_label(html) @ work_crawler.js
	function wikitext_to_plain_text(wikitext) {
		if (!wikitext || !(wikitext = wikitext.trim())) {
			// 一般 template 中之 parameter 常有設定空值的狀況，因此首先篩選以加快速度。
			return wikitext;
		}
		// TODO: "《茶花女》维基百科词条'''(法语)'''"
		wikitext = wikitext
		// 去除註解 comments。
		// e.g., "親会社<!-- リダイレクト先の「[[子会社]]」は、[[:en:Subsidiary]] とリンク -->"
		// "ロイ・トーマス<!-- 曖昧さ回避ページ -->"
		.replace(/<\!--[\s\S]*?-->/g, '')
		// 沒先處理的話，也會去除 <br />
		.replace(/\s*<br(?:[^\w<>][^<>]*)?>/ig, '\n').replace(
				/<\/?[a-z][^>]*>/g, '')
		// "{{=}}" → "="
		.replace(/{{=\s*}}/ig, '=')
		// e.g., remove "{{En icon}}"
		.replace(/{{[a-z\s]+}}/ig, '')
		// e.g., "[[link]]" → "link"
		// 警告：應處理 "[[ [[link]] ]]" → "[[ link ]]" 之特殊情況
		// 警告：應處理 "[[text | [[ link ]] ]]", "[[ link | a[1] ]]" 之特殊情況
		.replace(
				PATTERN_wikilink_global,
				function(all_link, page_and_anchor, page_name, section_title,
						displayed_text) {
					return displayed_text || page_and_anchor;
				})
		// e.g., "ABC (英文)" → "ABC "
		// e.g., "ABC （英文）" → "ABC "
		.replace(/[(（][英中日德法西義韓諺俄独原][語语國国]?文?[名字]?[）)]/g, '')
		// e.g., "'''''title'''''" → " title "
		// .remove_head_tail(): function remove_head_tail() @ CeL.data.native
		.remove_head_tail("'''", 0, ' ').remove_head_tail("''", 0, ' ')
		// 有時因為原先的文本有誤，還是會有 ''' 之類的東西留下來。
		.replace(/'{2,}/g, ' ').trim()
		// 此處之 space 應為中間之空白。
		.replace(/\s{2,}/g, function(space) {
			// trim tail
			return space.replace(/[^\n]{2,}/g, ' ')
			// 避免連\n都被刪掉。
			// /[^\n]+\n/ or /.*[\r\n]+/: /./.test('\r') === false
			.replace(/[\s\S]+\n/g, '\n').replace(/\n{3,}/g, '\n\n');
		}).replace(/[(（] /g, '(').replace(/ [）)]/g, ')');

		return wikitext;
	}

	// ------------------------------------------------------------------------
	// 創建 match pattern 相關函數。

	/**
	 * 將第一個字母轉成大寫。<br />
	 * 因為 wiki 僅僅將首字母大寫，中間的字不會被改變，因此不採用 toTitleCase() @ CeL.data.native。
	 * 
	 * 注意: 您實際需要的可能是 wiki_API.normalize_title()
	 * 
	 * cf. {{lcfirst:}}
	 * 
	 * @param {String}words
	 *            要轉換的文字。
	 * 
	 * @returns {String}轉換過的文字。
	 */
	function upper_case_initial(words) {
		words = String(words).trim();

		// method 1
		return words.charAt(0).toUpperCase() + words.slice(1);

		// method 2
		return words.replace(/^\S/g, function(initial_char) {
			return initial_char.toUpperCase();
		});
	}

	/** @inner */
	var PATTERN_anchor_of_page_title;
	try {
		// Negative lookbehind assertion
		PATTERN_anchor_of_page_title = new RegExp('(?<!{{)#.*');
	} catch (e) {
		// Will use old methos @ normalize_page_name()
	}

	/**
	 * 規範/正規化頁面名稱 page name。
	 * 
	 * <code>

	page_title = CeL.wiki.normalize_title(page_title && page_title.toString());

	</code>
	 * 
	 * TODO: 簡化。
	 * 
	 * TODO: normalize namespace
	 * 
	 * 這種規範化只能通用於本 library 內。Wikipedia 並未硬性設限。<br />
	 * 依照
	 * [https://www.mediawiki.org/w/api.php?action=query&titles=Wikipedia_talk:Flow&prop=info]，
	 * "Wikipedia_talk:Flow" → "Wikipedia talk:Flow"<br />
	 * 亦即底線 "_" → space " "，首字母大寫。
	 * 
	 * @param {String}page_name
	 *            頁面名 valid page name。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String}規範後之頁面名稱。canonicaltitle。
	 * 
	 * @see [[Wikipedia:命名常規]]
	 * @see https://en.wikipedia.org/wiki/Wikipedia:Page_name#Technical_restrictions_and_limitations
	 */
	function normalize_page_name(page_name, options) {
		if (Array.isArray(page_name)) {
			return page_name.map(function(_page_name) {
				return normalize_page_name(_page_name, options);
			});
		}

		if (wiki_API.is_page_data(page_name)) {
			page_name = page_name.title;
		}
		if (!page_name || typeof page_name !== 'string')
			return page_name;

		if (options === true) {
			options = {
				use_underline : true
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		// 注意:
		// '\u00FF', '\u200B', '\u2060' 可被當作正規頁面名稱的一部分，包括在開頭結尾。
		// \u200B: zero-width space (ZWSP)
		// \u2060: word joiner (WJ).

		// TODO: 去除不可見字符 \p{Cf}，警告 \p{C}。

		// true === /^\s$/.test('\uFEFF')

		page_name = page_name.replace(/<!--[\s\S]*-->/g, '')

		// [[A&quot;A]]→[[A"A]]
		// fix "&#39;". 由於裡面包含"#"，所以必須在 PATTERN_anchor_of_page_title 之前處理。
		page_name = library_namespace.HTML_to_Unicode(page_name, {
			predefined : true,
			entity : true,
			numeric : true,
			is_URI : true
		});

		// e.g., "Wikipedia:削除依頼/ログ/{{#time:Y年Fj日|-1 days +9 hours}}"
		if (!options.keep_anchor/* .preserve_anchor */) {
			// Warning: The anchor will be removed!
			if (PATTERN_anchor_of_page_title) {
				page_name = page_name.replace(PATTERN_anchor_of_page_title, '');
			} else {
				// old method
				page_name = page_name.replace(/([^#]*)#.*/, function(all,
						prefix) {
					return /{{$/.test(prefix) ? all : prefix;
				});
			}
		}
		// assert: /[#|{}]/.test(page_name)===false

		page_name = page_name
		// '\u200E', '\u200F' 在當作 title 時會被濾掉。
		// 對於標題，無論前後加幾個"\u200E"(LEFT-TO-RIGHT MARK)都會被視為無物。
		// "\u200F" 亦不被視作 /\s/，但經測試會被 wiki 忽視。
		// tested: [[title]], {{title}}
		// @seealso [[w:en:Category:CS1 errors: invisible characters]]
		.replace(/[\u200E\u200F]/g, '')

		.trimEnd()
		// 去除開頭的 ":"。 /\s/.test('\u3000')===true
		.replace(/^[:\s_]+/, '')

		// 無論是中日文、英文的維基百科，所有的 '\u3000' 都會被轉成空白字元 /[ _]/。
		.replace(/　/g, ' ')

		// 處理連續多個空白字元。長度相同的情況下，盡可能保留原貌。
		.replace(/([ _]){2,}/g, '$1');

		// {{int:MediaWiki page name}}
		if (/^int:.+/i.test(page_name)) {
			// 4 === 'int:'.length
			page_name = 'MediaWiki:' + page_name.slice(4).trimStart();
		}

		/** {Boolean}採用 "_" 取代 " "。 */
		var use_underline = options.use_underline;
		page_name = use_underline
		// ' ' → '_': 在 URL 上可更簡潔。
		? page_name.replace(/ /g, '_') : page_name.replace(/_/g, ' ');

		page_name = page_name.split(':');
		var has_language;
		var session = session_of_options(options);
		var interwiki_pattern = session
				&& session.configurations.interwiki_pattern
				|| /^[a-z][a-z_\-]+$/i;
		var no_session_namespace_hash = !session
				|| !session.configurations.namespace_hash;

		page_name.some(function(section, index) {
			section = use_underline ? section.replace(/^[\s_]+/, '') : section
					.trimStart();

			// 必然包含 page title，因此不處理最後一個。
			if (index === page_name.length - 1) {
				if (options.no_upper_case_initial) {
					page_name[index] = section;
				} else {
					// page title: 將首個字母轉成大寫。
					page_name[index] = upper_case_initial(section);
				}
				return true;
			}

			if (// index === page_name.length - 1 ||
			no_session_namespace_hash
			// @see PATTERN_PROJECT_CODE
			&& !(use_underline ? /^[a-z][a-z\d\-_]{0,14}$/i
			//
			: /^[a-z][a-z\d\- ]{0,14}$/i).test(section.trimEnd())) {
				// console.log(section);
				if (// index < page_name.length - 1 &&
				session && interwiki_pattern.test(section)
						|| options.no_upper_case_initial) {
					// e.g., 'EN' → 'en'
					page_name[index] = section;
				} else {
					// page title: 將首個字母轉成大寫。
					page_name[index] = upper_case_initial(section);
				}
				return true;
			}

			var namespace = isNaN(section)
			//
			&& get_namespace(section, Object.assign({
				get_name : true
			}, options));
			// console.log([ index, section, namespace ]);
			if (namespace) {
				// Wikipedia namespace
				page_name[index] = use_underline ? namespace.replace(/ /g, '_')
						: namespace.replace(/_/g, ' ');
				return false;
			}

			if (has_language) {
				if (session && interwiki_pattern.test(section)) {
					// e.g., 'EN' → 'en'
					page_name[index] = section.toLowerCase();
				} else {
					// page title: 將首個字母轉成大寫。
					page_name[index] = upper_case_initial(section);
				}
				return true;
			}

			section = use_underline ? section.replace(/[\s_]+$/, '') : section
					.trimEnd();
			if (!interwiki_pattern.test(section)) {
				// e.g., [[Avatar: The Last Airbender]]
				page_name[index] = upper_case_initial(section);
				return true;
			}

			// treat `section` as lang code
			section = section.toLowerCase();
			// lang code
			has_language = true;
			if (use_underline) {
				section = section.replace(/_/g, '-');
			}
			// else: e.g., [[m:Abc]]
			page_name[index] = section;
		});

		return page_name.join(':');
	}

	// @see wiki_toString
	function normalize_name_pattern(file_name, add_group, remove_namespace) {
		if (wiki_API.is_page_data(file_name))
			file_name = file_name.title;
		if (!file_name)
			return file_name;

		if (typeof file_name === 'string' && file_name.includes('|'))
			file_name = file_name.split('|');

		if (Array.isArray(file_name)) {
			var files = [];
			file_name
					.forEach(function(name) {
						if (name = normalize_name_pattern(name, false,
								remove_namespace))
							files.push(name);
					});
			return (add_group ? '(' : '(?:') + files.join('|') + ')';
		}

		if (remove_namespace) {
			// 去除 namespace。e.g., Template:
			// console.log('去除 namespace: [' + file_name + ']');
			file_name = file_name.replace(/^[^:]+:\s*/, '');
		}

		file_name =
		// wiki file 首字不區分大小寫。
		// the case of the first letter is not significant.
		library_namespace.ignore_first_char_case(
		// escape 特殊字元。注意:照理說來檔案或模板名不應該具有特殊字元！
		library_namespace.to_RegExp_pattern(String(file_name).trim()))
		// 不區分空白與底線。
		.replace(/[ _]/g, '[ _]');

		if (add_group)
			file_name = '(' + file_name + ')';

		return file_name;
	}

	/**
	 * 創建匹配 [[File:file_name]] 之 pattern。
	 * 
	 * @param {String}file_name
	 *            file name.
	 * @param {String}flag
	 *            RegExp flag
	 * 
	 * @returns {RegExp} 能 match [[File:file_name]] 之 pattern。
	 */
	function file_pattern(file_name, flag) {
		return (file_name = normalize_name_pattern(file_name, true))
				//
				&& new RegExp(file_pattern.source.replace(/name/, file_name),
						flag || 'g');
	}

	// [[維基百科:命名空間#文件名字空间]]
	// [[Media:image.png]]：產生一個指向檔案本身的連結
	// https://github.com/dbpedia/extraction-framework/blob/master/core/src/main/settings/zhwiki-configuration.xml
	// https://github.com/dbpedia/extraction-framework/blob/master/core/src/main/scala/org/dbpedia/extraction/wikiparser/impl/wikipedia/Namespaces.scala
	//
	// Fichier:
	// https://fr.wikipedia.org/wiki/Aide:Ins%C3%A9rer_une_image_(wikicode,_avanc%C3%A9)
	//
	// https://zh.wikipedia.org/wiki/Wikipedia:互助客栈/其他#增设空间“U：”、“UT：”作为“User：”、“User_talk：”的Alias
	// 提議增加F、FT指向File、File Talk
	/** {RegExp}檔案的匹配模式 for parser。 */
	var PATTERN_file_prefix = 'File|Fichier|檔案|档案|文件|ファイル|Image|圖像|图像|画像|Media|媒[體体](?:文件)?';

	file_pattern.source =
	// 不允許 [\s\n]，僅允許 ' '。
	// [ ':', file name, 接續 ]
	/\[\[ *(?:(:) *)?(?:Tag) *: *name *(\||\]\])/
	// [[ :File:name]] === [[File:name]]
	.source.replace('Tag', library_namespace
			.ignore_case_pattern(PATTERN_file_prefix));

	// [ all, ":", file name without "File:" or ":File" ]
	PATTERN_file_prefix = new RegExp('^ *(: *)?(?:' + PATTERN_file_prefix
			+ ') *: *' + PATTERN_page_name.source, 'i');

	// "Category" 本身可不分大小寫。
	// 分類名稱重複時，排序索引以後出現者為主。
	// TODO: using PATTERN_page_name
	var
	// [ all_category_text, category_name, sort_order, post_space ]
	PATTERN_category = /\[\[ *(?:Category|分類|分类|カテゴリ|분류) *: *([^\[\]\|{}<>\n�]+)(?:\s*\|\s*([^\[\]\|�]*))?\]\](\s*\n?)/ig,
	/** {RegExp}分類的匹配模式 for parser。 [all,name] */
	PATTERN_category_prefix = /^ *(?:Category|分類|分类|カテゴリ|분류) *: *([^\[\]\|{}<>\n�]+)/i;

	// ------------------------------------------------------------------------

	/**
	 * 將 page data list 轉為 hash。<br />
	 * cf. Array.prototype.to_hash @ data.native
	 * 
	 * @param {Array}page_data_list
	 *            list of page_data.
	 * @param {Boolean}use_id
	 *            use page id instead of title.
	 * 
	 * @returns {Object}title/id hash
	 */
	function list_to_hash(page_data_list, use_id) {
		var hash = Object.create(null);
		page_data_list.forEach(use_id ? function(page_data) {
			// = true
			hash[page_data.pageid] = page_data;
		} : function(page_data) {
			// = true
			hash[page_data.title] = page_data;
		});
		return hash;
	}

	/**
	 * 去掉 page data list 中重複的 items。<br />
	 * cf. Array.prototype.unique @ data.native
	 * 
	 * @param {Array}page_data_list
	 *            list of page_data.
	 * 
	 * @returns {Array}unique list
	 */
	function unique_list(page_data_list) {
		var array = [],
		// 以 hash 純量 index 加速判別是否重複。
		hash = Object.create(null);

		page_data_list.forEach(function(page_data) {
			var key = typeof page_data == 'string' ? page_data
					: page_data.title;
			if (!(key in hash)) {
				hash[key] = null;
				// 能確保順序不變。
				array.push(page_data);
			}
		});

		return array;
	}

	/**
	 * escape wikitext control characters of text, to plain wikitext.<br />
	 * escape 掉會造成問題之 characters。
	 * 
	 * @example <code>
	CeL.wiki.escape_text(text);
	 * </code>
	 * 
	 * TODO: "&"
	 * 
	 * @param {String}text
	 *            包含有問題字元的文字字串。
	 * @param {Boolean}is_uri
	 *            輸出為 URI 或 URL。
	 * @returns {String}plain wikitext
	 * 
	 * @see function section_link_escape(text, is_uri)
	 * @see [[w:en:Help:Special characters]]
	 */
	function escape_text(text, is_uri) {
		function escape_character(character) {
			var code = character.charCodeAt(0);
			if (is_uri) {
				return '%' + code.toString(16);
			}
			return '&#' + code + ';';
		}

		return text
		// 經測試 anchor 亦不可包含[{}\[\]\n�]。
		.replace(/[\|{}\[\]<>�]/g, escape_character)
		// escape "''", "'''"
		.replace(/''/g, "'" + escape_character("'"))
		// escape [[w:en:Help:Magic links]]
		.replace(/__/g, "_" + escape_character("_"))
		// escape signing
		.replace(/~~~/g, "~~" + escape_character("~"))
		// escape list, section title
		.replace(/\n([*#;:=\n])/g, function(all, character) {
			return "\n" + escape_character(character);
		});
	}

	function to_template_wikitext_toString_slice(separator) {
		return this.join(separator || '|');
	}

	function to_template_wikitext_toString(separator) {
		var text = this.join(separator || '|'), tail = '}}';
		if (text.includes('\n'))
			tail = '\n' + tail;
		return '{{' + text + tail;
	}

	function to_template_wikitext_join_array(value) {
		return Array.isArray(value) ? value.join('\n') : value;
	}

	to_template_wikitext.join_array = to_template_wikitext_join_array;

	// 2017/1/18 18:46:2
	// TODO: escape special characters
	function to_template_wikitext(parameters, options) {
		var template_name, is_continue = true;
		if (options) {
			if (typeof options === 'string') {
				template_name = options;
			} else {
				template_name = options.name;
			}
		}
		var parameters_is_Array = Array.isArray(parameters);
		if (!template_name && (!options || !options.is_slice)
				&& parameters_is_Array && parameters[0]) {
			// CeL.wiki.template_text([name, p1, p2]);
			template_name = parameters[0];
			delete parameters[0];
		}

		var wikitext;
		if (template_name) {
			wikitext = [ template_name ];
			wikitext.toString = to_template_wikitext_toString;
		} else {
			wikitext = [];
			wikitext.toString = to_template_wikitext_toString_slice;
		}

		Object.keys(parameters).forEach(function(key) {
			var value = parameters[key], ignore_key = is_continue
			//
			&& (is_continue = library_namespace.is_digits(key));
			// console.log([ key, value ]);

			// ignore_value: 沒有設定數值時，直接忽略這一個 parameter。
			if (value === undefined) {
				if (!Array.isArray(parameters))
					return;
				// wikitext 不採用 `undefined`。
				value = '';
			} else {
				value = to_template_wikitext_join_array(value);
			}

			if (parameters_is_Array && template_name && !parameters[0]) {
				wikitext[key] = value;
			} else {
				if (!ignore_key)
					value = key + '=' + value;
				wikitext.push(value);
			}
		});

		return options && options.to_Array ? wikitext
		//
		: wikitext.toString(options && options.separator);
	}

	// ------------------------------------------------------------------------

	/**
	 * get title of page.
	 * 
	 * @example <code>
	   var title = CeL.wiki.title_of(page_data);
	 * </code>
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * 
	 * @returns {String|Undefined}title of page, maybe undefined.
	 * 
	 * @see wiki_API.query.id_of_page
	 * @see wiki_API.query.title_param()
	 */
	function get_page_title(page_data) {
		// 處理 [ {String}API_URL, {String}title or {Object}page_data ]
		if (Array.isArray(page_data)) {
			if (wiki_API.is_page_data(page_data[0])) {
				// assert: page_data = [ page data, page data, ... ]
				return page_data.map(get_page_title);
			}
			if (is_api_and_title(page_data)) {
			}
			// assert: page_data =
			// [ {String}API_URL, {String}title || {Object}page_data ]
			return get_page_title(page_data[1]);
		}

		if (library_namespace.is_Object(page_data)) {
			var title = page_data.title;
			// 檢測一般頁面
			if (title) {
				// should use wiki_API.is_page_data(page_data)
				return title;
			}

			// for flow page
			// page_data.header: 在 Flow_page()=CeL.wiki.Flow.page 中設定。
			// page_data.revision: 由 Flow_page()=CeL.wiki.Flow.page 取得。
			title =
			// page_data.is_Flow &&
			(page_data.header || page_data).revision;
			if (title && (title = title.articleTitle)) {
				// e.g., "Wikipedia talk:Flow tests"
				return title;
			}

			return undefined;
		}

		if (typeof page_data === 'string') {
			// 例外處理: ':zh:title' → 'zh:title'
			page_data = page_data.replace(/^[\s:]+/, '')
		} else {
			// e.g., page_data === undefined
		}

		return page_data;
	}

	// get the wikilink of page_data.
	// CeL.wiki.title_link_of()
	// 'title'→'[[title]]'
	// 'zh:title'→'[[:zh:title]]'
	// 'n:title'→'[[:n:title]]'
	// 'Category:category'→'[[:Category:category]]'
	// TODO: [[link|<span style="color: #000;">title</span>]]
	// TODO: 與 URL_to_wiki_link() 整合。
	// TODO: #section name: [page_data, section name]
	// TODO: 複製到非維基項目外的私人維基，例如moegirl時，可能需要用到[[zhwiki:]]這樣的prefix。
	function get_page_title_link(page_data, display_text, options) {
		var title,
		// e.g., is_category
		need_escape, project_prefixed;

		if (options === undefined && (wiki_API.is_wiki_API(display_text)
		// e.g., `CeL.wiki.title_link_of(page_data, wiki_session)`
		|| library_namespace.is_Object(display_text))) {
			// shift arguments
			options = display_text;
			display_text = null;
		}

		var session = wiki_API.session_of_options(options);

		// console.trace(session);
		var namespace_hash = session && session.configurations.namespace_hash
				|| get_namespace.hash;

		// is_api_and_title(page_data)
		if (wiki_API.is_page_data(page_data)) {
			need_escape = page_data.ns === namespace_hash.category
					|| page_data.ns === namespace_hash.file;
			title = page_data.title;
		} else if (Array.isArray(page_data) && (page_data.type === 'link'
		//
		|| page_data.type === 'file' || page_data.type === 'category')
		// Input wikilink token
		&& (title = page_data[0] + page_data[1])
		//
		? (display_text = display_text || page_data.caption || page_data[2])
		//
		: (title = get_page_title(page_data))
		// 通常應該:
		// is_api_and_title(page_data) || typeof page_data === 'string'
		&& typeof title === 'string') {
			// @see normalize_page_name()
			title = title.replace(/^[\s:]+/, '');

			// e.g., 'zh:title'
			// @see PATTERN_PROJECT_CODE_i
			project_prefixed = /^ *[a-z]{2}[a-z\d\-]{0,14} *:/i.test(title)
					// 排除 'Talk', 'User', 'Help', 'File', ...
					&& !(session && session.configurations.namespace_pattern || get_namespace.pattern)
							.test(title);
			// escape 具有特殊作用的 title。
			need_escape = PATTERN_category_prefix.test(title)
			// 應允許非規範過之 title，如採用 File: 與 Image:, 檔案:。
			|| PATTERN_file_prefix.test(title) || project_prefixed;
		}

		if (!title) {
			return '';
		}
		var first_domain_name
		//
		= wiki_API.get_first_domain_name_of_session(session);
		if (first_domain_name && !project_prefixed) {
			// e.g., [[w:zh:title]]
			title = first_domain_name + ':' + title;
			if (session.family
					&& (session.family in /* api_URL.family */api_URL.shortcut_of_project)) {
				title = api_URL.shortcut_of_project[session.family] + ':'
						+ title;
				need_escape = false;
			} else {
				need_escape = true;
			}
		}

		// TODO: [[s:zh:title]] instead of [[:zh:title]]

		// e.g., for /{}/
		// title = encodeURI(title);
		// or: title = wiki_API.section_link(title); ...

		if (need_escape) {
			title = ':' + title;
		}
		// TODO: for template transclusion, use {{title}}
		return '[['
				+ title
				+ (display_text && display_text !== title ? '|' + display_text
						: '') + ']]';
	}

	function revision_content(revision, allow_non_string) {
		if (!revision)
			return allow_non_string ? revision : '';

		if (revision.slots) {
			// 2019 API: page_data.revisions[0].slots.main['*']
			// https://www.mediawiki.org/wiki/Manual:Slot
			// https://www.mediawiki.org/wiki/API:Revisions
			revision = revision.slots;
			for ( var slot in revision) {
				// e.g., slot === 'main'
				revision = revision[slot];
				break;
			}
		}
		return allow_non_string ? revision['*'] : revision['*'] || '';
	}

	/**
	 * get the contents of page data. 取得頁面內容。
	 * 
	 * @example <code>
	   var content = CeL.wiki.content_of(page_data);
	   // 當取得了多個版本:
	   var content = CeL.wiki.content_of(page_data, 0);
	 * </code>
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String|Undefined}content of page, maybe undefined.
	 */
	function get_page_content(page_data, options) {
		if (!page_data) {
			// e.g., page_data === undefined
			return page_data;
		}

		if (typeof options === 'string') {
			options = {
				flow_view : options
			};
		} else if (typeof options === 'number') {
			options = {
				revision_index : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		// for flow page: 因為 page_data 可能符合一般頁面標準，
		// 此時會先得到 {"flow-workflow":""} 之類的內容，
		// 因此必須在檢測一般頁面之前先檢測 flow page。
		// page_data.header: 在 Flow_page()=CeL.wiki.Flow.page 中設定。
		// page_data.revision: 由 Flow_page()=CeL.wiki.Flow.page 取得。
		var content =
		// page_data.is_Flow &&
		(page_data[options.flow_view] || page_data['header'] || page_data).revision;
		if (content && (content = content.content)) {
			// page_data.revision.content.content
			return content.content;
		}

		if (page_data.expandtemplates
		// 若有則用之，否則最起碼回傳一般的內容。
		&& ('wikitext' in page_data.expandtemplates)) {
			// {String}options.flow_view 對 flow page，所欲取得之頁面內容項目。<br />
			// default: 'header'
			if (options.flow_view === 'expandtemplates')
				return String(page_data.expandtemplates.wikitext || '');

			library_namespace.debug(wiki_API.title_link_of(page_data)
			//
			+ ': The page has expandtemplates.wikitext but do not used.', 1,
					'get_page_content');
		}

		// 檢測一般頁面。
		if (wiki_API.is_page_data(page_data)) {
			// ('missing' in page_data): 此頁面不存在/已刪除。
			// e.g., { ns: 0, title: 'title', missing: '' }
			// TODO: 提供此頁面的刪除和移動日誌以便參考。
			if (('missing' in page_data) || ('invalid' in page_data)) {
				return options.allow_non_String ? undefined : '';
			}

			// @see get_page_content.revision
			content = library_namespace.is_Object(page_data)
			//
			&& page_data.revisions;
			if (!Array.isArray(content) || !content[0]) {
				// invalid page data
				// 就算 content.length === 0，本來就不該回傳東西。
				// 警告：可能回傳 null or undefined，尚未規範。
				return '';
			}
			if (content.length > 1
					&& typeof options.revision_index !== 'number') {
				// 有多個版本的情況：因為此狀況極少，不統一處理。
				// 一般說來caller自己應該知道自己設定了rvlimit>1，因此此處不警告。
				// 警告：但多版本的情況需要自行偵測是否回傳{Array}！
				return content.map(function(revision) {
					return revision_content(revision);
				});
			}
			// treat options.revision_index as revision_index
			if (options.revision_index < 0) {
				// e.g., -1: select the oldest revision.
				options.revision_index += content.length;
			}
			content = content[options.revision_index | 0];
			return revision_content(content);
		} else if (typeof (content = revision_content(page_data, true)) === 'string') {
			return content;
		}

		// 一般都會輸入 page_data: {"pageid":0,"ns":0,"title":""}
		// : typeof page_data === 'string' ? page_data

		return String(page_data || '');
	}

	/**
	 * check if page_data is page data.
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * 
	 * @returns {String|Number} pageid
	 */
	get_page_content.is_page_data = function(page_data) {
		return library_namespace.is_Object(page_data)
		// 可能是 missing:""，此時仍算 page data。
		&& (page_data.title || ('pageid' in page_data));
	};

	/**
	 * get the id of page
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * 
	 * @returns {String|Number} pageid
	 */
	get_page_content.pageid = function(page_data) {
		return get_page_content.is_page_data(page_data) && page_data.pageid;
	};

	// return {Object}main revision (.revisions[0])
	get_page_content.revision = function(page_data, revision_index) {
		return library_namespace.is_Object(page_data)
		// treat as page data. Try to get page contents:
		// revision_content(page.revisions[0])
		// 一般說來應該是由新排到舊，[0] 為最新的版本 last revision。
		&& page_data.revisions && page_data.revisions[revision_index || 0];
	};

	get_page_content.page_exists = function(page_data) {
		return get_page_content.is_page_data(page_data)
				&& !('missing' in page_data) && !('invalid' in page_data);
	};

	// 曾經以 session.page() 請求過內容。
	get_page_content.had_fetch_content = function(page_data, revision_index) {
		return get_page_content.is_page_data(page_data)
		//
		&& (('missing' in page_data)
		// {title:'%2C',invalidreason:
		// 'The requested page title contains invalid characters: "%2C".'
		// ,invalid:''}
		|| ('invalid' in page_data)
		//
		|| typeof revision_content(
		//
		get_page_content.revision(page_data), true) === 'string');
	};

	// CeL.wiki.content_of.edit_time(page_data) -
	// new Date(page_data.revisions[0].timestamp) === 0
	// TODO: page_data.edit_time(revision_index, return_value)
	// return {Date}最後編輯時間/最近的變更日期。
	// 更正確地說，revision[0]（通常是最後一個 revision）的 timestamp。
	get_page_content.edit_time = function(page_data, revision_index,
			return_value) {
		var timestamp = library_namespace.is_Object(page_data)
				&& page_data.revisions;
		if (timestamp
				&& (timestamp = timestamp[revision_index || 0] || timestamp[0])
				&& (timestamp = timestamp.timestamp)) {
			return return_value ? Date.parse(timestamp) : new Date(timestamp);
		}
	};

	/**
	 * check if the page_data has contents. 不回傳 {String}，減輕需要複製字串的負擔。
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * 
	 * @returns {Boolean} the page_data has / do not has contents.
	 * @returns {Undefined} the page_data do not has contents.
	 */
	get_page_content.has_content = function(page_data) {
		var revision = get_page_content.revision(page_data);
		return !!revision_content(revision);
	};

	// ------------------------------------------------------------------------

	// @see CeL.application.net.wiki.data
	// 以下兩者必須不可能為 entity / property 之屬性。
	// 相關/對應頁面。
	var KEY_CORRESPOND_PAGE = typeof Symbol === 'function' ? Symbol('correspond page')
			: 'page';

	// ------------------------------------------------------------------------

	// https://www.mediawiki.org/w/api.php?action=help&modules=sitematrix
	// https://zh.wikipedia.org/w/api.php?action=help&modules=paraminfo

	// https://noc.wikimedia.org/conf/InitialiseSettings.php.txt
	// https://noc.wikimedia.org/conf/highlight.php?file=InitialiseSettings.php
	// https://noc.wikimedia.org/conf/VariantSettings.php.txt
	// https://phabricator.wikimedia.org/T233070

	// https://www.mediawiki.org/wiki/Manual:LocalSettings.php

	// get_site_configurations
	// https://zh.wikipedia.org/w/api.php?action=help&modules=query%2Bsiteinfo
	// https://www.mediawiki.org/wiki/API:Siteinfo
	// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=general%7Cnamespaces%7Cnamespacealiases%7Cstatistics&utf8
	function wiki_API_siteinfo(options, callback) {
		// console.log([ options, callback ]);
		var action = {
			action : 'query',
			meta : 'siteinfo'
		};
		if (wiki_API.need_get_API_parameters(action, options,
				wiki_API[action.meta], arguments)) {
			return;
		}

		// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=general|namespaces|namespacealiases|specialpagealiases|magicwords|extensiontags|protocols&utf8&format=json
		options = Object.assign({
			siprop : 'general|namespaces|namespacealiases|specialpagealiases'

			// magicwords: #重定向 interwikimap, thumb %1px center,
			+ '|magicwords|functionhooks|variables'

			// + '|languages'
			+ '|interwikimap|languagevariants'

			// 工作隊列lag
			// + '|statistics|dbrepllag'

			// + '|usergroups'
			+ '|restrictions'
			// + '|defaultoptions'
			+ '|uploaddialog|skins|rightsinfo'

			// + '|showhooks|libraries|extensions'
			+ '|extensiontags|protocols|fileextensions'
		}, options);

		var session = wiki_API.session_of_options(options);
		var siteinfo = session && session.get_storage(action.meta);
		if (siteinfo) {
			adapt_site_configurations(session, siteinfo);
			callback(siteinfo);
			return;
		}
		// Get flash siteinfo instead

		// ------------------------------------------------

		action = wiki_API.extract_parameters(options, action, true);
		// console.trace([ options, action ]);

		wiki_API.query(action, function(response, error) {
			// console.log(JSON.stringify(response));
			error = error || response && response.error;
			if (error) {
				callback(response, error);
				return;
			}

			var siteinfo = response.query;
			siteinfo.siprop = options.siprop;
			if (session) {
				// cache siteinfo
				session.set_storage(action.meta, siteinfo);
				adapt_site_configurations(session, siteinfo);
			}
			callback(siteinfo);
		}, null, session);
	}

	wiki_API.siteinfo = wiki_API_siteinfo;

	// --------------------------------------------------------------------------------------------

	function get_PATTERN_full_tag(tags) {
		if (Array.isArray(tags))
			tags = tags.join('|');
		return new RegExp('<(' + tags
		//
		+ ')(\\s(?:[^<>]*[^<>/])?)?>([\\s\\S]*?)<\\/(\\1(?:\\s[^<>]*)?)>', 'ig');
	}

	// default_site_configurations
	wiki_API.prototype.configurations = {
	//
	};

	// @see [[Special:Interwiki]] 跨維基資料 跨 wiki 字首
	// @see https://noc.wikimedia.org/wiki.php?wiki=jawiktionary
	function adapt_site_configurations(session, configurations) {
		// console.log(configurations);
		var site_configurations = session.configurations;
		session.latest_site_configurations = configurations;
		if (site_configurations === wiki_API.prototype.configurations) {
			session.configurations = site_configurations
			//
			= Object.assign(Object.create(null),
			//
			wiki_API.prototype.configurations);
		}

		if (!configurations) {
			library_namespace
					.error('adapt_site_configurations: No configurations got!');
			return;
		}

		var general = configurations.general;
		// Using `session.latest_site_configurations.general.variants`
		// to test if langconversion is configured in the site.
		session.has_languagevariants = general && !!general.variants;

		if (general) {
			// site_configurations.general = general;
			'mainpage|sitename|linktrail|legaltitlechars|invalidusernamechars|case|lang|maxarticlesize|timezone|timeoffset|maxuploadsize'
					.split('|').forEach(function(name) {
						site_configurations[name] = general[name];
					});

			site_configurations.magiclinks = Object.keys(general.magiclinks);
			site_configurations.lang_fallback = general.fallback.map(function(
					lang) {
				return lang.code;
			});
		}

		var interwikimap =
		// session.has_languagevariants &&
		configurations.interwikimap;
		if (interwikimap) {
			// prefix_pattern
			site_configurations.interwiki_pattern = new RegExp('^('
					+ interwikimap.map(function(interwiki) {
						return interwiki.prefix;
					}).join('|') + ')(?::(.*))?$', 'i');
			// 不可刪除 configurations.interwikimap: 還會用到。
		}

		var languagevariants = configurations.languagevariants;
		if (languagevariants && languagevariants.zh) {
			delete languagevariants.zh.zh;
			delete languagevariants.zh['zh-hans'];
			delete languagevariants.zh['zh-hant'];

			// language fallbacks
			site_configurations.lang_fallbacks = Object.create(null);
			for ( var lang_code in languagevariants.zh) {
				site_configurations.lang_fallbacks[lang_code] = languagevariants.zh[lang_code].fallbacks;
			}
			// Release memory. 釋放被占用的記憶體。
			// delete configurations.languagevariants;
		}

		// --------------------------------------------------------------------

		var magic_words_hash = Object.create(null);
		site_configurations.magic_words_hash = magic_words_hash;

		configurations.functionhooks
		//
		&& configurations.functionhooks.forEach(function(magic_word) {
			magic_words_hash[magic_word.toUpperCase()] = true;
		});
		// Release memory. 釋放被占用的記憶體。
		// delete configurations.functionhooks;

		configurations.variables
		// 可能在 .functionhooks 已設定，但以此處為主。
		// 例如 {{Fullurl}} 應被視作 template。
		// {{PAGENAME}}, {{NAMESPACE}}, {{NAMESPACENUMBER}} 之類可以引用當前頁面為參數
		// argument。
		&& configurations.variables.forEach(function(magic_word) {
			// https://harrypotter.fandom.com/api.php?action=query&meta=siteinfo&siprop=variables&utf8&format=json
			// [{"id":"wgLanguageCode","*":"en"},{"id":"wgCityId","*":509}]
			if (typeof magic_word === 'string')
				magic_words_hash[magic_word.toUpperCase()] = false;
		});
		// Release memory. 釋放被占用的記憶體。
		// delete configurations.variables;

		configurations.magicwords
		//
		&& configurations.magicwords.forEach(function(magic_word_data) {
			var name = magic_word_data.name.toUpperCase();
			var map_to;
			if (name in magic_words_hash) {
				// 在 .variables, .functionhooks 已設定，以先前設定為主。
				map_to = magic_words_hash[name];
			} else {
				// 無法自此處判斷是否需要參數。皆設定為需要參數。
				magic_words_hash[name] = map_to = name;
			}
			magic_word_data.aliases.forEach(function(magic_word) {
				magic_word = magic_word.toUpperCase();
				// Do not overwrite value
				if (!(magic_word in magic_words_hash)
				// TODO: 另外處理這些特別的 magic words
				&& !/[#:]|\$\d/.test(magic_word)) {
					magic_words_hash[magic_word] = map_to;
				}
			});
		});
		// Release memory. 釋放被占用的記憶體。
		// delete configurations.magicwords;

		// --------------------------------------------------------------------

		var extensiontag_list = [];

		configurations.extensiontags
		//
		&& configurations.extensiontags.forEach(function(extensiontag) {
			extensiontag = extensiontag.replace(/^</, '').replace(/>$/, '');
			extensiontag_list.push(extensiontag.toLowerCase());
		});

		site_configurations.extensiontag_hash = extensiontag_list.to_hash();

		site_configurations.PATTERN_extensiontags = wiki_API
				.get_PATTERN_full_tag(extensiontag_list);

		site_configurations.PATTERN_non_extensiontags = wiki_API
				.get_PATTERN_full_tag(wiki_API.markup_tags
						.filter(function(tag) {
							return !extensiontag_list.includes(tag);
						}));

		// --------------------------------------------------------------------

		var namespaces = configurations.namespaces;
		var namespacealiases = configurations.namespacealiases;
		if (namespaces && namespacealiases) {
			// create
			// session.configurations[namespace_hash,name_of_NO,namespace_pattern]
			var namespace_hash
			// namespace_hash[namespace] = NO
			= site_configurations.namespace_hash = Object.create(null);
			site_configurations.name_of_NO = Object.create(null);
			for ( var namespace_NO in namespaces) {
				var namespace_data = namespaces[namespace_NO];
				namespace_NO = +namespace_NO;
				// namespace_data.canonical || namespace_data.content
				var name = namespace_data['*'];
				if (typeof name === 'string') {
					site_configurations.name_of_NO[namespace_NO] = name;
					namespace_hash[name.toLowerCase()] = namespace_NO;
				}
				if (namespace_data.canonical
						&& typeof namespace_data.canonical === 'string'
						&& namespace_data.canonical !== name) {
					namespace_hash[namespace_data.canonical.toLowerCase()] = namespace_data.id;
				}
			}
			namespacealiases.forEach(function(namespace_data) {
				namespace_hash[namespace_data['*'].toLowerCase()]
				//
				= namespace_data.id;
			});
			site_configurations.namespace_pattern = generate_namespace_pattern(
					namespace_hash, []);
		}
		// Release memory. 釋放被占用的記憶體。
		// delete configurations.namespaces;
		// delete configurations.namespacealiases;
	}

	// ----------------------------------------------------

	/**
	 * 從網頁取得/讀入自動作業用的人為設定 manual settings。
	 * 
	 * TODO: 檢查設定。
	 * 
	 * @param {String}task_configuration_page
	 *            自動作業用的設定頁面標題。 e.g., "User:bot/設定"
	 * @param {Function}configuration_adapter
	 *            整合設定用的處理函式。應考慮頁面不存在、胡亂設定、沒有設定之情況！
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * 設定頁面措辭模板:<code>

	{{Bot use warning|bot=[[User:cewbot]]}}
	本頁面為機器人執行___作業的設定頁面。每次執行作業前，機器人都會先從本頁面讀入設定。本設定頁面將影響___作業功能，應受適當保護以免受破壞。且應謹慎編輯，以防機器人無法讀取。移動本頁面必須留下重定向。

	自動生成的報表請參見：[[User:cewbot/report]]。
	請注意：變更本頁面後，起碼必須等數分鐘，機器人才會應用新的設定。
	參見：
	GitHub上的原始碼 (source code)
	已知無法解決問題：

	</code>
	 */
	function adapt_task_configurations(task_configuration_page,
			configuration_adapter, options) {
		options = library_namespace.setup_options(options);
		var session = this, task_configuration = session.task_configuration
				|| (session.task_configuration = Object.create(null));
		if (typeof configuration_adapter === 'function') {
			if (!options.once)
				session.task_configuration.configuration_adapter = configuration_adapter;
		} else {
			configuration_adapter = session.task_configuration.configuration_adapter;
		}

		if (!task_configuration_page
				&& !(task_configuration_page = task_configuration.configuration_page_title)) {
			configuration_adapter && configuration_adapter();
			return;
		}
		library_namespace.debug('Try to get configurations from '
				+ task_configuration_page, 1, 'adapt_task_configurations');

		if (!options.once && ('min_interval' in options)) {
			// 最小檢測時間間隔
			if (options.min_interval > 0)
				task_configuration.min_interval = options.min_interval;
			else if (!options.min_interval)
				delete task_configuration.min_interval;
		}

		if (task_configuration.last_update) {
			// 曾經取得設定過。
			if (task_configuration.min_interval > Date.now()
					- task_configuration.last_update) {
				// 時間未到。
				configuration_adapter && configuration_adapter();
				return;
			}

			if (wiki_API.is_page_data(task_configuration_page)) {
				// TODO: test timestamp
				adapt_configuration(task_configuration_page);
				return;
			}

			// checck if there is new version.
			session.page(task_configuration_page, function(page_data) {
				if ((task_configuration.min_interval || 0) > Date
						.parse(page_data.touched)
						- task_configuration.last_update) {
					// No new version
					configuration_adapter && configuration_adapter();
					return;
				}
				fetch_configuration();
			}, {
				prop : 'info',
				redirects : 1
			});
			return;
		}

		fetch_configuration();

		function fetch_configuration() {
			// library_namespace.set_debug(6);
			session.page(task_configuration_page, adapt_configuration, {
				redirects : 1
			});
		}

		// setup_configuration()
		function adapt_configuration(page_data) {
			// console.trace(page_data);
			// console.trace(wiki_API.content_of(page_data));
			if (!wiki_API.content_of.page_exists(page_data)) {
				library_namespace.debug('No configuration page: '
						+ wiki_API.title_link_of(page_data), 1,
						'adapt_task_configurations');
				// 有時必須初始設定，還是得執行 configuration_adapter。
				// return;
			} else {
				library_namespace
						.info('adapt_task_configurations: Get configurations from '
								+ wiki_API.title_link_of(page_data));
			}

			if (!options.once) {
				// cache
				Object.assign(task_configuration, {
					// `session.task_configuration.configuration_page_title`
					// {String}設定頁面。已經轉換過、正規化後的最終頁面標題。 e.g., "User:bot/設定"
					configuration_page_title : page_data.title,
					// configuration_pageid : page_data.id,
					last_update : Date.now()
				});
			}
			// latest raw task raw configuration
			var configuration = wiki_API.parse.configuration(page_data);
			// console.trace(configuration);
			// TODO: valid configuration 檢測數值是否合適。
			session.latest_task_configuration = configuration;

			// 本地化 Localization: load localized messages.
			// e.g., [[w:en:User:Cewbot/log/20150916/configuration]]
			if (library_namespace.is_Object(configuration.L10n)) {
				// `gettext.get_domain_name()` for default language
				var language = gettext.to_standard(session.language
						|| wiki_API.language);
				/** {Object}L10n messages. 符合當地語言的訊息內容。 */
				gettext.set_text(configuration.L10n, language);
				// console.trace(configuration.L10n);
				library_namespace.info('adapt_task_configurations: Load '
						+ Object.keys(configuration.L10n).length + ' '
						+ language + ' messages for '
						+ wiki_API.site_name(session) + '.');
				// Release memory. 釋放被占用的記憶體。
				// delete configuration.L10n;
			}

			if (typeof configuration_adapter === 'function') {
				// 每次更改過設定之後，重新執行一次。
				// 檢查從網頁取得的設定，檢測數值是否合適。

				// cache actions, 盡可能即時適用新的設定。
				var old_actions = session.actions.splice(0,
						session.actions.length);
				configuration_adapter.call(session, configuration);
				session.actions.append(old_actions);
				// console.trace(session.actions);
				// configuration === wiki_session.latest_task_configuration
			}
			// Object.seal(configuration);
		}
	}

	wiki_API.prototype.adapt_task_configurations = adapt_task_configurations;

	// @see function add_listener(listener, options) @
	// CeL.application.net.wiki.page
	// 延遲 adapt 設定的時間: 預設為過5分鐘才 adapt configuration
	// lag_to_adapt_task_configurations
	// library_namespace.to_millisecond('5 min')
	wiki_API.prototype.delay_time_to_adapt_task_configurations = 5 * 60 * 1000;

	// html to wikitext
	// https://zh.wikipedia.org/w/api.php?action=help&modules=flow-parsoid-utils

	// ========================================================================

	// Wikimedia project code alias
	// https://doc.wikimedia.org/mediawiki-core/master/php/LanguageCode_8php_source.html
	// https://github.com/wikimedia/mediawiki/blob/master/languages/LanguageCode.php
	// language_code_to_site_alias[language code] = project code
	// @see function language_to_site_name(language, project)
	// @see [[en:Wikimedia_project#Project_codes]]
	var language_code_to_site_alias = {
		// als : 'sq',
		'be-x-old' : 'be-tarask',
		cmn : 'zh',
		// gsw : 'als',
		// hbs : 'sh',
		lzh : 'zh-classical',
		nan : 'zh-min-nan',
		nb : 'no',
		nob : 'no',
		rup : 'roa-rup',
		sgs : 'bat-smg',
		vro : 'fiu-vro',
		// 為粵文維基百科特別處理。
		yue : 'zh-yue',
		bih : 'bh',

		// 為日文特別修正: 'jp' is wrong!
		jp : 'ja'
	},
	// @see function set_default_language(language)
	valid_language = 'nds-nl|map-bms'.split('|').to_hash();

	Object.entries(language_code_to_site_alias).forEach(function(pair) {
		if (pair[0].includes('-'))
			valid_language[pair[0]] = true;
		if (pair[1].includes('-'))
			valid_language[pair[1]] = true;
	});

	// gettext_config:{"id":"continue-key"}
	var default_continue_key = 'Continue key';
	/** {String}後續索引。後續檢索用索引值標記名稱。 */
	wiki_API.prototype.continue_key = default_continue_key;

	/**
	 * Set default language. 改變預設之語言。
	 * 
	 * @example <code>
	CeL.wiki.set_language('en');
	 * </code>
	 * 
	 * @param {String}[language]
	 *            language.<br />
	 *            e.g., 'en'.
	 * 
	 * @returns {String}預設之語言。
	 * 
	 * @see setup_API_language()
	 */
	function set_default_language(language) {
		// console.trace(language);
		if (wiki_API.is_wiki_API(language))
			language = language.language;
		if (typeof language !== 'string'
				|| !PATTERN_PROJECT_CODE_i.test(language)) {
			if (language) {
				// console.trace(language);
				library_namespace.warn(
				//
				'set_default_language: Invalid language: [' + language
						+ ']. e.g., "en".');
			} else {
				// to get default language
			}
			return wiki_API.language;
		}

		// assert: default language is in lower case. See URL_to_wiki_link().
		language = language.toLowerCase();
		if (language in language_code_to_site_alias)
			language = language_code_to_site_alias[language];
		wiki_API.language = language;
		// default api URL. Use <code>CeL.wiki.API_URL = api_URL('en')</code> to
		// change it.
		// see also: application.locale
		wiki_API.API_URL = gettext.guess_language && gettext.guess_language()
				|| library_namespace.is_WWW()
				&& (navigator.userLanguage || navigator.language)
				|| wiki_API.language;
		if (!(wiki_API.API_URL in valid_language)) {
			// 'en-US' → 'en'
			wiki_API.API_URL = wiki_API.API_URL.toLowerCase().replace(/-.+$/,
					'');
			// e.g., 'cmn'
			// Cannot use `wiki_API.language_code_to_site_alias`
			if (wiki_API.API_URL in language_code_to_site_alias)
				wiki_API.API_URL = language_code_to_site_alias[wiki_API.API_URL];
		}
		// console.trace(wiki_API.API_URL);
		wiki_API.API_URL = api_URL(wiki_API.API_URL);
		library_namespace.debug('wiki_API.API_URL = ' + wiki_API.API_URL, 3,
				'set_default_language');

		if (wiki_API.SQL && wiki_API.SQL.config) {
			wiki_API.SQL.config.set_language(wiki_API.language);
		}

		wiki_API.prototype.continue_key = gettext(default_continue_key);

		return wiki_API.language;
	}

	// 設定預設之語言。 English
	set_default_language(
	// `wiki_API.mw_web_session` is not initialized at this time.
	wiki_API.mw_web_session && (
	// mediaWiki.user.options.get('language') === 'zh-tw'
	mediaWiki.config.get('wgContentLanguage')
	// wgULSCurrentAutonym: "中文（台灣）‎"
	// || mediaWiki.config.get('wgPreferredVariant')
	// || mediaWiki.config.get('wgUserVariant')
	// || mediaWiki.config.get('wgUserLanguage')
	// || mediaWiki.config.get('wgPageContentLanguage')
	// {Array} wgULSAcceptLanguageList
	// || mediaWiki.config.get('wgULSAcceptLanguageList')
	// || mediaWiki.config.get('wgULSBabelLanguages')
	) || 'en');

	// [[:en:right-to-left#RTL Wikipedia languages]]
	// 找出使用了由右至左的文字，可用於{{lang}}模板。
	// 應該改用{{tl|rtl-lang}}處理右至左文字如阿拉伯語及希伯來語，請參見{{tl|lang}}的說明。
	// [ all ]
	var LTR_SCRIPTS = 'ar[cz]?|he|fa|bcc|bqi|ckb|dv|glk|kk|lrc|mzn|pnb|ps|sd|u[gr]|yi|tg-Arab',
	// CeL.wiki.PATTERN_LTR.test('ar')===true
	PATTERN_LTR = new RegExp('^(?:' + LTR_SCRIPTS + ')$');

	// ------------------------------------------------------------------------

	// is site using wikidata nomenclature 命名法
	function is_wikidata_site_nomenclature(site_or_language) {
		// TODO: 不是有包含'wiki'的全都是site。
		library_namespace.debug('Test ' + site_or_language, 3,
				'is_wikidata_site_nomenclature');
		return /^[a-z_\d]{2,20}?(?:wiki(?:[a-z]{4,7})?|wiktionary)$/
				.test(site_or_language);
	}

	// ------------------------------------------------------------------------

	if (false) {
		wiki_session.register_redirects([ template_name_1, template_name_2,
				template_name_3 ], {
			namespace : 'Template'
		});

		// ...

		wiki_session.page(page_title, function(page_data) {
			/** {Array} parsed page content 頁面解析後的結構。 */
			var parsed = CeL.wiki.parser(page_data).parse();
			parsed.each('Template:template_name',
					function(token, index, parent) {
						// ...
					});

			// or:

			parsed.each('template', function(token, index, parent) {
				if (wiki_session.is_template(template_name_1, token)) {
					// ...

				} else if (wiki_session.is_template(template_name_2, token)) {
					// ...
				}

				// or:
				switch (wiki_session.redirect_target_of(token)) {
				case wiki_session.redirect_target_of(template_name_1):
					break;
				case wiki_session.redirect_target_of(template_name_2):
					break;
				case wiki_session.redirect_target_of(template_name_3):
					break;
				}
			});
		});
	}

	// wiki_session.normalize_alias(page_title)
	function redirect_target_of(page_title, options) {
		if (!page_title)
			return page_title;

		if (options && options.namespace) {
			page_title = this.to_namespace(page_title, options.namespace);
		} else if (Array.isArray(page_title)
				&& page_title.type === 'transclusion') {
			// treat `page_title` as template token
			page_title = this.to_namespace(page_title.name, 'Template');
		}
		page_title = this.normalize_title(page_title);

		if (Array.isArray(page_title)) {
			return page_title.map(function(title) {
				return this.redirect_target_of(title, options);
			}, this);
		}

		return this.redirects_data[page_title] || page_title;
	}

	function aliases_of_page(page_title, options) {
		page_title = this.normalize_title(page_title);
		options = library_namespace.setup_options(options);
		if (Array.isArray(page_title)) {
			var list = [];
			page_title.forEach(function(title) {
				list.append(this.aliases_of_page(title, options));
			}, this);
			return list;
		}

		return this.redirects_data[page_title] ? Object.keys(
				this.redirects_data).filter(function(_page_title) {
			return (!options.alias_only || _page_title !== page_title)
			//
			&& this.redirects_data[_page_title] === page_title;
		}, this) : [ page_title ];
	}

	// TODO: test for 'Module:Check for unknown parameters'
	function is_template(template_name, token, options) {
		options = Object.assign({
			namespace : 'Template'
		}, options);

		var session = wiki_API.session_of_options(options)
				|| wiki_API.is_wiki_API(this) && this;

		if (token.type === 'transclusion') {
			// treat `token` as template token
			// assert: token.name is normalized
			token = token.name;
		}

		if (session) {
			// normalize template name
			template_name = session.redirect_target_of(template_name, options);
			token = session.redirect_target_of(token, options);
		} else {
			template_name = wiki_API.normalize_title(template_name, options);
			token = wiki_API.normalize_title(token, options);
		}

		// console.trace([ template_name, token ]);
		return Array.isArray(template_name) ? template_name.includes(token)
				: Array.isArray(token) ? token.includes(template_name)
						: template_name === token;
	}

	// --------------------------------------------------------------------------------------------

	wiki_API.has_storage = typeof localStorage === 'object'
			&& library_namespace.is_type(localStorage, 'Storage');
	// retrieve_date
	var KEY_storage_date = 'storage date';

	function get_storage(key) {
		var session = this;
		if (!session.localStorage_prefix)
			return;

		var value = localStorage.getItem(session.localStorage_prefix + key);
		try {
			value = JSON.parse(value);
			if (value[KEY_storage_date]) {
				value[KEY_storage_date] = new Date(value[KEY_storage_date]);
			}
		} catch (e) {
			// JSON.parse() or new Date() error
			return;
		}

		if (Date.now() - value[KEY_storage_date] < session.storage_life) {
			return value;
		}
	}

	// 不常改變的資料可以存放在 localStorage。
	function set_storage(key, value) {
		var session = this;
		if (!session.localStorage_prefix)
			return;

		if (value === undefined || value === null) {
			localStorage.removeItem(session.localStorage_prefix + key);
		} else {
			// assert: library_namespace.is_Object(value)
			value[KEY_storage_date] = new Date;
			// cache key=value
			value = JSON.stringify(value);
			localStorage.setItem(session.localStorage_prefix + key, value);
		}
	}

	// --------------------------------------------------------------------------------------------

	var API_path_separator = '+', KEY_API_parameters = 'API parameters';
	// @inner
	function extract_path_from_parameters(parameters) {
		if (Array.isArray(parameters)) {
			if (is_api_and_title(parameters, true)) {
				// assert: [ API, parameters ]
				// e.g., [ 'ja', {action:'edit'} ]
				parameters = parameters[1];
			} else {
				// e.g., [ 'query', 'revisions' ]
				parameters = parameters.join(API_path_separator);
			}
		}
		if (typeof parameters === 'string')
			return parameters;

		if (parameters.path)
			return parameters.path;

		if (!library_namespace.is_Object(parameters))
			return;

		var path = parameters.action;
		if (!path)
			return;

		if (path === 'query') {
			(wiki_API.page.query_modules
			// for action=query&prop=... , &list=... , &meta=...
			|| [ 'prop', 'meta', 'list' ]).some(function(submodule) {
				if (parameters[submodule]) {
					path += API_path_separator + parameters[submodule];
					return true;
				}
			});
		}
		// console.trace(path);
		return path;
	}

	if (false) {
		// Place in front of function caller() code:
		if (wiki_API.need_get_API_parameters(/* action */'path+path', options,
				caller, arguments)) {
			return;
		}

		// ...

		// Place in front of function wiki_API.query() code for GET:
		action = wiki_API.extract_parameters(options, action, true);
		// or for POST:
		// var post_data = wiki_API.extract_parameters(options, action);

		// @see function wiki_API_siteinfo(), wiki_API_edit()
	}

	var KEY_API_parameters_callback = typeof Symbol === 'function' ? Symbol('API parameters callback')
			: '\0API parameters callback';
	// @inner of need_get_API_parameters()
	function API_parameters__run_callback(session, path) {
		var callback_queue = session.API_parameters[KEY_API_parameters_callback];
		// assert: library_namespace.is_Object(session.API_parameters[path])
		// && Array.isArray(callback_queue[path])
		callback_queue[path].forEach(function(caller) {
			// console.trace(caller);
			// [ caller, _this, caller_arguments ]
			caller[0].apply(caller[1], caller[2]);
		});
		delete callback_queue[path];
	}

	// TODO: 'query+*'
	function need_get_API_parameters(path, options, caller, caller_arguments) {
		var session = wiki_API.session_of_options(options);
		if (!session) {
			// e.g., call `CeL.wiki.page();` directly with anonymous.
			library_namespace.error('need_get_API_parameters: '
					+ 'Must set session to check the necessity.');
			// console.trace(options);
			return;
		}

		path = extract_path_from_parameters(path);
		if (wiki_API.has_storage && !session.API_parameters[KEY_storage_date]) {
			// debugger;
			session.API_parameters = session.get_storage(KEY_API_parameters)
					|| session.API_parameters;
			if (false && !session.API_parameters[KEY_storage_date]) {
				throw new Error('storage error!');
				session.API_parameters[KEY_storage_date] = new Date;
			}
		}
		if (session.API_parameters[path]) {
			library_namespace.debug('Needless to get ' + path, 3,
					'need_get_API_parameters');
			// console.trace(path);
			return false;
		}

		var callback_queue = session.API_parameters[KEY_API_parameters_callback];
		if (!callback_queue) {
			// initialization
			callback_queue = session.API_parameters[KEY_API_parameters_callback] = Object
					.create(null);
		}

		// console.trace([ path, caller ]);
		if (caller) {
			if (!Array.isArray(caller) || caller_arguments !== undefined) {
				// [ caller, _this, caller_arguments ]
				caller = [ caller, null, caller_arguments ];
			}

			if (callback_queue[path]) {
				// 登記要執行的 callback。當多行程複數request一同執行時，可避免卡在一起。
				callback_queue[path].push(caller);

			} else {
				callback_queue[path] = [ caller ];
				library_namespace.debug(
						'Will execute caller later after get API parameters of ['
								+ path + ']...', 1, 'need_get_API_parameters');
				// console.trace(path);
				get_API_parameters(path,
				// `options` 是用在原先的函數 caller()，包含許多額外的 parameters，
				// 會影響 wiki_API.query() @ get_API_parameters()，因此這邊只取 session。
				add_session_to_options(session),
				//
				function(modules, error, data) {
					// console.trace(data);
					if (error)
						throw error;
					API_parameters__run_callback(session, path);
				});
			}
		}
		return true;
	}

	wiki_API.need_get_API_parameters = need_get_API_parameters;

	if (false) {
		// usage:
		CeL.wiki.get_API_parameters('query+revisions', {
			session : wiki
		}, function(modules, error, data) {
			console.log([ modules, error ]);
		});
	}

	// Must be {String} for localStorage
	var KEY_API_parameters_prefix = '\0API parameters prefix';
	function get_API_parameters(path, options, callback) {
		path = extract_path_from_parameters(path);
		// console.trace([ path, options ]);
		// https://www.mediawiki.org/w/api.php?action=help&modules=paraminfo
		wiki_API.query([ , {
			action : 'paraminfo',
			// helpformat : 'wikitext',
			modules : path
		} ], function(data, error) {
			// console.trace([ data, error ]);
			var modules = !error && data && data.paraminfo
					&& Array.isArray(data.paraminfo.modules)
					&& data.paraminfo.modules[0];
			// console.trace(modules);
			if (!modules) {
				callback(undefined, error
				//
				|| new Error('Unknown query result'));
				return;
			}

			// assert: path === modules.path
			// console.trace([ path, modules.path ]);
			var session = wiki_API.session_of_options(options);
			if (session) {
				var prefix = modules.prefix || '';
				var parameters = session.API_parameters[modules.path]
						|| (session.API_parameters[modules.path] = Object
								.create(null));
				// console.trace([ parameters, modules ]);

				// For path='query', modules.prefix=''.
				if ('prefix' in modules)
					parameters[KEY_API_parameters_prefix] = modules.prefix;
				modules.parameters.forEach(function(parameter_data) {
					// assert: library_namespace.is_Object(parameter_data)
					var key = parameter_data.name;
					if (parameters[key])
						Object.assign(parameters[key], parameter_data);
					else
						parameters[key] = parameter_data;
				});
				session.set_storage(KEY_API_parameters,
				// session.get_storage(KEY_API_parameters) @
				// need_get_API_parameters()
				session.API_parameters);
				library_namespace.info([ 'get_API_parameters: ', {
					T : [
					// gettext_config:{"id":"cache-information-about-the-api-modules-of-$1-module-path=$2"}
					"Cache information about the API modules of %1: module path=%2"
					//
					, wiki_API.site_name(session), path ]
				} ]);
				// console.trace(Object.keys(parameters));
				// console.trace(session.API_parameters);
			}
			if (callback)
				callback(modules, null, data);
		}, null, options);
	}

	wiki_API.get_API_parameters = get_API_parameters;

	// extract_parameters_from_options
	// 應盡量少用混雜的方法，如此可能有安全疑慮(security problem)。
	// @see ibrary_namespace.import_options()
	function extract_parameters(from_parameters, action,/* use GET */
	return_new_action) {
		if (is_api_and_title(action))
			action = action[1];
		var session = wiki_API.session_of_options(action)
				|| wiki_API.session_of_options(from_parameters);
		var path = extract_path_from_parameters(action)
				|| extract_path_from_parameters(from_parameters);

		if (return_new_action) {
			// 必須採用:
			// action = wiki_API.extract_parameters(options, action, true);
			// 或者:
			// post_data = wiki_API.extract_parameters(options, action);

			// 而非單純 `wiki_API.extract_parameters(options, action, true);`
			// 這樣可能不會更新 action !
		} else {
			// action = library_namespace.setup_options(action);
			action = library_namespace.Search_parameters(action);
		}

		var extract_to = return_new_action ? action
		// use POST
		// : Object.create(null)
		: new library_namespace.Search_parameters();

		var limited_parameters;
		if (session && path) {
			limited_parameters = session.API_parameters[path];
			if (!limited_parameters)
				library_namespace.error('No API parameters for: ' + path);
			// console.trace(limited_parameters);
		} else {
			library_namespace.warn('No session or no path settled!');
			console.trace([ session, path, from_parameters ]);
		}
		var parameters = action.parameters || Object.keys(from_parameters);
		// console.trace(parameters);
		// console.trace(limited_parameters);
		var prefix = limited_parameters
				&& limited_parameters[KEY_API_parameters_prefix];
		// exclude {key: false}
		parameters.forEach(function(key) {
			// if (typeof key !== 'string') return;

			// !key || key === KEY_SESSION will be deleted later
			if (key === KEY_API_parameters_prefix)
				return;

			/** Normalized key, used in `limited_parameters`. */
			var _key = key;
			if (limited_parameters) {
				// `limited_parameters` 中的 key 已去除 prefix。
				if (prefix) {
					if (key.startsWith(prefix)) {
						_key = key.slice(prefix.length);
					} else if ((prefix + key) in extract_to) {
						// Skip this: 以準確名稱為準。
						return;
					}
				}
				// assert: _key = 已去除 prefix 之 key。
				if (!(_key in limited_parameters)) {
					return;
				}
			}
			var value = from_parameters[key];
			if (!wiki_API.is_valid_parameters_value(value)) {
				return;
			}

			key = prefix ? prefix + _key : _key;
			// assert: key = full key with prefix
			// console.trace([ _key, key, value ]);

			if (typeof value === 'object' && !Array.isArray(value)) {
				// Do not includes {Object}value
				// e.g., key: page_to_edit
				// console.trace(limited_parameters);
				try {
					library_namespace
							.warn('extract_parameters: Invalid value of key: ['
									+ key + ']? ' + value);
				} catch (e) {
					library_namespace
							.warn('extract_parameters: Invalid value of key: ['
									+ key + ']?');
				}
			}

			var information = limited_parameters && limited_parameters[_key];
			if (information) {
				// 基本的檢測。
				if ('deprecated' in information) {
					library_namespace.warn(
					//
					'extract_parameters: Using deprecated parameter: ' + path
							+ ':' + _key);
				}

				switch (information.type) {
				case 'string':
					// value = String(value);
					break;
				case 'boolean':
					if (!value) {
						// return;
					} else {
						// value = 1;
					}
					break;
				case 'limit':
					if (value === 'max')
						break;
				case 'integer':
					if (!library_namespace.is_digits(value)) {
						library_namespace.warn(
						//
						'extract_parameters: Should be a integer: ' + _key
								+ '=' + value);
					}
					break;
				case 'timestamp':
					break;
				case 'user':
					break;
				case 'expiry':
					break;
				default:
					if (Array.isArray(information.type)) {
						if ('multi' in information) {
							// TODO
							// if (value.split('|').some()) {}
						} else if (!information.type.includes(value)) {
							library_namespace.warn(
							//
							'extract_parameters: Not in '
									+ JSON.stringify(information.type) + ': '
									+ _key + '=' + value);
						}
					}
				}
			}
			extract_to[key] = value;
		});

		delete extract_to[''];
		delete extract_to[KEY_SESSION];
		return extract_to;
	}

	wiki_API.extract_parameters = extract_parameters;

	// --------------------------------------------------------------------------------------------

	function URL_of_page(page_title) {
		page_title = this.normalize_title(page_title, {
			use_underline : true
		});
		return this.latest_site_configurations.general.server
				+ this.latest_site_configurations.general.articlepath.replace(
						'$1', page_title);
	}

	// --------------------------------------------------------------------------------------------

	// extract session from options, get_session_from_options
	// var session = session_of_options(options);
	function session_of_options(options) {
		// @see function setup_API_URL(session, API_URL)
		return options
		// 此時嘗試從 options[KEY_SESSION] 取得 session。
		&& (options[KEY_SESSION]
		// 檢查若 options 本身即為 session。
		|| wiki_API.is_wiki_API(options) && options);
	}

	// CeL.wiki.add_session_to_options()
	function add_session_to_options(session, options) {
		// Warning: Will append to original options!!
		// function for_each_token() needs assigning to original options.
		options = library_namespace.setup_options(options);
		if (session)
			options[KEY_SESSION] = session;
		return options;
	}

	// export 導出.

	// @instance 實例相關函數。
	Object.assign(wiki_API.prototype, {
		redirect_target_of : redirect_target_of,
		aliases_of_page : aliases_of_page,
		is_template : is_template,

		get_storage : wiki_API.has_storage ? get_storage
				: library_namespace.null_function,
		set_storage : wiki_API.has_storage ? set_storage
				: library_namespace.null_function,
		storage_life : library_namespace.to_millisecond('1w'),

		// session_namespace(): wrapper for get_namespace()
		namespace : function namespace(namespace, options) {
			return get_namespace(namespace, add_session_to_options(this,
					options));
		},
		remove_namespace : function remove_namespace(page_title, options) {
			return remove_page_title_namespace(page_title,
					add_session_to_options(this, options));
		},
		is_namespace : function is_namespace(page_title, options) {
			if (typeof options !== 'object') {
				options = {
					namespace : options || 0
				}
			} else if (wiki_API.is_page_data(options)) {
				options = {
					namespace : options.ns
				}
			}
			return page_title_is_namespace(page_title, add_session_to_options(
					this, options));
		},
		to_namespace : function to_namespace(page_title, options) {
			if (typeof options !== 'object')
				options = {
					namespace : options || 0
				}
			return convert_page_title_to_namespace(page_title,
					add_session_to_options(this, options));
		},
		// wrappers
		is_talk_namespace : function wiki_API_is_talk_namespace(namespace,
				options) {
			return is_talk_namespace(namespace, add_session_to_options(this,
					options));
		},
		to_talk_page : function wiki_API_to_talk_page(page_title, options) {
			return to_talk_page(page_title, add_session_to_options(this,
					options));
		},
		talk_page_to_main : function wiki_API_talk_page_to_main(page_title,
				options) {
			return talk_page_to_main(page_title, add_session_to_options(this,
					options));
		},

		normalize_title
		//
		: function wiki_API_normalize_title(page_title, options) {
			return normalize_page_name(page_title, add_session_to_options(this,
					options));
		},

		URL_of_page : URL_of_page,

		toString : function wiki_API_toString(type) {
			return get_page_content(this.last_page) || '';
		}
	});

	// ------------------------------------------------------------------------

	// @inner
	library_namespace.set_method(wiki_API, {
		KEY_SESSION : KEY_SESSION,
		KEY_HOST_SESSION : KEY_HOST_SESSION,

		KEY_CORRESPOND_PAGE : KEY_CORRESPOND_PAGE,

		session_of_options : session_of_options,
		add_session_to_options : add_session_to_options,
		setup_API_URL : setup_API_URL,
		setup_API_language : setup_API_language,
		API_URL_of_options : API_URL_of_options,
		is_api_and_title : is_api_and_title,
		normalize_title_parameter : normalize_title_parameter,
		set_parameters : set_parameters,
		is_wikidata_site_nomenclature : is_wikidata_site_nomenclature,
		language_code_to_site_alias : language_code_to_site_alias,

		PATTERN_URL_prefix : PATTERN_URL_prefix,
		PATTERN_wikilink : PATTERN_wikilink,
		PATTERN_wikilink_global : PATTERN_wikilink_global,
		PATTERN_file_prefix : PATTERN_file_prefix,
		PATTERN_URL_WITH_PROTOCOL_GLOBAL : PATTERN_URL_WITH_PROTOCOL_GLOBAL,
		PATTERN_category_prefix : PATTERN_category_prefix,

		PATTERN_PROJECT_CODE_i : PATTERN_PROJECT_CODE_i
	});

	// ------------------------------------------

	// @static
	Object.assign(wiki_API, {
		hostname_of_API_URL : hostname_of_API_URL,
		api_URL : api_URL,
		set_language : set_default_language,
		// site_name_of
		site_name : language_to_site_name,
		// @inner
		get_first_domain_name_of_session : get_first_domain_name_of_session,

		LTR_SCRIPTS : LTR_SCRIPTS,
		PATTERN_LTR : PATTERN_LTR,
		PATTERN_category : PATTERN_category,

		get_PATTERN_full_tag : get_PATTERN_full_tag,

		upper_case_initial : upper_case_initial,

		is_namespace : page_title_is_namespace,
		to_namespace : convert_page_title_to_namespace,
		remove_namespace : remove_page_title_namespace,
		//
		is_talk_namespace : is_talk_namespace,
		to_talk_page : to_talk_page,
		talk_page_to_main : talk_page_to_main,

		file_pattern : file_pattern,

		plain_text : wikitext_to_plain_text,

		template_text : to_template_wikitext,

		is_template : is_template,

		escape_text : escape_text,

		/** constant 中途跳出作業用。 */
		quit_operation : {
			// 單純表達意思用的內容結構，可以其他的值代替。
			quit : true
		},

		is_page_data : get_page_content.is_page_data,

		title_of : get_page_title,
		// CeL.wiki.title_link_of() 常用於 summary 或 log/debug message。
		title_link_of : get_page_title_link,
		revision_content : revision_content,
		content_of : get_page_content,
		// normalize_page_title
		normalize_title : normalize_page_name,
		normalize_title_pattern : normalize_name_pattern,
		get_hash : list_to_hash,
		unique_list : unique_list
	});

	// wiki_API.namespace = get_namespace;
	return get_namespace;
}

});
// application.net.MIME
/**
 * @name CeL function for checking MIME type
 * 
 * @fileoverview 本檔案包含了 checking MIME type 用的程式庫。
 * 
 * TODO:<code>

</code>
 * 
 * @since 2017/1/27 7:55:6
 * @see https://en.wikipedia.org/wiki/Media_type
 *      https://www.iana.org/assignments/media-types/media-types.xhtml
 *      https://github.com/jshttp/mime-types
 */

'use strict';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name.
	name : 'application.net.MIME',

	// 可以參考 CeL.application.storage.file
	require : '',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// requiring
	// require : '',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	/**
	 * null module constructor
	 * 
	 * @class XML 操作相關之 function。
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// --------------------------------------------------------------------------------------------

	/**
	 * @see 用 CeL.application.storage.file verify_file_type() 可以驗證檔案格式。
	 */
	function extension_of(url) {
		if (!url) {
			return;
		}

		url = String(url);
		if (url.includes('://')) {
			url = url.replace(/[#?].*$/, '');
		}
		var matched = url.match(/\.([^.]+)$/i);
		if (matched) {
			if (/[a-z\d\-]+/i.test(matched[1])) {
				return matched[1];
			}
		} else if (/^[a-z\d\-]+$/i.test(url)) {
			return url;
		}
	}

	_.file_name_extension_of = extension_of;

	// 由 file name extension or url 簡易判別，可能出錯。
	function MIME_type_of_extension(url, options) {
		var extension = extension_of(url);
		if (!extension) {
			return;
		}

		// no .trim()
		extension = extension.toLowerCase();

		// common MIME types
		// 常用 MIME types
		switch (extension) {

		// https://en.wikipedia.org/wiki/Image_file_formats
		case 'jpg':
			extension = 'jpeg';
		case 'jpeg':
		case 'png':
		case 'gif':
		case 'webp': // https://en.wikipedia.org/wiki/WebP
		case 'bmp':
			// png → image/png
			return 'image/' + extension;

		case 'ico':
		case 'icon':
			// favicon: image/vnd.microsoft.icon
			return 'image/x-icon';

			// ---------------------------------------------

		case 'mp3':
			return 'audio/mpeg';

		case '3gpp':
		case 'ac3':
		case 'ogg':
			return 'audio/' + extension;

			// ---------------------------------------------

		case 'avi':
		case 'mp4':
		case 'mpeg':
			return 'video/' + extension;

			// ---------------------------------------------

		case 'txt':
			return 'text/plain';

		case 'htm':
			extension = 'html';
		case 'html':
			//
		case 'css':
		case 'csv':
			return 'text/' + extension;

		case 'svg':
			return 'image/svg+xml';

		case 'xhtml':
			return 'application/xhtml+xml';

		case 'rtf':
		case 'pdf':
		case 'xml':
			return 'application/' + extension;

			// ---------------------------------------------

		case 'otf':
		case 'ttf':
		case 'woff':
		case 'woff2':
			return 'font/' + extension;

		}

	}

	_.MIME_of = MIME_type_of_extension;

	// top-level type name
	function main_MIME_type_of_extension(url) {
		var type = MIME_type_of_extension(url);
		if (!type) {
			return;
		}
		var matched = type.match(/^([a-z]+)\//);
		if (matched) {
			return matched[1];
		}
	}

	_.main_MIME_type_of = main_MIME_type_of_extension;

	// --------------------------------------------------------------------------------------------

	// export 導出.

	return (_// JSDT:_module_
	);
}

});
// application.net.Ajax
/**
 * @name CeL function for Ajax (Asynchronous JavaScript and XML)
 * @fileoverview 本檔案包含了模擬WWW客戶端發送HTTP/HTTPS請求用的 functions。
 * @since 2015/1/1
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.Ajax',

	// Promise for fetch()
	require : 'data.code.compatibility.'
	// library_namespace.copy_properties()
	+ '|data.native'
	// MIME_of()
	+ '|application.net.MIME.'
	// for CeL.to_file_name(), CeL.URI, CeL.Search_parameters
	+ '|application.net.',

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	function time_message(millisecond) {
		if (library_namespace.age_of) {
			return library_namespace.age_of(0, millisecond, {
				digits : 1
			});
		}

		return millisecond % 1000 === 0 ? millisecond / 1000 + 's'
				: millisecond + 'ms';
	}

	// "Error: socket hang up" {code: 'ECONNRESET'}
	// "Error: connect ETIMEDOUT 1.1.1.1:80"
	// {errno:'ETIMEDOUT', code: 'ETIMEDOUT', address: '125.89.70.31', port:80 }
	// Error: connect ECONNREFUSED 127.0.0.1:443
	// "Error: read ECONNRESET"
	// {errno: 'ECONNRESET', code: 'ECONNRESET', syscall: 'read'}
	// Error: getaddrinfo ENOTFOUND domain
	// ERROR_BAD_STSTUS
	// Error: Timeout 30s
	function localize_error(error) {
		var message = String(error);
		if (library_namespace.gettext) {
			// 處理特別的錯誤訊息。
			var matched = message
					.match(/^(Error: (?:(?:connect|getaddrinfo) E[A-Z]+|Timeout) )(.+)$/);
			if (matched) {
				message = [ matched[1] + '%1', matched[2] ];
			}
			message = Array.isArray(message)
			// gettext_config:{"id":"error-connect-etimedout-$1","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-connect-econnrefused-$1","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-getaddrinfo-enotfound-$1","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-timeout-$1","mark_type":"combination_message_id"}
			? library_namespace.gettext.apply(null, message)
			// gettext_config:{"id":"error-socket-hang-up","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-read-econnreset","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-write-econnaborted","mark_type":"combination_message_id"}
			// gettext_config:{"id":"error-unexpected-end-of-file","mark_type":"combination_message_id"}
			: library_namespace.gettext(message);
		}
		return message;
	}

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	/**
	 * null module constructor
	 * 
	 * @class web Ajax 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// ---------------------------------------------------------------------//
	// XMLHttp set ajax通信処理ライブラリ ==================

	/**
	 * <code>
	to use: include in front:
	way1(good: 以reg代替functionPath!):
	//		[function.js]_iF
	//		[function.js]End

	way2(old):
	//		[function.js]getU,functionPath,'eval(getU(functionPath));'
	//		[function.js]End

	old:
	function getU(p){var o;try{o=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){o=new XMLHttpRequest();}if(o)with(o){open('GET',p,false),send(null);return responseText;}}
	</code>
	 */

	/**
	 * JScript or .wsh only, 能 encode.
	 * 
	 * @param {String}page_url
	 *            page url
	 * @param {String}[charset]
	 *            character encoding of HTML web page. e.g., 'UTF-8', big5,
	 *            euc-jp, ...
	 * @param POST_text
	 *            POST text
	 * 
	 * @returns {String}
	 * @see http://neural.cs.nthu.edu.tw/jang/books/asp/getWebPage.asp?title=10-1%20%E6%8A%93%E5%8F%96%E7%B6%B2%E9%A0%81%E8%B3%87%E6%96%99
	 */
	function get_page(page_url, charset, POST_text) {
		try {
			// may cause error
			var X = new ActiveXObject('Microsoft.XMLHTTP'), AS;
			X.open(POST_text ? 'POST' : 'GET', page_url, false);
			// POST need this
			X.setRequestHeader("Content-Type",
					"application/x-www-form-urlencoded");
			// Download the file
			X.send(POST_text || null);
			AS = new ActiveXObject("ADODB.Stream");
			// 可同時進行讀寫
			AS.Mode = 3;
			// 以二進位方式操作
			AS.Type = 1;
			// 開啟物件
			AS.Open();
			// 將 binary 的資料寫入物件內 may error
			AS.Write(X.responseBody);
			AS.Position = 0;
			// 以文字模式操作
			AS.Type = 2;
			// 設定編碼方式
			if (charset)
				AS.Charset = charset;
			// 將物件內的文字讀出
			X = AS.ReadText();
			// Release memory. 釋放被占用的記憶體.
			AS = null;
			return X;
		} catch (e) {
			library_namespace.warn('get_page: ' + e.message);
		}
	}

	// ---------------------------------------------------------------------//

	var KEY_URL = typeof Symbol === 'function' ? Symbol('URL')
			: '\0URL to fetch';

	/**
	 * 
	 * @param URL_to_fetch
	 * @param search
	 * @param hash
	 * @returns
	 * 
	 * @inner
	 */
	function set_parameters_and_hash(URL_to_fetch, search, hash) {
		// URL_to_fetch = library_namespace.URI(URL_to_fetch);
		// assert: library_namespace.is_URI(URL_to_fetch)
		if (hash || hash === '') {
			if (Object.defineProperty[KEY_not_native] && !/^#/.test(hash))
				hash = '#' + hash;
			URL_to_fetch.hash = hash;
		}
		URL_to_fetch.search_params.set_parameters(search);
		// console.trace(URL_to_fetch.toString(charset));
		return URL_to_fetch;
	}

	function normalize_URL_to_fetch(URL_to_fetch, charset, options) {
		// console.trace(URL_to_fetch);

		// https://developer.mozilla.org/en-US/docs/Web/API/URL
		// [ origin + pathname, search, hash ]
		// hrer = [].join('')
		if (Array.isArray(URL_to_fetch)) {
			URL_to_fetch = set_parameters_and_hash(library_namespace
					.URI(URL_to_fetch[0]), URL_to_fetch[1], URL_to_fetch[2]);
			if (charset)
				URL_to_fetch.charset = charset;
		} else {
			// 當輸入 {URL} 時，node_https.request() 會將 {URL} 轉成
			// {Object}options，不會考慮額外選項 (headers, ...)。
			// 且必須處理 charset，乾脆直接將 {URL} 轉成尋常 plain object / {URI}。
			// https://nodejs.org/api/http.html#http_http_request_url_options_callback
			// If url is a string, it is automatically parsed with new URL(). If
			// it is a URL object, it will be automatically converted to an
			// ordinary options object.

			// console.log(URL_to_fetch);
			URL_to_fetch = library_namespace.URI(URL_to_fetch, null, {
				charset : charset
			});
			// console.trace(URL_to_fetch);
		}
		// assert: library_namespace.is_URI(URL_to_fetch)
		// console.trace(URL_to_fetch);

		if (options.search || options.hash) {
			URL_to_fetch = set_parameters_and_hash(URL_to_fetch,
					options.search, options.hash);
		}

		library_namespace.debug({
			T : [ 'Fetching URL: %1', '{' + (typeof URL_to_fetch) + '} ['
			//
			+ (typeof URL_to_fetch === 'string' ? URL_to_fetch
			//
			: URL_to_fetch && URL_to_fetch[KEY_URL]
			//
			|| URL_to_fetch.toString(charset)) + ']' ]
		}, 1, 'normalize_URL_to_fetch');

		return URL_to_fetch;
	}

	if (false)
		// default arguments
		var get_URL_arguments = {
			URL : '',
			charset : '',
			// HTTP方法，如"GET", "POST", HEAD, "PUT", "DELETE"等。
			method : 'GET',
			post_data : {},
			async : true,
			// user name. 驗證用使用者名稱。
			user : '',
			// 驗證用密碼。
			password : '',
			// header
			headers : {
				contentType : 'text/xml'
			},
			// location.search
			search : {
				contentType : 'text/xml'
			},
			// location.hash
			hash : '',
			mime : 'text/xml',
			// onreadystatechange
			onchange : function() {
			},
			timeout : 0,
			onfail : function(error) {
				this.status;
			},
			onload : function() {
			}
		};

	// XMLHttp.readyState 所有可能的值如下：
	// 0 還沒開始
	// 1 讀取中 Sending Data
	// 2 已讀取 Data Sent
	// 3 資訊交換中 interactive: getting data
	// 4 一切完成 Completed
	var readyState_done = 4,
	//
	document_head = library_namespace.is_WWW(true)
			&& (document.head || document.getElementsByTagName('head')[0]);

	/**
	 * 讀取 URL via XMLHttpRequest。
	 * 
	 * @param {String|Object}URL_to_fetch
	 *            欲請求之目的 URL or options
	 * @param {Function}[onload]
	 *            callback when successful loaded
	 * @param {String}[charset]
	 *            character encoding of HTML web page. e.g., 'UTF-8', big5,
	 *            euc-jp, ...
	 * @param {String|Object}[post_data]
	 *            text data to send when method is POST
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * TODO: 代理伺服器 using proxy server
	 * 
	 * @see https://developer.mozilla.org/zh-TW/docs/DOM/XMLHttpRequest
	 *      http://msdn.microsoft.com/en-us/library/ie/ms535874.aspx
	 */
	function get_URL(URL_to_fetch, onload, charset, post_data, options) {
		// 前導作業。
		if (library_namespace.is_Object(charset)) {
			post_data = charset;
			charset = null;
		}
		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		options = library_namespace.new_options(options);

		// ------------------------------------------------------

		if (library_namespace.is_Object(URL_to_fetch) && URL_to_fetch[KEY_URL]) {
			Object.assign(options, URL_to_fetch);
			// 注意: options.onload 另有用途!
			// https://xhr.spec.whatwg.org/#handler-xhr-onloadstart
			// onload = options.onload || onload;
			post_data = options.post || post_data;
			charset = options.charset || charset;
			URL_to_fetch = options[KEY_URL];
		}

		URL_to_fetch = normalize_URL_to_fetch(URL_to_fetch, charset, options);
		// assert: library_namespace.is_URI(URL_to_fetch)

		if (typeof onload === 'object') {
			library_namespace.debug(
					'Trying to JSONP, insert page, need callback.', 3,
					'get_URL');
			// library_namespace.run(URL_to_fetch);
			for ( var callback_param in onload) {
				library_namespace.debug('Trying ('
						+ (typeof onload[callback_param]) + ') ['
						+ callback_param + '] = [' + onload[callback_param]
						+ ']', 3, 'get_URL');
				if (callback_param
						&& typeof onload[callback_param] === 'function') {
					var callback_name, node = document.createElement('script');
					for (charset = 0; (callback_name = 'cb' + charset) in library_namespace;)
						charset++;
					library_namespace[callback_name] = function(data) {
						library_namespace.debug('[' + URL_to_fetch
								+ ']: callback 完自動移除 .js。', 2, 'get_URL');
						document_head.removeChild(node);
						// Release memory. 釋放被占用的記憶體.
						node = null;
						delete library_namespace[callback_name];
						onload[callback_param](data);
					};
					// callback_param: callback parameter
					URL_to_fetch.search_params[callback_param] = library_namespace.Class
							+ '.' + callback_name;
					node.src = URL_to_fetch.toString();
					library_namespace.debug('Use script node: [' + node.src
							+ ']', 3, 'get_URL');
					document_head.appendChild(node);
					return;
				}
			}
			library_namespace.debug('Skip JSONP. No callback specified.', 3,
					'get_URL');
		}

		if (post_data && !options.form_data) {
			post_data = library_namespace.Search_parameters(post_data)
					.toString(charset);
		}

		if (!onload && typeof options.onchange === 'function') {
			onload = function() {
				options.onchange(readyState_done, XMLHttp);
			};
		}

		if (options.async === false && onload || typeof onload !== 'function') {
			onload = false;
		}

		/**
		 * The XMLHttpRequest object can't be cached.
		 */
		var XMLHttp = library_namespace.new_XMLHttp();

		try {
			// IE:404 會 throw error, timeout 除了 throw error,
			// 還會 readystatechange;
			// Gecko 亦會 throw error
			// IE 10 中，local file 光 .open() 就 throw 了。
			XMLHttp.open(options.method || (post_data ? 'POST' : 'GET'),
					URL_to_fetch.toString(), !!onload, options.user || '',
					options.password || '');

			// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response
			// XMLHttp.responseType = 'blob';

			if (options.timeout > 0 && !onload) {
				// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
				XMLHttp.timeout = options.timeout;
				if (typeof options.onfail === 'function')
					XMLHttp.ontimeout = function(e) {
						options.onfail.call(XMLHttp, e || 'Timeout');
					};
			}
			// TODO: 處理有 onload 下之 timeout 逾時ms數
			// Ajax 程式應該考慮到 server 沒有回應時之處置

			if (library_namespace.is_Object(options.head)
			// https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/setRequestHeader
			// `!!XMLHttp.setRequestHeader` will throw @ HTA (HTML Application)
			&& ('setRequestHeader' in XMLHttp)) {
				Object.keys(options.head).forEach(function(key) {
					XMLHttp.setRequestHeader(key, options.head[key]);
				});
			}

			if (options.mime) {
				// ignore charset!
				charset = options.mime;
			} else if (charset) {
				// old: 'text/xml;charset=' + charset
				// 但這樣會被當作 XML 解析，產生語法錯誤。
				// TODO: try:
				// 'text/'+(/\.x(ht)?ml$/i.test(URL_to_fetch)?'xml':'plain')+';charset='
				// + charset;
				charset = 'application/json;charset=' + charset;
			}

			// 有些版本的 Mozilla 瀏覽器在伺服器送回的資料未含 XML mime-type
			// 檔頭（header）時會出錯。為了避免這個問題，可以用下列方法覆寫伺服器傳回的檔頭，以免傳回的不是 text/xml。
			// http://squio.nl/blog/2006/06/27/xmlhttprequest-and-character-encoding/
			// http://www.w3.org/TR/XMLHttpRequest/ search encoding
			if (charset && XMLHttp.overrideMimeType)
				XMLHttp.overrideMimeType(charset);

			if (onload) {
				XMLHttp.onreadystatechange = function() {
					if (XMLHttp.readyState === readyState_done)
						return onload(XMLHttp);

					if (0 < XMLHttp.readyState
							&& XMLHttp.readyState < readyState_done) {
						if (typeof options.onchange === 'function')
							options.onchange(XMLHttp.readyState, XMLHttp);
					} else if (typeof options.onfail === 'function') {
						options.onfail(XMLHttp);
					}
				};
			}

			// 若檔案不存在，會 throw。
			XMLHttp.send(post_data || null);

			if (!onload) {
				// XMLHttp.response blob
				// XMLHttp.responseText 會把傳回值當字串用
				// XMLHttp.responseXML 會把傳回值視為 XMLDocument 物件，而後可用 JavaScript
				// DOM 相關函式處理
				// IE only(?):
				// XMLHttp.responseBody 以unsigned array格式表示binary data
				// try{responseBody=(new
				// VBArray(XMLHttp.responseBody)).toArray();}catch(e){}
				// http://aspdotnet.cnblogs.com/archive/2005/11/30/287481.html
				// XMLHttp.responseStream return AdoStream
				return XMLHttp.responseText;
			}

		} catch (e) {
			library_namespace.error(e);
			if (typeof options.onfail === 'function') {
				options.onfail(XMLHttp, e);
			} else if (onload) {
				onload(undefined, e);
			}
		}

	}

	_.get_URL = get_URL;

	// TODO: 處理 multiple requests
	function get_URLs() {
	}

	// ----------------------------------------------------

	var is_nodejs = library_namespace.platform.nodejs;

	/**
	 * <code>

	// "file": keyword for "Content-Disposition: file;"
	{type:'jpg',image:{file:'fn1.jpg'}}

	// will fetch url first.
	{type:'jpg',image:{url:'http://host/'}}

	{type:'jpg',image:{file:'fn1.jpg',type:'image/jpeg'}}

	// Array: use "Content-Type: multipart/mixed;"
	{type:'jpg',images:[{file:'fn1.jpg'},{file:'fn2.jpg'}]}

	{type:'jpg',images:[{file:'fn1.jpg'},{file:'fn2.jpg'}],docs:[{file:'fn1.txt'},{file:'fn2.txt'}]}

	{type:'jpg',images:[{file:'fn1.jpg',type:'image/jpeg'},{file:'fn1.txt',type:'text/plain'}]}

	</code>
	 */

	// should be CRLF
	// @see https://tools.ietf.org/html/rfc7578#section-4.1
	var form_data_new_line = '\r\n';

	function form_data_to_Array(is_slice) {
		if (this.generated) {
			return this.generated;
		}

		var boundary = '--' + this.boundary + form_data_new_line,
		// generated raw post data
		generated = this.generated = [ boundary ], content_length = boundary.length;
		boundary = form_data_new_line + boundary;
		this.forEach(function(chunk, index) {
			if (Array.isArray(chunk)) {
				// chunk = chunk.to_Array(true);
				if (!chunk.content_length) {
					console.log(chunk);
					throw new Error(
					// gettext_config:{"id":"the-chunk-do-not-has-regular-.content_length"}
					'The chunk do not has regular .content_length!');
				}
				content_length += chunk.content_length;
			} else {
				// chunk: {String} or {Buffer}
				content_length += chunk.length;
			}
			generated.push(chunk);
			if (index < this.length - 1) {
				generated.push(boundary);
				content_length += boundary.length;
			}
		}, this);

		if (!(content_length > 0)) {
			console.log(this);
			// gettext_config:{"id":"illegal-chunk.content_length"}
			throw new Error('Illegal chunk.content_length!');
		}

		boundary = form_data_new_line + '--' + this.boundary;
		if (!is_slice) {
			boundary += '--';
		}
		generated.push(boundary);
		content_length += boundary.length;

		generated.content_length = content_length;
		// console.log(generated);
		return generated;
	}

	// 選出 data.generated 不包含之 string
	function give_boundary(data_Array) {
		function not_includes_in(item) {
			// console.trace([ typeof item, item ]);
			return Array.isArray(item) ? item.every(not_includes_in)
			// item: Should be {String} or {Buffer}
			: !item.includes(boundary);
		}

		var boundary, retry_count = 0;
		while (retry_count++ < 8) {
			boundary = (Number.MAX_SAFE_INTEGER * Math.random())
					.toString(10 + 26);
			// console.log('test boundary: [' + boundary + ']');
			for (var i = 1; i < boundary.length / 2 | 0; i++) {
				var slice = boundary.slice(0, i);
				if (boundary.lastIndexOf(slice) > 0) {
					boundary = null;
					break;
				}
			}
			// assert: boundary 不自包含，例如 'aa'自包含'a'，'asas'自包含'as'
			if (boundary) {
				if (not_includes_in(data_Array)) {
					data_Array.boundary = boundary;
					return boundary;
				}
			}
		}
		throw new Error('give_boundary: '
		// gettext_config:{"id":"retry-too-many-times"}
		+ 'Retry too many times!');
	}

	var to_form_data_generated = {
		form_data_generated : true
	};

	// https://github.com/form-data/form-data/blob/master/lib/form_data.js
	// https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2
	// https://tools.ietf.org/html/rfc7578
	// https://tools.ietf.org/html/rfc2046#section-5.1
	// The "multipart" boundary delimiters and header fields are always
	// represented as 7bit US-ASCII
	// https://tools.ietf.org/html/rfc2049#appendix-A
	// http://stackoverflow.com/questions/4238809/example-of-multipart-form-data
	function to_form_data(parameters, callback, options) {
		function get_file_object(value, callback, key, slice) {
			var is_url, MIME_type;
			if (typeof value === 'string') {
				is_url = value.includes('://');

			} else
			// else: assert: library_namespace.is_Object(value)
			if (is_url = value.url) {
				value = is_url;
				// is_url = true;
			} else {
				// .type: MIME type
				MIME_type = value.type;
				// value: file_path
				value = value.file;
			}

			function push_and_callback(MIME_type, content) {
				// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
				var headers = 'Content-Disposition: '
						+ (slice ? 'file' : 'form-data; name="' + key + '"')
						+ '; filename="' + encodeURIComponent(value) + '"'
						+ "; filename*=UTF-8''" + encodeURIComponent(value)
						+ form_data_new_line;
				if (MIME_type) {
					headers += 'Content-Type: ' + MIME_type
							+ form_data_new_line;
				}
				if (is_nodejs && Buffer.isBuffer(content)) {
					headers += 'Content-Transfer-Encoding: binary'
							+ form_data_new_line;
				}
				headers += form_data_new_line;
				var chunk = [ headers, content ];
				// 手動設定 Content-Length。
				chunk.content_length = headers.length + content.length;
				// TODO: use stream
				(slice || root_data).push(chunk);
				callback();
			}

			if (!is_url) {
				var content;
				// read file contents
				if (is_nodejs) {
					try {
						// get {Buffer}
						content = node_fs.readFileSync(value);
					} catch (e) {
						// When we cannot read, it will throw now.
						// e.g., Error: ENOENT: no such file or directory, open
						// 'value'
					}
				} else {
					// node.js 之下此方法不能處理 binary data。
					content = library_namespace
							.get_file(value/* , 'binary' */);
				}
				if (!content) {
					library_namespace.error([ 'to_form_data: ', {
						// gettext_config:{"id":"failed-to-get-file-$1"}
						T : [ 'Failed to get file: [%1]', value ]
					} ]);
					// Skip this one.
					callback();
					return;
				}

				if (options && options.file_post_processor) {
					options.file_post_processor(value, content);
				}
				// value: file path → file name
				value = value.match(/[^\\\/]*$/)[0];
				if (!MIME_type) {
					MIME_type = library_namespace.MIME_of(value);
				}
				push_and_callback(MIME_type, content);
				return;
			}

			library_namespace.debug({
				// gettext_config:{"id":"fetching-url-$1"}
				T : [ '自網路取得 URL：%1', value ]
			}, 1, 'to_form_data');
			_.get_URL(value, function(XMLHttp, error) {
				if (options && options.url_post_processor) {
					options.url_post_processor(value, XMLHttp, error);
				}
				if (error) {
					library_namespace.error([ 'to_form_data: ', {
						// gettext_config:{"id":"got-error-when-retrieving-$1-$2"}
						T : [ 'Got error when retrieving [%1]: %2',
						//
						value, localize_error(error) ]
					} ]);
					// Skip this one.
					callback();
					return;
				}

				// value: url → file name
				value = value.replace(/[?#].*$/, '')
						.match(/([^\\\/]*)[\\\/]?$/)[1];
				// console.log('-'.repeat(79));
				// console.log(value);

				library_namespace.debug({
					// gettext_config:{"id":"got-url-from-the-network-$1-$2-bytes"}
					T : [ '自網路取得 URL：%1，%2{{PLURAL:%2|位元組}}。', value,
							XMLHttp.buffer.length ]
				}, 1, 'to_form_data');
				push_and_callback(XMLHttp.type, XMLHttp.buffer);
			}, 'buffer');
		}

		parameters = library_namespace.Search_parameters(parameters);

		var root_data = [], keys = Object.keys(parameters), index = 0;
		root_data.to_Array = form_data_to_Array;
		// console.log('-'.repeat(79));
		// console.log(keys);
		// 因為在遇到fetch url時需要等待，因此採用async。
		function process_next() {
			if (false) {
				console.log('-'.repeat(60));
				console.log('process_next: ' + index + '/' + keys.length);
				console.log(root_data);
			}

			if (index === keys.length) {
				// 決定 boundary
				give_boundary(root_data);
				// WARNING: 先結束作業: 生成 .to_Array()，
				// 才能得到 root_data.to_Array().content_length。
				root_data.to_Array();
				if (false) {
					console.log('-'.repeat(79));
					console.log(root_data);
					console.log('-'.repeat(79));
					console.log(root_data.to_Array().content_length);
					console.log(root_data.to_Array().join(''));
					throw 5;
				}
				callback(root_data);
				return;
			}

			var key = keys[index++], value = parameters[key];
			// console.log(key + ': ' + JSON.stringify(value));
			if (Array.isArray(value)) {
				// assert: is files/urls
				var slice = [], item_index = 0,
				//
				next_item = function() {
					if (item_index === value.length) {
						give_boundary(slice);
						var headers = 'Content-Disposition: form-data; name="'
								+ key + '"' + form_data_new_line
								+ 'Content-Type: multipart/mixed; boundary='
								+ slice.boundary + form_data_new_line
								+ form_data_new_line;
						slice = form_data_to_Array.call(slice, true);
						slice.unshift(headers);
						slice.content_length += headers.length;
						root_data.push(slice);
						process_next();
					} else {
						get_file_object(value[item_index++], next_item,/* key */
						undefined, slice);
					}
				};
				next_item();
				return;
			}

			if (library_namespace.is_Object(value)) {
				// assert: is file/url
				get_file_object(value, process_next, key);
				return;
			}

			// 預防有 null, undefined, {Number}, true 之類。
			if (!value || typeof value === 'number'
					|| typeof value === 'boolean') {
				value = String(value);
			}

			var headers;
			if (is_nodejs && typeof value === 'string') {
				value = Buffer.from(value, 'utf8');
				headers = 'Content-Type: text/plain; charset=UTF-8'
						+ form_data_new_line;
			}

			// 非檔案，屬於普通的表單資料。
			if (!key) {
				throw new Error('No key for value: ' + value);
			}
			if (!value && value !== '') {
				// e.g., token=undefined
				throw new TypeError('Invalid type of ' + key + ': '
						+ typeof value);
			}

			// @see function push_and_callback(MIME_type, content)
			headers = 'Content-Disposition: form-data; name="' + key + '"'
					+ form_data_new_line + (headers || '') + form_data_new_line;
			var chunk = [ headers, value ];
			// 手動設定 Content-Length。
			chunk.content_length = headers.length + value.length;
			root_data.push(chunk);
			process_next();
		}
		process_next();

		return root_data;
	}

	_.to_form_data = to_form_data;

	// ---------------------------------------------------------------------//

	/**
	 * <code>
		讀取URL by XMLHttpRequest
		http://jck11.pixnet.net/blog/post/11630232
	
	 * 若有多行程或為各URL設定個別XMLHttp之必要，請在一開始便設定deprecated_get_URL.multi_request，並且別再更改。
	 ** 在此情況下，單一URL仍只能有單一個request!
	 ** 設定 handle_function 須注意程式在等待回應時若無執行其他程式碼將自動中止！
		可設定：
		while(deprecated_get_URL.doing)WScript.Sleep(1);	//||timeout
	
	arguments f:{
		URL:'',	//	The same origin policy prevents document or script loaded from one origin, from getting or setting properties from a of a document from a different origin.(http://www.mozilla.org/projects/security/components/jssec.html#sameorigin)
		enc:'UTF-8',	//	charset: big5, euc-jp,..
		fn:(handle_function),	//	onLoad:function(){},
		method:'GET',	//	POST,..
		sendDoc:'text send in POST,..'
		async:ture/false,	//	true if want to asynchronous(非同期), false if synchronous(同期的,會直到readyState==4才return)	http://jpspan.sourceforge.net/wiki/doku.php?id=javascript:xmlhttprequest:behaviour
		user:'userName',
		passwd:'****',	//	password
	
	//TODO:
		parameters:'~=~&~=~', // {a:1,b:2}
		header:{contentType:'text/xml'},
		contentType:'text/xml',
		run:true/false,	//	do eval
		update:DOMDocument,	//	use onLoad/onFailed to 加工 return text. onFailed(){throw;} will abort change.
		interval:\d,
		decay:\d,	//	wait decay*interval when no change
		maxInterval::\d,
		//insertion:top/bottom,..
		onFailed:function(error){this.status;},	//	onFailed.apply(XMLHttp,[XMLHttp.status])
		onStateChange:function(){},
	}
	
	
	handle_function:
	自行處理	typeof handle_function=='function':
	function handle_function(error){..}
	代為處理	handle_function=[d_func,0: responseText,1: responseXML]:
	responseXML:	http://msdn2.microsoft.com/en-us/library/ms757878.aspx
	function d_func(content,head[,XMLHttp,URL]){
		if(head){
			//	content,head各為XMLHttp.responseText內容及XMLHttp.getAllResponseHeaders()，其他皆可由XMLHttp取得。
		}else{
			//	content為error
		}
	}
	e.g., the simplest: [function(c,h){h&&alert(c);}]
	
	)
	</code>
	 */
	// (URL,fn) or flag URL, handle_function handle result,
	// method,sendDoc,asyncFlag,userName,password
	function deprecated_get_URL(f) {
		var _f = arguments.callee;
		if (typeof _f.XMLHttp === 'object') {
			// try{_f.XMLHttp.abort();}catch(e){}
			// 此時可能衝突或lose?!
			_f.XMLHttp = null;
		}
		// 處理 arguments
		if (!library_namespace.is_Object(f))
			a = arguments, f = {
				URL : f,
				fn : a[1],
				method : a[2],
				sendDoc : a[3]
			};
		if (f.post)
			f.method = 'POST', f.sendDoc = f.post;

		if (!f[KEY_URL]
				|| !(_f.XMLHttp = library_namespace.new_XMLHttp(f.enc,
						!/\.x(?:ht)?ml$/i.test(f[KEY_URL]))))
			// throw
			return;

		// try{_f.XMLHttp.overrideMimeType('text/xml');}catch(e){}
		if (typeof f.async !== 'boolean')
			// 設定f.async
			f.async = f.fn ? true : false;
		else if (!f.async)
			f.fn = null;
		else if (!f.fn)
			if (typeof _f.HandleStateChange !== 'function'
					|| typeof _f.HandleContent !== 'function')
				// 沒有能處理的function
				// throw
				return;
			else
				// =null;
				f.fn = _f.HandleContent;
		if (/* typeof _f.multi_request!=='undefined'&& */_f.multi_request) {
			if (!_f.q)
				// queue
				_f.i = {}, _f.q = [];
			// ** 沒有考慮到 POST 時 URL 相同的情況!
			_f.i[f[KEY_URL]] = _f.q.length;
			_f.q.push({
				uri : f[KEY_URL],
				XMLHttp : _f.XMLHttp,
				func : f.fn,
				start : _f.startTime = new Date
			});
		} else if (_f.q && typeof _f.clean === 'function')
			_f.clean();

		// for Gecko Error: uncaught exception: Permission denied to call method
		// XMLHttpRequest.open
		if (f[KEY_URL].indexOf('://') !== NOT_FOUND
				&& typeof netscape === 'object')
			if (_f.asked > 2) {
				_f.clean(f[KEY_URL]);
				return;
			} else
				try {
					if (typeof _f.asked === 'undefined') {
						_f.asked = 0;
						alert('我們需要一點權限來使用 XMLHttpRequest.open。\n* 請勾選記住這項設定的方格。');
					}
					netscape.security.PrivilegeManager
					// UniversalBrowserAccess
					.enablePrivilege('UniversalXPConnect');
				} catch (e) {
					_f.asked++;
					_f.clean(f[KEY_URL]);
					return;
				}

		// if(isNaN(_f.timeout))_f.timeout=300000;//5*60*1000;
		try {
			// IE:404會throw error, timeout除了throw error, 還會readystatechange;
			// Gecko亦會throw error
			try {
				_f.XMLHttp.setRequestHeader("Accept-Encoding",
						"gzip, deflate, br");
			} catch (e) {
			}
			// Set header so the called script knows that it's an XMLHttpRequest
			if (false)
				_f.XMLHttp.setRequestHeader("X-Requested-With",
						"XMLHttpRequest");
			// Set the If-Modified-Since header, if ifModified mode.
			if (false)
				_f.XMLHttp.setRequestHeader("If-Modified-Since",
						"Thu, 01 Jan 1970 00:00:00 GMT");
			if (f.method === 'POST'
			// &&_f.XMLHttp.setRequestHeader
			) {
				// use .getAttribute('method') to get 長度不一定如此
				if (false)
					_f.XMLHttp.setRequestHeader("Content-Length",
							f.sendDoc.length);
				// 有些CGI會用Content-Type測試是XMLHttp或是regular form
				// It may be necessary to specify
				// "application/x-www-form-urlencoded" or "multipart/form-data"
				// for posted XML data to be interpreted on the server.
				_f.XMLHttp.setRequestHeader('Content-Type', Array.isArray(f.fn)
						&& f.fn[1] ? 'text/xml'
				// application/x-www-form-urlencoded; charset=utf-8
				: 'application/x-www-form-urlencoded');
			}
			_f.XMLHttp.abort();
			_f.XMLHttp.open(f.method || 'GET', f[KEY_URL], f.async, f.user
					|| null, f.passwd || null);
			// alert((f.method||'GET')+','+f[KEY_URL]+','+f.async);
			/**
			 * @see http://www.javaworld.com.tw/jute/post/view?bid=49&id=170177&sty=3&age=0&tpg=1&ppg=1
			 *      根據 W3C的 XMLHttpRequest 規格書上說，①在呼叫 open
			 *      時，如果readyState是4(Loaded) ②呼叫abort之後
			 *      ③發生其他錯誤，如網路問題，無窮迴圈等等，則會重設所有的值。使用全域的情況就只有第一次可以執行，因為之後的readyState是4，所以onreadystatechange
			 *      放在open之前會被清空，因此，onreadystatechange 必須放在open之後就可以避免這個問題。
			 * 
			 * 每使用一次XMLHttpRequest，不管成功或失敗，都要重設onreadystatechange一次。onreadystatechange
			 * 的初始值是 null
			 * 
			 * @see http://www.xulplanet.com/references/objref/XMLHttpRequest.html
			 *      After the initial response, all event listeners will be
			 *      cleared. Call open() before setting new event listeners.
			 */
			if (f.async) {
				_f.doing = (_f.doing || 0) + 1;
				_f.XMLHttp.onreadystatechange = typeof f.fn === 'function'
				//
				? f.fn : function(e) {
					_f.HandleStateChange(e, f[KEY_URL], f.fn);
				}
				// ||null
				;
				// 應加 clearTimeout( )
				setTimeout('try{deprecated_get_URL.'
						//
						+ (_f.multi_request ? 'q[' + _f.i[f[KEY_URL]] + ']'
								: 'XMLHttp')
						+ '.onreadystatechange();}catch(e){}',
				// 5*60*1000;
				_f.timeout || 3e5);
			}
			_f.XMLHttp.send(f.sendDoc || null);
			if (!f.fn) {
				/**
				 * 非async(異步的)能在此就得到 response。Safari and Konqueror cannot
				 * understand the encoding of text files!
				 * 
				 * @see http://www.kawa.net/works/js/jkl/parsexml.html
				 */
				// responseXML: responseXML.loadXML(text)
				return _f.XMLHttp.responseText;
			}
		} catch (e) {
			if (typeof f.fn === 'function')
				f.fn(e);
			else if (typeof window === 'object')
				window.status = e.message;
			return e;
		}
	}
	deprecated_get_URL.timeoutCode = -7732147;

	/**
	 * agent handle function
	 * 
	 * e: object Error, handle_function: function(return text, headers,
	 * XMLHttpRequest object, URL) | [ function, (default|NULL:responseText,
	 * others:responseXML) ]
	 */
	deprecated_get_URL.HandleStateChange = function(e, URL, handle_function) {
		var _t = 0, isOKc, m = deprecated_get_URL.multi_request, _oXMLH;
		if (m)
			m = deprecated_get_URL.q[isNaN(URL) ? deprecated_get_URL.i[URL]
					: URL], _oXMLH = m.XMLHttp, handle_function = m.func,
					URL = m.uri;
		else
			_oXMLH = deprecated_get_URL.XMLHttp;
		if (Array.isArray(handle_function))
			_t = handle_function[1], handle_function = handle_function[0];
		if (!handle_function || typeof handle_function !== 'function') {
			deprecated_get_URL.doing--;
			deprecated_get_URL.clean(URL);
			return;
		}
		// http://big5.chinaz.com:88/book.chinaz.com/others/web/web/xml/index1/21.htm
		if (!e)
			if (typeof _oXMLH === 'object' && _oXMLH) {
				if (_oXMLH.parseError
						&& _oXMLH/* .responseXML */.parseError.errorCode !== 0)
					e = _oXMLH.parseError, e = new Error(e.errorCode, e.reason);
				else if (_oXMLH.readyState === 4) {
					// only if XMLHttp shows "loaded"

					// condition is OK?
					isOKc = _oXMLH.status;
					isOKc = isOKc >= 200
							&& isOKc < 300
							|| isOKc === 304
							|| !isOKc
							&& (location.protocol === "file:" || location.protocol === "chrome:");
					if (handle_function === deprecated_get_URL.HandleContent)
						// handle_function.apply()
						handle_function(0, isOKc, _oXMLH, URL);
					else {
						// handle_function.apply()
						handle_function(isOKc ? _t ? _oXMLH.responseXML
								// JKL.ParseXML: Safari and Konqueror cannot
								// understand the encoding of text files.
								: typeof window === 'object'
										&& window.navigator.appVersion
												.indexOf("KHTML") !== NOT_FOUND
										&& !(e = escape(_oXMLH.responseText))
												.indexOf("%u") !== NOT_FOUND
								//
								? e : _oXMLH.responseText : 0,
						//
						isOKc ? _oXMLH.getAllResponseHeaders() : 0, _oXMLH, URL);
					}
					// URL之protocol==file:
					// 可能需要重新.loadXML((.responseText+'').replace(/<\?xml[^?]*\?>/,""))
					// 用 .responseXML.documentElement 可調用
					deprecated_get_URL.doing--;
					deprecated_get_URL.clean(URL);
					return;
				}
			} else if (new Date - (m ? m.start : deprecated_get_URL.startTime) > deprecated_get_URL.timeout)
				// timeout & timeout function
				// http://www.stylusstudio.com/xmldev/199912/post40380.html
				// _oXMLH.abort();
				e = new Error(deprecated_get_URL.timeoutCode, 'Timeout');
		// alert(URL+'\n'+_t+'\n'+e+'\n'+_oXMLH.readyState+'\n'+handle_function);
		if (e) {
			handle_function(e, 0, _oXMLH, URL);
			deprecated_get_URL.doing--;
			deprecated_get_URL.clean(URL);
		}// handle_function.apply(e,URL);
	};

	/**
	 * agent content handle function<br />
	 * 有head時content包含回應，否則content表error
	 */
	deprecated_get_URL.HandleContent = function(content, head, _oXMLHttp, URL) {
		if (head) {
			// _oXMLHttp.getResponseHeader("Content-Length")
			alert("URL:	" + URL + "\nHead:\n"
					+ _oXMLHttp.getAllResponseHeaders()
					+ "\n------------------------\nLastModified: "
					+ _oXMLHttp.getResponseHeader("Last-Modified")
					+ "\nResult:\n" + _oXMLHttp.responseText.slice(0, 200));// _oXMLHttp.responseXML.xml
		} else {
			// error
			// test時，可用deprecated_get_URL.XMLHttp.open("HEAD","_URL_",true);，deprecated_get_URL(url,handle_function,'HEAD',true)。
			if (content instanceof Error)
				alert('Error occured!\n'
						+ (typeof e === 'object' && e.number ? e.number + ':'
								+ e.message : e || ''));
			else if (typeof _oXMLHttp === 'object' && _oXMLHttp)
				alert((_oXMLHttp.status === 404 ? "URL doesn't exist!"
						: 'Error occured!')
						+ '\n\nStatus: '
						+ _oXMLHttp.status
						+ '\n'
						+ _oXMLHttp.statusText);
		}
	};

	// 在MP模式下清乾淨queue
	deprecated_get_URL.clean = function(i, force) {
		// multiple requests
		if (force || deprecated_get_URL.multi_request)
			if (!i && isNaN(i)) {
				if (deprecated_get_URL.q)
					for (i in deprecated_get_URL.i)
						try {
							deprecated_get_URL.q[deprecated_get_URL.i[i]].XMLHttp
									.abort();
							// deprecated_get_URL.q[deprecated_get_URL.i[i]].XMLHttp=null;
						} catch (e) {
						}
				deprecated_get_URL.q = deprecated_get_URL.i
				// =null
				= 0;
			} else if (!isNaN(i)
					|| !isNaN(i = deprecated_get_URL.i[typeof i === 'object' ? i.uri
							: i])) {
				try {
					deprecated_get_URL.q[i].XMLHttp.abort();
				} catch (e) {
				}

				// deprecated_get_URL.q[i].XMLHttp=0;
				delete deprecated_get_URL.i[deprecated_get_URL.q[i].uri];
				deprecated_get_URL.q[i] = 0;
			}
	};

	// ↑XMLHttp set ==================
	// ---------------------------------------------------------------------//

	// @see https://github.com/request/request

	var node_url, node_http, node_http2, node_https,
	// reuse the sockets (keep-alive connection).
	node_http_agent, node_http2_agent, node_https_agent,
	//
	node_zlib;

	/**
	 * 快速 merge cookie: 只檢查若沒有重複的 key，則直接加入。不檢查 path 也不處理 expires, domain,
	 * secure。<br />
	 * 為增加效率，不檢查 agent.last_cookie 本身之重複的 cookie。
	 * 
	 * TODO: create class Cookie, Cookie.prototype.merge(),
	 * Cookie.prototype.clone()
	 * 
	 * @param {Object}agent
	 *            node_http_agent / node_https_agent
	 * @param {Array}cookie
	 *            new cookie to merge
	 * 
	 * @returns {Object}agent.last_cookie
	 * 
	 * @inner
	 */
	function merge_cookie(agent, cookie) {
		// 初始化 initialization + 正規化 normalization
		var last_cookie = agent.last_cookie;
		if (!Array.isArray(last_cookie)) {
			last_cookie = agent.last_cookie = agent.last_cookie ? [ agent.last_cookie ]
					: [];
		}
		if (!cookie) {
			cookie = [];
		} else if (typeof cookie === 'string') {
			cookie = cookie.split(';');
		}
		// assert: Array.isArray(cookie)

		// console.log(agent);
		// console.log(last_cookie.cookie_hash);
		// console.trace(cookie);

		// cookie_index_of[key] = index of last_cookie
		var cookie_index_of = last_cookie.cookie_index_of;
		if (!cookie_index_of) {
			if (last_cookie.length > 0) {
				// regenerate agent.last_cookie
				delete agent.last_cookie;
				last_cookie = merge_cookie(agent, last_cookie);
				// assert: last_cookie === agent.last_cookie
			} else {
				last_cookie.cookie_index_of = Object.create(null);
				last_cookie.cookie_hash = Object.create(null);
			}
			cookie_index_of = last_cookie.cookie_index_of;
		}
		var cookie_hash = last_cookie.cookie_hash;
		// assert: !!cookie_hash === true

		cookie.forEach(function for_each_cookie_piece(piece) {
			piece = piece.trim();
			if (!piece)
				return;
			// [ cookie value without path / domain / expires,
			// key, value, extra ]
			var matched = piece.match(/^([^=;]+)(?:=([^;]+))?(.*)$/);
			library_namespace.debug('last_cookie: ' + last_cookie, 3,
					'merge_cookie');
			// console.log(matched);
			var key, value;
			if (matched) {
				key = matched[1];
				value = matched[2];

			} else {
				library_namespace.warn([ 'merge_cookie: ', {
					// gettext_config:{"id":"invalid-cookie"}
					T : 'Invalid cookie?'
				}, ' [' + piece + ']' ]);
				// treat cookie piece as key
				key = piece;
				value = '';
			}

			if (!key)
				return;

			cookie_hash[key] = value;

			if (key in cookie_index_of) {
				// assert: (key in cookie_hash) === true
				library_namespace.debug([ {
					// gettext_config:{"id":"duplicate-cookie-name!-the-later-newcomer-will-prevail"}
					T : 'cookie 名稱重複！以後來/新出現者為準。'
				}, ' [' + last_cookie[cookie_index_of[key]]
				//
				+ ']→[' + piece + ']' ], 3, 'merge_cookie');
				// remove duplicate cookie: 直接取代。
				last_cookie[cookie_index_of[key]] = piece;

			} else {
				// assert: (key in cookie_hash) === false
				library_namespace.debug([ {
					T : '正常情況。登記已存在之 cookie。'
				} ], 3, 'merge_cookie');
				// console.trace(matched);
				cookie_index_of[key] = last_cookie.length;
				last_cookie.push(piece);
			}
		});

		// console.trace(cookie_hash);
		// console.trace(last_cookie);

		library_namespace.debug('array: ' + JSON.stringify(last_cookie), 3,
				'merge_cookie');
		library_namespace.debug('hash: ' + JSON.stringify(cookie_hash), 3,
				'merge_cookie');
		return last_cookie;
	}

	_.merge_cookie = merge_cookie;

	function set_cookie_to_URL_object(URL_options_to_fetch, agent) {
		// console.trace('agent.last_cookie:');
		// console.log(agent.last_cookie);
		if (agent.last_cookie) {
			// 使用 cookie
			library_namespace.debug('agent.last_cookie: '
					+ JSON.stringify(agent.last_cookie), 3,
					'set_cookie_to_URL_object');
			library_namespace.debug('agent.last_cookie.cookie_hash: '
					+ JSON.stringify(agent.last_cookie.cookie_hash), 3,
					'set_cookie_to_URL_object');
			var cookie = (URL_options_to_fetch.headers.Cookie ? URL_options_to_fetch.headers.Cookie
					+ ';'
					: '')
					// cookie is Array @ Wikipedia
					+ (Array.isArray(agent.last_cookie) ? agent.last_cookie
					// 去掉 expires=...; path=/; domain=...; HttpOnly
					// 這個動作不做也可以，不影響結果。
					.map(function(cookie) {
						return cookie.replace(/;.*/, '');
					}).join('; ') : agent.last_cookie);
			if (cookie) {
				URL_options_to_fetch.headers.Cookie = cookie;
			} else {
				delete URL_options_to_fetch.headers.Cookie;
			}
		}
		library_namespace.debug('Set cookie: '
				+ JSON.stringify(URL_options_to_fetch.headers.Cookie), 3,
				'set_cookie_to_URL_object');
		library_namespace.debug('Set protocol: '
				+ URL_options_to_fetch.protocol, 3, 'set_cookie_to_URL_object');
		library_namespace.debug('Set headers: '
				+ JSON.stringify(URL_options_to_fetch.headers), 3,
				'set_cookie_to_URL_object');
	}

	// ---------------------------------------------------------------------//

	// 正處理中之 connections
	var get_URL_node_connections = 0,
	// 所有 requests
	get_URL_node_requests = 0;

	// 強制使用POST傳送。
	var FORCE_POST = {
		FORCE_POST : true
	};

	var ERROR_BAD_STSTUS = 'BAD STATUS';

	var KEY_not_native = library_namespace.env.not_native_keyword;
	var has_native_URL = typeof URL === "function" && !URL[KEY_not_native];

	/**
	 * 讀取 URL via node http/https。<br />
	 * assert: arguments 必須與 get_URL() 相容！
	 * 
	 * @param {String|Object}URL_to_fetch
	 *            欲請求之目的 URL or options
	 * @param {Function}[onload]
	 *            callback when successful loaded. For failure handling, using
	 *            options.onfail(error);
	 * @param {String}[charset]
	 *            character encoding of HTML web page. e.g., 'UTF-8', big5,
	 *            euc-jp,..
	 * @param {String|Object}[post_data]
	 *            text data to send when method is POST
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://nodejs.org/api/http.html#http_http_request_options_callback
	 *      https://nodejs.org/api/https.html#https_https_request_options_callback
	 * 
	 * @since 2015/1/13 23:23:38
	 */
	function get_URL_node(URL_to_fetch, onload, charset, post_data, options) {
		if (!URL_to_fetch) {
			onload(undefined, new SyntaxError('No URL input.'));
			return;
		}

		get_URL_node_requests++;
		if (get_URL_node_connections >= get_URL_node.connects_limit) {
			library_namespace.debug({
				// gettext_config:{"id":"waiting-$1-$2-connections-$3"}
				T : [ 'Waiting %1/%2 {{PLURAL:%1|connection|connections}}: %3',
				// 避免同時開過多 connections 的機制。
				get_URL_node_connections, get_URL_node_requests,
						String(URL_to_fetch) ]
			}, 3, 'get_URL_node');
			var _arguments = arguments;
			setTimeout(function() {
				get_URL_node_requests--;
				get_URL_node.apply(null, _arguments);
			}, 500);
			return;
		}
		// 進入 request 程序
		get_URL_node_connections++;

		// 前導作業。
		if (library_namespace.is_Object(charset)) {
			post_data = charset;
			charset = null;
		}
		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		options = library_namespace.new_options(options);

		// console.log('-'.repeat(79));
		// console.log(JSON.stringify(options));
		// console.log(options.form_data);
		if (options.form_data && options.form_data !== to_form_data_generated) {
			// console.trace(options);
			// TODO: charset for post_data
			to_form_data(post_data, function(data) {
				// console.log(data.toString().slice(0,800));
				// console.log('>> ' + data.toString().slice(-200));
				options.form_data = to_form_data_generated;
				get_URL_node(URL_to_fetch, onload, charset, data, options);
			}, options.form_data);
			return;
		}

		// ------------------------------------------------------

		if (library_namespace.is_Object(URL_to_fetch) && URL_to_fetch[KEY_URL]) {
			Object.assign(options, URL_to_fetch);
			// 注意: options.onload 另有用途!
			// https://xhr.spec.whatwg.org/#handler-xhr-onloadstart
			// onload = options.onload || onload;
			post_data = options.post || post_data;
			charset = options.charset || charset;
			URL_to_fetch = options[KEY_URL];
		}

		// 不改變 options。
		var agent = options.agent;
		if (typeof URL_to_fetch === 'string' && URL_to_fetch.startsWith('//')) {
			// 處理 '//domain.org/path' 的情況。
			URL_to_fetch = (agent && agent.protocol || 'https:') + URL_to_fetch;
		}

		var URL_options_to_fetch = normalize_URL_to_fetch(URL_to_fetch,
				charset, options);
		// assert: library_namespace.is_URI(URL_options_to_fetch)
		// console.trace([ URL_to_fetch, URL_options_to_fetch ]);

		if (typeof onload === 'object') {
			library_namespace.debug(
					'Trying to JSONP, insert page, need callback.', 3,
					'get_URL_node');
			// library_namespace.run(URL_options_to_fetch);
			for ( var callback_param in onload) {
				if (callback_param
						&& typeof onload[callback_param] === 'function') {
					// 模擬 callback。
					// callback_param: callback parameter
					URL_options_to_fetch.search_params[callback_param] = 'cb';
					onload = onload[callback_param];
					break;
				}
			}
		}

		// assert: 自此開始不會改變 URL，也不會中途 exit 本函數。

		if (post_data && !options.form_data) {
			if (library_namespace.is_Object(post_data)
					&& options.headers
					&& typeof options.headers['Content-Type'] === 'string'
					&& options.headers['Content-Type']
							.includes('application/json')) {
				post_data = JSON.stringify(post_data) || FORCE_POST;

			} else {
				post_data = library_namespace.Search_parameters(post_data)
						.toString(charset)
						|| FORCE_POST;
			}
		}

		if (!onload && typeof options.onchange === 'function') {
			onload = function() {
				options.onchange(readyState_done);
			};
		}

		if (options.async === false && onload || typeof onload !== 'function') {
			onload = false;
		}

		// console.trace(URL_options_to_fetch);
		// node_http.request(options): options needs a .path
		// https://nodejs.org/dist/latest/docs/api/http.html#http_http_request_options_callback
		URL_options_to_fetch.path = URL_options_to_fetch.pathname
				+ URL_options_to_fetch.search;

		var URL_is_https = /^https:?$/i.test(URL_options_to_fetch.protocol);

		// console.trace([ URL_to_fetch, URL_options_to_fetch.toString() ]);
		URL_to_fetch = URL_options_to_fetch.toString();
		// assert: {String}URL_to_fetch,
		// library_namespace.is_URI(URL_options_to_fetch)

		/**
		 * https://stackoverflow.com/questions/53593182/client-network-socket-disconnected-before-secure-tls-connection-was-established
		 * mh160.js 必須使用 request，https-proxy-agent 才能正常工作 TODO:
		 * socks-proxy-agent
		 * 
		 * <code>

		// https://techcult.com/free-proxy-software-for-windows-10/#1_Ultrasurf
		> SET http_proxy=http://127.0.0.1:9666
		> node u17.js 镇魂街

		</code>
		 */

		/**
		 * <code>

		// http://anonproxyserver.sourceforge.net/
		// https://www.proxynova.com/proxy-server-list/country-tw/
		var http = require("http");
		var options = {
			host: "211.22.233.69",
			port: 3128,
			path: "http://dict.revised.moe.edu.tw/cgi-bin/cbdic/gsweb.cgi?ccd=9gW4am&o=e0&sec=sec11&option=linkout001&actice=layout",
			//method: 'GET',
			headers: {
				Host: "dict.revised.moe.edu.tw"
			}
		};
		var request=http.request(options, function(response) {
			console.log(response.statusCode);
			console.log(response.headers);
			var data = [], length = 0;
			response.on('data', function(chunk) {length += chunk.length;data.push(chunk);});
			response.on('end', function() {data = Buffer.concat(data, length);console.log(data+'')});
		});
		request.end();



		require('./work_crawler_loader.js'); var PROXY='localhost:8080';

		CeL.get_URL('https://zh.wikipedia.org/wiki/Special:%E6%9C%80%E8%BF%91%E6%9B%B4%E6%94%B9',function(X){console.log(X.responseText)},null,null,{proxy:PROXY});
		CeL.get_URL('https://zh.wikipedia.org/wiki/Special:%E6%9C%80%E8%BF%91%E6%9B%B4%E6%94%B9',function(X){console.log(X.responseText)});

		CeL.get_URL('http://dict.revised.moe.edu.tw/cgi-bin/cbdic/gsweb.cgi?ccd=9gW4am&o=e0&sec=sec11&option=linkout001&actice=layout',function(X){console.log(X.responseText)},null,null,{proxy:PROXY});
		CeL.get_URL('http://dict.revised.moe.edu.tw/cgi-bin/cbdic/gsweb.cgi?ccd=9gW4am&o=e0&sec=sec11&option=linkout001&actice=layout',function(X){console.log(X.responseText)});

		// TODO: test agent, cookie

		</code>
		 */

		var proxy_original_agent,
		// using_proxy_server
		proxy_server = options.proxy
		// https://curl.haxx.se/docs/manpage.html
		// https://superuser.com/questions/876100/https-proxy-vs-https-proxy
		// https://docs.oracle.com/cd/E56344_01/html/E54018/gmgas.html
		// https://stackoverflow.com/questions/32824819/difference-between-http-proxy-https-proxy-and-proxy
		|| URL_is_https && process.env.HTTPS_PROXY
		// `SET http_proxy=http://127.0.0.1:8080`
		|| process.env.http_proxy;

		if (!proxy_server
				|| !(proxy_server = library_namespace.URI(proxy_server))) {
			;

		} else if (URL_is_https) {
			library_namespace.debug({
				// gettext_config:{"id":"using-https-proxy-to-get-url-$1"}
				T : [ 'Using HTTPS proxy to get URL: %1', URL_to_fetch ]
			}, 2, 'get_URL_node');
			// ... just add the special agent:
			proxy_original_agent = proxy_server.agent = agent;
			agent = new HttpsProxyAgent(proxy_server);
			// 複製必要的舊屬性。
			if (proxy_original_agent && proxy_original_agent.last_cookie) {
				// 複製原agent的cookie設定。 @see merge_cookie()
				agent.last_cookie = proxy_original_agent.last_cookie;
			}
			// https://github.com/TooTallNate/node-https-proxy-agent/blob/master/index.js
			// ALPN is supported by Node.js >= v5.
			// attempt to negotiate http/1.1 for proxy servers that support
			// http/2
			if (!('ALPNProtocols' in URL_options_to_fetch)) {
				URL_options_to_fetch.ALPNProtocols = [ 'http 1.1' ];
			}

		} else {
			library_namespace.debug({
				// gettext_config:{"id":"using-http-proxy-to-get-url-$1"}
				T : [ 'Using HTTP proxy to get URL: %1', URL_to_fetch ]
			}, 2, 'get_URL_node');
			// https://www.proxynova.com/proxy-server-list/country-tw/
			// proxy_server.URL_to_fetch = URL_to_fetch;

			// 代理伺服器 using proxy server
			// https://stackoverflow.com/questions/3862813/how-can-i-use-an-http-proxy-with-node-js-http-client
			// https://cnodejs.org/topic/530f41e75adfcd9c0f1c8c16

			URL_options_to_fetch = get_proxy_URL(proxy_server,
					URL_options_to_fetch, URL_to_fetch);
		}

		if (!URL_options_to_fetch.protocol) {
			URL_options_to_fetch.protocol = agent && agent.protocol
			// 直接設定。 default: https://
			|| (proxy_server ? 'http:' : 'https:');
			URL_is_https = URL_options_to_fetch.protocol === 'https:';
		}

		if (agent) {
			library_namespace.debug({
				// gettext_config:{"id":"using-new-agent"}
				T : agent === true ? '使用新 agent。'
				// gettext_config:{"id":"using-custom-agent"}
				: '使用自定義 agent。'
			}, 6, 'get_URL_node');
			if (agent === true) {
				// use new agent.
				agent = URL_is_https ? new node_https.Agent
						: new node_http.Agent;
			} else if (agent.protocol
			// agent.protocol 可能是 undefined。
			&& agent.protocol !== URL_options_to_fetch.protocol) {
				var message = {
					// gettext_config:{"id":"the-custom-agent-is-different-from-the-url-and-will-try-to-adopt-the-conforming-agreement-$1"}
					T : [ '自定義 agent 與 URL 之協定不同，將嘗試採用符合的協定：%1',
					//
					agent.protocol + ' !== ' + URL_options_to_fetch.protocol ]
				};
				if (options.no_protocol_warn) {
					library_namespace.debug(message, 3, 'get_URL_node');
				} else {
					library_namespace.warn([ 'get_URL_node: ', message ]);
				}
				// use new agent.
				// assert: options.agent === agent
				agent = URL_is_https ? new node_https.Agent
						: new node_http.Agent;
				// 複製必要的舊屬性。
				if (options.agent.last_cookie) {
					// 複製原agent的cookie設定。 @see merge_cookie()
					agent.last_cookie = options.agent.last_cookie;
				}
			}
		} else {
			// gettext_config:{"id":"using-generic-agent"}
			library_namespace.debug('採用泛用的 agent。', 6, 'get_URL_node');
			agent = URL_is_https ? node_https_agent : node_http_agent;
		}

		// console.log([ options.cookie, agent.last_cookie ]);
		if (options.cookie && !agent.last_cookie) {
			library_namespace.debug({
				// gettext_config:{"id":"reset-the-cookie-to-$1"}
				T : [ '重新設定 cookie 成：%1', options.cookie ]
			}, 3, 'get_URL_node');
			agent.last_cookie = options.cookie;
		}

		var request, finished,
		// result_Object 模擬 XMLHttp response。
		result_Object = {
			// node_agent : agent,

			// .url @ fetch()
			// url : URL_to_fetch,

			// https://developer.mozilla.org/zh-TW/docs/Web/API/Response
			// .useFinalURL @ fetch()
			// useFinalURL : URL_to_fetch,

			// 因為可能 redirecting 過，這邊列出的才是最終 URL。
			// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL
			responseURL : URL_to_fetch
		},
		// assert: 必定從 _onfail 或 _onload 作結，以確保會註銷登記。
		// 本函數unregister()應該放在所有本執行緒會執行到onload的程式碼中。
		unregister = function() {
			/**
			 * @see http://stackoverflow.com/questions/24667122/http-request-timeout-callback-in-node-js
			 * 
			 * sometimes both timeout callback and error callback will be called
			 * (the error inside the error callback is ECONNRESET - connection
			 * reset)
			 * 
			 * there is a possibilities that it fires on('response',
			 * function(response)) callback altogether
			 */
			if (finished) {
				return true;
			}
			// 註銷登記。
			finished = true;

			get_URL_node_requests--;
			get_URL_node_connections--;
			if (timeout_id) {
				library_namespace.debug('clear timeout '
						+ time_message(timeout) + ' [' + URL_to_fetch + ']', 3,
						'get_URL_node');
				// console.trace('clear timeout ' + URL_to_fetch);
				clearTimeout(timeout_id);
			}
		},
		// on failed
		_onfail = function(error) {
			if (unregister()) {
				// console.log('exit: 預防 timeout 時重複執行。');
				return;
			}

			// console.trace([ options.error_count, options.error_retry ]);
			// 連線逾期/失敗時再重新取得頁面之重試次數。
			if (options.error_retry >= 1
			// 例如當遇到 404 或 502 時，再多嘗試一下。
			&& !(options.error_retry <= options.error_count)) {
				if (!options.get_URL_cloned) {
					// 不動到原來的 options。
					options = Object.clone(options);
					options.get_URL_cloned = true;
				}
				if (options.error_count >= 1) {
					options.error_count++;
				} else {
					options.error_count = 1;
				}
				options[KEY_URL] = URL_to_fetch;
				// Failed to get [' + URL_to_fetch + '].
				library_namespace.log([ 'get_URL_node: ', {
					// gettext_config:{"id":"retry-$1-$2-$3"}
					T : [ 'Retry %1/%2: %3', options.error_count,
					//
					options.error_retry, localize_error(error) ]
				} ]);
				// console.error(error);
				// library_namespace.set_debug(3);
				get_URL_node(options, onload, charset, post_data);
				// console.trace(options);
				return;
			}

			if (typeof options.onfail === 'function') {
				options.onfail.call(result_Object, error);
				return;
			}

			if (!options.no_warning
			// 應已在 _ontimeout 出過警告訊息。
			&& error.code !== 'TIMEOUT') {
				if (error.code === 'ENOTFOUND') {
					library_namespace.error([ 'get_URL_node: ', {
						// gettext_config:{"id":"url-not-found-$1"}
						T : [ 'URL not found: [%1]', URL_to_fetch ]
					} ]);
				} else if (error.code === 'EPROTO'
						&& require('tls').DEFAULT_MIN_VERSION === 'TLSv1.2'
						&& library_namespace.platform('node', 12)) {
					library_namespace.error([ 'get_URL_node: ', {
						T :
						// gettext_config:{"id":"node.js-v12-and-later-versions-disable-tls-v1.0-and-v1.1-by-default"}
						'Node.js v12 and later versions disable TLS v1.0 and v1.1 by default.'
					}, {
						T :
						// gettext_config:{"id":"please-set-tls.default_min_version-=-tlsv1-first"}
						'Please set tls.DEFAULT_MIN_VERSION = "TLSv1" first!'
					}, ' [' + URL_to_fetch + ']' ]);
					/**
					 * <code>
					To solve:
					get_URL_node: Retry 1/4: Error: write EPROTO 14180:error:1425F102:SSL routines:ssl_choose_client_version:unsupported protocol:c:\ws\deps\openssl\openssl\ssl\statem\statem_lib.c:1922:

					require('tls').DEFAULT_MIN_VERSION = 'TLSv1';
					</code>
					 */
				} else {
					library_namespace.error([ 'get_URL_node: ', {
						// gettext_config:{"id":"got-error-when-retrieving-$1-$2"}
						T : [ 'Got error when retrieving [%1]: %2',
						//
						URL_to_fetch, localize_error(error) ]
					} ]);
					// 這裡用太多並列處理，會造成 error.code "EMFILE"。
					// console.error(error);
					// console.error(options);
				}
			}
			// 在出現錯誤時，將 onload 當作 callback。並要確保 {Object}response
			// 因此應該要先檢查 error 再處理 response
			typeof onload === 'function' && onload(result_Object, error);
		},
		// on success
		_onload = function(response) {
			// response object: Class: http.IncomingMessage

			// 在這邊不過剛開始從伺服器得到資料，因此還不可執行unregister()，否則依然可能遇到timeout。
			if (finished) {
				return;
			}

			if (options.onresponse) {
				options.onresponse(response);
			}
			// https://xhr.spec.whatwg.org/#handler-xhr-onloadstart
			if (false && options.onloadstart) {
				options.onloadstart();
			}

			// 若原先有agent，應該合併到原先的agent，而非可能為暫時性/泛用的agent。
			merge_cookie(options.agent || agent, response.headers['set-cookie']);
			// 先合併完cookie之後才能轉址，否則會漏失掉須設定的cookie。

			if (false && response.complete
					&& (response.statusCode / 100 | 0) !== 2) {
				console.log('response:');
				console.log(response);
			}
			if ((response.statusCode / 100 | 0) === 3
					&& response.headers.location
					&& response.headers.location !== URL_to_fetch
					&& !options.no_redirect) {
				if (unregister()) {
					// 預防 timeout 時重複執行。
					return;
				}

				try {
					// request.abort();
					request.destroy();
				} catch (e) {
				}

				// e.g., 301
				if (!options.get_URL_cloned) {
					// 不動到原來的 options。
					options = Object.clone(options);
					options.get_URL_cloned = true;
				}
				options[KEY_URL] = new URL(response.headers.location,
						URL_to_fetch);
				library_namespace.debug({
					// gettext_config:{"id":"$1-redirecting-to-$2-←-$3"}
					T : [ '%1 Redirecting to [%2] ← [%3]', response.statusCode,
							options[KEY_URL], URL_to_fetch ]
				}, 1, 'get_URL_node');
				get_URL_node(options, onload, charset,
				// 重新導向的時候亦傳送 post data。For wiki API
				// e.g., https://github.com/kanasimi/CeJS/issues/12
				// 但piaotian.js搜索作品名稱直接302導向時，加入post_data會產生 405 Not Allowed
				response.statusCode != 302 && post_data);
				return;
			}

			library_namespace.debug({
				// gettext_config:{"id":"response-headers-$1"}
				T : [ 'response HEADERS: %1',
				//
				JSON.stringify(response.headers) ]
			}, 4, 'get_URL_node._onload');
			// 模擬 Response of fetch()
			// https://developer.mozilla.org/zh-TW/docs/Web/API/Response
			Object.assign(result_Object, {
				redirected : !!options.get_URL_cloned,
				// {Number}response.statusCode
				// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status
				status : response.statusCode,
				statusText : response.statusMessage,
				// XMLHttp.headers['content-type']==='text/html; charset=utf-8'
				headers : response.headers
			});

			// 在有 options.onfail 時僅 .debug()。但這並沒啥條理...
			if (options.onfail || (response.statusCode / 100 | 0) === 2) {
				library_namespace.debug({
					// gettext_config:{"id":"http-status-code-$1-$2"}
					T : [ 'HTTP status code: %1 %2', response.statusCode,
							URL_to_fetch ]
				}, 2, 'get_URL_node');
			} else if (!options.no_warning) {
				library_namespace.warn([ 'get_URL_node: ', {
					// gettext_config:{"id":"exception-http-status-code-$1-$2"}
					T : [ 'Exception HTTP status code %1: %2',
					//
					response.statusCode, URL_to_fetch ]
				} ]);
			}

			// node.js會自動把headers轉成小寫。
			// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition

			// 在503之類的情況下。可能沒"Content-Type:"。這時 response 將無.type。
			if (response.headers['content-type']) {
				// MIME type, media-type: XMLHttp.type
				result_Object.type = response.headers['content-type']
				// charset: XMLHttp.charset
				.replace(/;(.*)$/, function($0, $1) {
					var matched = $1.match(/[; ]charset=([^;]+)/i);
					if (matched) {
						result_Object.charset = matched[1].trim();
					}
					return '';
				}).trim();
			}

			if (response.headers['content-disposition']) {
				// 從 Content-Disposition 中抽取出檔名。
				// ext-value = charset "'" [ language ] "'" value-chars
				var matched = response.headers['content-disposition']
						.match(/ filename\*\s*=\s*([^';]+)'([^';]*)'([^';]+)/);
				if (matched) {
					matched = matched[3];
				} else if (matched = response.headers['content-disposition']
						.match(/ filename\s*=\s*([^';]+)/)) {
					matched = matched[1];
				}
				if (matched && (matched = matched.trim())) {
					matched = (matched.match(/^"(.*)"$/)
							|| matched.match(/^'(.*)'$/) || [ , matched ])[1];
					if (false) {
						console.log([ matched, result_Object.charset, charset,
								!!library_namespace.decode_URI_component ]);
					}
					try {
						if (!/%[\da-f]{2}/.test(matched)) {
							// 有一些網站經過這個轉換似乎就能夠獲得正確的檔案名稱。
							matched = escape(matched);
						}
						if (false && (result_Object.charset || charset)
								&& library_namespace.decode_URI_component) {
							// 現在沒有實例需要用到這個部分。
							matched = library_namespace.decode_URI_component(
									matched, result_Object.charset || charset);
						} else {
							matched = decodeURIComponent(matched);
							// 有的時候還需要這一項。
							// matched = unescape(matched);
						}
						library_namespace.debug({
							// gettext_config:{"id":"file-name-$1"}
							T : [ '檔案名稱：%1', matched ]
						}, 3, 'get_URL_node');
					} catch (e) {
						// TODO: handle exception
					}
					result_Object.filename = library_namespace
							.to_file_name(matched);
				}
			}

			// listener must be a function
			if (typeof onload !== 'function'
			//
			&& !options.write_to && !options.write_to_directory) {
				// 照理unregister()應該放這邊，但如此速度過慢。因此改放在 _onload 一開始。
				unregister();
				library_namespace.warn([ 'get_URL_node: ', {
					// gettext_config:{"id":"got-url-$1-but-there-is-no-listener"}
					T : [ 'Got URL [%1], but there is no listener!',
					//
					URL_to_fetch ]
				} ]);
				// console.log(response);
				return;
			}

			library_namespace.debug({
				// gettext_config:{"id":"waiting-to-receive-data-transferred-back-from-url-$1"}
				T : [ '等待接收從網址 [%1] 傳輸回的資料……', URL_to_fetch ]
			}, 3, 'get_URL_node');

			var flow_encoding = response.headers['content-encoding'];
			flow_encoding = flow_encoding && flow_encoding.trim().toLowerCase();
			if (false) {
				var pipe = response;
				if (flow_encoding === 'gzip')
					pipe = pipe.pipe(node_zlib.createGunzip());
				else if (flow_encoding === 'deflate')
					pipe = pipe.pipe(node_zlib.createInflate());
				pipe = pipe.pipe(node_fs.createWriteStream(file_path));
			}

			// 準備開始接收資料
			// options.ondatastart: 非正規標準
			if (options.ondatastart) {
				options.ondatastart(response);
			}
			// options.onload https://xhr.spec.whatwg.org/#handler-xhr-onload

			/** {Array} [ {Buffer}, {Buffer}, ... ] */
			var data = [], length = 0,
			// total_size https://xhr.spec.whatwg.org/#progressevent
			total_length = +response.headers['content-length'], lengthComputable = total_length >= 0;
			response.on('data', function(chunk) {
				// {Buffer}chunk
				length += chunk.length;
				var message = [ (options.write_to ? options.write_to + ': '
						: '')
						// + chunk.length + '/'
						+ length
						+ (total_length ? '/' + total_length : '')
						+ ' bytes ('
						// 00% of 0.00MiB
						+ (total_length ? (100 * length / total_length | 0)
								+ '%, ' : '')
						+ (length / 1.024 / (/* Date.now() */(new Date)
								.getTime() - start_time)).toFixed(2)
						+ ' KiB/s)' ];
				message.push(': ' + URL_to_fetch);
				library_namespace.debug('receive BODY.length: '
						+ message.join(''), 4, 'get_URL_node');
				if (options.show_progress && length !== total_length) {
					if (!(options.show_progress > 1)) {
						message.pop();
					}
					library_namespace.log_temporary(message.join(''));
				}

				if (length > options.MAX_BUFFER_SIZE) {
					if (data)
						data = null;
				} else {
					data.push(chunk);
				}

				// node_fs.appendFileSync('get_URL_node.data', chunk);

				if (options.ondata) {
					// 注意: 這邊的 chunk 可能是 gzip 之後的資料!
					options.ondata(chunk);
				}
				// https://xhr.spec.whatwg.org/#handler-xhr-onprogress
				if (false && options.onprogress) {
					options.onprogress(lengthComputable, length, total_length);
				}
			});

			// https://iojs.org/api/http.html#http_http_request_options_callback
			response.on('end', function() {
				library_namespace.debug('end(): ' + URL_to_fetch, 2,
						'get_URL_node');

				// 照理應該放這邊，但如此速度過慢。因此改放在 _onload 一開始。
				// unregister();

				options.onend && options.onend();

				// console.log('No more data in response: ' + URL_to_fetch);
				// it is faster to provide the length explicitly.
				data = data && Buffer.concat(data, length);
				// console.log(data.slice(0, 200));
				// console.log(data.slice(0, 200).toString());

				if (proxy_original_agent) {
					// recover properties
					proxy_original_agent.last_cookie = agent.last_cookie;
				}

				// 基本檢測。

				if ((response.statusCode / 100 | 0) !== 2
				// 例如當遇到 404 或 502 時，再多嘗試一下。
				&& options.error_retry >= 1
				// 本條件參考 _onfail。
				&& !(options.error_retry <= options.error_count)) {
					_onfail(ERROR_BAD_STSTUS);
					return;
				}

				if (!data) {
					;
				} else if (options.verify) {
					// test: invalid content type
					if (typeof options.verify === 'function') {
						if (!options.verify(data)) {
							_onfail('INVALID');
							return;
						}
					} else {
						// assert: CeL.application.storage.file included
						// e.g., options.verify === 'png'
						var file_type = library_namespace.file_type(data,
								options.verify);
						if (file_type.verified === false) {
							_onfail('Invalid ' + options.verify);
							return;
						}
					}
				} else if (data.length === 0) {
					// 若是容許空內容，應該特別指定 options.allow_empty。
					if (!options.allow_empty) {
						_onfail('EMPTY');
						return;
					}
				}

				// https://github.com/nodejs/node/blob/master/doc/api/zlib.md#compressing-http-requests-and-responses
				// https://nodejs.org/docs/latest/api/zlib.html
				// https://gist.github.com/narqo/5265413
				// https://github.com/request/request/blob/master/request.js
				// http://stackoverflow.com/questions/8880741/node-js-easy-http-requests-with-gzip-deflate-compression
				// http://nickfishman.com/post/49533681471/nodejs-http-requests-with-gzip-deflate-compression
				if (flow_encoding && data) {
					library_namespace.debug('content-encoding: '
							+ flow_encoding, 5, 'get_URL_node');
					switch (flow_encoding) {
					case 'gzip':
						library_namespace.debug('gunzip ' + data.length
								+ ' bytes data...', 2, 'get_URL_node');
						/**
						 * <code>
						可能因為呼叫到舊版library，於此有時會出現 "TypeError: Object #<Object> has no method 'gunzipSync'"
						有時會有 Error: unexpected end of file
						</code>
						 */
						try {
							data = node_zlib.gunzipSync(data);
						} catch (error) {
							library_namespace.error(
							// get_URL_node: Error: node_zlib.gunzipSync():
							// Error: unexpected end of file [http://...]
							'get_URL_node: Error: node_zlib.gunzipSync(): '
									+ localize_error(error) + ' ['
									+ URL_to_fetch + ']');
							if (false) {
								console.log(error);
								console.log(URL_options_to_fetch);
								console.log(node_zlib);
								console.log(data);
								console.trace(
								//
								'get_URL_node: Error: node_zlib.gunzipSync()');
								console.error(error.stack);
							}
							// Release memory. 釋放被占用的記憶體.
							data = null;
							_onfail(error);
							return;
						}
						break;
					case 'deflate':
						library_namespace.debug('deflate data ' + data.length
								+ ' bytes...', 2, 'get_URL_node');
						data = node_zlib.deflateSync(data);
						break;
					case 'br':
						library_namespace.debug('brotli data ' + data.length
								+ ' bytes...', 2, 'get_URL_node');
						data = node_zlib.brotliDecompressSync(data);
						break;
					default:
						library_namespace.warn([ 'get_URL_node: ', {
							// gettext_config:{"id":"unknown-http-compression-method-$1"}
							T : [ 'Unknown HTTP compression method: [%1]',
							//
							flow_encoding ]
						} ]);
						break;
					}
				}

				// ------------------------------

				if (data && response.statusCode === 403
				//
				&& data.toString().includes('Cloudflare')
				//
				&& data.toString().includes(' id="captcha-bypass"')) {
					// console.log(data.toString());
					library_namespace.error([ 'get_URL_node: ', {
						// https://github.com/Anorov/cloudflare-scrape
						T : // TODO: https://github.com/codemanki/cloudscraper
						// gettext_config:{"id":"you-need-to-bypass-the-ddos-protection-by-cloudflare"}
						'You need to bypass the DDoS protection by Cloudflare!'
					} ]);
				}

				// ------------------------------
				// setup data of result_Object

				result_Object.buffer = data;
				// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response
				result_Object.response = data;
				// non-standard 非標準: 設定 charset = 'buffer' 的話，將回傳 {Buffer}。
				if (data && charset !== 'buffer') {
					// 未設定 charset 的話，default charset: UTF-8.
					// buffer.toString(null) will throw!
					data = data.toString(charset || undefined/* || 'utf8' */);
				}

				if (library_namespace.is_debug(4)) {
					library_namespace.debug(
					//
					'BODY: ' + data, 1, 'get_URL_node');
				}
				// result_Object模擬 XMLHttp。
				result_Object.responseText = data;

				// ------------------------------

				if ((response.statusCode / 100 | 0) !== 2) {
					// ssert: options.error_retry >= 1 ? 最後一次 error
					// : BAD STATUS and get something in `this.response`
					_onfail(ERROR_BAD_STSTUS);
					return;
				}

				if (unregister()) {
					// 預防 timeout 時重複執行。
					return;
				}

				// assert: 執行至此表示成功取得資料、沒有錯誤，
				// 開始正常運作至結尾，不會再有中途 return。

				// TODO: 確保資料完整，例如檢查結尾碼。
				// .save_to
				if (data && (options.write_to || options.write_to_directory)) {
					var file_path = options.write_to
							// save to: 設定寫入目標。
							|| (options.write_to_directory
							//
							+ library_namespace.env.path_separator
							//
							+ library_namespace.to_file_name(
							//
							URL_to_fetch.replace(/#.*/, '').replace(
									/[\\\/:*?"<>|]/g, '_')))
							// 避免 Error: ENAMETOOLONG: name too long
							.slice(0, 256);
					if (!options.no_warning) {
						library_namespace.info([ 'get_URL_node: ', {
							T : [
							// gettext_config:{"id":"write-$2-bytes-to-file-$1-$3"}
							'Write %2 {{PLURAL:%2|byte|bytes}} to file [%1]: %3'
							//
							, file_path, data.length, URL_to_fetch ]
						} ]);
					}
					try {
						var fd = node_fs.openSync(file_path, 'w');
						// TODO: use response.pipe(write_stream);
						// @see GitHub.updater.node.js
						node_fs.writeSync(fd, data, 0, data.length, null);
						node_fs.closeSync(fd);

						// set file modify date
						// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
						// https://tools.ietf.org/html/rfc7231#section-7.1.1.2
						if (response.headers['date']) {
							try {
								// The "Date" header field represents the date
								// and time at which the message was originated

								// fs.utimesSync(path, atime, mtime)
								// atime: the last time this file was accessed
								node_fs.utimesSync(file_path, new Date,
								// mtime: the last time this file was modified
								response.headers['date']);
							} catch (e) {
								// TODO: handle exception
							}
						}
					} catch (e) {
						library_namespace.error([ 'get_URL_node: ', {
							T : [
							// gettext_config:{"id":"failed-to-write-$2-bytes-to-$1-$3"}
							'Failed to write %2 {{PLURAL:%2|byte|bytes}} to [%1]: %3'
							//
							, file_path, data.length, URL_to_fetch ]
						} ]);
						console.error(e);
					}
				}

				if (typeof options.content_processor === 'function') {
					options.content_processor(
					// ({Buffer}contains, URL, status)
					data, URL_to_fetch, response.statusCode);
				}

				if (typeof options.check_reget === 'function'
				// check_reget(XMLHttp)
				&& options.check_reget(result_Object, options)) {
					options[KEY_URL] = URL_to_fetch;
					get_URL_node(options, onload, charset, post_data);
					return;
				}

				if (typeof onload === 'function') {
					onload(result_Object, !data && !options.allow_empty);
				}
				// Release memory. 釋放被占用的記憶體.
				data = null;
				// node_fs.appendFileSync('get_URL_node.data', '\n');
			});

		};

		// --------------------------------------------------------------------

		// https://fetch.spec.whatwg.org/#forbidden-header-name
		// 必要的 headers: User-Agent, Accept-Language。其他是為了模擬得更真實點。
		URL_options_to_fetch.headers = Object.assign({
			// 網站的主機名稱。
			Host : URL_options_to_fetch.host,

			// User Agent
			'User-Agent' : get_URL_node.default_user_agent,

			// https://developer.mozilla.org/zh-CN/docs/Glossary/Quality_values
			Accept : 'text/html,application/xhtml+xml,application/xml;q=0.9,'
			// + 'image/avif,' + 'image/webp,*/*;q=0.8'
			// + ',application/signed-exchange;v=b3;q=0.9'
			,
			// Accept : 'application/json, text/plain, */*',

			// 為了防止 Cloudflare bot protection(?) 阻擋，必須加上 Accept-Language。
			// TODO: get language from system infomation
			// dm5.js using "Microsoft-IIS/8.5",
			// needs 'Accept-Language' to search!
			'Accept-Language' : 'zh-TW,zh;q=0.9' + ',ja;q=0.8' + ',en;q=0.7',

			// DNT : 1,
			Connection : 'keep-alive',
			'Upgrade-Insecure-Requests' : 1,

			// 'sec-ch-ua-mobile' : '?0',
			// 'sec-ch-ua-platform' : 'Windows',

			// TE 請求型頭部用來指定用戶代理希望使用的傳輸編碼類型。
			// 可以將其非正式稱為 Accept-Transfer-Encoding，這個名稱顯得更直觀一些。
			// 當 TE 設置為 trailers 時，如果服務端支持並且返回了
			// Transfer-Encoding: trailers，那麼同時也必須返回另一個響應標頭 Trailer，
			// TE : 'Trailers',

			// Origin : URL_options_to_fetch.protocol + '://' +
			// URL_options_to_fetch.host

			Pragma : 'no-cache',
			// 'max-age=0'
			'Cache-Control' : 'no-cache'
		}, options.fetch_type === 'image' ? {
			// /\.(jpg|png|webp)$/i.test(URL_to_fetch.replace(/[?#].*/, ''))
			Accept :
			// 每次請求重設這些標頭。
			'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
			'Sec-Fetch-Dest' : 'image',
			'Sec-Fetch-Mode' : 'no-cors',
			'Sec-Fetch-Site' : 'cross-site',
			'Sec-Fetch-User' : undefined
		} : {
			// 為了順暢使用 Cloudflare，必須加上 Sec-Fetch-headers？ e.g., mymhh.js
			// https://blog.kalan.dev/fetch-metadata-request-headers/
			'Sec-Fetch-Dest' : options.fetch_type || 'document',
			'Sec-Fetch-Mode' : 'navigate',
			'Sec-Fetch-Site' : 'none',
			'Sec-Fetch-User' : '?1',
		}, options.headers, URL_options_to_fetch.headers);
		for ( var key in URL_options_to_fetch.headers) {
			if (URL_options_to_fetch.headers[key] === undefined)
				delete URL_options_to_fetch.headers[key];
		}
		// delete URL_options_to_fetch.headers.Referer;
		// console.log(options.headers);

		if (false && /Chrome\//.test(get_URL_node.default_user_agent)) {
			Object.assign(URL_options_to_fetch.headers, {
				'sec-ch-ua' :
				//
				'" Not A;Brand";v="99", "Chromium";v="98", "Google Chrome";v="98"'
			});
		}

		if (node_zlib.gunzipSync
		// && node_zlib.deflateSync
		) {
			// 早期 node v0.10.25 無 zlib.gunzipSync。Added in: v0.11.12
			// 'gzip, deflate, *'
			URL_options_to_fetch.headers['Accept-Encoding'] = 'gzip, deflate'
			// Added in: v11.7.0, v10.16.0
			+ (node_zlib.brotliDecompressSync ? ', br' : '');
		}
		// console.trace(URL_options_to_fetch.headers);

		if (false) {
			// @see jQuery
			if (!options.crossDomain
					&& !URL_options_to_fetch.headers["X-Requested-With"]) {
				URL_options_to_fetch.headers["X-Requested-With"] = "XMLHttpRequest";
			}
		}

		if (post_data) {
			URL_options_to_fetch.method = 'POST';
			var _post_data = post_data === FORCE_POST ? '' : post_data;
			if (false && options.form_data) {
				// console.log('-'.repeat(79));
				// console.log(_post_data.to_Array().content_length);
				// console.log(_post_data);
			}
			Object.assign(URL_options_to_fetch.headers, {
				'Content-Type' : options.headers
				//
				&& options.headers['Content-Type']
				//
				|| (options.form_data ? 'multipart/form-data; boundary='
				// boundary 存入→ post_data.boundary
				+ _post_data.boundary : 'application/x-www-form-urlencoded'),
				// prevent HTTP 411 錯誤 – 需要內容長度頭 (411 Length Required)
				'Content-Length' : options.form_data
				//
				? _post_data.to_Array().content_length
				// NG: _post_data.length
				: charset ? Buffer.byteLength(_post_data, charset) : Buffer
						.byteLength(_post_data)
			});
		}
		if (options.method) {
			// e.g., 'HEAD'
			URL_options_to_fetch.method = options.method;
		}

		URL_options_to_fetch.agent = agent;
		set_cookie_to_URL_object(URL_options_to_fetch, agent);
		if (library_namespace.is_debug(3)) {
			library_namespace.debug('Set headers: '
					+ JSON.stringify(URL_options_to_fetch.headers), 3,
					'get_URL_node');
			console.log(URL_options_to_fetch.headers);
		}

		// console.log(URL_options_to_fetch);
		try {
			// console.trace([ URL_to_fetch, URL_options_to_fetch ]);
			// request scheme
			request = URL_is_https ? node_https : node_http;

			// from node.js 10.9.0
			// http.request(url[, options][, callback])
			// request: Class: http.ClientRequest
			request = request.request(URL_options_to_fetch, _onload);
		} catch (e) {
			// e.g., _http_client.js:52
			if (false) {
				throw new TypeError(
				// gettext_config:{"id":"request-path-contains-unescaped-characters"}
				'Request path contains unescaped characters');
			}
			_onfail(e);
			return;
		}

		if (options.max_listeners >= 0) {
			/**
			 * 最多平行取得檔案的數量。 <code>
			incase "MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 connect listeners added. Use emitter.setMaxListeners() to increase limit"
			</code>
			 */
			request.setMaxListeners(options.max_listeners);
		}

		if (post_data) {
			var _post_data = post_data === FORCE_POST ? '' : post_data;
			// console.log(_post_data);
			if (options.form_data) {
				(function write_to_request(data) {
					if (Array.isArray(data)) {
						data.forEach(function(chunk) {
							write_to_request(chunk);
						})
					} else {
						request.write(data);
					}
				})(_post_data.to_Array());
			} else if (typeof _post_data === 'string') {
				library_namespace.debug('set post data: length '
						+ _post_data.length, 3, 'get_URL_node');
				library_namespace.debug('set post data: ' + _post_data, 6,
						'get_URL_node');
				request.write(_post_data);
			} else {
				library_namespace.error({
					// gettext_config:{"id":"invalid-post-data-$1"}
					T : [ 'Invalid POST data: %1', JSON.stringify(post_data) ]
				});
			}
		}

		/** {Natural}timeout in ms for get URL. 逾時ms數 */
		var timeout = options.timeout || get_URL_node.default_timeout, timeout_id,
		//
		_ontimeout = function(e) {
			// 可能已被註銷。
			if (finished) {
				return;
			}

			try {
				// http://hylom.net/node-http-request-get-and-timeout
				// timeoutイベントは発生しているものの、イベント発生後も引き続きレスポンスを待ち続けている
				// request.end();
				// request.abort();
				request.destroy();
			} catch (err) {
				// TODO: handle exception
			}
			if (!options.no_warning) {
				library_namespace.info([ 'get_URL_node: ', {
					// gettext_config:{"id":"connection-timeout-for-$1-$2"}
					T : [ 'Connection timeout for %1: [%2]',
					//
					time_message(timeout), URL_to_fetch ]
				} ]);
			}
			if (!e) {
				e = new Error('Timeout ' + time_message(timeout) + ': ['
						+ URL_to_fetch + ']');
				e.code = 'TIMEOUT';
			}

			_onfail(e);
		};

		if (timeout > 0) {
			// setTimeout method 1
			// 此方法似乎不能確實於時間到時截斷。或許因為正在 handshaking?
			request.setTimeout(timeout);
			// https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback
			// http://stackoverflow.com/questions/14727115/whats-the-difference-between-req-settimeout-socket-settimeout
			request.on('timeout', _ontimeout);

			// setTimeout method 2
			// {Object}timeout_id @ node.js
			timeout_id = setTimeout(_ontimeout, timeout);
			library_namespace.debug({
				// gettext_config:{"id":"add-timeout-$1-$2"}
				T : [ 'Add timeout %1: [%2]', time_message(timeout),
						URL_to_fetch ]
			}, 2, 'get_URL_node');
		} else if (timeout) {
			library_namespace.warn([ 'get_URL_node: ', {
				// gettext_config:{"id":"invalid-timeout-$1"}
				T : [ 'Invalid timeout: %1', timeout ]
			} ]);
		}

		library_namespace.debug('set onerror: '
				+ (options.onfail ? 'user defined' : 'default handler'), 3,
				'get_URL_node');

		request.on('error', _onfail);
		// 遇到 "Unhandled 'error' event"，或許是 print 到 stdout 時出錯了，不一定是本函數的問題。

		// debug error: socket parse error
		// CloudFlare 遇到 HPE_INVALID_CONSTANT，可能是因為需要 encodeURI(url)。
		if (false && library_namespace.is_debug(6)) {
			request.on('socket', function(socket) {
				if (socket.parser) {
					socket.parser._execute = socket.parser.execute;
					socket.parser.execute = function(d) {
						console.log(d.toString());
						socket.parser._execute(d);
					};
				}
				// console.log('-----------------------------------');
				// console.log(socket.parser.execute);
			});
		}

		var start_time = (new Date).getTime();
		request.end();
	}

	/**
	 * default user agent. for some server, (e.g., tools.wmflabs.org)
	 * <q>Requests must have a user agent</q>.
	 * 
	 * @see https://meta.wikimedia.org/wiki/User-Agent_policy
	 * 
	 * @type {String}
	 */
	get_URL_node.default_user_agent = library_namespace.Class + '/'
			+ library_namespace.version + ' (https://github.com/kanasimi/CeJS)';

	// 逾時ms數: 20 minutes
	get_URL_node.default_timeout = 20 * 60 * 1000;
	get_URL_node.connects_limit = 100;

	get_URL_node.get_status = function(item) {
		var status = {
			connections : get_URL_node_connections,
			requests : get_URL_node_requests
		};
		return item ? status[item] : status;
	};

	// setup/reset node agent.
	function setup_node(type, options) {
		if (!is_nodejs)
			return;

		if (_.get_URL !== get_URL_node) {
			// 初始化。
			node_url = require('url');
			node_http = require('http');
			node_https = require('https');
			node_zlib = require('zlib');

			try {
				node_http2 = require('http2');
			} catch (e) {
				// Is old version. Added in: v8.4.0
			}

			_.get_URL = library_namespace
					.copy_properties(get_URL, get_URL_node);
		}

		if (type !== undefined) {
			if (typeof type === 'string')
				type = /^https/i.test(type);
			var agent = type ? new node_https.Agent(options)
					: new node_http.Agent(options);
			if (options && options.as_default) {
				if (type) {
					node_https_agent = agent;
				} else {
					node_http_agent = agent;
				}
			}
			return agent;
		}

		node_http_agent = new node_http.Agent;
		node_https_agent = new node_https.Agent;
		// 不需要。
		// node_http_agent.maxSockets = 1;
		// node_https_agent.maxSockets = 1;
	}

	_.setup_node_net = setup_node;

	// CeL.application.net.Ajax.setup_node_net();
	// library_namespace.application.net.Ajax.setup_node_net();
	setup_node();

	// ---------------------------------------------------------------------//

	function parse_proxy_server(proxy_server) {
		// console.log(proxy_server);
		proxy_server = library_namespace.URI(proxy_server);
		proxy_server.proxy = proxy_server.href;
		// console.log(proxy_server);
		return proxy_server;

		if (typeof proxy_server !== 'string') {
			return proxy_server;
		}

		// href=protocol:(//)?username:password@hostname:port/path/filename?search#hash
		// 代理伺服器 proxy_server: "username:password@hostname:port"
		// [ all, protocol, username, password, hostname, port ]
		var matched = proxy_server
				.match(/^(?:(https?:)\/\/)?(?:([^:@]+)(?::([^@]*))?@)?([^:@]+)(?::(\d{1,5}))?$/);

		if (!matched) {
			return false;
		}

		matched = {
			proxy : matched[0],
			protocol : matched[1],
			username : matched[2],
			password : matched[3],
			hostname : matched[4],
			port : +matched[5]
		};

		return matched;
	}

	function get_proxy_URL(proxy_server, URL_options_to_fetch, URL_to_fetch) {
		var proxy_URL = {
			host : proxy_server.hostname,
			port : proxy_server.port
					|| library_namespace.net.port_of_protocol[URL_options_to_fetch.protocol
							.replace(/:$/, '')]
					|| library_namespace.net.port_of_protocol.https,
			path : URL_to_fetch,
			protocol : URL_options_to_fetch.protocol,
			// method: 'GET',
			headers : {
				Host : URL_options_to_fetch.host
			}
		};
		if (proxy_server.agent) {
			proxy_URL.agent = proxy_server.agent;
		}
		if (proxy_server.username) {
			// https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Authentication
			// https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/Proxy-Authorization
			proxy_URL.headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(
			// proxy.auth
			proxy_server.username + ':' + (proxy_server.password || '')
			//
			).toString('base64');
		}

		return proxy_URL;
	}

	// http://luoxia.me/code/2017/07/16/%E8%81%8A%E8%81%8AAgent&Proxy/
	// https://github.com/TooTallNate/node-https-proxy-agent
	/**
	 * get https:// through proxy 用於取得https網站。
	 * 
	 * @see https://www.vanamco.com/2014/06/24/proxy-requests-in-node-js/
	 *      https://gist.github.com/matthias-christen/6beb3b4dda26bd6a221d
	 * 
	 * modify from:
	 * 
	 * HTTPS Agent for node.js HTTPS requests via a proxy.
	 * blog.vanamco.com/connecting-via-proxy-node-js/
	 */
	function HttpsProxyAgent(proxy_server, options) {
		if (!(this instanceof HttpsProxyAgent))
			return new HttpsProxyAgent(proxy_server, options);

		node_https.Agent.call(this, options || {});

		this.options = Object.assign({}, options);

		// href=protocol:(//)?username:password@hostname:port/path/filename?search#hash
		// 代理伺服器 proxy_server: "username:password@hostname:port"
		proxy_server = library_namespace.URI(proxy_server);
		if (!proxy_server) {
			// gettext_config:{"id":"must-specify-proxy-server-hostname-port"}
			throw new Error('Must specify proxy server: hostname:port')
		}
		this.proxy_server = proxy_server;

		// https://github.com/nodejs/node/blob/master/lib/net.js
		// function connect(...args) { }
		this.createConnection = function connect_proxy_server(options, callback) {
			// do a CONNECT request
			var request = Object.assign(get_proxy_URL(proxy_server, options,
					options.host + ':' + options.port), {
				method : 'CONNECT'
			});
			// console.log(request);
			// 此時若有 agent，會是 https。但是待會要用 http connect。
			delete request.agent;
			delete request.protocol;
			if (proxy_server.agent)
				set_cookie_to_URL_object(request, proxy_server.agent);

			library_namespace.debug('Connect to ' + request.path, 2,
					'HttpsProxyAgent.createConnection');
			request = node_http.request(request);

			request.on('connect', function(response, socket, head) {
				var tls = require('tls');
				// https://github.com/nodejs/node/issues/27384
				// node.js v12 disable TLS v1.0 and v1.1 by default
				// tls.DEFAULT_MIN_VERSION = 'TLSv1';

				// a tls.TLSSocket object
				var tls_socket = tls.connect({
					host : options.host,
					socket : socket
				}, function() {
					callback(null, tls_socket);
				});
			});

			request.on('error', callback);

			request.end();
		}
	}

	/**
	 * <code>
	node_https.request({
		// like you'd do it usually...
		host : 'twitter.com',
		port : 443,
		method : 'GET',
		path : '/',
	
		// set proxy
		agent : new CeL.HttpsProxyAgent('localhost:8080')
	}, function(resonse) {
		resonse.on('data', function(data) {
			console.log(data.toString());
		});
	}).end();

	</code>
	 */
	_.HttpsProxyAgent = HttpsProxyAgent;

	var node_util;
	if (is_nodejs) {
		node_util = require('util');
		node_util.inherits(HttpsProxyAgent, node_https.Agent);
	}

	// https://github.com/nodejs/node/blob/master/lib/_http_agent.js
	HttpsProxyAgent.prototype.getName = function getName(options) {
		var name = (options.host || 'localhost') + ':'
		//
		+ (options.port || '') + ':' + (options.path || '');
		return name;
	};

	// Almost verbatim copy of http.Agent.addRequest
	// https://github.com/nodejs/node/blob/master/lib/_http_agent.js
	// Agent.prototype.addRequest = function addRequest(req, options
	HttpsProxyAgent.prototype.addRequest = function addRequest(request, options) {
		// Get the key for a given set of request options
		// Agent.prototype.getName
		var name = this.getName(options);

		if (!this.sockets[name])
			this.sockets[name] = [];

		// Do not use this.freeSockets

		if (this.sockets[name].length < this.maxSockets) {
			options.request = request;
			// If we are under maxSockets create a new one.

			this.createSocket(name, options, function(error, tls_socket) {
				if (error) {
					process.nextTick(function emitErrorNT(emitter, error) {
						emitter.emit('error', error);
					}, request, error);
					return;
				}
				// setRequestSocket(agent, request, socket);
				request.onSocket(tls_socket);
				// TODO: set this_agent.options.timeout
			});
		} else {
			// We are over limit so we'll add it to the queue.
			if (!this.requests[name])
				this.requests[name] = [];
			this.requests[name].push(request);
			// lost options???
		}
	};

	// Almost verbatim copy of http.Agent.createSocket
	// https://github.com/nodejs/node/blob/master/lib/_http_agent.js
	// Agent.prototype.createSocket
	HttpsProxyAgent.prototype.createSocket = function createSocket(name,
			options, callback) {
		var this_agent = this;
		options = Object.assign({}, options, this.options);

		options.servername = options.host;
		if (options.request) {
			var hostHeader = options.request.getHeader('host');
			if (hostHeader)
				options.servername = hostHeader.replace(/:.*$/, '');
		}

		var called = false;
		function oncreate(error, tls_socket) {
			if (called)
				return;
			called = true;
			if (error) {
				error.message += ' while connecting to HTTP(S) proxy server '
						+ this_agent.hostname + ':' + this_agent.port;

				if (options.request)
					options.request.emit('error', error);
				else
					throw error;

				return;
			}

			var name = this_agent.getName(options);
			if (!this_agent.sockets[name])
				this_agent.sockets[name] = [];

			this_agent.sockets[name].push(tls_socket);

			// ------------------------
			// function installListeners(agent, socket, options)
			var onFree = function onFree() {
				this_agent.emit('free', tls_socket, options);
			};

			var onClose = function onClose(error) {
				/**
				 * This is the only place where sockets get removed from the
				 * Agent.
				 * 
				 * If you want to remove a socket from the pool, just close it.
				 * 
				 * All socket errors end in a close event anyway.
				 */
				this_agent.removeSocket(tls_socket, options);
			};

			var onRemove = function onRemove() {
				/**
				 * We need this function for cases like HTTP 'upgrade' (defined
				 * by WebSockets) where we need to remove a socket from the pool
				 * because it'll be locked up indefinitely
				 */
				this_agent.removeSocket(tls_socket, options);
				tls_socket.removeListener('close', onClose);
				tls_socket.removeListener('free', onFree);
				tls_socket.removeListener('agentRemove', onRemove);
			};

			tls_socket.on('free', onFree);
			tls_socket.on('close', onClose);
			tls_socket.on('agentRemove', onRemove);
			// ------------------------

			// assert: error === null
			callback(error, tls_socket);
		}

		// call connect_proxy_server()
		this_agent.createConnection(options, oncreate);
	};

	// ---------------------------------------------------------------------//

	// https://github.com/TooTallNate/node-socks-proxy-agent
	function SocksProxyAgent() {
		TODO;
	}

	// ---------------------------------------------------------------------//
	// TODO: for non-nodejs

	/** {Object|Function}fs in node.js */
	var node_fs;
	try {
		if (is_nodejs) {
			// @see https://nodejs.org/api/fs.html
			node_fs = require('fs');
		}
		if (typeof node_fs.readFile !== 'function') {
			throw true;
		}
	} catch (e) {
		library_namespace.debug([ this.id + ': ', {
			// gettext_config:{"id":"there-is-no-`fs`-package-for-node.js-so-there-is-no-file-operation-function-for-node"}
			T : '無 node.js 之 `fs` 套件，因此不具備 node 之檔案操作功能。'
		} ]);
		if (false) {
			// enumerate for get_URL_cache_node
			// 模擬 node.js 之 fs，以達成最起碼的效果（即無 cache 功能的情況）。
			node_fs = {
				readFile : function(file_name, charset, callback) {
					callback(true);
				},
				writeFile : library_namespace.null_function
			};
		}
	}

	/**
	 * <code>

	cache 相關函數:
	@see
	application.storage.file.get_cache_file
	application.OS.Windows.file.cacher
	application.net.Ajax.get_URL_cache
	application.net.wiki wiki_API.cache() CeL.wiki.cache()

	</code>
	 */

	/**
	 * cache 作業操作之輔助套裝函數。
	 * 
	 * 注意: 若執行 onload() 時沒提供 XMLHttp，表示採用 cache。
	 * 
	 * TODO: 以 HEAD 檢測，若有新版本則不採用 cache。
	 * 
	 * @param {String|Object}URL
	 *            欲請求之目的 URL or options
	 * @param {Function}[onload]
	 *            callback when successful loaded. onload(data, error, XMLHttp)
	 * @param {Object}[options]
	 *            附加參數/設定特殊功能與選項
	 */
	function get_URL_cache_node(URL, onload, options) {
		if (typeof options === 'string') {
			// auto-detecting
			options = /\.[a-z\d\-]+$/i.test(options) ? {
				file_name : options
			} : /[\\\/]+$/i.test(options)
			// || 也可以測試是不是目錄、此目錄是否存在。
			? {
				directory : options
			} : {
				encoding : options
			};
		} else if (!library_namespace.is_Object(options)) {
			// 前置處理。
			options = Object.create(null);
		}

		var file_name = options.file_name,
		/** {String}file encoding for fs of node.js. */
		encoding = 'encoding' in options ? options.encoding
				: get_URL_cache_node.encoding;

		if (!file_name && (file_name = decodeURI(URL).match(/[^\/]+$/))) {
			file_name = file_name[0];
			if (library_namespace.HTML_to_Unicode) {
				// 去掉 "&amp;" 之類。
				file_name = library_namespace.HTML_to_Unicode(file_name);
			}
			file_name = library_namespace.to_file_name(file_name);
			library_namespace.debug([ {
				// gettext_config:{"id":"get-filename-from-url-$1"}
				T : [ '自 URL 取得檔名：%1', URL ]
			}, '\n→ ' + file_name ], 1, 'get_URL_cache_node');
		}
		if (typeof options.file_name_processor === 'function') {
			file_name = options.file_name_processor(file_name);
		}
		if (!file_name) {
			// gettext_config:{"id":"no-file-name-specified"}
			onload(undefined, new Error('No file name specified.'));
			return;
		}

		if (options.directory) {
			file_name = library_namespace.append_path_separator(
					options.directory, file_name);
		}

		var file_status;
		try {
			file_status = node_fs.statSync(file_name);
		} catch (e) {
			// TODO: handle exception
		}
		if (!options.get_contents && options.web_resource_date && file_status) {
			// download newer only
			if ((file_status.mtimeMs || file_status.mtime)
			//
			- Date.parse(options.web_resource_date) > -1) {
				library_namespace.debug('File on web ('
						+ options.web_resource_date
						+ ') is not newer than local file ('
						+ file_status.mtime + '): ' + file_name + '', 1,
						'get_URL_cache_node');
				onload(undefined, _.get_URL_cache.NO_NEWS);
				return;
			}
		}

		library_namespace.debug([
				{
					// gettext_config:{"id":"download-$1"}
					T : [ '下載 %1', URL ]
				},
				'\n→ ',
				{
					// gettext_config:{"id":"$1-(file-encoding-$2-charset-$3)"}
					T : [ '%1 (file encoding %2, charset %3)', file_name,
							encoding, options.charset ]
				} ], 1, 'get_URL_cache_node');

		node_fs.readFile(file_name, encoding,
		//
		function(error, data) {
			// console.trace([ error, !!data, options.reget ]);
			// 警告: 對於從 HTTP 標頭獲得文件名的情況，就算不設定 options.reget 也沒用，還是會重新獲取檔案。

			// options.force_download
			if (!options.reget) {
				if (!error && options.web_resource_date && file_status) {
					// download newer only
					if ((file_status.mtimeMs || file_status.mtime)
					//
					- Date.parse(options.web_resource_date) > -1) {
						// No new file on web.
						onload(data);
						return;
					}
				}

				if (!error && !options.preserve_newer
				// 若是容許空內容，應該特別指定 options.allow_empty。
				&& (data || options.allow_empty)) {
					library_namespace.debug({
						// gettext_config:{"id":"using-cached-data"}
						T : 'Using cached data.'
					}, 3, 'get_URL_cache_node');
					library_namespace.debug('Cached data: ['
							+ data.slice(0, 200) + ']...', 5,
							'get_URL_cache_node');
					// TODO: use cached_status
					onload(data);
					return;
				}

				library_namespace.debug({
					// gettext_config:{"id":"no-valid-cached-data.-try-to-get-data-(again)"}
					T : 'No valid cached data. Try to get data (again)...'
				}, 3, 'get_URL_cache_node');
			}

			_.get_URL(URL, function(XMLHttp, error) {
				if (error) {
					library_namespace.error([ 'get_URL_cache_node.cache: ', {
						// gettext_config:{"id":"got-error-when-retrieving-$1-$2"}
						T : [ 'Got error when retrieving [%1]: %2',
						//
						URL, localize_error(error) ]
					} ]);
					// WARNING: XMLHttp 僅在重新取得 URL 時提供。
					onload(undefined, error, XMLHttp);
					return;
				}

				// .buffer: node only.
				data = !encoding && XMLHttp.buffer || XMLHttp.response
						|| XMLHttp.responseText;
				// 資料事後處理程序 (post-processor):
				// 將以 .postprocessor() 的回傳作為要處理的資料。
				if (typeof options.postprocessor === 'function') {
					data = options.postprocessor(data, XMLHttp);
				}

				if (options.file_name_processor) {
					file_name = options.file_name_processor(file_name,
					// header_filename
					XMLHttp.filename);
				} else if (XMLHttp.filename) {
					if (false) {
						console.log([ options.directory, options.file_name,
								XMLHttp.filename ]);
						console.log(XMLHttp.headers);
					}
					if (!options.file_name) {
						file_name = (options.directory || '')
						// 若是沒有特別設置檔名，則改採用header裡面的檔名。
						+ XMLHttp.filename;
						library_namespace.info([
								'get_URL_cache_node: ',
								{
									// gettext_config:{"id":"got-file-name-from-http-header-$1"}
									T : [ 'Got file name from HTTP header: %1',
											XMLHttp.filename ]
								} ]);
					} else if (!options.file_name.endsWith(XMLHttp.filename)) {
						library_namespace.info([ 'get_URL_cache_node: ', {
							T : [
							// gettext_config:{"id":"set-file-name-$1-file-name-from-header-$2"}
							'Set file name: [%1], file name from header: [%2].'
							//
							, options.file_name, XMLHttp.filename ]
						} ]);
					}
				}

				var URL_date = XMLHttp.headers['date'];
				if (URL_date && options.preserve_newer && file_status) {
					// data.length === stat.size
					if ((file_status.mtimeMs || file_status.mtime)
					//
					- Date.parse(URL_date) > -1) {
						// Local file is newer than file on web.
						onload(data.toString(), undefined, XMLHttp);
						return;
					}
				}

				/**
				 * 寫入cache。
				 * 
				 * 若出現錯誤，則不寫入cache。
				 */
				if (data && /[^\\\/]$/.test(file_name)) {
					XMLHttp.cached_file_path = file_name;
					if (!file_status) {
						try {
							file_status = node_fs.statSync(file_name);
							if (file_status && !options.reget) {
								library_namespace.info([
										'get_URL_cache_node.cache: ',
										{
											// gettext_config:{"id":"find-that-the-file-exists-after-get-the-file-from-web-$1-.-do-not-overwrite-it"}
											T : [ '重新獲取檔案後發現原檔案已存在，跳過不覆寫：[%1]',
													file_name ]
										} ]);
								onload(data.toString(), undefined, XMLHttp);
								return;
							}
						} catch (e) {
							// TODO: handle exception
						}
					}
					if (!options.no_write_info) {
						library_namespace.info([
								'get_URL_cache_node.cache: ',
								{
									// gettext_config:{"id":"write-data-to-cache-file-$1"}
									T : [ 'Write data to cache file [%1].',
											file_name ]
								} ]);
						library_namespace.debug({
							// gettext_config:{"id":"the-data-to-cache-$1"}
							T : [ 'The data to cache: %1...',
							//
							data && JSON.stringify(data).slice(0, 190) ]
						}, 3, 'get_URL_cache_node');
					}
					try {
						node_fs.writeFileSync(file_name, data, encoding);
					} catch (error) {
						onload(data.toString(), error, XMLHttp);
						return;
					}
				}

				// set file modify date
				// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
				// https://tools.ietf.org/html/rfc7231#section-7.1.1.2
				if (URL_date) {
					try {
						// The "Date" header field represents the date
						// and time at which the message was originated

						// fs.utimesSync(path, atime, mtime)
						// atime: the last time this file was accessed
						node_fs.utimesSync(file_name, new Date,
						// mtime: the last time this file was modified
						URL_date);
					} catch (e) {
						// TODO: handle exception
					}
				}

				// Warning: 已經有些程式碼預設會回傳 {String}
				onload(data.toString(), undefined, XMLHttp);
			},
			// character encoding of HTML web page
			// is different from the file we want to save to
			options.charset, options.post_data, options.get_URL_options);
		});
	}

	/** {String}預設 file encoding for fs of node.js。 */
	get_URL_cache_node.encoding = 'utf8';

	if (is_nodejs) {
		_.get_URL_cache = get_URL_cache_node;
		_.get_URL_cache.NO_NEWS = typeof Symbol === 'function' ? Symbol('no news')
				: {
					'no news' : true
				};
	}

	// ---------------------------------------------------------------------//

	/**
	 * defective polyfill for W3C fetch API
	 * 
	 * @since 2018/10/16 17:47:12
	 * @deprecated
	 */
	function node_fetch(input, init) {
		// TODO: input is a Request object.

		var url = input instanceof URL ? input : new URL(input.toString()), options = library_namespace
				.new_options(init);

		function executor(resolve, reject) {
			function callback(response) {
				if ((response.statusCode / 100 | 0) === 3
						&& response.headers.location
						&& response.headers.location !== url.toString()) {
					try {
						// request.abort();
						request.destroy();
					} catch (e) {
					}

					Object.assign(options, {
						redirected : true,
						initial_URL : options.initial_URL || input
					});

					url = new URL(response.headers.location, url);
					library_namespace.debug({
						// gettext_config:{"id":"$1-redirecting-to-$2-←-$3"}
						T : [ '%1 Redirecting to [%2] ← [%3]',
								response.statusCode, url.toString(), input ]
					}, 1, 'fetch');
					node_fetch(url, options);
					return;
				}

				/** {Array} [ {Buffer}, {Buffer}, ... ] */
				var data = [], length = 0;
				response.on('data', function(chunk) {
					// {Buffer}chunk
					length += chunk.length;
					library_namespace.debug('receive BODY '
					//
					+ chunk.length + '/' + length + ': ' + url, 4, 'fetch');
					data.push(chunk);
				});

				response.on('end', function() {
					library_namespace.debug('end(): ' + url, 2, 'fetch');

					// console.log('No more data in response: ' + url);
					// it is faster to provide the length explicitly.
					data = Buffer.concat(data, length);

					var result_Object = {
						// https://developer.mozilla.org/zh-TW/docs/Web/API/Response
						// https://nodejs.org/api/http.html#http_http_get_options_callback
						url : options.initial_URL || input,
						headers : response.headers,
						status : response.statusCode,
						statusText : response.statusMessage,
						ok : (response.statusCode / 100 | 0) === 2,
						redirected : !!options.redirected,
						useFinalURL : url.toString(),

						_buffer : data,

						// TODO: body : new ReadableStream()
						// methods of
						// https://developer.mozilla.org/en-US/docs/Web/API/Body
						// https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream

						text : function text() {
							try {
								return Promise.resolve(
								//
								this._buffer.toString());
							} catch (e) {
								return Promise.reject(e);
							}
						},
						json : function json() {
							return this.text().then(JSON.parse);
						},
						arrayBuffer : function arrayBuffer() {
							return Promise.resolve(this._buffer.buffer);
						}
					};

					resolve(result_Object);
				});
			}

			// TODO: add normal headers
			// CloudFlare 必須設定好headers才能才會才允許回傳資料。

			if (library_namespace.is_debug(9)
					&& library_namespace.env.has_console) {
				console.trace([ url.toString(), options ]);
			}

			// https://nodejs.org/api/http.html
			var request = url.protocol === 'http:' ? node_http.request(url
					.toString(), options, callback) : node_https.request(url
					.toString(), options, callback);
			request.on('error', reject);
			if (options.body)
				request.write(options.body);
			request.end();
		}

		return new Promise(executor);
	}

	/**
	 * defective polyfill for W3C fetch API
	 * 
	 * 必須額外設定 credentials。
	 * 
	 * TODO: fetch 預設上不傳送或接收任何 cookies，如果網站依賴 session 會導致請求回傳未經認證，需要使用 cookies
	 * 
	 * @examples <code>
	
	var fetch = CeL.fetch;

	fetch(url).then(function(response) {
		return response.json();
	}).then(function(json) {
		console.log(json);
	});

	fetch(url).then(function(response) {
		return response.text();
	}).then(function(html) {
		console.log(html);
	});

	</code>
	 * 
	 * @see 20181016.import_earthquake_shakemap.js
	 * @see https://fetch.spec.whatwg.org/#fetch-method
	 *      https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API
	 *      https://github.com/node-fetch/node-fetch
	 * 
	 * @since 2021/8/4 6:6:45
	 */
	function fetch__get_URL(input, init) {
		function executor(resolve, reject) {
			function callback(XMLHttp, error) {
				if (error) {
					reject(error);
					return;
				}

				// console.trace(XMLHttp);
				var result_Object = {
					// https://developer.mozilla.org/zh-TW/docs/Web/API/Response
					// https://nodejs.org/api/http.html#http_http_get_options_callback
					headers : XMLHttp.headers,
					ok : (XMLHttp.status / 100 | 0) === 2,
					redirected : XMLHttp.redirected,
					status : XMLHttp.status,
					statusText : XMLHttp.statusText,

					// 重定向後獲得的最終 URL。
					url : XMLHttp.responseURL,
					useFinalURL : true,

					_buffer : XMLHttp.buffer,

					// TODO: body : new ReadableStream()
					// methods of
					// https://developer.mozilla.org/en-US/docs/Web/API/Body
					// https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream

					text : function text() {
						try {
							return Promise.resolve(
							//
							this._buffer.toString());
						} catch (e) {
							return Promise.reject(e);
						}
					},
					json : function json() {
						return this.text().then(JSON.parse);
					},
					arrayBuffer : function arrayBuffer() {
						return Promise.resolve(this._buffer.buffer);
					}
				};

				resolve(result_Object);
			}

			// CloudFlare 必須設定好 headers 才能才會才允許回傳資料。
			// get_URL() 可自動設定 headers。
			_.get_URL(input, callback, null, init && init.body, Object.assign({
				onfail : reject
			}, init));
		}

		return new Promise(executor);
	}

	if (is_nodejs) {
		_.fetch = fetch__get_URL;
	}

	// ---------------------------------------------------------------------//

	// export 導出.

	return (_// JSDT:_module_
	);
}

});
// CeL.application.net.wiki.task
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): task control
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2020/5/24 6:21:13 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.task',

	require : 'data.native.'
	// for library_namespace.get_URL
	+ '|application.net.Ajax.' + '|application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION, KEY_CORRESPOND_PAGE = wiki_API.KEY_CORRESPOND_PAGE;
	// @inner
	var is_api_and_title = wiki_API.is_api_and_title, add_session_to_options = wiki_API.add_session_to_options;

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	// ------------------------------------------------------------------------

	// get_data_key(), get_data_page()
	function get_wikibase_key(id) {
		if (!id)
			return;
		if (id[KEY_CORRESPOND_PAGE])
			id = id[KEY_CORRESPOND_PAGE];
		return id.site && id.title && id;
	}

	// check if session.last_data is usable, 非過期資料。
	function last_data_is_usable(session) {
		// When "servers are currently under maintenance", session.last_data is
		// a string.
		if (typeof session.last_data === 'object' && !session.last_data.error
		// 若是session.last_data與session.last_page連動，必須先確認是否沒變更過session.last_page，才能當作cache、跳過重新擷取entity之作業。
		&& (!(KEY_CORRESPOND_PAGE in session.last_data)
		// assert:
		// wiki_API.is_page_data(session.last_data[KEY_CORRESPOND_PAGE])
		|| session.last_page === session.last_data[KEY_CORRESPOND_PAGE])) {
			library_namespace.debug('Use cached data: [['
			//
			+ (KEY_CORRESPOND_PAGE in session.last_data
			// may use wiki_API.title_link_of()
			? session.last_page.id : session.last_data.id) + ']]', 1,
					'last_data_is_usable');
			return true;
		}
	}

	// --------------------------------------------------------------------------------------------
	// instance 實例相關函數。

	/**
	 * Register promise relying on wiki session actions. 設定依賴於本 wiki_API action
	 * 的 promise。
	 * 
	 * @param promise
	 *            promise to set
	 * 
	 * @example session.set_promise_relying(result);
	 */
	wiki_API.prototype.set_promise_relying = function set_promise_relying(
			promise) {
		// Promise.isPromise()
		if (library_namespace.is_thenable(promise)
		// no rely on wiki_API
		// && !promise.not_relying_on_wiki_API
		) {
			// assert: promise 依賴於本 wiki_API action thread。
			library_namespace.debug('設定依賴於本 wiki_API action 的 promise。', 3,
					'set_promise_relying');
			// console.trace(promise);
			// console.trace([this.running,this.actions]);
			this.actions.promise_relying = library_namespace
					.is_thenable(this.actions.promise_relying) ? this.actions.promise_relying
					.then(promise)
					: promise;
			return true;
		}
	};

	wiki_API.prototype.test_promise_relying = function test_promise_relying() {
		// this.actions.promise_relying is relying on this action.
		// 為了偵測這些promise是否已fulfilled，必須先this.running，預防其他執行緒鑽空隙。

		this.running = true;

		var _this = this;
		function status_of_thenable(fulfilled, this_thenable) {
			if (this_thenable !== _this.actions.promise_relying) {
				library_namespace.debug(
						'有其他執行緒鑽空隙，執行了 .set_promise_relying()。需要再檢測一次。', 3,
						'test_promise_relying');
				_this.test_promise_relying();
				return;
			}

			if (fulfilled) {
				delete _this.actions.promise_relying;
				if (0 < _this.actions.length) {
					// assert: other threads added _this.actions
					// after library_namespace.status_of_thenable()
					library_namespace.debug('有其他執行緒鑽空隙，設定了 .actions。', 3,
							'test_promise_relying');
					_this.next();
				} else {
					library_namespace
							.debug(
									'依賴於本 wiki_API action 的 promise 皆已 fulfilled。本 action 結束。',
									3, 'test_promise_relying');
					_this.running = false;
				}
				return;
			}

			// incase session.next() will wait for this.actions.promise_relying
			// calling back if CeL.is_thenable(result).
			// e.g., await wiki.for_each_page(need_check_redirected_list,
			// ... @ 20200122.update_vital_articles.js
			// So we need to run `session.next()` manually.

			// await wiki.for_each_page(need_check_redirected_list,
			// ... @ 20200122.update_vital_articles.js:
			// 從 function work_page_callback() return 之後，會回到 function
			// wiki_API_edit()。
			// `this_thenable` 會等待 push 進 session.actions 的
			// this.page(this_slice, main_work, page_options)，
			// 但 return 的話，會保持 session.running === true &&
			// session.actions.length > 0
			// 並且 abort。執行不到 this_thenable.then()。

			if (0 < _this.actions.length) {
				// 有些 promise 依賴於本 wiki_API action，假如停下來的話將會導致直接 exit跳出。
				if (false) {
					console
							.trace('test_promise_relying: Calling wiki_API.prototype.next() '
									+ [ _this.running, _this.actions.length ]);
				}
				_this.next();
			} else {
				if (false) {
					console.trace('test_promise_relying: No .actions left! '
							+ [ _this.running, _this.actions.length ]);
				}
				// delete _this.actions.promise_relying;
				_this.running = false;
			}
		}

		library_namespace.status_of_thenable(this.actions.promise_relying,
				status_of_thenable);
	};

	// @inner
	wiki_API.KEY_waiting_callback_result_relying_on_this = typeof Symbol === 'function' ? Symbol('waiting callback_result_relying_on_this')
			: '\0waiting callback_result_relying_on_this';

	/**
	 * 設定工作/添加新的工作。
	 * 
	 * 注意: 每個 callback 皆應在最後執行 session.next()。
	 * 
	 * 警告: 若 callback throw，可能導致工作中斷，不會自動復原，得要以 wiki.next() 重起工作。
	 * 
	 * 工作原理: 每個實體會hold住一個queue ({Array}this.actions)。 當設定工作時，就把工作推入佇列中。
	 * 另外內部會有另一個行程負責依序執行每一個工作。
	 * 
	 * @see wiki_API_prototype_method() @ CeL.application.net.wiki.list
	 */
	wiki_API.prototype.next = function next(callback_result_relying_on_this) {
		if (this.actions[wiki_API.KEY_waiting_callback_result_relying_on_this]) {
			// assert: 此時為 session.next() 中執行 callback。

			// callback_result_relying_on_this 執行中應該只能 push 進
			// session.actions，不可執行 session.next()!

			// e.g., 'edit_structured_data' 之 callback 直接採用
			// _this.next(next[4], data, error);
			// 若 next[4] 會再次 call session.edit_structured_data()，
			// 可能造成執行 callback_result_relying_on_this 後，
			// 到 'structured_data' 跳出準備 wiki_API.data()，
			// 回到 callback_result_relying_on_this 主程序
			// 就直接跑到 'edit_structured_data' 這邊來，結果選了錯誤的 this.last_page。
			// e.g., check_structured_data() @ CeL.application.net.wiki.edit

			callback_result_relying_on_this = Array.prototype.slice
					.call(arguments);
			callback_result_relying_on_this.unshift('run');
			this.actions.push(callback_result_relying_on_this);

			library_namespace
					.debug(
							'在 callback_result_relying_on_this 中 call this.next() 並且 waiting callback 而跳出。為避免造成多執行序，將執行權交予 call callback_result_relying_on_this() 之母執行序，子執行序這邊跳出。',
							1, 'wiki_API.prototype.next');
			// console.trace(this.actions.length);
			return;
		}

		if (typeof callback_result_relying_on_this === 'function') {
			this.actions[wiki_API.KEY_waiting_callback_result_relying_on_this] = true;

			// console.trace(Array.prototype.slice.call(arguments, 1));
			try {
				callback_result_relying_on_this = callback_result_relying_on_this
				// this.next(callback, ...callback_arguments);
				.apply(this, Array.prototype.slice.call(arguments, 1));
			} catch (e) {
				if (library_namespace.env.has_console)
					console.error(e);
				else
					library_namespace.error(e);
			}

			delete this.actions[wiki_API.KEY_waiting_callback_result_relying_on_this];
		}

		if (callback_result_relying_on_this) {
			this.set_promise_relying(callback_result_relying_on_this);
			// reset
			callback_result_relying_on_this = null;
		}
		// assert: false ===
		// library_namespace.is_thenable(callback_result_relying_on_this)

		// ------------------------------------------------------------------------------

		this.running = 0 < this.actions.length;
		if (!this.running) {
			if (library_namespace.is_thenable(this.actions.promise_relying)) {
				this.test_promise_relying();
			} else {
				// this.thread_count = 0;
				// delete this.current_action;
				library_namespace.debug('The queue is empty.', 2,
						'wiki_API.prototype.next');
				// console.trace(this.actions);
			}
			return;
		}

		// 繼續執行接下來的行動。

		// ------------------------------------------------

		library_namespace.debug('剩餘 ' + this.actions.length + ' action(s)', 2,
				'wiki_API.prototype.next');
		if (library_namespace.is_debug(3)
		// .show_value() @ interact.DOM, application.debug
		&& library_namespace.show_value)
			library_namespace.show_value(this.actions.slice(0, 10));
		var next = this.actions.shift();
		// 不改動 next。
		var type = next[0], list_type;
		if (// type in get_list.type
		wiki_API.list.type_list.includes(type)) {
			list_type = type;
			type = 'list';
		}
		// this.current_action = next;

		if (library_namespace.is_debug(3)) {
			library_namespace.debug(
			//
			'處理 ' + (this.token.lgname ? this.token.lgname + ' ' : '') + '['
			//
			+ next.map(function(arg) {
				// for function
				var message;
				if (arg && arg.toString) {
					message = arg.toString();
				} else {
					try {
						message = JSON.stringify(arg);
					} catch (e) {
						// message = String(arg);
						message = library_namespace.is_type(arg);
					}
				}
				return message && message.slice(0, 80);
			}) + ']', 1, 'wiki_API.prototype.next');
		}

		// ------------------------------------------------

		var _this = this;

		// 若需改變，需同步更改 wiki_API.prototype.next.methods
		switch (type) {

		// setup options

		case 'set_URL':
			// next[1] : callback
			wiki_API.setup_API_URL(this /* session */, next[1]);
			this.next();
			break;

		case 'set_language':
			// next[1] : callback
			wiki_API.setup_API_language(this /* session */, next[1]);
			this.next();
			break;

		case 'set_data':
			// 設定 this.data_session。
			// using @inner
			// setup_data_session(session, callback, API_URL, password, force)
			wiki_API.setup_data_session(this /* session */,
			// 確保 data_session login 了才執行下一步。
			function() {
				// console.trace(_this);
				// console.trace(_this.data_session);
				// next[1] : callback of set_data
				_this.next(next[1]);
			}, next[2], next[3], next[4]);
			break;

		// ------------------------------------------------
		// account

		case 'login':
			library_namespace.debug(
					'正 log in 中，當 login 後，會自動執行 .next()，處理餘下的工作。', 2,
					'wiki_API.prototype.next');
			// rollback
			this.actions.unshift(next);
			break;

		case 'logout':
			// 結束
			// next[1] : callback
			wiki_API.logout(this /* session */, next[1]);
			// this.next();
			break;

		// ------------------------------------------------
		// page access

		case 'query':
			console.trace('use query');
			throw new Error('Please use .query_API() instead of only .query()!');
			library_namespace
					.error('Please use .query_API() instead of only .query()!');
		case 'query_API':
			// wiki_API.query(post_data, callback, options)
			if (next[4] === undefined && library_namespace.is_Object(next[3])
					&& next[3].post_data_only) {
				// shift arguments
				next[4] = next[3];
				next[3] = next[1];
				next[1] = '';
			}

			// wiki_API.query(action, callback, post_data, options)
			wiki_API.query(next[1], function query_API_callback(data, error) {
				// 再設定一次，預防有執行期中間再執行的情況。
				// e.g., wiki.query_api(action,function(){wiki.page();})
				// 注意: 這動作應該放在callback()執行完後設定。
				// next[2] : callback
				_this.next(next[2], data, error);
			}, next[3],
			// next[4] : options
			add_session_to_options(this, next[4]));
			break;

		case 'siteinfo':
			// wiki.siteinfo(options, callback)
			// wiki.siteinfo(callback)
			if (typeof next[1] === 'function' && !next[2]) {
				// next[1] : callback
				next[2] = next[1];
				next[1] = null;
			}

			wiki_API.siteinfo(add_session_to_options(this, next[1]), function(
					data, error) {
				// next[2] : callback
				// run next action
				_this.next(next[2], data, error);
			});
			break;

		case 'page':
			// console.trace(next);
			// this.page(page data, callback, options);
			if (library_namespace.is_Object(next[2]) && !next[3]) {
				// 直接輸入 options，未輸入 callback。
				next.splice(2, 0, null);
			}

			// → 此法會採用所輸入之 page data 作為 this.last_page，不再重新擷取 page。
			if (wiki_API.is_page_data(next[1])
			// 必須有頁面內容，要不可能僅有資訊。有時可能已經擷取過卻發生錯誤而沒有頁面內容，此時依然會再擷取一次。
			&& (wiki_API.content_of.has_content(next[1])
			// 除非剛剛才取得，同一個執行緒中不需要再度取得內容。
			|| next[3] && next[3].allow_missing
			// 確認真的是不存在的頁面。預防一次擷取的頁面內容太多，或者其他出錯情況，實際上沒能成功取得頁面內容，
			// next[1].revisions:[]
			&& ('missing' in next[1]))) {
				library_namespace.debug('採用所輸入之 '
						+ wiki_API.title_link_of(next[1])
						+ ' 作為 this.last_page。', 2, 'wiki_API.prototype.next');
				this.last_page = next[1];
				// console.trace(next[1]);
				// next[2] : callback
				this.next(next[2], next[1]);
				break;
			}

			// ----------------------------------

			if (typeof next[1] === 'function') {
				// this.page(callback): callback(last_page)
				// next[1] : callback
				this.next(next[1], this.last_page);
				break;
			}

			// ----------------------------------

			if (false) {
				console.trace(_this.thread_count + '/' + _this.actions.length
						+ 'actions: '
						+ _this.actions.slice(0, 9).map(function(action) {
							return action[0];
						}));
				// console.log(next);
			}

			// 準備擷取新的頁面。為了預防舊的頁面資料被誤用，因此將此將其刪除。
			// 例如在 .edit() 的callback中再呼叫 .edit():
			// wiki.page().edit(,()=>wiki.page().edit(,))
			delete this.last_page;

			// this.page(title, callback, options)
			// next[1] : title
			// next[3] : options
			// [ {String}API_URL, {String}title or {Object}page_data ]
			wiki_API.page(is_api_and_title(next[1]) ? next[1] : [ this.API_URL,
					next[1] ],
			//
			function wiki_API_next_page_callback(page_data, error) {
				if (false) {
					if (Array.isArray(page_data)) {
						console.trace(page_data.length
								+ ' pages get: '
								+ page_data.slice(0, 10).map(
										function(page_data) {
											return page_data.title;
										}));
					} else {
						console.trace([ page_data, error ]);
					}
				}
				// assert: 當錯誤發生，例如頁面不存在/已刪除，依然需要模擬出 page_data。
				// 如此才能執行 .page().edit()。
				_this.last_page
				// 正常情況。確保this.last_page為單頁面。需要使用callback以取得result。
				= Array.isArray(page_data) ? page_data[0] : page_data;
				// console.trace(next[2] + '', page_data, error);
				// console.trace(_this.actions);
				// next[2] : callback
				_this.next(next[2], page_data, error);
			},
			// next[3] : options
			add_session_to_options(this, next[3]));
			break;

		case 'tracking_revisions':
			if (typeof next[3] === 'object') {
				// shift arguments
				next[4] = next[3];
				next[3] = null;
			}
			wiki_API.tracking_revisions(next[1], next[2], function(revision,
					error) {
				_this.next(next[3], revision, error);
			},
			// next[4] : options
			add_session_to_options(this, next[4]));
			break;

		case 'parse':
			// e.g., wiki.page('title', options).parse(callback, options);
			if (library_namespace.is_Object(next[1]) && !next[2]) {
				// 直接輸入 options，未輸入 callback。
				next.splice(1, 0, null);
			}

			// next[2] : options
			var parsed = wiki_API.parser(this.last_page,
					add_session_to_options(this, next[2])).parse();
			// next[3] : callback
			this.next(next[1], parsed);
			break;

		case 'purge':
			if (typeof next[1] === 'string' || typeof next[1] === 'number') {
				// purge() 可以直接輸入頁面，不必先 .page('Title')
				// wiki.purge('Title', callback, options)
				// wiki.purge('Title', options)
				// wiki.purge(pageid, callback, options)
				// wiki.purge('pageid|pageid', options)
			} else {
				// wiki.page('Title').purge()
				// wiki.page('Title').purge(callback, options)
				// wiki.page('Title').purge(options)
				next.splice(1, 0, this.last_page);
			}

			if (library_namespace.is_Object(next[2]) && !next[3]) {
				// 直接輸入 options，未輸入 callback。
				next.splice(2, 0, null);
			}

			// next: [ 'purge', pages, callback, options ]

			if (!next[1]) {
				library_namespace
						.warn('wiki_API.prototype.next.purge: No page inputed!');
				// next[3] : callback
				this.next(next[3], undefined, 'no page');

			} else {
				wiki_API.purge([ this.API_URL, next[1] ],
				//
				function wiki_API_next_purge_callback(purge_pages, error) {
					// next[2] : callback
					_this.next(next[2], purge_pages, error);
				},
				// next[3] : options
				add_session_to_options(this, next[3]));
			}
			break;

		case 'redirect_to':
			// this.redirect_to(page data, callback, options);
			if (library_namespace.is_Object(next[2]) && !next[3]) {
				// 直接輸入 options，未輸入 callback。
				next.splice(2, 0, null);
			}

			// this.redirect_to(title, callback, options)
			// next[1] : title
			// next[3] : options
			// [ {String}API_URL, {String}title or {Object}page_data ]
			wiki_API.redirect_to(is_api_and_title(next[1]) ? next[1] : [
					this.API_URL, next[1] ],
			//
			function wiki_API_next_redirect_to_callback(redirect_data,
					page_data, error) {
				// next[2] : callback
				_this.next(next[2], redirect_data, page_data, error);
			},
			// next[3] : options
			add_session_to_options(this, next[3]));
			break;

		case 'list':
			// get_list(). e.g., 反向連結/連入頁面。

			// next[1] : 大部分是 page title,
			// 但因為有些方法不需要用到頁面標題(recentchanges,allusers)因此對於這一些方法需要特別處理。
			if (typeof next[1] === 'function' && typeof next[2] !== 'function') {
				next.splice(1, 0, '');
			}

			// 注意: arguments 與 get_list() 之 callback 連動。
			wiki_API[list_type]([ this.API_URL, next[1] ],
			//
			function wiki_API_next_list_callback(pages, error) {
				// [ page_data ]
				_this.last_pages = pages;

				if (typeof next[2] === 'function') {
					// 注意: arguments 與 get_list() 之 callback 連動。
					callback_result_relying_on_this
					// next[2] : callback(pages, error)
					= next[2].call(_this, pages, error);
				} else if (next[2] && next[2].each) {
					// next[2] : 當作 work，處理積存工作。
					if (pages) {
						_this.work(next[2]);
					} else {
						// 只有在本次有處理頁面時，才繼續下去。
						library_namespace.info('無頁面可處理（已完成？），中斷跳出。');
					}
				}

				_this.next(callback_result_relying_on_this);
			},
			// next[3] : options
			add_session_to_options(this, next[3]));
			break;

		// case 'category_tree':
		// @see wiki_API.prototype.category_tree @ application.net.wiki.list

		// register page alias. usually used for templates
		case 'register_redirects':
			// wiki.register_redirects(page_title_list, callback, options)
			// wiki.register_redirects(page_title_list, options)
			if (library_namespace.is_Object(next[2]) && !next[3]) {
				// 未設定/不設定 callback
				// shift arguments
				next.splice(2, 0, undefined);
			}

			// next[3] : options
			next[3] = Object.assign({
				// [KEY_SESSION]
				session : this,
				// Making .redirect_list[0] the redirect target.
				include_root : true,
				// converttitles: 1,
				// multiple pages
				multi : Array.isArray(next[1]) && next[1].length > 1
			}, next[3]);

			// next[1]: page_title
			if (next[3].namespace)
				next[1] = this.to_namespace(next[1], next[3].namespace);
			next[1] = this.normalize_title(next[1]);

			if (next[3].reget) {
			} else if (Array.isArray(next[1])) {
				next[1] = next[1].filter(function(page_title) {
					return !(page_title in _this.redirects_data);
				}).unique();
				if (next[1].length === 0) {
					// next[2] : callback(root_page_data, error)
					this.next(next[2]);
					break;
				}

			} else if (next[1] in this.redirects_data) {
				// 已處理過。
				// have registered
				// next[2] : callback(root_page_data, error)
				this.next(next[2]);
				break;
			}

			if (Array.isArray(next[1])) {
				// next[3] : options
				var slice_size = next[3].one_by_one ? 1
				// 50: 避免 HTTP status 414: Request-URI Too Long
				: next[3].slice_size >= 1 ? Math.min(50, next[3].slice_size)
						: 50;
				while (next[1].length > slice_size) {
					_this.actions.unshift([ next[0],
					// keep request order
					slice_size === 1 ? next[1].pop()
					//
					: next[1].splice(next[1].length - slice_size, slice_size),
							next[2], next[3] ]);
					// remove callback: only run callback at the latest
					// time.
					next[2] = undefined;
				}
			}

			// console.trace(JSON.stringify(next[1]));
			// 解析出所有 next[1] 別名
			// next[1]: page_title
			wiki_API.redirects_here(next[1], function(root_page_data,
					redirect_list, error) {
				if (error) {
					// next[2] : callback(root_page_data, error)
					_this.next(next[2], null, error);
					return;
				}

				if (false) {
					console.trace(root_page_data);
					console.trace(redirect_list);
					console.assert(!redirect_list
							|| redirect_list === root_page_data.redirect_list);
				}

				var registered_page_list = Array.isArray(next[1]) ? next[1]
						: [ next[1] ];
				// from: alias, to: 正式名稱
				function register_title(from, to) {
					if (!from
					// || (from in _this.redirects_data)
					) {
						return;
					}
					// assert: from ===
					// _this.normalize_title(from)
					// the namespace of from, to is normalized
					_this.redirects_data[from] = to;
					registered_page_list.push(from);
				}
				function register_root_alias(page_data) {
					if (page_data.original_title) {
						// console.trace(page_data);
						register_title(page_data.original_title,
						//
						page_data.title);
					}
					if (page_data.redirect_from) {
						register_title(page_data.redirect_from,
						//
						page_data.title);
					}
				}
				function register_redirect_list(redirect_list, page_title) {
					// console.trace(redirect_list);
					// 本名
					var target_page_title = redirect_list[0].title;
					var is_missing = !target_page_title
							|| ('missing' in redirect_list[0])
							|| ('invalid' in redirect_list[0]);
					if (!is_missing) {
						redirect_list.forEach(function(page_data) {
							register_title(page_data.title, target_page_title);
						});
					}

					if (next[3].no_message) {
						return;
					}

					var message = 'register_redirects: '
							+ (page_title === target_page_title ? ''
									: (wiki_API.title_link_of(page_title)
									// JSON.stringify(page_title)
									// Should not go to here
									|| page_title) + ' → ')
							+ wiki_API.title_link_of(target_page_title) + ': ';

					if (is_missing) {
						message += 'Missing';
						library_namespace.warn(message);
						return;
					}

					message += gettext(redirect_list.length === 1
					// gettext_config:{"id":"no-page-redirects-to-this-page"}
					? '無頁面重定向至本頁'
					// gettext_config:{"id":"total-$1-pages-redirected-to-this-page"}
					: '共有%1個{{PLURAL:%1|頁面}}重定向至本頁', redirect_list.length - 1);
					if (1 < redirect_list.length && redirect_list.length < 6) {
						message += ': '
						//
						+ redirect_list.slice(1).map(function(page_data) {
							// return page_data.title;
							return wiki_API.title_link_of(page_data);
						}).join(gettext('Comma-separator'));
					}
					library_namespace.info(message);
				}

				if (redirect_list) {
					// e.g., wiki_API.redirects_here({String})
					// console.trace([ next[1], root_page_data ]);
					register_redirect_list(redirect_list,
					//
					Array.isArray(next[1]) ?
					// assert: next[1].length === 1
					next[1][0] : next[1]);
					register_root_alias(root_page_data);
				} else {
					// e.g., wiki_API.redirects_here({Array})
					root_page_data.forEach(function(page_data) {
						// console.trace(page_data.redirect_list);
						// console.trace(page_data.original_title);
						register_redirect_list(page_data.redirect_list
								|| [ page_data ], page_data.original_title
								|| page_data.title);
						register_root_alias(page_data);
					});
				}

				// console.trace(_this.redirects_data);

				if (false) {
					console.trace([ next[3].no_languagevariants,
							!_this.has_languagevariants ]);
				}
				if (next[3].no_languagevariants || !_this.has_languagevariants
				// /[\u4e00-\u9fa5]/: 匹配中文。
				// https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)
				// || !/[\u4e00-\u9fa5]/.test(next[1])
				) {
					// next[2] : callback(root_page_data, error)
					_this.next(next[2], root_page_data);
					return;
				}

				// 處理 converttitles。
				// console.trace('處理繁簡轉換問題: ' + registered_page_list);
				// console.trace(root_page_data);
				// console.trace(JSON.stringify(_this.redirects_data));
				function register_redirect_list_via_mapper(original_list,
						list_to_map) {
					// console.trace(next[3].uselang + ': ' + list_to_map);
					list_to_map.forEach(function(map_from, index) {
						// if (map_from in _this.redirects_data) return;
						var map_to
						//
						= _this.redirects_data[original_list[index]];
						// console.log(map_from + ' → ' + map_to);
						_this.redirects_data[map_from] = map_to;
					});
				}

				// next[3] : options
				next[3].uselang = 'zh-hant';
				wiki_API.convert_Chinese(registered_page_list, function(
						converted_hant) {
					register_redirect_list_via_mapper(registered_page_list,
							converted_hant);
					next[3].uselang = 'zh-hans';
					wiki_API.convert_Chinese(registered_page_list, function(
							converted_hans) {
						register_redirect_list_via_mapper(registered_page_list,
								converted_hans);
						_this.next(next[2], root_page_data);
					}, next[3]);
				}, next[3]);
			},
			// next[3] : options
			next[3]);
			break;

		case 'search':
			if (!next[3])
				next[3] = Object.create(null);
			if (!next[3].next_mark)
				next[3].next_mark = Object.create(null);

			wiki_API.search([ this.API_URL, next[1] ],
			//
			function wiki_API_search_callback(pages, error) {
				// undefined || [ page_data ]
				_this.last_pages = pages;
				// 設定/紀錄後續檢索用索引值。
				// 若是將錯誤的改正之後，應該重新自 offset 0 開始 search。
				// 因此這種情況下基本上不應該使用此值。
				if (pages && pages.sroffset) {
					next[3].next_mark.sroffset = pages.sroffset;
				}

				if (typeof next[2] === 'function') {
					callback_result_relying_on_this
					// next[2] : callback(...)
					= next[2].call(_this, pages || [], error);
				} else if (next[2] && next[2].each) {
					// next[2] : 當作 work，處理積存工作。
					// next[2].each(page_data, messages, config)
					_this.work(next[2]);
				}

				_this.next(callback_result_relying_on_this);
			},
			// next[3] : options
			add_session_to_options(this, next[3]));
			break;

		case 'copy_from':
			// Will soon stop after break.
			this.running = false;
			// `wiki_API_prototype_copy_from`
			wiki_API.edit.copy_from.apply(this, next.slice(1));
			// TODO: callback: this.next();
			break;

		case 'download':
			// Will soon stop after break.
			this.running = false;
			wiki_API.download.apply(this, next.slice(1));
			break;

		// ----------------------------------------------------------------------------------------

		case 'check':
			// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
			next[1] = library_namespace.new_options(this.check_options,
			// next[1]: options
			typeof next[1] === 'boolean' ? {
				force : next[1]
			} : typeof options === 'string' ? {
				title : next[1]
			} : next[1]);

			// ('stopped' in this): 已經有 cache。
			if (this.checking_now || ('stopped' in this)
			// force to check
			&& !next[1].force) {
				if (this.checking_now) {
					library_namespace.debug('checking now...', 3,
							'wiki_API.prototype.next');
				} else {
					library_namespace.debug('Skip check_stop().', 1,
							'wiki_API.prototype.next');
				}
				// 在多執行緒的情況下，避免 `RangeError: Maximum call stack size exceeded`。
				// next[2] : callback(...)
				setTimeout(this.next.bind(this, next[2], this.stopped), 0);

			} else {
				// 僅檢測一次。在多執行緒的情況下，可能遇上檢測多次的情況。
				this.checking_now = next[1].title || true;

				library_namespace.debug('以 .check_stop() 檢查與設定是否須停止編輯作業。', 1,
						'wiki_API.prototype.next');
				library_namespace
						.debug('Using options to call check_stop(): '
								+ JSON.stringify(next[1]), 2,
								'wiki_API.prototype.next');
				next[1].token = this.token;
				// 正作業中之 wiki_API instance。
				next[1][KEY_SESSION] = this;
				wiki_API.check_stop(function(stopped) {
					delete _this.checking_now;
					library_namespace.debug('check_stop: ' + stopped, 1,
							'wiki_API.prototype.next');
					_this.stopped = stopped;
					// next[2] : callback(...)
					_this.next(next[2], stopped);
				},
				// next[1] : options
				next[1]);
			}
			break;

		case 'edit':
			// wiki.edit(page contents, options, callback)
			if (typeof next[2] === 'string') {
				// wiki.edit(page contents, summary, callback)
				next[2] = {
					summary : next[2]
				};
			}

			// console.trace(next, this.last_page);

			// 在多執行緒的情況下，例如下面
			// `next[1] = next[1].call(next[2], next[2].page_to_edit)`
			// 的時候，this.last_page 可能會被改變，因此先作個 cache。
			// next[2]: options
			// console.trace(next[2]);
			next[2] = library_namespace.setup_options(next[2]);
			// `next[2].page_to_edit`: 手動指定要編輯的頁面。
			if (!next[2].page_to_edit) {
				// console.trace([ next, this.last_page ]);
				// e.g., page 本身是非法的頁面標題。當 session.page() 出錯時，將導致沒有 .last_page。
				next[2].page_to_edit = this.last_page || next[2].task_page_data;
				// console.trace(next[2]);
			}
			// console.trace(next[2]);
			// console.trace(next);

			// TODO: {String|RegExp|Array}filter

			if (false && next[2].page_to_edit !== this.last_page) {
				console.trace('session.edit: '
						+ (next[2].page_to_edit && next[2].page_to_edit.title));
				console.log('last_page: '
						+ (this.last_page && this.last_page.title));
			}

			if (!next[2].page_to_edit) {
				library_namespace
						.warn('wiki_API.prototype.next: No page in the queue. You must run .page() first! 另請注意: 您不能在 callback 中呼叫 .edit() 之類的 wiki 函數！請在 callback 執行完畢後再執行新的 wiki 函數！例如放在 setTimeout() 中。');
				if (typeof console === 'object' && console.trace) {
					console.trace(this);
					console.trace([ this.actions.length, next ]);
				}
				throw new Error('No page in the queue.');
				// next[3] : callback
				this.next(next[3], undefined, 'no page');
				break;
			}
			// assert: wiki_API.is_page_data(next[2].page_to_edit)

			if (typeof next[1] !== 'string'
			// @see check_and_delete_revisions
			&& next[2] && next[2].section !== 'new'
			//
			&& !wiki_API.content_of.had_fetch_content(next[2].page_to_edit)) {
				console.log(next);
				throw new Error(
						'wiki_API.prototype.next: There are multiple threads competing with each other? 有多個執行緒互相競爭？');
				library_namespace
						.warn('wiki_API.prototype.next: 有多個執行緒互相競爭？本執行緒將會直接跳出，等待另一個取得頁面內容的執行緒完成後，由其處理。');
				console.trace(next);
				break;
			}

			var check_and_delete_revisions = function() {
				if (!next[2].page_to_edit)
					return;
				var next_action = _this.actions[0];
				if (next_action && next_action[0] === 'edit'
				// 明確指定內容時，只要知道標題即可，不必特地檢查是否有內容。
				&& typeof next_action[1] !== 'string'
				//
				&& next_action[2] && next_action[2].section !== 'new'
				//
				&& next[2].page_to_edit === next_action[2].page_to_edit) {
					// assert: wiki.page().edit().edit()
					// e.g., 20160906.archive_moegirl.js
					// Should reget page
					_this.actions
							.unshift([ 'page', next_action[2].page_to_edit ]);
				}
				// 因為已經更動過內容，為了預防 this.last_page 取得已修改過的錯誤資料，因此將之刪除。但留下標題資訊。
				delete next[2].page_to_edit.revisions;
				// 預防連續編輯採用相同編輯選項。 var edit_options;
				// wiki.page(A).edit(,edit_options);
				// wiki.page(B).edit(,edit_options);
				delete next[2].page_to_edit;
			};

			if (!('stopped' in this)) {
				library_namespace.debug(
						'edit: rollback, check if need stop 緊急停止.', 2,
						'wiki_API.prototype.next');
				this.actions.unshift([ 'check', null, function() {
					library_namespace.debug(
					//
					'edit: recover next[2].page_to_edit: '
					//
					+ wiki_API.title_link_of(next[2].page_to_edit) + '.',
					//
					2, 'wiki_API.prototype.next');
					// _this.last_page = next[2].page_to_edit;
				} ], next);
				this.next();
				break;
			}

			if (this.stopped && !next[2].skip_stopped) {
				library_namespace.warn('wiki_API.prototype.next: 已停止作業，放棄編輯'
						+ wiki_API.title_link_of(next[2].page_to_edit) + '！');
				// next[3] : callback
				this.next(next[3], next[2].page_to_edit.title, '已停止作業');
				break;
			}

			if (next[2].page_to_edit.is_Flow) {
				// next[2]: options to call edit_topic()=CeL.wiki.Flow.edit
				// .section: 章節編號。 0 代表最上層章節，new 代表新章節。
				if (next[2].section !== 'new') {
					library_namespace
							.warn('wiki_API.prototype.next: The page to edit is Flow. I cannot edit it directly: '
									+ wiki_API
											.title_link_of(next[2].page_to_edit));
					// next[3] : callback
					this.next(next[3],
					// 2017/9/18 Flow已被重新定義為結構化討論 / 結構式討論。
					// is [[mw:Structured Discussions]].
					next[2].page_to_edit.title, 'is Flow');
					break;
				}

				if (!next[2].page_to_edit.header) {
					// rollback
					this.actions.unshift(next);
					// 先取得關於討論板的描述。以此為依據，檢測頁面是否允許機器人帳戶訪問。
					// Flow_page()
					wiki_API.Flow.page(next[2].page_to_edit, function() {
						// next[3] : callback
						if (typeof next[3] === 'function')
							callback_result_relying_on_this = next[3].call(
									this, next[2].page_to_edit.title);
						check_and_delete_revisions();
						_this.next(callback_result_relying_on_this);
					}, {
						flow_view : 'header',
						// [KEY_SESSION]
						session : this
					});
					break;
				}

				if ((!next[2] || !next[2].ignore_denial)
						&& wiki_API.edit.denied(next[2].page_to_edit,
								this.token.login_user_name, next[2]
										&& next[2].notification_name)) {
					// {{bot}} support for flow page
					// 採用 next[2].page_to_edit 的方法，
					// 在 multithreading 下可能因其他 threading 插入而造成問題，須注意！
					library_namespace
							.warn('wiki_API.prototype.next: Denied to edit flow '
									+ wiki_API
											.title_link_of(next[2].page_to_edit));
					// next[3] : callback
					this.next(next[3], next[2].page_to_edit.title, 'denied');
					break;
				}

				library_namespace.debug('直接採用 Flow 的方式增添新話題。');
				// use/get the contents of next[2].page_to_edit
				if (typeof next[1] === 'function') {
					// next[1] =
					// next[1](wiki_API.content_of(next[2].page_to_edit),
					// next[2].page_to_edit.title, next[2].page_to_edit);
					// 需要同時改變 wiki_API.edit！
					// next[2]: options to call
					// edit_topic()=CeL.wiki.Flow.edit
					// .call(options,): 使(回傳要編輯資料的)設定值函數能以this即時變更 options。
					next[1] = next[1].call(next[2], next[2].page_to_edit);
				}

				// edit_topic()
				wiki_API.Flow.edit([ this.API_URL, next[2].page_to_edit ],
				// 新章節/新話題的標題文字。輸入空字串""的話，會用 summary 當章節標題。
				next[2].sectiontitle,
				// 新話題最初的內容。因為已有 contents，直接餵給轉換函式。
				// [[mw:Flow]] 會自動簽名，因此去掉簽名部分。
				next[1].replace(/[\s\n\-]*~~~~[\s\n\-]*$/, ''),
				//
				this.token,
				// next[2]: options to call edit_topic()=CeL.wiki.Flow.edit
				add_session_to_options(this, next[2]), function(title, error,
						result) {
					// next[3] : callback
					if (typeof next[3] === 'function')
						callback_result_relying_on_this = next[3].call(_this,
								title, error, result);
					check_and_delete_revisions();
					_this.next(callback_result_relying_on_this);
				});
				break;
			}

			if ((!next[2] || !next[2].ignore_denial)
					&& wiki_API.edit.denied(next[2].page_to_edit,
							this.token.login_user_name, next[2]
									&& next[2].notification_name)) {
				// 採用 next[2].page_to_edit 的方法，
				// 在 multithreading 下可能因其他 threading 插入而造成問題，須注意！
				library_namespace
						.warn('wiki_API.prototype.next: Denied to edit '
								+ wiki_API.title_link_of(next[2].page_to_edit));
				// next[3] : callback
				this.next(next[3], next[2].page_to_edit.title, 'denied');
				break;
			}

			// ----------------------------------------------------------------------
			// wiki_API.edit()

			var original_queue,
			// 必須在最終執行剛好一次 check_next() 以 `this.next()`。
			check_next = function check_next(callback_result, no_next) {
				if (original_queue) {
					// assert: {Array}original_queue.length > 0
					if (false) {
						console.trace('回填/回復 queue[' + original_queue.length
								+ ']');
					}
					_this.actions.append(original_queue);
					// free
					original_queue = null;
				}
				if (no_next) {
					_this.set_promise_relying(callback_result);
				} else {
					// 無論如何都再執行 this.next()，並且設定 this.running。
					// e.g., for
					// 20200209.「S.P.A.L.」関連ページの貼り換えのbot作業依頼.js

					// console.trace([ _this.running, _this.actions.length ]);
					// setTimeout(_this.next.bind(_this), 0);
					_this.next(callback_result);
				}
			};

			if (typeof next[1] === 'function') {
				// 為了避免消耗 memory，儘可能把本 sub 任務先執行完。
				// e.g., 20200206.reminded_expired_AfD.js
				// 採用 cache queue 再回填/回復 queue，在程序把 edit 動作與後面的動作連成一體、相互影響時會出錯。
				if (false && this.actions.length > 0) {
					original_queue = this.actions.clone();
					this.actions.truncate();
					// console.trace('queue[' + original_queue.length + ']');
				}
				// console.trace('next:');
				// console.log(next);

				// next[1] = next[1](wiki_API.content_of(next[2].page_to_edit),
				// next[2].page_to_edit.title, next[2].page_to_edit);
				// 需要同時改變 wiki_API.edit！
				// next[2]: options to call edit_topic()=CeL.wiki.Flow.edit
				// .call(options,): 使(回傳要編輯資料的)設定值函數能以this即時變更 options。
				next[1] = next[1].call(next[2], next[2].page_to_edit);
			}

			if (next[2] && next[2].skip_nochange
			// 採用 skip_nochange 可以跳過實際 edit 的動作。
			&& next[1] === wiki_API.content_of(next[2].page_to_edit)) {
				// console.log(next[2]);
				// console.trace(next[2].page_to_edit.title);
				library_namespace.debug('Skip [' + next[2].page_to_edit.title
				// 'nochange', no change
				+ ']: The same contents.', 1, 'wiki_API.prototype.next');
				check_next(typeof next[3] === 'function'
				// next[3] : callback
				&& next[3].call(this, next[2].page_to_edit.title, 'nochange'));
				break;
			}

			next[2].rollback_action = function rollback_action() {
				// rollback action
				_this.actions.unshift(
				// 重新登入以後，編輯頁面之前再取得一次頁面內容。
				[ 'page', next[2].page_to_edit.title ], next);
				check_next(null, true);
			};

			wiki_API.edit([ this.API_URL, next[2].page_to_edit ],
			// 因為已有 contents，直接餵給轉換函式。
			next[1], this.token,
			// next[2]: options to call wiki_API.edit()
			add_session_to_options(this, next[2]),
			//
			function wiki_API_next_edit_callback(title, error, result) {
				// next[3] : callback
				if (typeof next[3] === 'function') {
					callback_result_relying_on_this = next[3].apply(_this,
							arguments);
				}
				// console.trace('assert: 應該有 next[2].page_to_edit。');
				// console.trace(next[2].page_to_edit);
				check_and_delete_revisions();
				check_next(callback_result_relying_on_this);
				// console.trace(title);
				// console.trace(_this.actions);
			});
			break;

		// ----------------------------------------------------------------------------------------

		case 'upload':
			var tmp = next[1];
			if (typeof tmp === 'object'
			// wiki.upload({Object}file_data + options, callback)
			&& (tmp = tmp.file_path
			// Get media from URL first.
			|| tmp.media_url || tmp.file_url)) {
				// shift arguments
				next.splice(1, 0, tmp);

			} else if (typeof next[2] === 'string') {
				// wiki.upload(file_path, comment, callback)
				next[2] = {
					comment : next[2]
				};
			}

			// wiki.upload(file_path, options, callback)
			wiki_API.upload(next[1], this.token.csrftoken,
			// next[2]: options to call wiki_API.edit()
			add_session_to_options(this, next[2]), function(result, error) {
				// next[3] : callback
				_this.next(next[3], result, error);
			});
			break;

		case 'cache':
			if (library_namespace.is_Object(next[2]) && !next[3]) {
				// 未設定/不設定 callback
				// shift arguments
				next.splice(2, 0, undefined);
			}

			// 因為 wiki_API.cache(list) 會使用到 wiki_API.prototype[method]，
			// 算是 .next() 編制外功能；
			// 因此需要重新設定 this.running，否則可能中途停止。
			// 例如 this.running = true，但是實際上已經不會再執行了。
			// TODO: 這可能會有bug。
			this.running = 0 < this.actions.length;

			// wiki.cache(operation, callback, _this);
			wiki_API.cache(next[1], function() {
				// overwrite callback() to run this.next();
				// next[2] : callback
				if (typeof next[2] === 'function')
					_this.set_promise_relying(next[2].apply(this, arguments));
				// 因為 wiki_API.cache(list) 會使用到 wiki_API.prototype[method]；
				// 其最後會再 call wiki_API.next()，是以此處不再重複 call .next()。
				// _this.next();
			},
			// next[3]: options to call wiki_API.cache()
			Object.assign({
				// default options === this

				// including main, File, Template, Category
				// namespace : '0|6|10|14',

				// title_prefix : 'Template:',

				// cache path prefix
				// prefix : base_directory,

				// [KEY_SESSION]
				session : this
			}, next[3]));
			break;

		case 'listen':
			if (!wiki_API.wmflabs) {
				// 因為 wiki_API.cache(list) 會使用到 wiki_API.prototype[method]；
				// 其最後會再 call wiki_API.next()，是以此處不再重複 call .next()。

				// 因為接下來的操作會呼叫 this.next() 本身，
				// 因此必須把正在執行的標記消掉。
				this.running = false;
			}

			// wiki.listen(listener, options);
			wiki_API.listen(next[1],
			// next[2]: options to call wiki_API.listen()
			add_session_to_options(this, next[2]));

			if (wiki_API.wmflabs) {
				this.next();
			}
			break;

		// ------------------------------------------------
		// Wikidata access

		case 'data':
			if (!('data_session' in this)) {
				// rollback, 確保已設定 this.data_session。
				this.actions.unshift([ 'set_data' ], next);
				this.next();
				break;
			}

			if (typeof next[1] === 'function') {
				library_namespace.debug(
						'直接將 last_data 輸入 callback: ' + next[1], 3,
						'wiki_API.prototype.next.data');
				if (last_data_is_usable(this)) {
					this.next(next[1], this.last_data);
					break;
				}

				library_namespace.debug('last data 不能用。', 3,
						'wiki_API.prototype.next.data');
				// delete this.last_data;
				if (!wiki_API.is_page_data(this.last_page)) {
					this.next(next[1], undefined, {
						code : 'no_id',
						message : 'Did not set id! 未設定欲取得之特定實體 id。'
					});
					break;
				}
				next.splice(1, 0, this.last_page);
			}

			if (typeof next[2] === 'function') {
				// 未設定/不設定 property
				// shift arguments
				next.splice(2, 0, null);
			}

			if (wiki_API.is_entity(next[1])) {
				this.last_data = next[1];
				// next[3] : callback
				this.next(next[3], this.last_data);
				break;
			}

			// 因為前面利用cache時會檢查KEY_CORRESPOND_PAGE，且KEY_CORRESPOND_PAGE只會設定在page_data，
			// 因此這邊自屬於page_data之輸入項目設定 .last_page
			if (wiki_API.is_page_data(next[1])
			// 預防把 wikidata entity 拿來當作 input 了。
			&& !wiki_API.is_entity(next[1])) {
				this.last_page = next[1];
			}
			// wikidata_entity(key, property, callback, options)
			wiki_API.data(next[1], next[2], function(data, error) {
				// 就算發生錯誤，依然設定一個 dummy，預防 edit_data 時引用可能非所欲的 this.last_page。
				_this.last_data = data || {
					key : next[1],
					error : error
				};
				if (false) {
					// 因為在wikidata_entity()裡面設定了[KEY_SESSION]，因此JSON.stringify()會造成:
					// TypeError: Converting circular structure to JSON
					library_namespace.debug('設定 entity data: '
							+ JSON.stringify(_this.last_data), 3,
							'wiki_API.prototype.next.data');
				}
				// next[3] : callback
				_this.next(next[3], data, error);
			},
			// next[4] : options
			add_session_to_options(this.data_session, next[4]));
			break;

		case 'edit_data':
			if (!('data_session' in this)) {
				// rollback, 確保已設定 this.data_session。
				this.actions.unshift([ 'set_data' ], next);
				this.next();
				break;
			}

			// wiki.edit_data([id, ]data[, options, callback])

			if (typeof next[1] === 'function'
			//
			|| library_namespace.is_Object(next[1])
					&& !wiki_API.is_entity(next[1])) {
				library_namespace.debug('未設定/不設定 id，第一個 next[1] 即為 data。', 6,
						'wiki_API.next.edit_data');
				// next = [ 'edit_data', data[, options, callback] ]
				if (library_namespace.is_Object(next[2]) && next[2]['new']) {
					// create item/property
					next.splice(1, 0, null);

				} else {
					// 自動填補 id。
					// 直接輸入 callback。
					if (typeof next[2] === 'function' && !next[3]) {
						// 未輸入 options，但輸入 callback。
						next.splice(2, 0, null);
					}

					// next = [ 'edit_data', data, options[, callback] ]

					if (false) {
						// TypeError: Converting circular structure to JSON
						library_namespace.debug('this.last_data: '
								+ JSON.stringify(this.last_data), 6,
								'wiki_API.next.edit_data');
						library_namespace.debug('this.last_page: '
								+ JSON.stringify(this.last_page), 6,
								'wiki_API.next.edit_data');
					}
					if (last_data_is_usable(this)) {
						// shift arguments
						next.splice(1, 0, this.last_data);

					} else if (this.last_data && this.last_data.error
					// @see last_data_is_usable(session)
					&& this.last_page === this.last_data[KEY_CORRESPOND_PAGE]) {
						library_namespace.debug('前一次之wikidata實體取得失敗', 6,
								'wiki_API.next.edit_data');
						// next[3] : callback
						this.next(next[3], undefined, {
							code : 'last_data_failed',
							message : '前一次之wikidata實體取得失敗: ['
							// 例如提供的 foreign title 錯誤，
							+ (this.last_data[KEY_CORRESPOND_PAGE]
							// 或是 foreign title 為 redirected。
							|| (this.last_data.site
							// 抑或者存在 foreign title 頁面，但沒有 wikidata entity。
							+ ':' + this.last_data.title)) + ']'
						});
						break;

					} else if (this.last_page) {
						library_namespace.debug('自 .last_page '
								+ wiki_API.title_link_of(this.last_page)
								+ ' 取得特定實體。', 6, 'wiki_API.next.edit_data');
						// e.g., edit_data({Function}data)
						next.splice(1, 0, this.last_page);

					} else {
						// next[3] : callback
						this.next(next[3], undefined, {
							code : 'no_id',
							message : 'Did not set id! 未設定欲取得之特定實體 id。'
						});
						break;
					}
				}
			}

			// needless: 會從 get_data_API_URL(options) 取得 API_URL。
			if (false && !Array.isArray(next[1])) {
				// get_data_API_URL(this)
				next[1] = [ this.data_session.API_URL, next[1] ];
			}

			// next = [ 'edit_data', id, data[, options, callback] ]

			if (typeof next[3] === 'function' && !next[4]) {
				// 未輸入 options，但輸入 callback。
				next.splice(3, 0, null);
			}

			// 因為前面利用cache時會檢查KEY_CORRESPOND_PAGE，且KEY_CORRESPOND_PAGE只會設定在page_data，
			// / / 因此這邊自屬於page_data之輸入項目設定 .last_page
			if (wiki_API.is_page_data(next[1])
			// 預防把 wikidata entity 拿來當作 input 了。
			&& !wiki_API.is_entity(next[1])) {
				this.last_page = next[1];
			}
			// wikidata_edit(id, data, token, options, callback)
			wiki_API.edit_data(next[1], next[2], this.data_session.token,
			// next[3] : options
			add_session_to_options(this.data_session, next[3]),
			// callback
			function(data, error) {
				if (false && data && !wiki_API.is_entity(data)) {
					console.trace(data);
					throw 'data is NOT entity';
				}
				_this.last_data = data || {
					// 有發生錯誤:設定 error log Object。
					last_data : _this.last_data,
					key : next[1],
					error : error
				};
				// next[4] : callback
				_this.next(next[4], data, error);
			});
			break;

		case 'merge_data':
			if (!('data_session' in this)) {
				// rollback, 確保已設定 this.data_session。
				this.actions.unshift([ 'set_data' ], next);
				this.next();
				break;
			}

			// next = [ 'merge_data', to, from[, options, callback] ]
			if (typeof next[3] === 'function' && !next[4]) {
				// 未輸入 options，但輸入 callback。
				next.splice(3, 0, null);
			}

			// next = [ 'merge_data', to, from, options[, callback] ]
			// wikidata_merge(to, from, token, options, callback)
			wiki_API.merge_data(next[1], next[2], this.data_session.token,
			// next[3] : options
			add_session_to_options(this.data_session, next[3]),
			// next[4] : callback
			function(data, error) {
				// 此 wbmergeitems 之回傳 data 不包含 item 資訊。
				// next[4] : callback
				_this.next(next[4], data, error);
			});
			break;

		case 'query_data':
			// wdq, query data
			// wikidata_query(query, callback, options)
			wiki_API.wdq(next[1], function(data) {
				_this.last_list = Array.isArray(data) ? data : null;
				// next[2] : callback
				_this.next(next[2], data);
			}, next[3]);
			break;

		// ------------------------------------------------
		// [[commons:Commons:Structured data]]
		// 共享資源後端使用維基庫（Wikibase），與維基數據（Wikidate）使用的技術相同。

		case 'structured_data':
			// session.structured_data('File:media_file_name', (entity, error)
			// => {});
			// session.structured_data('File:media_file_name', property,
			// (entity, error) => {}, options);

			if (typeof next[1] === 'function') {
				library_namespace.debug('直接取得 last_page 之 data: ' + next[1], 3,
						'wiki_API.prototype.next.structured_data');
				if (!wiki_API.is_page_data(this.last_page)) {
					this.next(next[1], undefined, {
						code : 'no_id',
						message : 'Did not set id! 未設定欲取得之特定實體 id。'
					});
					break;
				}
				next.splice(1, 0, this.last_page);
			}

			if (!is_api_and_title(next[1]) && !get_wikibase_key(next[1])) {
				// e.g., wiki_API.is_page_data(next[1]) ||
				// is_api_and_title(next[1]) || get_wikibase_key(next[1])
				next[1] = [ wiki_API.site_name(this), next[1] ];
			}

			if (next[1][get_wikibase_key(next[1]) ? 'site' : 0] !== 'commonswiki') {
				library_namespace
						.warn('wiki_API.prototype.next.structured_data: Should only using on commonswiki!');
			}
			if (!this.is_namespace(next[1][get_wikibase_key(next[1]) ? 'title'
					: 1], 'File')) {
				library_namespace
						.warn('wiki_API.prototype.next.structured_data: Should only using on files! ('
								+ next[1][get_wikibase_key(next[1]) ? 'title'
										: 1] + ')');
			}

			if (typeof next[2] === 'function') {
				// 未設定/不設定 property
				// shift arguments
				next.splice(2, 0, null);
			}

			if (wiki_API.is_entity(next[1][1])
					&& wiki_API.is_page_data(next[1][1])) {
				library_namespace.debug('直接將 next[1] 輸入 callback: '
						+ next[1][1], 1,
						'wiki_API.prototype.next.edit_structured_data');
				this.last_page = next[1][1];
				// next[3] : callback
				this.next(next[3], this.last_page);
				break;
			}

			if (wiki_API.is_page_data(next[1][1])) {
				next[1][1] = wiki_API.title_of(next[1][1]);
			}

			if (wiki_API.is_entity(this.last_page)
					&& next[1][1] === this.last_page.title) {
				// next[3] : callback
				this.next(next[3], this.last_page);
				break;
			}

			// next[4] : options
			next[4] = add_session_to_options(this, next[4]);
			next[4].data_API_URL = this.API_URL;

			// delete _this.last_page;
			// console.trace(this.actions.length, next);
			// wikidata_entity(key, property, callback, options)
			wiki_API.data(next[1], next[2], function(data, error) {
				// console.trace([ data, error ]);
				if (data) {
					// e.g.,
					// {pageid:,ns:,title:,type:'mediainfo',id:'M000',labels:{},descriptions:{},statements:{}}
					// {id:'M123456',missing:''}
					if (wiki_API.is_page_data(next[1][1])) {
						_this.last_page = Object.assign(
						//
						wiki_API.is_page_data(next[1][1]), data);
						_this.last_page[KEY_CORRESPOND_PAGE]
						//
						= data[KEY_CORRESPOND_PAGE];
					} else {
						_this.last_page = data;
					}
				} else {
					_this.last_page = {
						title : wiki_API.title_of(next[1][1]),
						error : error
					};
				}
				// next[3] : callback
				_this.next(next[3], data, error);
				// console.trace(_this.actions.length, _this.actions);
			},
			// next[4] : options
			next[4]);
			break;

		case 'edit_structured_data':
			// wiki.edit_structured_data(['File:media_file_name', ]data[,
			// options, callback]);
			// wiki.structured_data('File:media_file_name').edit_structured_data(data[,
			// options, callback]);
			// wiki.page('File:media_file_name').edit_structured_data(data[,
			// options, callback]);

			if (typeof next[1] === 'string') {
				// next[1]: title
				next[1] = [ wiki_API.site_name(this), next[1] ];

			} else if (typeof next[1] === 'function'
			//
			|| library_namespace.is_Object(next[1])
					&& !wiki_API.is_entity(next[1])
					&& !get_wikibase_key(next[1])) {
				library_namespace.debug('未設定/不設定 id，第一個 next[1] 即為 data。', 6,
						'wiki_API.next.edit_structured_data');
				// console.trace(next);
				next.splice(1, 0, this.last_page);
			}

			if (wiki_API.is_entity(this.last_page)
					&& next[1]
					&& this.last_page.title === (is_api_and_title(next[1]) ? next[1][1]
							: get_wikibase_key(next[1]) ? get_wikibase_key(next[1]).title
									// wiki_API.is_page_data(next[1])
									: next[1].title)) {
				next[1] = this.last_page;
			} else if (this.last_page.id && ('missing' in this.last_page)
					&& get_wikibase_key(this.last_page)
					&& get_wikibase_key(this.last_page).title === next[1][1]) {
				// 完全還沒設定過 structured data 的檔案是長這樣子:
				// {id:'M123456',missing:''}
				next[1] = this.last_page;
			}

			// next = ['edit_structured_data', id, data[, options, callback]]

			if (typeof next[3] === 'function') {
				// shift arguments
				next.splice(3, 0, null);
			}

			// next = ['edit_structured_data', id, data, options, callback]

			if (false) {
				console.trace(this.actions.length, next, wiki_API
						.is_entity(next[1]));
			}
			if (wiki_API.is_entity(next[1])) {
				library_namespace.debug('沿用原有 entity。', 6,
						'wiki_API.next.edit_structured_data');

			} else if (get_wikibase_key(next[1])
			// 有 [KEY_CORRESPOND_PAGE] 代表已經 .structured_data() 過。
			&& next[1][KEY_CORRESPOND_PAGE]) {
				next[1] = get_wikibase_key(next[1]);

			} else {
				// console.trace(next[1]);
				if (false) {
					console.trace(this.actions.length, next, wiki_API
							.is_page_data(next[1]), is_api_and_title(next[1]),
							get_wikibase_key(next[1]));
				}
				if (wiki_API.is_page_data(next[1]) || is_api_and_title(next[1])) {
					library_namespace.debug('先取得 last_page 之 data: ' + next[1],
							3, 'wiki_API.prototype.next.edit_structured_data');
					this.actions.unshift([ 'structured_data', next[1] ], next);
					// next[1] will be replace by `this.last_page` later.
					this.next();
				} else if (get_wikibase_key(next[1])) {
					// e.g., media 沒設定過 structured data。
					// {id:'M000',missing:''}
					this.actions.unshift([ 'structured_data',
							get_wikibase_key(next[1]) ], next);
					// next[1] will be replace by `this.last_page` later.
					this.next();
				} else {
					this.next(next[4], undefined, {
						code : 'no_id',
						message : 'Did not set id! 未設定欲取得之特定實體 id。'
					});
				}
				break;
			}

			// assert: wiki_API.is_entity(next[1])

			// console.trace(next[1]);
			next[1] = Object.clone(next[1]);

			if (!next[1].claims && next[1].statements) {
				next[1].claims = next[1].statements;
				delete next[1].statements;
			}

			// next[3] : options
			next[3] = add_session_to_options(this, next[3]);
			next[3].data_API_URL = this.API_URL;

			// console.trace(next);
			// wikidata_edit(id, data, token, options, callback)
			wiki_API.edit_data(next[1], next[2], this.token,
			// next[3] : options
			next[3],
			// callback
			function(data, error) {
				// console.trace(_this.actions.length, next);
				// next[4] : callback
				_this.next(next[4], data, error);
			});
			break;

		// ------------------------------------------------

		// administrator functions

		case 'move_page':
			if (type === 'move_page') {
				// wiki.move_page(from, to, options, callback)
				// wiki.move_page(from, to, callback)
				if (typeof next[3] === 'function') {
					// shift arguments
					next.splice(3, 0, {
						from : next[1]
					});
				} else {
					next[3] = library_namespace.setup_options(next[3]);
					next[3].from = next[1];
				}
				// remove `from`
				next.splice(1, 1);
				type = 'move_to';
			}

		case 'move_to':
			// wiki_API.move_to(): move a page from `from` to target `to`.

			// wiki.page(from title)
			// .move_to(to, [from title,] options, callback)

			// wiki.move_to(to, from, options, callback)
			// wiki.move_to(to, from, options)
			// wiki.move_to(to, from, callback)
			// wiki.move_to(to, from)

			// wiki.page(from).move_to(to, options, callback)
			// wiki.page(from).move_to(to, options)
			// wiki.page(from).move_to(to, callback)
			// wiki.page(from).move_to(to)

			var move_to_title = null;
			if (type === 'move_to') {
				if (typeof next[1] === 'string') {
					move_to_title = next[1];
					// shift arguments
					next.splice(1, 1);
				}
			}

		case 'remove':
			// wiki.page(title).remove([title,] options, callback)
			if (type === 'remove') {
				// 正名。
				type = 'delete';
			}

		case 'delete':
			// wiki.page(title).delete([title,] options, callback)

		case 'protect':
			// wiki.page(title).protect([title,] options, callback)

		case 'rollback':
			// wiki.page(title).rollback([title,] options, callback)

			// --------------------------------------------

			// 這些控制用的功能，不必須取得頁面內容。
			if (typeof next[1] === 'string') {
				// 輸入的第一個參數是頁面標題。
				// e.g.,
				// wiki.remove(title, options, callback)
				this.last_page = {
					title : next[1]
				};
				// shift arguments
				next.splice(1, 1);
			}

			if (typeof next[1] === 'function') {
				// shift arguments
				// insert as options
				next.splice(1, 0, undefined);
			}
			if (!next[1]) {
				// initialize options
				next[1] = Object.create(null);
			}

			if (type === 'move_to') {
				if (move_to_title) {
					next[1].to = move_to_title;
				}
			}

			// 保護/回退
			if (this.stopped && !next[1].skip_stopped) {
				library_namespace.warn('wiki_API.prototype.next: 已停止作業，放棄 '
				//
				+ type + ' [['
				//
				+ (next[1].title || next[1].pageid || this.last_page
				//
				&& this.last_page.title) + ']]！');
				// next[2] : callback
				this.next(next[2], next[1], '已停止作業');

			} else {
				next[1][KEY_SESSION] = this;
				wiki_API[type](next[1], function(response, error) {
					// next[2] : callback
					_this.next(next[2], response, error);
				});
			}
			break;

		// ------------------------------------------------
		// 流程控制

		case 'wait':
			// rollback
			this.actions.unshift(next);
			break;

		case 'run':
			// session.run(function)
			// session.run(function, argunent_1, argunent_2, ...)
			if (typeof next[1] === 'function') {
				// next[1] : callback
				if (this.run_after_initializing
						&& !next[1].is_initializing_process) {
					library_namespace.debug(
							'It is now initializing. Push function into queue: '
									+ next[1], 1);
					this.run_after_initializing.push(next);
				} else {
					try {
						// pass arguments
						callback_result_relying_on_this = next[1].apply(this,
								next.slice(2));
					} catch (e) {
						// TODO: handle exception
						library_namespace.error(e);
					}
				}
			}
			this.next(callback_result_relying_on_this);
			break;

		case 'run_async':
			var is_function = false;
			// next[1] : callback
			if (typeof next[1] === 'function') {
				is_function = true;
				// pass arguments
				next[1] = next[1].apply(this, next.slice(2));
			}

			if (library_namespace.is_thenable(next[1])) {
				var callback = this.next.bind(this);
				next[1].then(callback, callback);
			} else if (is_function) {
				// ** MUST call `this.next();` in the callback function!
			} else {
				this.next();
			}
			break;

		// ------------------------------------------------

		default:
			// Should not go to here!
			library_namespace.error('Unknown operation: [' + next.join() + ']');
			this.next();
			break;
		}

	};

	/**
	 * wiki_API.prototype.next() 已登記之 methods。<br />
	 * 之後會再自動加入 get_list.type 之 methods。<br />
	 * NG: ,login
	 * 
	 * @type {Array}
	 * 
	 * @see function wiki_API_prototype_methods()
	 */
	wiki_API.prototype.next.methods = 'query_API|siteinfo|page|tracking_revisions|parse|redirect_to|purge|check|copy_from|download|edit|upload|cache|listen|category_tree|register_redirects|search|remove|delete|move_page|move_to|protect|rollback|logout|run|run_async|set_URL|set_language|set_data|data|edit_data|merge_data|query_data|structured_data|edit_structured_data|query'
			.split('|');

	// ------------------------------------------------------------------------

	// e.g., " (99%): 0.178 page/ms, 1.5 minutes estimated."
	function estimated_message(processed_amount, total_amount, starting_time,
			pages_processed, unit) {
		/** {Natural}ms */
		var time_elapsed = Date.now() - starting_time;
		// estimated time of completion 估計時間 預計剩下時間 預估剩餘時間 預計完成時間還要多久
		var estimated = time_elapsed / processed_amount
				* (total_amount - processed_amount);
		if (estimated > 99 && estimated < 1e15/* Infinity */) {
			estimated = library_namespace.age_of(0, estimated, {
				digits : 1
			});
			estimated = ', ' + estimated + ' estimated';
		} else {
			estimated = '';
		}

		var speed;
		if (pages_processed > 0) {
			if (!unit) {
				// page(s)
				unit = 'page';
			}
			speed = pages_processed / time_elapsed;
			speed = speed < 1 ? (1e3 * speed).toFixed(2) + ' ' + unit + '/s'
					: speed.toFixed(3) + ' ' + unit + '/ms';
			speed = ': ' + speed;
		} else {
			speed = '';
		}

		return (pages_processed > 0 ? pages_processed === total_amount ? processed_amount
				+ '/' + total_amount
				: pages_processed + ' '
				: /* Need add message yourself */'')
				+ ' ('
				+ (100 * processed_amount / total_amount | 0)
				+ '%)'
				+ speed + estimated;
	}

	// --------------------------------------------------------------------------------------------

	// 或者還可以去除 "MediaWiki message delivery" 這些系統預設的非人類發布者。
	/** {RegExp}pattern to test if is a robot name. CeL.wiki.PATTERN_BOT_NAME */
	var PATTERN_BOT_NAME = /bot(?:$|[^a-z])|[機机][器械]人|ボット(?:$|[^a-z])|봇$/i;
	// ↑ /(?:$|[^a-z])/: e.g., PxBot~testwiki, [[ko:User:2147483647 (bot)]],
	// a_bot2, "DynBot Srv2", "Kwjbot II", "Purbo T"
	// TODO: [[User:CommonsDelinker]], BotMultichill, "Flow talk page manager",
	// "Maintenance script", "MediaWiki default", "MediaWiki message delivery"

	/**
	 * default date format for work task. 預設的日期格式 '%4Y%2m%2dT%2H%2M%2S'
	 * 
	 * @type {String}
	 * @see ISO 8601
	 */
	wiki_API.prototype.work_date_format = '%H:%M:%S';
	wiki_API.prototype.work_title_date_format = '%4Y-%2m-%2d %H:%M:%S';

	/**
	 * 規範 log 之格式。(for wiki_API.prototype.work)
	 * 
	 * 若有必要跳過格式化的訊息，應該自行調用 message.push({String}message) 而非
	 * message.add({String}message)。
	 * 
	 * @param {String}message
	 *            message
	 * @param {String}[title]
	 *            message title.
	 * @param {Boolean}[use_ordered_list]
	 *            use ordered list.
	 */
	function add_message(message, title, use_ordered_list) {
		if (typeof message !== 'string') {
			message = message && String(message) || '';
		}
		message = message.trim();
		if (message) {
			if (title) {
				var namespace = wiki_API.namespace(title, this[KEY_SESSION]);
				title = wiki_API.title_link_of(title);
				if (title) {
					if (namespace !== 0) {
						// 對於非條目作特殊處理。
						title = "'''" + title + "'''";
					}
					title += ' ';
				}
			}
			message = (use_ordered_list ? '# ' : '* ') + (title || '')
					+ message;
			this.push(message);
		}
	}

	function reset_messages() {
		// 設定 time stamp。
		this.start = this.last = new Date;
		// clear
		this.clear();
	}

	/**
	 * 輸入 URI component list，得出自 [0] 至 [邊際index-1] 以 encodeURIComponent()
	 * 串聯起來，長度不超過 limit_length。<br />
	 * 
	 * 用於避免 HTTP status 414: Request-URI Too Long
	 * 
	 * @param {Array}piece_list
	 *            URI component list: page id / title / data
	 * @param {Natural}[limit]
	 *            max count
	 * @param {Natural}[limit_length]
	 *            max length in bytes
	 * 
	 * @returns {Number}邊際index。
	 * 
	 * @inner
	 */
	function check_max_length(piece_list, limit, limit_length) {
		// 8000: 8192 - (除了 piece_list 外必要之字串長)。
		//
		// 8192: https://httpd.apache.org/docs/current/mod/core.html
		// default LimitRequestLine: 8190
		//
		// assert: 除了 piece_list 外必要之字串長 < 192
		// e.g.,
		// "https://zh.wikipedia.org/w/api.php?action=query&prop=revisions&rvprop=content|timestamp&titles=...&format=json&utf8=1"
		if (!(limit_length > 0)) {
			// https://github.com/kanasimi/wikibot/issues/32
			// 不同 server 可能有不同 GET 請求長度限制。不如直接改成 POST。
			limit_length = 8000;
		}
		if (false && !(limit > 0)) {
			limit = 5000;
		}

		var length = 0, index = piece_list.length;

		if (false)
			piece_list.slice(0, limit_length / 30).join('|').slice(0,
					limit_length).replace(/[^|]+$/, '');

		if (piece_list.some(function(piece, i) {
			if (!piece || !(piece.pageid >= 0)) {
				length = 1;
				return true;
			}
			// console.log([ piece, length ]);
			length += piece.pageid.toString().length + 3;
			if (i === index || i >= limit || length >= limit_length) {
				// console.log({ i, index, limit, limit_length, length });
				index = i;
				length = 0;
				return true;
			}
		}) && length > 0) {
			library_namespace.debug('Some pieces are not page data.', 1,
					'check_max_length');
			length = 0;
			piece_list.some(function(piece, i) {
				length += encodeURIComponent(piece && piece.title
				// +3 === encodeURIComponent('|').length: separator '|'
				|| piece).length + 3;
				if (i >= limit || length >= limit_length) {
					index = i;
					return true;
				}
			});
		}
		// console.log(piece_list);
		library_namespace.debug('1–' + index + '/' + piece_list.length
				+ ', length ' + length, 2, 'check_max_length');
		if (false && typeof piece_list[2] === 'string')
			library_namespace.log(piece_list.slice(0, index).join('|'));

		return index;
	}

	// https://www.mediawiki.org/w/api.php
	// Use higher limits in API queries (slow queries: 500; fast queries: 5000).

	// @inner
	function max_slice_size(session, config, this_slice) {
		var max_size;
		if (session.slow_query_limit > 0) {
			max_size = session.slow_query_limit;
		} else {
			if (session.login_user_info
					&& Array.isArray(session.login_user_info.rights)) {
				// session.token &&
				// PATTERN_BOT_NAME.test(session.token.login_user_name)
				max_size = session.login_user_info.rights
						.includes('apihighlimits');
			} else {
				// default: max_size = 50;
			}

			var prop = 'query+siteinfo';
			prop = session.API_parameters && session.API_parameters[prop]
			prop = prop && prop.prop;
			// console.trace([max_size, prop]);

			max_size = max_size ? prop && prop.highlimit || 500
			// https://www.mediawiki.org/w/api.php?action=help&modules=query
			// Maximum number of values is 50 (500 for clients allowed higher
			// limits).
			: prop && prop.lowlimit || 50;
		}

		if (config && (config.slice | 0) >= 1) {
			max_size = Math.min(config.slice | 0, max_size);
		}

		// 自動判別最大可用 index，預防 "414 Request-URI Too Long"。
		// 因為 8000/500-3 = 13 > 最長 page id，因此即使 500頁也不會超過。
		// 為提高效率，不作 check。
		if (this_slice && (!config || !config.is_id))
			max_size = check_max_length(this_slice, max_size);

		return max_size;
	}

	// unescaped syntaxes in summary
	function summary_to_wikitext(summary) {
		// unescaped_summary
		var wikitext = summary.toString().replace(/</g, '&lt;').replace(
		// 避免 wikitext 添加 Category。
		// 在編輯摘要中加上使用者連結，似乎還不至於驚擾到使用者。因此還不用特別處理。
		// @see PATTERN_category @ CeL.wiki
		/\[\[\s*(Category|分類|分类|カテゴリ|분류)\s*:/ig, '[[:$1:');
		if (false) {
			// 在 [[t|{{t}}]] 時無效，改採 .replace(/{{/g,)。
			wikitext = wikitext.replace(
			// replace template
			/{{([a-z\d]+)/ig, function(all, name) {
				if (/^tl\w$/i.test(name))
					return all;
				return '{{tlx|' + name;
			});
		}
		wikitext = wikitext.replace(/{{/g, '&#123;&#123;');
		return wikitext;
	}

	// wiki_API.prototype.work(config, page_list): configuration:
	({
		// 注意: 與 wiki_API.prototype.work(config)
		// 之 config.before/config.after 連動。
		before : function before(messages, pages) {
		},
		// {Function|Array} 每個 page 執行一次。
		each : function each(page_data, messages) {
			return 'text to replace';
		},
		// 注意: 與 wiki_API.prototype.work(config)
		// 之 config.before/config.after 連動。
		after : function after(messages, pages) {
		},
		// run this at last. 在 wiki_API.prototype.work() 工作最後執行此 config.last()。
		last : function last(error) {
			// this: options
		},
		// 不作編輯作業。
		no_edit : true,
		// 設定寫入目標。一般為 debug、test 測試期間用。
		write_to : '',
		/** {String}運作記錄存放頁面。 */
		log_to : 'User:Robot/log/%4Y%2m%2d',
		// 「新條目、修飾語句、修正筆誤、內容擴充、排版、內部鏈接、分類、消歧義、維基化」
		/** {String}編輯摘要。總結報告。編輯理由。 edit reason. */
		summary : ''
	});

	/**
	 * robot 作業操作之輔助套裝函數。此函數可一次取得50至300個頁面內容再批次處理。<br />
	 * 不會推入 this.actions queue，即時執行。因此需要先 get list！
	 * 
	 * 注意: arguments 與 get_list() 之 callback 連動。
	 * 
	 * @param {Object}config
	 *            configuration. { page_options: { prop: 'revisions', rvprop:
	 *            'ids|timestamp|user' } }
	 * @param {Array}pages
	 *            page data list
	 */
	wiki_API.prototype.work = function do_batch_work(config, pages) {
		// console.log(JSON.stringify(pages));
		if (typeof config === 'function')
			config = {
				each : config
			};
		if (!config || !config.each) {
			library_namespace.warn('wiki_API.work: Bad callback!');
			return;
		}
		if (!('no_edit' in config)) {
			// default: 未設定 summary 則不編輯頁面。
			config.no_edit = !config.summary;
		} else if (!config.no_edit && !config.summary) {
			library_namespace
					.warn('wiki_API.work: Did not set config.summary when edit page (config.no_edit='
							+ config.no_edit + ')!');
		}

		if (!pages)
			pages = this.last_pages;
		// config.run_empty: 即使無頁面/未取得頁面，依舊強制執行下去。
		if (!pages && !config.run_empty) {
			// 採用推入前一個 this.actions queue 的方法，
			// 在 multithreading 下可能因其他 threading 插入而造成問題，須注意！
			library_namespace
					.warn('wiki_API.work: No list. Please get list first!');
			return;
		}

		library_namespace.debug('wiki_API.work: 開始執行作業: 先作環境建構與初始設定。');
		if (config.summary) {
			// '開始處理 ' + config.summary + ' 作業'
			library_namespace.sinfo([ 'wiki_API.work: Start the operation [',
					'fg=yellow', String(config.summary), '-fg', ']' ]);
		}

		/**
		 * <code>
		 * default handler [ text replace function(title, content), {Object}options, callback(title, error, result) ]
		 * </code>
		 */
		var each,
		// options 在此暫時作為 default options。
		options = config.options || {
			// 預設會取得大量頁面。 multiple pages
			multi : true,
			// prevent creating new pages
			// Throw an error if the page doesn't exist. 若頁面不存在/已刪除，則產生錯誤。
			// 要取消這項，須注意在重定向頁之對話頁操作之可能。
			nocreate : 1,
			// 該編輯是一個小修訂 (minor edit)。
			minor : 1,
			// denotes this is a bot edit. 標記此編輯為機器人編輯。
			// [[WP:AL|機器人對其他使用者對話頁的小修改將不會觸發新訊息提示]]。
			bot : 1,
			// [[Special:tags]]
			// 指定不存在的標籤，可能會造成 [tags-apply-not-allowed-one]
			// The tag "..." is not allowed to be manually applied.
			// tags : 'bot|test|bot trial',
			tags : '',
			// 設定寫入目標。一般為 debug、test 測試期間用。
			write_to : '',
			// Allow content to be emptied. 允許內容被清空。白紙化。
			allow_empty : false,
			// 採用 skip_nochange 可以跳過實際 edit 的動作。
			// 對於大部分不會改變頁面的作業，能大幅加快速度。
			skip_nochange : true
		}, callback,
		/** {ℕ⁰:Natural+0}全無變更頁面數。 */
		nochange_count = 0;

		if (library_namespace.is_Set(pages)) {
			pages = Array.from(pages);
		}

		if (Array.isArray(pages) && pages.length === 0) {
			if (!config.no_warning) {
				library_namespace.info('wiki_API.work: 列表中沒有項目，快速完結。');
			}
			if (typeof config.last === 'function') {
				this.run(config.last.bind(options));
			}
			return;
		}

		if (typeof config.each === 'function') {
			// {Function}
			each = [ config.each ];
		} else if (Array.isArray(config.each)) {
			// assert: config.each = [ function for_each_page,
			// append to this / assign to this @ each(), callback ]
			each = config.each;
		} else {
			throw new Error('wiki_API.work: Invalid function for each page!');
		}

		if (!config.options) {
			// 直接將 config 的設定導入 options。
			// e.g., write_to
			for (callback in options) {
				if (callback in config) {
					if (!config[callback] && (callback in {
						nocreate : 1,
						minor : 1,
						bot : 1,
						tags : 1
					})) {
						// 即使設定 minor=0 似乎也會當作設定了，得完全消滅才行。
						delete options[callback];
					} else {
						options[callback] = config[callback];
					}
				}
			}
		}

		if (each[1]) {
			// library_namespace.info('wiki_API.work: Set append_to_this:');
			// console.trace(each[1]);
			Object.assign(config.no_edit ? config : options, each[1]);
		}
		callback = config.summary;
		// 採用 {{tlx|template_name}} 時，[[Special:RecentChanges]]頁面無法自動解析成 link。
		options.summary = callback
		// 是為 Robot 運作。
		? PATTERN_BOT_NAME.test(callback) ? callback
		// Robot: 若用戶名包含 'bot'，則直接引用之。
		: (this.token.login_user_name && this.token.login_user_name.length < 9
				&& PATTERN_BOT_NAME.test(this.token.login_user_name)
		//
		? this.token.login_user_name : 'Robot')
				+ ': ' + callback
		// 未設置時，一樣添附 Robot。
		: 'Robot';

		// assert: 因為要作排程，為預防衝突與不穩定的操作結果，自此以後不再 modify options。

		var done = 0, session = this, error_to_return,
		//
		log_item = Object.assign(Object.create(null),
				wiki_API.prototype.work.log_item, config.log_item), messages = [];
		messages[KEY_SESSION] = this;
		/** config.no_message: {Boolean}console 不顯示訊息，也不處理 {Array}messages。 */
		messages.add = config.no_message ? library_namespace.null_function
				: add_message;
		// config.no_message: no_log
		messages.reset = config.no_message ? library_namespace.null_function
				: reset_messages;
		messages.reset();

		callback = each[2];
		// each 現在轉作為對每一頁面執行之工作。
		each = each[0];
		if (!callback) {
			// TODO: [[ja:Special:Diff/62546431|有時最後一筆記錄可能會漏失掉]]
			callback = config.no_message ? library_namespace.null_function
			// default logger.
			: function do_batch_work_summary(title, error, result) {
				if (false)
					console.trace([ done, nochange_count,
							title && title.title || title ]);
				if (error) {
					// ((return [ CeL.wiki.edit.cancel, 'skip' ];))
					// 來跳過 (skip) 本次編輯動作，不特別顯示或處理。
					// 被 skip/pass 的話，連警告都不顯現，當作正常狀況。
					if (error === 'skip') {
						done++;
						nochange_count++;
						return;
					}

					if (error === 'nochange') {
						done++;
						// 未經過 wiki 操作，於 wiki_API.edit 發現為[[WP:NULLEDIT|無改變]]的。
						// 無更動 沒有變更 No modification made
						nochange_count++;
						// gettext_config:{"id":"no-change"}
						error = gettext('no change');
						result = 'nochange';
					} else {
						// console.trace([ error_to_return, error ]);
						error_to_return = error_to_return || error;
						// 有錯誤發生。
						// e.g., [protectedpage]
						// The "editprotected" right is required to edit this
						// page
						if (config.onerror)
							config.onerror(error);
						result = [ 'error', error ];
						// gettext_config:{"id":"finished-$1"}
						error = gettext('finished: %1',
						// {{font color}}
						'<span style="color:red; background-color:#ff0;">'
								+ error + '</span>');
					}

				} else if (!result || !result.edit) {
					// 有時 result 可能會是 ""，或者無 result.edit。這通常代表 token lost。
					library_namespace.error('wiki_API.work: 無 result.edit'
							+ (result && result.edit ? '.newrevid' : '')
							+ '！可能是 token lost！');
					if (false) {
						console.trace(Array.isArray(title) && title[1]
								&& title[1].title ? title[1].title : title);
					}
					error = 'no "result.edit'
							+ (result && result.edit ? '.newrevid".' : '.');
					result = [ 'error', 'token lost?' ];

				} else {
					// 成功完成。
					done++;
					if (result.edit.newrevid) {
						// https://en.wikipedia.org/wiki/Help:Wiki_markup#Linking_to_old_revisions_of_pages.2C_diffs.2C_and_specific_history_pages
						// https://zh.wikipedia.org/?diff=000
						// cf. [[Special:Permalink/0|title]],
						// [[Special:Diff/prev/0]]
						error = ' [[Special:Diff/' + result.edit.newrevid + '|'
						// may use wiki_API.title_link_of()
						// gettext_config:{"id":"finished"}
						+ gettext('finished') + ']]';
						result = 'succeed';
					} else if ('nochange' in result.edit) {
						// 經過 wiki 操作，發現為[[WP:NULLEDIT|無改變]]的。
						nochange_count++;
						// gettext_config:{"id":"no-change"}
						error = gettext('no change');
						result = 'nochange';
					} else {
						// 有時無 result.edit.newrevid。
						library_namespace.error('無 result.edit.newrevid');
						// gettext_config:{"id":"finished"}
						error = gettext('finished');
						result = 'succeed';
					}
				}

				// error: message, result: result type.

				if (log_item[Array.isArray(result)
				// {Array}result = [ main error code, sub ]
				? result.join('_') in log_item ? result.join('_') : result[0]
						: result]) {
					// gettext_config:{"id":"$1-elapsed-$3-at-$2"}
					error = gettext('%1 elapsed, %3 at %2',
					// 紀錄使用時間, 歷時, 費時, elapsed time
					messages.last.age(new Date), (messages.last = new Date)
					//
					.format({
						zone : session.configurations.timeoffset / 60,
						// config.work_date_format || this.work_date_format
						format : config.work_date_format
								|| session.work_date_format
					}), error);

					// 對各個條目的紀錄加入計數。
					messages.add(error, title, true);
				}
			};
		}

		if (Array.isArray(pages) && pages.slice(0, 10).every(function(item) {
			return typeof item === 'string';
		})) {
			// 傳入標題列表。
			messages.input_title_list = true;
		}

		if (false && Array.isArray(pages) && !titles) {
			library_namespace.warn('wiki_API.work: rebuild titles.');
			titles = pages.map(function(page) {
				return page.title;
			});
		}

		var session = this;
		var maybe_nested_thread = // config.is_async_each ||
		session.running && session.actions.length === 0;
		if (false) {
			console.trace([ maybe_nested_thread, session.running,
					session.actions.length ]);
			console.log(each + '');
			// console.log(session.actions);
		}
		var main_work = function(data, error) {
			if (error) {
				library_namespace.error('wiki_API.work: Get error: '
						+ (error.info || error));
				// console.log(error);
				data = [];
			} else if (!Array.isArray(data)) {
				if (!data && this_slice_size === 0) {
					library_namespace.info('wiki_API.work: ' + config.summary
					// 任務/工作
					+ ': 未取得或設定任何頁面。這個部份的任務已完成？');
					data = [];
				} else if (data) {
					// 可能是 page data 或 title。
					data = [ data ];
				} else {
					library_namespace
							.error('wiki_API.work: No valid data got!');
					data = [];
				}
			}

			// 傳入標題列表，則由程式自行控制，毋須設定後續檢索用索引值。
			if (!messages.input_title_list
			// 後續檢索用索引值存儲所在的 options.next_mark，將會以此值寫入 log。
			&& (pages = config.next_mark)
			// pages: 後續檢索用索引值之暫存值。
			&& (pages = JSON.stringify(pages))) {
				// 當有 .next_mark 時，其實用不到 log page 之 continue_key。
				if (!session
				// 忽略表示完結的紀錄，避免每個工作階段都顯示相同訊息。
				|| pages !== '{}'
				// e.g., 後続の索引: {"continue":"-||"}
				&& !/^{"[^"]+":"[\-|]{0,9}"}$/.test(pages)) {
					// console.log(config);
					// console.log(options);
					// console.log(session.continue_key + ':' +
					// JSON.stringify(pages));
					messages.add(session.continue_key + ': ' + pages);
				}
			}

			if (!config.no_message) {
				// 使用時間, 歷時, 費時, elapsed time
				pages = gettext(
				// gettext_config:{"id":"first-it-takes-$1-to-get-$2-pages"}
				'First, it takes %1 to get %2 {{PLURAL:%2|page|pages}}.',
						messages.last.age(new Date), data.length);
				// 在「首先使用」之後才設定 .last，才能正確抓到「首先使用」。
				messages.last = new Date;
				if (log_item.get_pages) {
					messages.add(pages);
				}
				library_namespace.debug(pages, 2, 'wiki_API.work');
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data, 'pages');
			}

			pages = data;

			// run before every batch task. 在處理每個批次前執行此function。
			// 注意: 一次取得大量頁面時，回傳內容不一定會按照原先輸入的次序排列！
			// 若有必要，此時得用 config.before() 自行處理！
			if (typeof config.before === 'function') {
				// titles 可能為 undefined！
				// 注意: 與 wiki_API.prototype.work(config)
				// 之 config.before/config.after 連動。
				//
				// 2016/6/22 change API 應用程式介面變更:
				// .first(messages, titles, pages) → .before(messages, pages,
				// titles)
				// 2019/8/7 change API 應用程式介面變更:
				// .before(messages, pages, titles) → .before(messages, pages)
				// 按照需求程度編排 arguments，並改變適合之函數名。
				config.before.call(session, messages, pages);
			}

			/**
			 * 處理回傳超過 limit (12 MB)，被截斷之情形。
			 */
			if ('OK_length' in pages) {
				if (setup_target) {
					// -pages.length: 先回溯到 pages 開頭之 index。
					work_continue -= pages.length - pages.OK_length;
				} else {
					library_namespace.error('wiki_API.work: 回傳內容超過限度而被截斷！僅取得 '
							+ pages.length + '/' + this_slice_size + ' 個頁面');
				}

				library_namespace.debug('一次取得大量頁面時，回傳內容超過限度而被截斷。將回退 '
						+ (pages.length - pages.OK_length)
						+ '頁'
						+ (pages[pages.OK_length] ? '，下次將自 '
								+ pages.OK_length
								+ '/'
								+ pages.length
								+ ' '
								+ wiki_API
										.title_link_of(pages[pages.OK_length])
								+ ' id ' + pages[pages.OK_length].pageid
								+ ' 開始' : '') + '。', 1, 'wiki_API.work');
				pages = pages.slice(0, pages.OK_length);

			} else if (!config.no_warning && pages.length !== this_slice_size) {
				// assert: data.length < this_slice_size
				library_namespace.warn('wiki_API.work: 取得 ' + pages.length
						+ '/' + this_slice_size + ' 個頁面，應有 '
						+ (this_slice_size - pages.length) + ' 個不存在或重複頁面。');
			}

			// --------------------------------------------

			var page_index = 0;
			// for each page: 主要機制是一頁頁處理。
			function process_next_page() {
				if (false)
					console.trace('process_next_page: ' + page_index + '/'
							+ pages.length);
				if (messages.quit_operation) {
					// 警告: 直接清空 .actions 不安全！
					// session.actions.clear();
					work_continue = target.length;
					page_index = pages.length;
				}
				if (!(page_index < pages.length)) {
					if (false) {
						console.trace(
						// gettext_config:{"id":"processed-$1-pages"}
						gettext('Processed %1 {{PLURAL:%1|page|pages}}.',
								pages.length));
					}
					// setTimeout(): 跳出exit
					// callback。避免在callback中呼叫session.next()的問題。
					setTimeout(function() {
						session.run(finish_up);
					}, 0);
					return;
				}

				// ------------------------------

				var page = pages[page_index++];
				if (library_namespace.is_debug(2)
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(page, 'page');
				if (!page) {
					// nochange_count++;
					// Skip invalid page. 預防如 .work(['']) 的情況。
					process_next_page();
					return;
				}

				function work_page_callback(page_data, error) {
					// TODO: if (error) {...}
					// console.trace([ error_to_return, error ]);
					// console.log([ page_data, config.page_options ]);
					library_namespace.log_temporary(page_index + '/'
							+ pages.length + ' '
							+ wiki_API.title_link_of(page_data));
					var result;
					try {
						result = each.call(config, page_data, messages, config);
					} catch (e) {
						// console.trace([ error_to_return, error ]);
						error_to_return = error_to_return || e;
						if (typeof e === 'object') {
							console.error(e);
						} else {
							library_namespace.error([ 'wiki_API.work: ', {
								T : [
								// gettext_config:{"id":"page-handling-function-error-$1"}
								'Page handling function error: %1', String(e) ]
							} ]);
						}
					}

					if (library_namespace.is_thenable(result)) {
						result.then(function() {
							session.run(process_next_page);
						}, function(error) {
							error_to_return = error_to_return || error;
							session.run(process_next_page);
						});
					} else {
						// console.trace('session.run(process_next_page) ');
						setTimeout(function() {
							session.run(process_next_page);
						}, 0);
					}
					return result;
				}

				// console.log(page);
				// console.trace('session.running = ' + session.running);
				// 設定頁面內容。
				session.page(page, config.no_edit && work_page_callback,
						single_page_options);

				if (config.no_edit) {
					// 不作編輯作業。
					return;
				}

				// clone() 是為了能個別改變 summary。
				// 例如: each() { options.summary += " -- ..."; }
				var work_options = Object.clone(options);
				// 預防 page 本身是非法的頁面標題。當 session.page() 出錯時，將導致沒有 .last_page。
				work_options.task_page_data = page;
				// console.trace(work_options);
				// 編輯頁面內容。
				session.edit(function(page_data) {
					if (('missing' in page_data)
					//
					|| ('invalid' in page_data)) {
						// return [ wiki_API.edit.cancel, 'skip' ];
					}

					// edit/process
					if (!config.no_message) {
						var _messages = [ 'wiki_API.work: '
						// gettext_config:{"id":"edit-$1"}
						+ gettext('Edit %1', page_index + '/' + pages.length)
								+ ' ' ];
						if ('missing' in page_data) {
							_messages.push('fg=yellow',
							// gettext_config:{"id":"missing-page"}
							'Missing page');
						} else if ('invalid' in page_data) {
							_messages.push('fg=yellow',
							// gettext_config:{"id":"invalid-page-title"}
							'Invalid page title');
						} else {
							_messages.push('', '[[', 'fg=yellow',
							//
							page_data.title, '-fg', ']]');
						}
						library_namespace.sinfo(_messages);
					} else {
						library_namespace.log_temporary(
						//
						page_index + '/' + pages.length + ' '
						//
						+ wiki_API.title_link_of(page_data));
					}
					// 以 each() 的回傳作為要改變成什麼內容。
					var content;
					try {
						content = each.call(
						// 注意: this === work_options
						// 注意: this !== work_config === `config`
						// @see wiki_API.edit()
						this, page_data, messages, config);
					} catch (e) {
						error_to_return = error_to_return || e;
						if (typeof e === 'object') {
							console.error(e);
						} else {
							library_namespace.error([ 'wiki_API.work: ', {
								T : [
								// gettext_config:{"id":"page-edit-function-error-$1"}
								'Page edit function error: %1', String(e) ]
							} ]);
						}

						// return [wiki_API.edit.cancel, 'skip'];
					}

					// check_result_and_process_next(content);
					if (library_namespace.is_thenable(content)) {
						content.then(library_namespace.null_function, function(
								error) {
							// console.trace([ error_to_return, error ]);
							// console.log([ 'session.running = ' +
							// session.running,
							// session.actions.length ]);
							// `error_to_return` will record the first error.
							error_to_return = error_to_return || error;
						});
					}

					// console.trace(content);
					return content;

				}, work_options, function work_edit_callback(title, error,
						result) {
					// Do not set `error_to_return` here: `error` maybe 'skip'.
					// console.trace([ error_to_return, error ]);

					// console.trace(arguments);
					// nomally call do_batch_work_summary()
					callback.apply(session, arguments);
					session.run(process_next_page);
				});

			}

			process_next_page();

			// 不應用 .run(finish_up)，而應在 callback 中呼叫 finish_up()。
			function finish_up() {
				if (false) {
					console.trace(
					// gettext_config:{"id":"$1-pages-processed"}
					gettext('%1 {{PLURAL:%2|page|pages}} processed',
							pages.length, pages.length));
					console.log(pages[0].title);
				}
				if (!config.no_message) {
					library_namespace.debug('收尾。', 1, 'wiki_API.work');
					var count_summary;

					// pages: this_slice, this piece
					if (config.no_edit) {
						if (pages.length === initial_target_length) {
							// 一次取得所有頁面。
							count_summary = '';
						} else
							count_summary = pages.length + '/';
					} else if (pages.length === initial_target_length) {
						if (done === pages.length) {
							// 一次取得所有頁面。
							count_summary = '';
						} else
							count_summary = done + '/';
					} else {
						if (done === pages.length)
							count_summary = done + '//';
						else
							count_summary = done + '/' + pages.length + '//';
					}

					if (work_continue && work_continue < initial_target_length) {
						count_summary += ' '
						//
						+ work_continue + '/' + initial_target_length + ' ('
						// 紀錄整體進度
						+ (100 * work_continue / initial_target_length | 0)
								+ '%)';
					} else {
						count_summary += initial_target_length;
					}

					count_summary = new gettext.Sentence_combination([
					// gettext_config:{"id":"$1-pages-processed"}
					'%1 {{PLURAL:%2|page|pages}} processed'
					//
					+ (log_item.report ? ',' : ''),
					//
					count_summary, pages.length ]);
					// console.trace(count_summary);

					if (log_item.report) {
						if (nochange_count > 0) {
							count_summary.push(done === nochange_count
							// 未改變任何條目。 No pages have been changed
							// gettext_config:{"id":"no-page-modified"}
							? 'no page modified,' : [
							// gettext_config:{"id":"$1-pages-have-not-changed"}
							'%1 {{PLURAL:%1|page|pages}} have not changed,',
									nochange_count ]);
						}
						// 使用時間, 歷時, 前後總共費時, elapsed time
						// gettext_config:{"id":"$1-elapsed"}
						count_summary.push([ '%1 elapsed.',
								messages.start.age(new Date) ]);
						messages.unshift(count_summary.toString());
						count_summary.truncate(1);
					}
					count_summary = count_summary.toString();
					if (session.stopped) {
						messages
						// gettext_config:{"id":"stopped-give-up-editing"}
						.add(gettext("'''Stopped''', give up editing."));
					}
					if (done === nochange_count && !config.no_edit) {
						// gettext_config:{"id":"no-changes"}
						messages.add(gettext('No changes.'));
					}
					if (log_item.title && config.summary) {
						messages.unshift(summary_to_wikitext(config.summary),
								'');
					}
				}

				// run after every batch task. 在處理每個批次後執行此function。
				if (typeof config.after === 'function') {
					// 對於量過大而被分割者，每次分段結束都將執行一次 config.after()。
					// 注意: 與 wiki_API.prototype.work(config)
					// 之 config.before/config.after 連動。
					//
					// 2016/6/22 change API 應用程式介面變更:
					// .last(messages, titles, pages) → .after(messages, pages,
					// titles)
					// 2019/8/7 change API 應用程式介面變更:
					// .after(messages, pages, titles) → .after(messages, pages)
					// 按照需求程度編排 arguments，並改變適合之函數名。
					config.after.call(session, messages, pages);
				}

				var log_to = 'log_to' in config ? config.log_to
				// default log_to
				: session.token.login_user_name ? 'User:'
						+ session.token.login_user_name + '/log/'
						+ (new Date).format('%4Y%2m%2d') : null,
				// e.g., 480 : UTC+8
				timezone = session.configurations.timeoffset / 60,
				// options for summary.
				options = {
					// new section. append 章節/段落 after all, at bottom.
					section : 'new',
					// 新章節的標題。章節標題盡量使用可被引用的格式。
					sectiontitle : (new Date).format({
						zone : timezone,
						format : config.work_title_date_format
						//
						|| session.work_title_date_format
					}) + ' UTC' + (timezone < 0 ? '' : '+') + timezone + ': '
					//
					+ count_summary + (config.log_section_title_postfix
					//
					? ' ' + config.log_section_title_postfix : ''),
					// Robot: 若用戶名包含 'bot'，則直接引用之。
					// 注意: session.token.login_user_name 可能為 undefined！
					summary : (session.token.login_user_name
							&& PATTERN_BOT_NAME
									.test(session.token.login_user_name) ? session.token.login_user_name
							: 'Robot')
							+ ': ' + config.summary + count_summary,
					// prevent creating new pages
					// Throw an error if the page doesn't exist.
					// 若頁面不存在/已刪除，則產生錯誤。
					nocreate : 1,
					// denotes this is a bot edit. 標記此編輯為機器人編輯。
					bot : 1,
					// 就算設定停止編輯作業，仍強制編輯。一般僅針對測試頁面或自己的頁面，例如寫入 log。
					skip_stopped : true
				};

				if (config.no_message) {
					;
				} else if (log_to && (done !== nochange_count
				// 若全無變更，則預設僅從 console 提示，不寫入 log 頁面。因此無變更者將不顯示。
				|| config.log_nochange)) {
					// console.trace(log_to);
					// CeL.set_debug(6);
					session.page(log_to)
					// 將 robot 運作記錄、log summary 報告結果寫入 log 頁面。
					// TODO: 以表格呈現。
					.edit(messages.join('\n'), options,
					// wiki_API.work() 添加網頁報告。
					function(title, error, result) {
						if (error) {
							library_namespace.warn('wiki_API.work: '
							//
							+ 'Cannot write log to '
							//
							+ wiki_API.title_link_of(log_to)
							//
							+ '! Try to write to '
							//
							+ wiki_API.title_link_of('User:'
							//
							+ session.token.login_user_name));
							library_namespace.log('\nlog:<br />\n'
							//
							+ messages.join('<br />\n'));
							// 改寫於可寫入處。e.g., 'Wikipedia:Sandbox'
							// TODO: bug: 當分批時，只會寫入最後一次。
							session.page('User:'
							//
							+ session.token.login_user_name)
							//
							.edit(messages.join('\n'), options);
						}
					});
				} else {
					library_namespace.log('\nlog:<br />\n'
							+ messages.join('<br />\n'));
				}

				// --------------------
				// 處理記憶體洩漏問題 @ 20191129.check_language_conversion.js
				// console.log(process.memoryUsage());
				// delete session.last_pages;
				// 警告: 預設處理程序會清理掉解析後的資料。這可能造成嚴重錯誤，例如頁面被清空！
				if (!options.do_not_clean_parsed && Array.isArray(pages)) {
					// console.trace('主動清理 page_data.parsed 以釋放記憶體。');
					// console.log(pages[0]);
					// free:
					// 必須要主動清理 page_data.parsed 才能釋放記憶體。
					// @ 20191129.check_language_conversion.js
					// 不曉得是哪個環節索引了 page_data。
					pages.forEach(function(page_data, index) {
						if (page_data.parsed) {
							page_data.parsed.truncate();
							delete page_data.parsed;
						}
						// 以下效果不顯著。
						// Object.clean(page_data.parsed);
						// Object.clean(page_data);
						// delete pages[index];
					});
				}
				// `node --expose-gc *.js`
				// global.gc && global.gc();
				// console.trace([ target.length, process.memoryUsage(), session
				// ]);
				// --------------------

				if (setup_target
						&& (config.untouch_page_list ? work_continue : 0) < target.length) {
					// 繼續下一批。
					// setup_target();
					setTimeout(setup_target, 0);
					return;
				}

				// run this at last.
				// 在wiki_API.prototype.work()工作最後執行此config.last()。
				// config.callback()
				// 只有在成功時，才會繼續執行。
				//
				// 2016/6/22 change API 應用程式介面變更:
				// .after() → .last()
				// 改變適合之函數名。
				if (typeof config.last === 'function') {
					// last(error)
					session.run(config.last.bind(options, error_to_return));
				}

				if (!config.no_message) {
					session.run(function() {
						library_namespace.log('wiki_API.work: '
								// 已完成作業
								+ '結束 .work() 作業'
								+ (config.summary ? ' [' + config.summary + ']'
										: '。'));
					});
				}
			}

		};

		var target = pages,
		// const
		initial_target_length = target.length,
		//
		slice_size = max_slice_size(this, config),
		/** {ℕ⁰:Natural+0}自此 index 開始繼續作業 */
		work_continue = 0, this_slice_size, setup_target;

		// 首先取得多個頁面內容所用之 options。
		// e.g., page_options:{rvprop:'ids|content|timestamp'}
		// @see
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
		var page_options = {
			// call_from_wiki_API__work : 1 + Math.random(),

			// 為了降低記憶體使用，不把所有屬性添附至原有的 {Object}page_data 資料結構中。
			do_not_import_original_page_data : true,
			handle_continue_response : 'merge_response',
			allow_missing : config.no_warning,
			// multiple pages
			multi : true
		};
		// console.trace(page_options);
		// https://www.mediawiki.org/w/api.php?action=help&modules=query
		Object.keys(page_options).append(
				[ 'is_id', 'redirects', 'converttitles' ])
		//
		.forEach(function(parameter) {
			if (parameter in config) {
				library_namespace.debug('Copy [' + parameter
				//
				+ '] to page_options', 2, 'wiki_API.work');
				page_options[parameter] = config[parameter];
			}
		});
		Object.assign(page_options,
		// 可以之處理數目限制 limit。單一頁面才能取得多 revisions。多頁面(≤50)只能取得單一 revision。
		config.page_options);

		// 個別頁面會採用的 page options 選項。
		var single_page_options = Object.assign({
			// 已經在多個頁面的時候取得過內容，因此不需要再確認一次。只是要過個水設定一下。
			// 若是沒有設定這個選項，那麼對於錯誤的頁面，將會再嘗試取得。
			allow_missing : true
		}, config.page_options);
		// 在個別頁面還採取 .multi 這個選項會造成錯誤。
		delete single_page_options.multi;

		if (!config.no_edit) {
			var check_options = config.check_options;
			if (!check_options && typeof config.log_to === 'string'
			// 若 log_to 以數字作結，自動將其當作 section。
			&& (check_options = config.log_to.match(/\d+$/))) {
				check_options = {
					section : check_options[0]
				};
			}

			if (check_options) {
				// wiki_API.check_stop()
				this.check(check_options);
			}
		}

		// console.log(JSON.stringify(pages));
		// console.log(pages === target);
		// console.log(JSON.stringify(target));
		if (Array.isArray(target)) {
			if (!config.untouch_page_list) {
				// 避免 read-only page list。
				target = target.slice();
			}
			// Split when length is too long. 分割過長的 page list。
			setup_target = (function() {
				var this_slice = config.untouch_page_list ? target.slice(
						work_continue, work_continue + slice_size)
				// 執行完一批就刪除一批，以減少記憶體使用。
				: target.splice(0, slice_size);
				var max_size = max_slice_size(this, config, this_slice);

				if (false) {
					console
							.log([ 'max_size:', max_size, this_slice.length,
									initial_target_length, config.is_id,
									work_continue ]);
				}
				if (max_size < slice_size) {
					if (!config.untouch_page_list) {
						// 回填本次無法處理之 pages。
						Array.prototype.unshift.apply(target, this_slice
								.slice(max_size));
					}
					this_slice = this_slice.slice(0, max_size);
				}
				if (work_continue === 0 && max_size === initial_target_length) {
					library_namespace.debug('設定一次先取得所有 ' + max_size
							+ ' 個頁面之 revisions (page contents 頁面內容)。', 2,
							'wiki_API.work');
				} else {
					done = gettext(
					// gettext_config:{"id":"processing-chunks-$1-$2"}
					'處理分塊 %1–%2', work_continue + 1, work_continue
					// start–end/all
					+ Math.min(max_size, initial_target_length)) + '/'
							+ initial_target_length;
					// Add percentage message.
					if (initial_target_length > 1e4
					// 數量太大或執行時間過長時，就顯示剩餘時間訊息。
					|| Date.now() - config.start_working_time > 2 * 60 * 1000) {
						done += estimated_message(work_continue,
								initial_target_length,
								config.start_working_time);
					}
					// done += '。';
					nochange_count = 'wiki_API.work: ';
					done = config.summary ? [ nochange_count, 'fg=green',
							String(config.summary), '-fg', ': ' + done ]
							: [ nochange_count + done ];
					library_namespace.sinfo(done);
				}

				// reset count and log.
				done = nochange_count = 0;
				messages.reset();

				this_slice_size = this_slice.length;
				work_continue += this_slice_size;

				// 假如想要全部轉換成 pageids，必須考量有些頁面可能沒有 pageid 的問題。
				if (false)
					console.trace('一次取得本 slice 所有頁面內容。'
							+ [ maybe_nested_thread, session.running,
									session.actions.length ]);
				// console.trace(page_options);
				this.page(this_slice, main_work, page_options);
			}).bind(this);

			config.start_working_time = Date.now();
			setup_target();

		} else {
			// assert: target is {String}title or {Object}page_data
			library_namespace.debug('取得單一頁面之 (page contents 頁面內容)。', 2,
					'wiki_API.work');
			this.page(target, main_work, page_options);
		}
	};

	/**
	 * 選擇要紀錄的項目。在大量編輯時，可利用此縮減 log。
	 * 
	 * @type {Object}
	 */
	wiki_API.prototype.work.log_item = {
		title : true,
		report : true,
		get_pages : true,
		// 跳過[[WP:NULLEDIT|無改變]]的。
		// nochange : false,
		error : true,
		succeed : true
	};

	// --------------------------------------------------------------------------------------------
	// 以下皆泛用，無須 wiki_API instance。

	// ------------------------------------------------------------------------

	wiki_API.assert_user_right = function(assert_type, callback, options) {
		TODO;

		// besure {Function}callback
		callback = typeof callback === 'function' && callback;

		var session = wiki_API.session_of_options(options);
		// 支援斷言編輯功能。
		var action = 'assert=' + (assert_type || 'user');
		if (session.API_URL) {
			library_namespace.debug('API URL: [' + session.API_URL + ']。', 3,
					'wiki_API.assert_user_right');
			action = [ session.API_URL, action ];
		}
		library_namespace.debug('action: [' + action + ']。', 3,
				'wiki_API.assert_user_right');

		library_namespace.debug('準備確認權限。', 1, 'wiki_API.assert_user_right');
		wiki_API.query(action, function(data) {
			// console.trace(data);
			// 確認尚未登入，才作登入動作。
			if (data === '') {
				// 您已登入。
				library_namespace.debug('You are already logged in.', 1,
						'wiki_API.assert_user_right');
				callback(data);
				return;
			}

			callback(data);
		});
	};

	// 未登錄/anonymous時的token
	var BLANK_TOKEN = '+\\';

	// get token
	// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Btokens
	wiki_API.prototype.get_token = function(callback, options) {
		// assert: this (session) 已登入成功， callback 已設定好。
		// 前置處理。
		if (typeof options === 'string') {
			options = {
				type : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}
		var type = options.type
		// default_type: csrf (cross-site request forgery) token
		|| 'csrf';
		// TODO: for {Array}type
		var session = this, token = session.token;
		if (!options.force && token[type + 'token']) {
			// 已存有此 token。
			callback(token[type + 'token']);
			return this;
		}

		library_namespace.debug('Try to get the ' + type + 'token ...', 1,
				'wiki_API.prototype.get_token');
		// console.log(this);
		wiki_API.query([ session.API_URL,
		// https://www.mediawiki.org/wiki/API:Tokens
		// 'action=query&meta=tokens&type=csrf|login|watchlist'
		'action=query&meta=tokens' + (type ? '&type=' + type : '') ],
		//
		function(data) {
			if (data && data.query && data.query.tokens) {
				// 設定 tokens。
				Object.assign(session.token, data.query.tokens);
				if (!session.token[type + 'token'])
					session.token[type + 'token'] = BLANK_TOKEN;
				library_namespace.debug(
				//
				type + 'token: ' + session.token[type + 'token']
				//
				+ (session.token[type + 'token'] === BLANK_TOKEN
				//
				? ' (login as anonymous!)' : ''),
				//
				1, 'wiki_API.prototype.token');
				// console.log(this);
				callback(session.token[type + 'token'] || session.token);
				return;
			}

			library_namespace.error(
			//
			'wiki_API.prototype.token: Unknown response: ['
			//
			+ (data && data.warnings && data.warnings.tokens
			//
			&& data.warnings.tokens['*'] || data) + ']');
			if (library_namespace.is_debug()
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value)
				library_namespace.show_value(data);
			callback();
		},
		// Tokens may not be obtained when using a callback
		Object.create(null), session);
		return this;
	};

	if (false) {
		login_user_name = CeL.wiki
				.extract_login_user_name(login_options.user_name);
		user_name === CeL.wiki.normalize_title(wiki.token.login_user_name);
	}
	// "owner_name@user_name" → "user_name"
	// Should use session.login_user_info.name
	wiki_API.extract_login_user_name = function(lgname) {
		// https://www.mediawiki.org/w/api.php?action=help&modules=login
		// 'Main account name@bot name'
		var matched = lgname.match(/^([^@\n]+)@/);
		// 機器人名稱： user name or pure bot name
		return wiki_API.normalize_title(matched
		// e.g., "alias_bot_name@main_bot_name" → "main_bot_name"
		? matched[1].trim() : lgname);

		return wiki_API.normalize_title(lgname.replace(/@[^@]+$/, '').trim());
	};

	// 登入認證用。
	// https://www.mediawiki.org/wiki/API:Login
	// https://www.mediawiki.org/wiki/API:Edit
	// 認證用 cookie:
	// {zhwikiSession,centralauth_User,centralauth_Token,centralauth_Session,wikidatawikiSession,wikidatawikiUserID,wikidatawikiUserName}
	//
	// TODO: https://www.mediawiki.org/w/api.php?action=help&modules=clientlogin
	wiki_API.login = function(user_name, password, login_options) {
		var error;
		function _next() {
			// popup 'login'.
			// assert: session.actions[0] === ['login']
			if (session.actions[0] && session.actions[0][0] === 'login')
				session.actions.shift();

			if (false) {
				console.trace([ session.login_user_info,
						session.token.login_user_name ]);
			}
			if (!error && (!session.login_user_info
			// get the user right to check 'apihighlimits'
			|| session.login_user_info.name !== session.token.login_user_name)) {
				session.running = false;
				session.userinfo('rights|blockinfo|centralids', function(
						userinfo, error) {
					// console.trace(userinfo);
					session.login_user_info = userinfo;
					_next();
				});
				return;
			}

			callback
			// 注意: new wiki_API() 後之操作，應該採 wiki_session.run()
			// 的方式，確保此時已經執行過 pre-loading functions @ function wiki_API():
			// wiki_session.siteinfo(), wiki_session.adapt_task_configurations()
			&& session.run(callback.bind(session,
			// instead of session.token.lgname
			session.token.login_user_name, error));
			library_namespace.debug('已登入 [' + session.token.lgname
					+ ']。自動執行 .next()，處理餘下的工作。', 1, 'wiki_API.login');
			session.next();
		}

		function _done(data, _error) {
			// 注意: 在 mass edit 時會 lose token (badtoken)，需要保存 password。
			if (!session.preserve_password) {
				// 捨棄 password。
				delete session.token.lgpassword;
			}

			if (session.token.lgname) {
				session.token.login_user_name
				//
				= wiki_API.extract_login_user_name(session.token.lgname);
			}

			// reset query limit for login as bot.
			delete session.slow_query_limit;

			// console.log(JSON.stringify(data));
			if (data && data.warnings) {
				// console.log(JSON.stringify(data.warnings));
			}

			if (_error) {
				error = _error;
			} else if (data && (data = data.login)) {
				if (data.result === 'Success') {
					wiki_API.login.copy_keys.forEach(function(key) {
						if (data[key]) {
							session.token[key] = data[key];
						}
					});

					delete session.login_failed_count;
					// 紀錄最後一次成功登入。
					// session.last_login = new Date;
				} else {
					// login error
					if (!(session.login_failed_count > 0)) {
						session.login_failed_count = 1;
					} else if (++session.login_failed_count > wiki_API.login.MAX_ERROR_RETRY) {
						// 連續登入失敗太多次就跳出程序。
						throw 'wiki_API.login: Login failed '
								+ session.login_failed_count + ' times! Exit!';
					}
					// delete session.last_login;

					/**
					 * 當沒有登入成功時的處理以及警訊。
					 * 
					 * e.g., data = <code>
					{"login":{"result":"Failed","reason":"Incorrect password entered.\nPlease try again."}}

					{"login":{"result":"Failed","reason":"You have made too many recent login attempts. Please wait 5 minutes before trying again."}}

					{"warnings":{"main":{"*":"Subscribe to the mediawiki-api-announce mailing list at <https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce> for notice of API deprecations and breaking changes."},"login":{"*":"Main-account login via \"action=login\" is deprecated and may stop working without warning. To continue login with \"action=login\", see [[Special:BotPasswords]]. To safely continue using main-account login, see \"action=clientlogin\"."}},"login":{"result":"Success","lguserid":263674,"lgusername":"Cewbot"}}
					 * </code>
					 */
					library_namespace.error('wiki_API.login: login ['
							+ session.token.lgname + '] failed '
							+ session.login_failed_count + '/'
							+ wiki_API.login.MAX_ERROR_RETRY + ': ['
							+ data.result + '] ' + data.reason + ' ('
							+ session.API_URL + ')');
					if (data.result !== 'Failed' || data.result !== 'NeedToken') {
						// Unknown result
					}
					error = data;
				}
			}
			session.get_token(_next);
		}

		// ------------------------------------------------

		var callback, session, API_URL;
		if (!login_options && !password
				&& library_namespace.is_Object(user_name)) {
			// .login(option); treat user_name as option

			// session = CeL.wiki.login(login_options);
			login_options = Object.clone(user_name);
			// console.log(login_options);
			user_name = login_options.user_name;
			// user_password
			password = login_options.password;
		}
		if (library_namespace.is_Object(login_options)) {
			API_URL = login_options.API_URL/* || login_options.project */;
			session = wiki_API.session_of_options(login_options);
			// besure {Function}callback
			callback = typeof login_options.callback === 'function'
					&& login_options.callback;
		} else if (typeof login_options === 'function') {
			callback = login_options;
			// 前置處理。
			login_options = Object.create(null);
		} else if (typeof login_options === 'string') {
			// treat login_options as API_URL
			API_URL = login_options;
			login_options = Object.create(null);
		} else {
			// 前置處理。
			login_options = library_namespace.new_options(login_options);
		}

		// console.trace([ user_name, password, API_URL ]);
		library_namespace.debug('API_URL: ' + API_URL + ', default language: '
				+ wiki_API.language, 3, 'wiki_API.login');

		if (session) {
			delete login_options.is_running;
		} else {
			// 初始化 session 與 agent。這裡 callback 當作 API_URL。
			if (user_name && password) {
				login_options.is_running = 'login';
			} else {
				// 後面會直接 return
			}
			session = new wiki_API(user_name, password, login_options);
		}
		// console.trace([ user_name, password ]);
		if (!user_name || !password) {
			library_namespace.warn([ 'wiki_API.login: ', {
				T :
				// gettext_config:{"id":"no-user-name-or-password-provided.-the-login-attempt-was-abandoned"}
				'No user name or password provided. The login attempt was abandoned.'
			} ]);
			// console.trace('Stop login');
			callback && session.run(callback.bind(session));
			return session;
		}

		// copy configurations
		library_namespace.import_options(login_options, copy_login_options,
				session);

		if (!('login_mark' in login_options) || login_options.login_mark) {
			// hack: 這表示正 log in 中，當 login 後，會自動執行 .next()，處理餘下的工作。
			// @see wiki_API.prototype.next
			if (login_options.is_running) {
				// assert: session.actions === [ 'login' ]
			} else if (login_options.login_mark) {
				// 將 'login' 置於工作佇列最前頭。
				session.actions.unshift([ 'login' ]);
			} else {
				// default: 依順序將 'login' 置於最末端。
				session.actions.push([ 'login' ]);
			}
		}
		// 支援斷言編輯功能。
		var action = {
			assert : 'user'
		};
		if (session.API_URL) {
			library_namespace.debug('API URL: [' + session.API_URL + ']。', 3,
					'wiki_API.login');
			action = [ session.API_URL, action ];
		}
		library_namespace.debug('action: [' + action + ']。', 3,
				'wiki_API.login');

		library_namespace.debug('準備登入 [' + user_name + ']。', 1,
				'wiki_API.login');
		wiki_API.query(action, function(data) {
			// console.trace(data);
			// 確認尚未登入，才作登入動作。
			if (data === '' && !login_options.force) {
				// 您已登入。
				library_namespace.debug('You are already logged in.', 1,
						'wiki_API.login');
				_done();
				return;
			}

			delete session.token.csrftoken;
			// Credentials type: Password-based authentication
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Btokens
			// wiki_API.query(action, callback, post_data, login_options)
			wiki_API.query([ session.API_URL, {
				// Fetching a token via "action=login" is deprecated.
				// Use "action=query&meta=tokens&type=login" instead.
				// https://www.mediawiki.org/wiki/MediaWiki_1.37/Deprecation_of_legacy_API_token_parameters
				action : 'query',
				meta : 'tokens',
				type : 'login'
			} ], function(data, _error) {
				// console.trace(data);
				// error && console.error(error);
				if (_error || !data || !data.query || !data.query.tokens
						|| !data.query.tokens.logintoken) {
					library_namespace.error(
					//		
					'wiki_API.login: 無法 login！ Abort! Response:');
					error = _error;
					library_namespace.error(error || data);
					callback
							&& session.run(callback.bind(session, null, error
									|| data));
					return;
				}

				Object.assign(session.token, data.query.tokens);
				// console.log(data.query.tokens);
				// https://www.mediawiki.org/w/api.php?action=help&modules=login
				var token = Object.create(null);
				for ( var parameter in wiki_API.login.parameters) {
					var key = wiki_API.login.parameters[parameter];
					if (key in session.token)
						token[parameter] = session.token[key];
				}
				// console.log(token);
				wiki_API.query([ session.API_URL, {
					action : 'login'
				} ], _done, token, session);
			}, null, session);

			return;

			// deprecated:

			// https://www.mediawiki.org/w/api.php?action=help&modules=login
			var token = Object.assign(Object.create(null), session.token);
			// console.log(token);
			// .csrftoken 是本函式為 cache 加上的，非正規 parameter。
			delete token.csrftoken;
			wiki_API.query([ session.API_URL,
			// 'action=query&meta=tokens&type=login|csrf'
			'action=login' ], function(data, error) {
				// console.trace(data);
				// error && console.error(error);
				if (data && data.login && data.login.result === 'NeedToken') {
					token.lgtoken = session.token.lgtoken = data.login.token;
					wiki_API.query([ session.API_URL, 'action=login' ], _done,
							token, session);
				} else {
					library_namespace.error(
					//		
					'wiki_API.login: 無法 login！ Abort! Response:');
					library_namespace.error(data);
					if (callback)
						session.run(callback.bind(session, null, data));
				}
			}, token, session);

		}, null, session);

		return session;
	};

	/** {Natural}登入失敗時最多重新嘗試下載的次數。 */
	wiki_API.login.MAX_ERROR_RETRY = 2;

	wiki_API.login.parameters = {
		lgname : 'lgname',
		lgpassword : 'lgpassword',
		lgtoken : 'logintoken',
		lgdomain : 'lgdomain'
	};

	var copy_login_options = {
		preserve_password : 'boolean'
	};

	/** {Array}欲 copy 至 session.token 之 keys。 */
	wiki_API.login.copy_keys = 'lguserid,lgtoken,cookieprefix,sessionid'
			.split(',');

	// ------------------------------------------------------------------------

	wiki_API.logout = function(session, callback) {
		var API_URL = typeof session === 'string' ? session : wiki_API
				.API_URL_of_options(session);
		wiki_API.query([ API_URL, 'action=logout' ], function(data) {
			// data: {}
			// console.log(data);
			delete session.token;
			if (typeof callback === 'function') {
				callback.call(session, data);
			}
		});
	};

	// --------------------------------------------------------------------------------------------

	// export 導出.

	// @inner
	library_namespace.set_method(wiki_API, {
		max_slice_size : max_slice_size,

		BLANK_TOKEN : BLANK_TOKEN
	});

	// ------------------------------------------

	// @static
	Object.assign(wiki_API, {
		estimated_message : estimated_message,

		PATTERN_BOT_NAME : PATTERN_BOT_NAME
	});

	// 不設定(hook)本 module 之 namespace，僅執行 module code。
	return library_namespace.env.not_to_extend_keyword;
}

});
// CeL.application.net.wiki.parser
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): wikitext parser 維基語法解析器
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>

parser 所有子頁面加入白名單 white-list
parser for_each_token() 所有node當前之level層級
parser for_each_token() 提供 .previousSibling, .nextSibling, .parentNode 將文件結構串起來。

</code>
 * 
 * @since 2019/10/10 拆分自 CeL.application.net.wiki
 * @since 2021/12/14 18:53:43 拆分至 CeL.application.net.wiki.parser.wikitext,
 *        CeL.application.net.wiki.parser.section,
 *        CeL.application.net.wiki.parser.misc
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.parser',

	require : 'application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	// for PATTERN_BOT_NAME
	+ '|application.net.wiki.task.'
	// CeL.DOM.HTML_to_Unicode(), CeL.DOM.Unicode_to_HTML()
	+ '|interact.DOM.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki;

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	// --------------------------------------------------------------------------------------------
	// page parser setup.

	/*
	 * should use: class Wiki_page extends Array { }
	 * http://www.2ality.com/2015/02/es6-classes-final.html
	 */

	/**
	 * constructor (建構子) of {wiki page parser}. wikitext 語法分析程式, wikitext 語法分析器.
	 * 
	 * TODO:<code>

	should use:
	parsetree of https://www.mediawiki.org/w/api.php?action=help&modules=expandtemplates
	or
	https://www.mediawiki.org/w/api.php?action=help&modules=parse

	class Wiki_page extends Array { }
	http://www.2ality.com/2015/02/es6-classes-final.html

	</code>
	 * 
	 * @param {String|Object}wikitext
	 *            wikitext / page data to parse
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {wiki page parser}
	 */
	function page_parser(wikitext, options) {
		// console.log(wikitext);
		// console.log(wiki_API.is_page_data(wikitext));
		if (typeof wikitext === 'string' || wikitext === 0) {
			wikitext = [ String(wikitext) ];
		} else if (wiki_API.is_page_data(wikitext)) {
			// 可以用 "CeL.wiki.parser(page_data).parse();" 來設置 parser。
			var page_data = wikitext;
			if (!page_data.parsed
			// re-parse
			|| options && (options.reparse || options.wikitext)) {
				wikitext = options && options.wikitext
						|| wiki_API.content_of(page_data, options || 0);
				// prevent wikitext === undefined (missing: '')
				wikitext = wikitext ? [ wikitext ] : [];
				page_data.parsed = wikitext;
				wikitext.page = page_data;
			} else {
				return page_data.parsed;
			}
		} else if (!wikitext) {
			if (!wiki_API.is_valid_parameters_value(wikitext)) {
				library_namespace.warn('page_parser: ' + 'Null wikitext: '
						+ wikitext);
				// console.trace(wikitext);
			}
			wikitext = [];
		} else if (Array.isArray(wikitext) && wikitext.type === 'plain') {
			// assert: already parsed
			if (wikitext.options)
				return wikitext;
		} else {
			// console.trace(wikitext);
			throw new Error('page_parser: ' + 'Invalid wikitext type: {'
					+ typeof wikitext + '} ' + JSON.stringify(wikitext) + '.');
		}

		if (typeof options === 'string') {
			options = library_namespace.setup_options(options);
		}

		if (library_namespace.is_Object(options)) {
			wikitext.options = options;
		}
		// copy prototype methods
		Object.assign(wikitext, page_parser.parser_prototype);
		wiki_API.parse.set_wiki_type(wikitext, 'plain');
		var session = wiki_API.session_of_options(options);
		if (session) {
			wiki_API.add_session_to_options(session, wikitext);
		}
		// console.trace(wikitext);
		return wikitext;
	}

	// CeL.wiki.parser.parser_prototype, wiki_API.parser.parser_prototype
	/** {Object}prototype of {wiki page parser} */
	page_parser.parser_prototype = {
		// traversal_tokens()
		// CeL.wiki.parser.parser_prototype.each.call(token_list,...)
		// 在執行 .each() 之前，應該先執行 .parse()。
		each : for_each_token,
		parse : parse_page,
		parse_references : parse_references,

		get_categories : get_categories,
		append_category : register_and_append_category,

		analysis_layout_indices : analysis_layout_indices,
		insert_layout_token : insert_layout_token,

		insert_before : insert_before,
		// has_template
		find_template : find_template
	};

	/**
	 * {Object}alias name of type. The target MUST be one of
	 * wiki_API.parse.wiki_token_toString
	 */
	page_parser.type_alias = {
		wikilink : 'link',
		weblink : 'external_link',
		table_caption : 'caption',
		row : 'table_row',
		tr : 'table_row',
		// 注意: table_cell 包含 th + td，須自行判別！
		th : 'table_cell',
		td : 'table_cell',
		template : 'transclusion',
		// wikitext, 'text': plain text
		text : 'plain',
		'' : 'plain'
	};

	// CeL.wiki.parser.footer_order()
	page_parser.footer_order = footer_order;

	// ------------------------------------------

	// CeL.wiki.parser.remove_heading_spaces(parent, index, max_length)
	// remove heading spaces from parent_token[index]
	function remove_heading_spaces(parent_token, index, max_length,
			do_not_preserve_tail_spaces) {
		if (index >= parent_token.length)
			return;

		max_length = typeof max_length === 'number' && max_length >= 0 ? Math
				.min(max_length, parent_token.length) : parent_token.length;

		var _i = index;

		var combined_tail;
		for (; index < max_length; index++) {
			var token = parent_token[index];
			// assert: 以 "\n" 開頭的，都應該 `typeof token === 'string'`。
			if (typeof token !== 'string') {
				if (!combined_tail)
					return;

				index--;
				break;
			}

			if (!token) {
				continue;
			}

			if (combined_tail)
				combined_tail += token;
			else
				combined_tail = token;
			if (/[^\s\n]/.test(token)) {
				break;
			}
			parent_token[index] = '';
		}

		// console.trace(JSON.stringify(combined_tail));
		if (!/^\s/.test(combined_tail)) {
			// No need to change

			// 注意: /\s/.test('\n') === true
		} else if (/^\s*?\n/.test(combined_tail)) {
			var preserve_heading_new_line;
			while (_i > 0) {
				var token = parent_token[--_i];
				if (token) {
					// 前文以 new line 作結，或者要 trim 的 token 是第一個 token，
					// 則不保留末尾的 preserve_heading_new_line。
					preserve_heading_new_line =
					// typeof token !== 'string' ||
					!/\n\s*?$/.test(token);
					break;
				}
				// assert: token === ''
			}

			combined_tail = combined_tail
			// 去除後方的空白 + 僅一個換行。 去除前方的空白或許較不合適？
			// e.g., "* list\n\n{{t1}}\n{{t2}}",
			// remove "{{t1}}\n" → "* list\n\n{{t2}}"
			.replace(/^\s*?\n/, preserve_heading_new_line ? '\n' : '');
		} else {
			combined_tail = combined_tail
			// 去除後方太多空白，僅留下最後一個空白。
			.replace(/^(\s)*/, do_not_preserve_tail_spaces ? '' : '$1');
		}

		parent_token[index] = combined_tail;
		return index;
	}

	page_parser.remove_heading_spaces = remove_heading_spaces;

	// CeL.wiki.parser.remove_token(parent, index, max_length)
	function remove_token_from_parent(parent_token, index, max_length,
			do_not_preserve_tail_spaces) {
		if (index === undefined && parent_token.parent
				&& parent_token.index >= 0) {
			// remove parent_token itself
			// CeL.wiki.parser.remove_token(token)
			index = parent_token.index;
			parent_token = parent_token.parent;
		}

		var token = parent_token[index];
		// 直接改成空字串而非 `parent_token.splice(index, 1)`，避免index跑掉。
		parent_token[index] = '';

		var next_index = remove_heading_spaces(parent_token, index + 1,
				max_length, do_not_preserve_tail_spaces);

		if (index > 0 && /\n$/.test(parent_token[index - 1])
				&& /^\n/.test(parent_token[next_index])) {
			// e.g., "\n{{t}}\n==t==\n" → "\n\n==t==\n"
			// → "\n==t==\n"
			parent_token[next_index] = parent_token[next_index].replace(/^\n/,
					'');

		} else if ((index === 0 || /\n$/.test(parent_token[index - 1]))
				&& /^\s/.test(parent_token[next_index])) {
			// e.g., "\n{{t}} [[L]]" → "[[L]]"
			if (index > 0) {
				parent_token[index - 1] = parent_token[index - 1].replace(
						/\n$/, '');
			}
			parent_token[next_index] = parent_token[next_index].replace(/^\s+/,
					'');
		}
		// free
		// next_index = undefined;

		var list_token = parent_token.parent;
		// assert: list_token.type === 'list'
		if (parent_token.type === 'list_item' && list_token
		// remove all empty / blank list_item
		&& parent_token.every(function(token) {
			// token maybe undefined
			if (!token)
				return token !== 0;
			if (typeof token === 'string')
				return /^[\s\n]*$/.test(token);
			if (token.type === 'transclusion') {
				// e.g., {{zh-tw}}
				return /^Zh(-[a-z]+)?$/.test(token.name);
			}
			return token.type === 'comment';
		})) {
			// TODO: fix removing "*{{T|1}}\n*{{T|2}}\n" in one operation,
			// see [[w:zh:Special:Diff/65133690/65133727|香港巴士迷文化]]
			parent_token.index = list_token.indexOf(parent_token);
			if (parent_token.index + 1 < list_token.length) {
				var next_list_item = list_token[parent_token.index + 1];
				// assert: next_list_item.type === 'list_item'
				var new_lines = parent_token.list_prefix.match(/^\n*/)[0];
				// shift new_lines
				next_list_item.list_prefix = next_list_item.list_prefix
						.replace(/^\n*/, new_lines);
			}
			list_token.splice(parent_token.index, 1);
		} else if (parent_token.type === 'list_item') {
			// console.trace(parent_token);
			// console.trace(list_token);
			// throw new Error();
			// e.g., "，見{{evchk}}。"
			library_namespace
					.debug(
							'清除 token (如模板)時，還遺留具意涵的元素，未能完全清除掉此 token 所在的列表項目。可能需要手動修飾語句。',
							1, 'remove_token_from_parent');

		}

		// console.log(parent_token.slice(index - 2, i + 2));
		return token;
	}

	page_parser.remove_token = remove_token_from_parent;

	// ------------------------------------------------------------------------

	(function() {
		wikitext = 'a\n[[File:f.jpg|thumb|d]]\nb';
		parsed = CeL.wiki.parser(wikitext).parse();

		parsed.each('namespaced_title', function(token, index, parent) {
			console.log([ index, token, parent ]);
		}, true);

		// @see 20210414.翻訳用出典テンプレートのsubst展開.js
		parsed.each('template:cite', function(token, index, parent) {
			if (CeL.wiki.parse.token_is_children_of(token, function(parent) {
				return parent.tag === 'ref' || parent.tag === 'gallery'
				// e.g., @ [[w:ja:Template:Round corners]]
				|| parent.tag === 'includeonly';
			})) {
				console.log([ index, token, parent ]);
			}
		}, {
			add_index : 'all'
		});

		parsed.toString();
	});

	// 注意: 必須配合 `parsed.each(, {add_index : 'all'})` 使用
	function token_is_children_of(token, parent_filter) {
		var parent;
		while (token && (parent = token.parent)) {
			if (parent_filter(parent))
				return true;
			token = parent;
		}
	}

	// CeL.wiki.parser.token_is_children_of()
	page_parser.token_is_children_of = token_is_children_of;

	/**
	 * 對所有指定類型 type，皆執行特定作業 processor。
	 * 
	 * TODO: 可中途跳出。
	 * 
	 * @param {String}[type]
	 *            欲搜尋之類型。 e.g., 'template'. see
	 *            ((wiki_API.parse.wiki_token_toString)).<br />
	 *            未指定: 處理所有節點。
	 * @param {Function}processor
	 *            執行特定作業: processor({Array|String|undefined}inside token list,
	 *            {ℕ⁰:Natural+0}index of token, {Array}parent of token,
	 *            {ℕ⁰:Natural+0}depth) {<br />
	 *            return {String}wikitext or {Object}element;}
	 * @param {Boolean}[modify_by_return]
	 *            若 processor 的回傳值為{String}wikitext，則將指定類型節點替換/replace作此回傳值。
	 *            注意：即使設定為 false，回傳 .remove_token 依然會刪除當前 token！
	 * @param {Natural}[max_depth]
	 *            最大深度。1: 僅到第1層(底層)。2: 僅到第2層(開始遍歷子節點)。 0||NaN: 遍歷所有子節點。
	 * 
	 * @returns {Promise|Undefine}
	 * 
	 * @see page_parser.type_alias
	 */
	function for_each_token(type, processor, modify_by_return, max_depth) {
		if (!this) {
			return;
		}

		if (typeof type === 'function' && max_depth === undefined) {
			// for_each_token(processor, modify_by_return, max_depth)
			// shift arguments.
			max_depth = modify_by_return;
			modify_by_return = processor;
			processor = type;
			type = undefined;
		}

		var options;
		// for_each_token(type, processor, options)
		if (max_depth === undefined && typeof modify_by_return === 'object') {
			options = modify_by_return;
			modify_by_return = options.modify;
			max_depth = options.max_depth;
		} else {
			options = Object.create(null);
		}

		// console.log(options);

		if (typeof modify_by_return === 'number' && modify_by_return > 0
				&& max_depth === undefined) {
			// for_each_token(type, processor, max_depth)
			// shift arguments.
			max_depth = modify_by_return;
			modify_by_return = undefined;
		}

		// console.log('max_depth: ' + max_depth);

		var session = wiki_API.session_of_options(options);
		if (!session
				&& (session = wiki_API.session_of_options(this)
						|| wiki_API.session_of_options(this.options))) {
			// for wiki_API.template_functions.adapt_function()
			wiki_API.add_session_to_options(session, options);
		}

		var token_name;
		if (type || type === '') {
			if (typeof type !== 'string') {
				library_namespace.warn('for_each_token: Invalid type [' + type
						+ ']');
				return;
			}

			token_name = type.match(/^(Template):(.+)$/i);
			if (token_name) {
				if (session) {
					token_name = session.redirect_target_of(type);
					token_name = session.remove_namespace(token_name);
				} else {
					// type = token_name[0];
					token_name = wiki_API.normalize_title(token_name[2]);
				}
				type = 'transclusion';
			}

			// normalize type
			// assert: typeof type === 'string'
			type = type.toLowerCase().replace(/\s/g, '_');
			if (type in page_parser.type_alias) {
				type = page_parser.type_alias[type];
			}
			if (!(type in wiki_API.parse.wiki_token_toString)) {
				library_namespace.warn('for_each_token: Unknown type [' + type
						+ ']');
			}
		}

		// options.slice: range index: {Number}start index
		// || {Array}[ {Number}start index, {Number}end index ]
		var slice = options.slice, exit;
		// console.log(slice);
		if (slice >= 0) {
			// 第一層 start from ((slice))
			slice = [ slice ];
		} else if (slice && (!Array.isArray(slice) || slice.length > 2)) {
			library_namespace.warn('for_each_token: Invalid slice: '
					+ JSON.stringify(slice));
			slice = undefined;
		}

		if (!this.parsed && typeof this.parse === 'function') {
			// 因為本函數為 CeL.wiki.parser(content) 最常使用者，
			// 因此放在這少一道 .parse() 工序。
			this.parse();
		}

		if (!Array.isArray(this)) {
			return;
		}

		// ----------------------------------------------------------

		var ref_list_to_remove = [], promise;
		function set_promise(operator) {
			promise = promise.then(operator);
			// promise.operator = operator;
		}
		function check_if_result_is_thenable(result) {
			if (library_namespace.is_thenable(result)) {
				promise = promise ? promise.then(function() {
					return result;
				}) : result;
				// promise._result = result;
				return true;
			}
		}

		// 遍歷 tokens。
		function traversal_tokens(parent_token, depth, resolve) {
			// depth: depth of parent_token
			var index, length;
			if (slice && depth === 0) {
				// 若有 slice，則以更快的方法遍歷 tokens。
				// TODO: 可以設定多個範圍，而不是只有一個 range。
				index = slice[0] | 0;
				length = slice[1] >= 0 ? Math.min(slice[1] | 0,
						parent_token.length) : parent_token.length;
			} else {
				// console.log(parent_token);
				index = 0;
				length = parent_token.length;
				// parent_token.some(for_token);
			}

			function traversal_next_sibling() {
				if (promise) {
					// console.trace([ index + '/' + length, depth, exit ]);
				}
				if (exit || index === length) {
					// 已遍歷所有本階層節點，或已設定 exit 跳出。
					if (promise) {
						set_promise(resolve);
						// console.trace([ promise, resolve ]);
					}
					return;
				}

				var token = parent_token[index];
				if (false) {
					console.log('token depth ' + depth
							+ (max_depth ? '/' + max_depth : '')
							+ (exit ? ' (exit)' : '') + ':');
					console.trace([ type, token ]);
				}

				if ((!type
				// 'plain': 對所有 plain text 或尚未 parse 的 wikitext.，皆執行特定作業。
				|| type === (Array.isArray(token) ? token.type : 'plain'))
						&& (!token_name || (session ? session.is_template(
								token_name, token) : token.name === token_name))) {
					// options.set_index
					if (options.add_index && typeof token !== 'string') {
						// 假如需要自動設定 .parent, .index 則必須特別指定。
						// token.parent[token.index] === token
						// .index_of_parent
						token.index = index;
						token.parent = parent_token;
					}

					if (wiki_API.template_functions) {
						// console.trace(options);
						wiki_API.template_functions.adapt_function(token,
								index, parent_token, options);
					}

					// get result. 須注意: 此 token 可能為 Array, string, undefined！
					// for_each_token(token, token_index, parent_of_token,
					// depth)
					var result = processor(token, index, parent_token, depth);
					// console.log(modify_by_return);
					// console.trace(result);
					if (false && token.toString().includes('Internetquelle'))
						console.trace([ index + '/' + length + ' ' + token,
								result, promise ]);
					if (check_if_result_is_thenable(result) || promise) {
						set_promise(function _check_result(
								result_after_promise_resolved) {
							if (false && token.toString().includes(
									'Internetquelle'))
								console.trace([
								//
								index + '/' + length + ' ' + token,
								//
								parent_token.toString(),
								//
								result_after_promise_resolved,
								//
								promise, depth, exit ]);
							check_result(token, result_after_promise_resolved);
						});
					} else {
						// assert: !promise || (promise is resolved)
						// if (promise) console.trace(promise);
						check_result(token, result);
					}
					return;
				}

				if (options.add_index === 'all' && typeof token === 'object') {
					token.index = index;
					token.parent = parent_token;
				}

				if (promise) {
					// NG:
					// set_promise(traversal_children(null, token, null));
				}
				return traversal_children(token);
			}

			function check_result(token, result) {
				// assert: !promise || (promise is resolved)
				if (result === for_each_token.exit) {
					library_namespace.debug('Abort the operation', 3,
							'for_each_token');
					// exit: 直接跳出。
					exit = true;
					return traversal_children();
				}

				// `return parsed.each.remove_token;`
				if (result === for_each_token.remove_token) {
					if (parent_token.type === 'list') {
						// for <ol>, <ul>: 直接消掉整個 item token。
						// index--: 刪除完後，本 index 必須再遍歷一次。
						parent_token.splice(index--, 1);
						length--;

					} else {
						if (token.type === 'tag' && token.tag === 'ref'
								&& token.attributes && token.attributes.name) {
							// @see wikibot/20190913.move_link.js
							library_namespace.debug(
									'將刪除可能被引用的 <ref>，並嘗試自動刪除所有引用。您仍須自行刪除非{{r|name}}型態的模板參考引用: '
											+ token.toString(), 1,
									'for_each_token');
							ref_list_to_remove.push(token.attributes.name);
						}

						remove_token_from_parent(parent_token, index, length);
						token = '';
					}

				} else if (modify_by_return) {
					// 換掉整個 parent[index] token 的情況。
					// `return undefined;` 不會替換，應該 return
					// .each.remove_token; 以清空。
					// 小技巧: 可以用 return [ inner ].is_atom = true 來避免進一步的
					// parse 或者處理。
					if (typeof result === 'string') {
						// {String}wikitext to ( {Object}element or '' )
						result = wiki_API.parse(result, options, []);
					}
					if (typeof result === 'string'
					//
					|| Array.isArray(result)) {
						// 將指定類型節點替換作此回傳值。
						parent_token[index] = token = result;
					}
				}

				return traversal_children(token, result);
			}

			function traversal_children(token, result) {
				// assert: !promise || (promise is resolved)

				// depth-first search (DFS) 向下層巡覽，再進一步處理。
				// 這樣最符合token在文本中的出現順序。
				// Skip inner tokens, skip children.
				if (result !== for_each_token.skip_inner
				// is_atom: 不包含可 parse 之要素，不包含 text。
				&& Array.isArray(token) && !token.is_atom
				// 最起碼必須執行一次 `traversal_next_sibling()`。
				&& token.length > 0 && !exit
				// comment 可以放在任何地方，因此能滲透至任一層。
				// 但這可能性已經在 wiki_API.parse() 中偵測並去除。
				// && type !== 'comment'
				&& (!max_depth || depth + 1 < max_depth)) {
					traversal_tokens(token, depth + 1, _traversal_next_sibling);
				} else if (promise) {
					_traversal_next_sibling();
				}

				if (false && promise) {
					console.trace([ index + '/' + length, depth, promise,
							modify_by_return ]);
					promise.then(function(r) {
						console
								.trace([ r, index + '/' + length, depth,
										promise ]);
					});
				}
			}

			function _traversal_next_sibling() {
				index++;
				if (false)
					console.trace([ index + '/' + length, depth, promise,
							modify_by_return ]);

				if (true) {
					traversal_next_sibling();
				} else {
					// also work:
					set_promise(traversal_next_sibling);
				}
			}

			// 一旦 processor() 回傳 is_thenable，那麼就直接跳出迴圈，自此由 promise 接手。
			// 否則就可以持續迴圈，以降低呼叫層數。
			while (index < length && !exit) {
				// console.trace([index, length, depth]);
				// 最起碼必須執行一次 `traversal_next_sibling()`
				traversal_next_sibling();
				if (promise)
					break;
				index++;
			}
		}

		// ----------------------------------------------------------

		function check_ref_list_to_remove() {
			// if (promise) console.trace(promise);
			if (ref_list_to_remove.length === 0) {
				return;
			}

			var result;
			result = for_each_token.call(this, 'tag_single', function(token,
					index, parent) {
				if (token.tag === 'ref' && token.attributes
				// 嘗試自動刪除所有引用。
				&& ref_list_to_remove.includes(token.attributes.name)) {
					library_namespace.debug('Also remove: ' + token.toString(),
							3, 'for_each_token');
					return for_each_token.remove_token;
				}
			});
			check_if_result_is_thenable(result);

			result = for_each_token.call(this, 'transclusion',
			// also remove {{r|name}}
			function(token, index, parent) {
				if (for_each_token.ref_name_templates.includes(token.name)
				// 嘗試自動刪除所有引用。
				&& ref_list_to_remove.includes(token.parameters['1'])) {
					if (token.parameters['2']) {
						library_namespace
								.warn('for_each_token: Cannot remove: '
										+ token.toString());
					} else {
						library_namespace.debug('Also remove: '
								+ token.toString(), 3, 'for_each_token');
						return for_each_token.remove_token;
					}
				}
			});
			check_if_result_is_thenable(result);
		}

		var overall_resolve, overall_reject;
		function finish_up() {
			// console.trace([ 'finish_up()', promise ]);
			promise = promise.then(check_ref_list_to_remove).then(
					overall_resolve, overall_reject);
			if (false)
				promise.then(function() {
					console.trace([ '** finish_up()', promise ]);
				});
		}

		if (options.use_global_index) {
			if (!slice && this[wiki_API.KEY_page_data].parsed) {
				slice = [ this.range[0], this.range[1] ];
				if (slice[0] > 0) {
					// 加入 .section_title。
					slice[0]--;
				}
			} else {
				delete options.use_global_index;
			}
		}

		// console.trace([ this, type ]);
		// var parsed = this;
		traversal_tokens(
				options.use_global_index ? this[wiki_API.KEY_page_data].parsed
						: this, 0, finish_up);

		if (!promise) {
			return check_ref_list_to_remove();
		}
		// console.trace(promise);

		return new Promise(function(resolve, reject) {
			overall_resolve = resolve;
			overall_reject = reject;
		});
	}

	Object.assign(for_each_token, {
		// CeL.wiki.parser.parser_prototype.each.exit
		// for_each_token.exit: 直接跳出。
		exit : typeof Symbol === 'function' ? Symbol('EXIT_for_each_token')
				: [ 'for_each_token.exit: abort the operation' ],
		// for_each_token.skip_inner: Skip inner tokens, skip children.
		skip_inner : typeof Symbol === 'function' ? Symbol('SKIP_CHILDREN')
				: [ 'for_each_token.skip_inner: skip children' ],
		// CeL.wiki.parser.parser_prototype.each.remove_token
		// for_each_token.remove_token: remove current children token
		remove_token : typeof Symbol === 'function' ? Symbol('REMOVE_TOKEN')
				: [ 'for_each_token.skip_inner: remove current token' ],
		ref_name_templates : [ 'R' ]
	});

	// 兩 token 都必須先有 .index, .parent!
	// token.parent[token.index] === token
	// @see options.add_index @ function for_each_token()
	// 注意: 這個交換純粹只操作於 page_data.parsed 上面，
	// 不會改變其他參照，例如 page_data.parsed.reference_list!
	// 通常一個頁面只能夠交換一次，交換兩次以上可能就會出現問題!
	function switch_token(token_1, token_2) {
		// console.log([ token_1, token_2 ]);
		token_1.parent[token_1.index] = token_2;
		token_2.parent[token_2.index] = token_1;

		var index_1 = token_1.index;
		token_1.index = token_2.index;
		token_2.index = index_1;

		var parent_1 = token_1.parent;
		token_1.parent = token_2.parent;
		token_2.parent = parent_1;
	}

	// ------------------------------------------------------------------------

	/**
	 * 設定好，並執行解析頁面的作業。
	 * 
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {wiki page parser}
	 * 
	 * @see wiki_API.parse()
	 */
	function parse_page(options) {
		if (!this.parsed
		// re-parse
		|| options && (options.reparse || options.wikitext)) {
			// assert: this = [ {String} ]
			// @see function page_parser(wikitext, options)
			var parsed = options && options.wikitext || this[0];
			parsed = wiki_API.parse(parsed, Object.assign({
				target_array : this
			}, this.options, options));
			// library_namespace.log(parsed);
			// console.trace(parsed);
			if (parsed
			// for parsed === undefined (missing: '')
			&& (!Array.isArray(parsed) || parsed.type !== 'plain')) {
				this[0] = parsed;
			}
			this.parsed = true;
		}
		return this;
	}

	// ------------------------------------------------------------------------

	// TODO: templates
	function find_template(template_name, options) {
		var template_token;

		// console.trace(this);
		var session = wiki_API.session_of_options(options)
				|| wiki_API.session_of_options(this);
		// console.trace(session);
		if (session) {
			template_name = session.remove_namespace(template_name);
		} else {
			template_name = template_name.replace(/^Template:/i, '');
		}
		template_name = 'Template:' + template_name;

		this.each(template_name, function(token, index, parent) {
			template_token = token;
			template_token.index = index;
			template_token.parent = parent;
			// Find the first matched.
			return for_each_token.exit;
		}, options);

		return template_token;
	}

	// ------------------------------------------------------------------------

	// @inner
	function do_append_category(category_token) {
		// this: parser
		if (!/\n$/.test(this.at(-1))) {
			this.push('\n');
		}
		this.push(category_token, '\n');
	}

	// parsed.append_category()
	function register_and_append_category(category_token, options) {
		// console.trace(category_token.name);
		// console.trace(category_token);

		options = library_namespace.setup_options(options);

		if (typeof category_token === 'string') {
			category_token = category_token.trim();
			if (!category_token.startsWith('[[')) {
				// `Category:name` or `Category:name|sort_key`
				var matched = category_token.match(/^([^|]+)(\|.*)$/);
				var _options = library_namespace.new_options(options);
				_options.namespace = 'category';
				if (matched) {
					matched[1] = wiki_API.to_namespace(matched[1], _options);
					category_token = matched[1] + matched[2];
					// Release memory. 釋放被占用的記憶體。
					matched = null;
				} else {
					category_token = wiki_API.to_namespace(category_token,
							_options);
				}
				// console.trace(category_token);
				category_token = '[[' + category_token + ']]';
			}
			category_token = wiki_API.parse(category_token, options);
		}
		// console.assert(category_token.type === 'category');

		// const 例如可設定成繁簡轉換後的 key
		// @see 20211119.維基詞典展開語言標題模板.js
		var category_name = options.category_name
				|| typeof options.get_key === 'function'
				&& options.get_key(category_token, options)
				|| category_token.name;

		// this: parser
		if (!this.category_Map) {
			this.get_categories(options);
		}

		if (!this.category_Map.has(category_name)) {
			this.category_Map.set(category_name, category_token);
			if (!options.is_existed)
				do_append_category.call(this, category_token);
			return;
		}

		// console.trace(category_token);

		if (!category_token.sort_key) {
			// 保留 old_category_token，跳過沒有新資訊的。
			return;
		}

		// const
		var old_category_token = this.category_Map.get(category_name);
		// console.trace(old_category_token);
		if (old_category_token.sort_key) {
			library_namespace.warn('register_and_append_category: '
					+ library_namespace.wiki.title_link_of(this.page)
					+ ': Multiple sort key: ' + old_category_token + ', '
					+ category_token);
			if (options.do_not_overwrite_sort_key) {
				if (!options.is_existed) {
					// Will overwrite the sort key
					do_append_category.call(this, category_token);
				}
				return;
			}
			// default: Will overwrite the sort key.
		}

		if (false && !old_category_token.set_sort_key) {
			console.trace(old_category_token);
		}
		// reuse old category_token
		old_category_token.set_sort_key(category_token.sort_key);
		if (options.is_existed) {
			// 移除重複的/同時存在繁體簡體的 category_token。
			return this.each.remove_token;
		}
	}

	// parsed.get_categories()
	function get_categories(options) {
		if (!this.category_Map) {
			this.category_Map = new Map;

			options = library_namespace.new_options(options);
			options.is_existed = true;
			delete options.category_name;
			var parsed = this;

			// 先從頭登記一次現有的 Category。
			this.each('Category', function(category_token, index, parent) {
				// for remove
				// category_token.index = index;
				// category_token.parent = parent;
				return parsed.append_category(category_token, options);
			}, {
				modify : options.remove_existed_duplicated
			});
		}

		// 警告: 重複的 category 只會取得首個出現的。
		return Array.from(this.category_Map.values());
	}

	// ------------------------------------------------------------------------

	// parse <ref> of page
	// TODO: <ref group="">
	// TODO: <ref> in template
	function parse_references(options) {
		if (this.reference_list)
			return this.reference_list;

		if (typeof options === 'function') {
			options = {
				processor : options
			};
		}

		/** {Array}參考文獻列表, starts from No. 1 */
		var reference_list = new Array(1);

		this.each(function(token) {
			if (!token.tag || token.tag.toLowerCase() !== 'ref')
				return;

			if (typeof options.processor === 'function') {
				options.processor.apply(null, arguments);
			}

			if (token.attributes && ('name' in token.attributes)) {
				var attribute_name = token.attributes.name,
				// <ref>: name 屬性不能使用數字，請使用可描述內容的標題
				list = reference_list[attribute_name];
				if (list) {
					// index with the same name
					token.reference_index = list.length;
					list.push(token);
					// 已存在相同的名稱，不添加到 reference_list 以增加 NO。
				} else {
					token.reference_index = 0;
					list = [ token ];
					reference_list[attribute_name] = list;
					reference_list.push(list);
				}
				if (!list.main && token.type === 'tag'
				// 會採用第一個有內容的。
				&& token[1].toString().trim()) {
					list.main = token;
				}

			} else {
				reference_list.push(token);
			}

		}, false, Infinity);

		this.reference_list = reference_list;
		return reference_list;
	}

	// {{*Navigation templates}} (footer navboxes)
	// {{Coord}} or {{coord missing}}
	// {{Authority control}}
	// {{featured list}}, {{featured article}}, {{good article}}
	// {{Persondata}}
	// {{DEFAULTSORT:}}
	// [[Category:]]
	// {{Stub}}
	/** {Array}default footer order */
	var default_footer_order = 'transclusion|Coord,Coord Missing|Authority Control|Featured List,Featured Article,Good Article|Persondata|DEFAULTSORT,デフォルトソート|category|Stub'
	//
	.split('|').map(function(name) {
		if (name.includes(','))
			return name.split(',');
		return name;
	});

	// return
	// {ℕ⁰:Natural+0}: nodes listed in order_list
	// undefined: comments / <nowiki> or text may ignored ('\n') or other texts
	// NOT_FOUND < 0: unknown node
	function footer_order(node_to_test, order_list) {
		if (false && typeof node_to_test === 'string') {
			// skip text. e.g., '\n\n'
			return;
		}

		var type = node_to_test.type;
		if (!order_list) {
			order_list = default_footer_order;
		}
		if (type === 'category') {
			var order = order_list.lastIndexOf('category');
			if (order >= 0) {
				return order;
			}
		}

		if (type === 'transclusion') {
			var order = order_list.length, name = node_to_test.name;
			while (--order > 0) {
				var transclusion_name = order_list[order];
				if (Array.isArray(transclusion_name) ? transclusion_name
						.includes(name) : transclusion_name === name) {
					return order;
				}
			}
			if (order_list[0] === 'transclusion') {
				// skip [0]
				return 0;
			}

			if (false) {
				// other methods 1
				// assert: NOT_FOUND + 1 === 0
				return order_list.indexOf(node_to_test.name) + 1;

				// other methods 2
				if (order === NOT_FOUND) {
					// 當作 Navigation templates。
					return 0;
					library_namespace.debug('skip error/unknown transclusion: '
							+ node_to_test);
				}
				return order;
			}

		}

		if (type === 'comment' || node_to_test.tag === 'nowiki') {
			// skip comment. e.g., <!-- -->, <nowiki />
			return;
		}

		if (type) {
			library_namespace.debug('skip error/unknown node: ' + node_to_test);
			return NOT_FOUND;
		}

		// 其他都不管了。
	}

	function insert_before(before_node, to_insert, options) {
		var order_needed = wiki_API.parse(before_node, options, []), order_list = this.order_list;
		if (order_needed) {
			order_needed = footer_order(order_needed, order_list);
		}
		if (!(order_needed >= 0)) {
			library_namespace.warn('insert_before: skip error/unknown node: '
					+ node_to_test);
			return this;
		}

		var index = this.length;
		// 從後面開始搜尋。
		while (index-- > 0) {
			// find the node/place to insert before
			if (typeof this[index] === 'string') {
				// skip text. e.g., '\n\n'
				continue;
			}
			var order = footer_order(this[index], order_list);
			if (order >= 0) {
				if (order === order_needed) {
					// insert before node_to_test
					this.splice(index, 0, to_insert);
					break;
				}

				if (order < order_needed) {
					// 已經過頭。
					// insert AFTER node_to_test
					this.splice(index + 1, 0, to_insert);
					break;
				}
			}
		}

		return this;
	}

	// ------------------------------------------------------------------------

	// @inner
	// get_layout_templates('short description', 'Template:Short description',
	// callback, session)
	function get_layout_templates(layout, layout_to_fetch, callback, options) {
		wiki_API.redirects_here(layout_to_fetch, function(root_page_data,
				redirect_list, error) {
			var session = wiki_API.session_of_options(options);
			var layout_index = session.configuration.layout_index;
			if (!layout_index[layout])
				layout_index[layout] = Object.create(null);
			if (false) {
				console.assert(!redirect_list
						|| redirect_list === root_page_data.redirect_list);
				console.log([ root_page_data, redirect_list ]);
			}
			redirect_list.forEach(function(page_data) {
				layout_index[layout][page_data.title] = null;
			});
			callback();
		}, Object.assign({
			// Making .redirect_list[0] the redirect target.
			include_root : true
		}, options));
	}

	// @inner
	function get_layout_categories(layout, layout_to_fetch, callback, options) {
		wiki_API.redirects_root(layout_to_fetch, function(title, page_data) {
			wiki_API.list(title, function(list/* , target, options */) {
				// assert: Array.isArray(list)
				if (list.error) {
					library_namespace.error(list.error);
					callback();
					return;
				}

				var session = wiki_API.session_of_options(options);
				var layout_index = session.configuration.layout_index;
				if (!layout_index[layout])
					layout_index[layout] = Object.create(null);
				list.forEach(function(page_data) {
					layout_index[layout][page_data.title] = layout_to_fetch;
				});
				callback();
			}, Object.assign({
				type : 'categorymembers'
			}, options));
		}, options);
	}

	// @inner
	function get_layout_elements(callback, options) {
		var layout_list = options.layout_list;
		var layout = layout_list.shift();
		if (!layout) {
			callback();
			return;
		}

		var layout_to_fetch = layout[1];
		if (Array.isArray(layout_to_fetch)) {
			if (layout_to_fetch.length === 0) {
				// Skip null layout_to_fetch
				get_layout_elements(callback, options);
				return;
			}
			layout_to_fetch = layout_to_fetch.shift();
			layout_list.unshift(layout);
		}
		layout = layout[0];

		if (/^Template:/i.test(layout_to_fetch)) {
			get_layout_templates(layout, layout_to_fetch, function() {
				get_layout_elements(callback, options);
			}, options);
			return;
		}

		if (/^Category:/i.test(layout_to_fetch)) {
			get_layout_categories(layout, layout_to_fetch, function() {
				get_layout_elements(callback, options);
			}, options);
			return;
		}

		throw new TypeError('Invalid layout to fetch: [' + layout + '] '
				+ layout_to_fetch);
	}

	// 取得定位各布局項目所需元素。
	function setup_layout_elements(callback, options) {
		var session = wiki_API.session_of_options(options);
		if (!session.configuration)
			session.configuration = Object.create(null);
		var layout_index = session.configuration.layout_index;
		if (layout_index) {
			callback();
			return;
		}
		layout_index = session.configuration.layout_index = Object.create(null);

		var layout_list = [];

		for ( var layout in layout_configuration) {
			var layout_to_fetch = layout_configuration[layout];
			layout_list.push([ layout, layout_to_fetch ]);
		}
		// console.log(layout_list);

		options.layout_list = layout_list;
		library_namespace.info('setup_layout_elements: Get all elements...');
		get_layout_elements(callback, options);
	}

	var layout_configuration = {
		// {{Short description}}
		'short description' : 'Template:Short description',

		// [[Category:Hatnote templates]]
		'hatnote' : 'Category:Hatnote templates',

		// Deletion / protection tags
		// [[Category:Speedy deletion templates]],
		// [[Category:Proposed deletion-related templates]],
		// [[Category:Protection templates]]
		'deletion tag' : [ 'Category:Speedy deletion templates',
				'Category:Proposed deletion-related templates',
				'Category:Protection templates' ],

		// Maintenance / dispute tags

		// {{Use British English}}, {{Use mdy dates}}
		'date style' : [ 'Template:Use mdy dates', 'Template:Use dmy dates' ],

		// {{Info...}}

		// [[Category:Foreign character warning boxes]]
		'foreign character warning box' : 'Category:Foreign character warning boxes'

	// Images
	// Navigational boxes (header navboxes)
	// introduction
	};

	// ------------------------------------------------------------------------

	var default_layout_order = [
	// header
	'page_begin', 'short_description', 'hatnote_templates',
			'deletion_templates', 'protection_templates', 'dispute_templates',
			'maintenance_templates', 'infobox_templates',
			//
			'lead_templates_end', 'content', 'content_end',
			//
			'footer', 'succession_templates', 'navigation_templates',
			'authority_control_templates', 'coord_templates',
			'featured_template', 'DEFAULTSORT', 'categories', 'stub_templates',
			//
			'page_end' ];

	// 整個頁面只能有單一個這種元素。
	var single_layout_types = [ 'short_description',
			'authority_control_templates', 'featured_template', 'DEFAULTSORT' ];

	// TODO: analysis wiki page layout 定位版面布局元素
	// search anchor tokens of elements @ [[WP:LAY]],
	// [[w:en:Wikipedia:Manual of Style/Layout#Order of article elements]],
	// [[w:en:Wikipedia:Manual of Style/Lead section]]
	// [[w:zh:Wikipedia:格式手冊/版面佈局#導言]]
	// [[w:en:Wikipedia:Talk page layout]]
	// location: 'hatnote', 'maintenance tag', 'navigation template'
	function analysis_layout_indices(options) {
		var parsed = this;
		if (parsed.layout_indices)
			return parsed.layout_indices;

		// The start index of layout elements
		var layout_indices = Object.create(null);

		var index = 0, BACKTRACKING_SPACES = Object.create(null);
		function set_index(layout_type, _index, force) {
			if (_index === BACKTRACKING_SPACES) {
				// 回溯上一個非空白的 token。
				_index = index;
				while (--_index >= 0 && typeof parsed[_index] === 'string'
				// 回溯上一個非空白的 token。
				&& !parsed[_index].trim())
					;
				if (false && /\n{2}$/.test(parsed[_index])) {
					// TODO: 避免多個換行。
					// 這問題似乎不會發生，因為換行都被移到新 token 了。
				}
				// 向後移一位，落點在第一個空白 token 上。
				_index++;
			}
			if (force || !(layout_indices[layout_type] >= 0)) {
				layout_indices[layout_type] = _index >= 0 ? _index : index;
				return true;
			}
			if (single_layout_types.includes(layout_type)) {
				library_namespace.error([ 'analysis_layout_indices: ', {
					// gettext_config:{"id":"there-are-more-than-one-$1-in-$2"}
					T : [ 'There are more than one %1 in %2',
					//
					layout_type, wiki_API.title_link_of(parsed.page) ]
				} ]);
			}
		}

		// as index = 0
		set_index('page_begin');

		// Only detects level 1 tokens
		for (; index < parsed.length; index++) {
			var token = parsed[index];
			if (!token)
				continue;
			if (typeof token === 'string') {
				if (!token.trim()) {
					continue;
				}
				// treat as 正文 Article content, Lead section
				// e.g., 首段即有內容。
				set_index('content');
				continue;
			}

			switch (token.type) {
			case 'transclusion':
				if (token.name === 'Short description') {
					set_index('short_description');
				} else if (/^(?:(?:About|For|Further|Main|Other|Redirect|See)(?:\w+|([\s\-]?\w+)+)?|Distinguish|Qnote)$/
				// [[Category:Hatnote templates]]
				.test(token.name)) {
					set_index('hatnote_templates');
				} else if (/^(?:Db-\w+)$|^(?:Proposed deletion|Article for deletion)/
						.test(token.name)) {
					set_index('deletion_templates');
					delete layout_indices.content;
				} else if (/^Pp/.test(token.name)) {
					set_index('protection_templates');
				} else if (/^Dispute/.test(token.name)) {
					set_index('dispute_templates');
				} else if (/^Infobox/.test(token.name)) {
					set_index('infobox_templates');
				} else if (/^Coord/.test(token.name)) {
					// Geographical coordinates
					set_index('coord_templates');
				} else if (/^(?:\w[ _])?Talk:/.test(token.name)) {
					// 嵌入包含了其他頁面。
					// e.g., [[w:en:Talk:Cuvier's dwarf caiman]]
					set_index('content');
					set_index('lead_section_end', BACKTRACKING_SPACES);
				} else if (set_index('maintenance_templates')) {
					// maintenance tag
				} else if (layout_indices.content_end >= 0) {
					set_index('footer');
					if (/^(?:Succession|S-)$/.test(token.name)) {
						set_index('succession_templates');
					} else if (token.name === 'Authority control') {
						set_index('authority_control_templates');
					} else if (set_index('navigation_templates')) {
						;
					} else if (/^(?:Featured list|Featured article|Good article)$/
							.test(token.name)) {
						set_index('featured_template');
					} else if (/^Stub/.test(token.name)
							|| layout_indices.categories >= 0
							|| layout_indices.DEFAULTSORT >= 0) {
						set_index('stub_templates');
					}
				}
				break;

			case 'section_title':
				// 第一個有標題的段落亦可算作 content。
				set_index('content');
				set_index('lead_section_end', BACKTRACKING_SPACES);
				break;

			case 'magic_word_function':
				if (token.name === 'DEFAULTSORT')
					set_index('DEFAULTSORT');
				set_index('footer', BACKTRACKING_SPACES);
				break;

			case 'category':
				// categories
				set_index('footer', BACKTRACKING_SPACES);
				set_index('categories');
				break;

			case 'comment':
				// Skip comments
				break;

			default:
				// e.g. '''title''' is ...
				set_index('content');
				layout_indices.content_end = index + 1;
				delete layout_indices.navigation_templates;
				delete layout_indices.footer;
			}
		}
		// 到這邊依然未設定 'content'，可能是像僅有 hatnote_templates 的 talk page。
		set_index('content');

		// 設置所有必要的 footer index 為頁面結尾。
		// assert: index === parsed.length
		set_index('content_end');
		set_index('footer');
		set_index('page_end');

		if (!('lead_section_end' in layout_indices)) {
			set_index('lead_section_end', BACKTRACKING_SPACES);
		}

		index = layout_indices['content'];
		// 添加在首段文字或首個 section_title 前，最後一個 hatnote template 後。
		set_index('lead_templates_end', BACKTRACKING_SPACES);

		// console.trace(layout_indices);
		return parsed.layout_indices = layout_indices;
	}

	if (false) {
		parsed = page_data.parse();
		parsed.insert_layout_token('{{maintenance_template}}',
				'maintenance_templates');
		parsed.insert_layout_token('[[Category:category name]]');
		parsed.insert_layout_token('{{DEFAULTSORT:sort key}}', 'DEFAULTSORT');
		// TODO:
		parsed.insert_layout_token('{{DEFAULTSORT:sort key}}');
		return parsed.toString();
	}

	// insert_navigate_template
	function insert_layout_token(token, options) {
		/** {String}layout_type */
		var location;
		if (typeof options === 'string') {
			location = options;
			options = Object.create(null);
			// options.location = location;
		} else {
			options = library_namespace.setup_options(options);
			location = options.location;
		}

		if (!location) {
			if (typeof token === 'string')
				token = wiki_API.parse(token, options);
			if (token.type === 'category') {
				location = 'categories';
			}
		}

		var parsed = this;
		var layout_indices = parsed.analysis_layout_indices(options);

		var parsed_index = layout_indices[location],
		// Only set when no exactly index of location got.
		// 僅有當無法取得準確的 layout token 時，才會尋覽應插入之點，
		// 並設定插入於 default_layout_order[layout_index] 之前。
		layout_index;

		if (!(parsed_index >= 0)) {
			layout_index = default_layout_order.indexOf(location);
			if (layout_index >= 0) {
				// insert before next layout element 尋覽應插入之點
				while (++layout_index < default_layout_order.length) {
					parsed_index = layout_indices[default_layout_order[layout_index]];
					if (parsed_index >= 0)
						break;
				}
			}
			if (!(parsed_index >= 0)) {
				if (options.force_insert) {
					// Nothing matched: Insert as the latest element
					// 添加在頁面最後面。
					parsed_index = parsed.length;
				} else {
					throw new Error(
							'insert_layout_token: Cannot insert token as '
									+ location);
				}
			}
		}

		// ----------------------------

		// 當 location 不完全相符 (layout_index >= 0)
		var append_original_layout_token = layout_index >= 0
		// 或可有多個 layout_token，則將 original_layout_token === parsed[parsed_index]
		// 添附於 token 後，並且不傳入原先的 original_layout_token。
		|| !single_layout_types.includes(location);

		if (typeof token === 'function') {
			token = token.call(this, !append_original_layout_token
			// 傳入 original_layout_token，用於直接 replace。
			&& /* original_layout_token */parsed[parsed_index], parsed_index,
					parsed);
		}

		if (!wiki_API.is_valid_parameters_value(token)) {
			// e.g., token === undefined
			return;
			throw new Error('insert_layout_token: Invalid token ' + token);
		}

		if (token.type === 'category') {
			var has_token;
			// 一個 category 只加一次。
			parsed.each('Category', function(category_token) {
				if (token.name !== category_token.name) {
					return;
				}
				if (token.sort_key && !category_token.sort_key) {
					// 除非本來就有設定 sort key，否則設定成新的 sort key。
					category_token[2] = token.sort_key;
					has_token = 'changed';
				} else {
					has_token = true;
				}
				return parsed.each.exit;
			});
			if (has_token)
				return has_token === 'changed';
		}

		// ----------------------------

		if (!/^\n/.test(token)) {
			// 檢查前一個有東西的 token 是否以 "\n" 作結。
			for (var index = parsed_index; index > 0;) {
				var previous_token = parsed[--index];
				if (previous_token) {
					if (!/\n$/.test(previous_token)) {
						// layout_token 應該都獨立成行，因此加個換行前綴。
						token = '\n' + token;
					}
					break;
				}
			}
		}

		if (append_original_layout_token
		// `parsed_index` maybe parsed.length
		&& parsed[parsed_index]) {
			// insert before the original token,
			// instead of replace the original token.
			if (!/\n$/.test(token) && !/^\n/.test(parsed[parsed_index]))
				token += '\n';
			token += parsed[parsed_index];
		} else if (!/\n$/.test(token) && !/^\n/.test(parsed[parsed_index + 1])) {
			token += '\n';
		}

		parsed[parsed_index] = token;

		// return changed
		return true;
	}

	// ------------------------------------------------------------------------

	/**
	 * 把表格型列表頁面轉為原生陣列。 wikitext table to array table, to table
	 * 
	 * CeL.wiki.parse.table()
	 * 
	 * TODO: 按標題統合內容。
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * @param {Object}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Array}陣列資料。
	 * 
	 * @example<code>

	CeL.run(['application.platform.nodejs', 'data.CSV']);
	wiki.page('List of monarchs of Thailand', function(page_data) {
		CeL.wiki.table_to_array(page_data, 'monarchs of Thailand.txt');
	});

	</code>
	 */
	function table_to_array(page_data, options) {
		if (!wiki_API.is_page_data(page_data)) {
			library_namespace.error('Invalid page data!');
			return;
		}
		if (typeof options === 'string') {
			options = {
				file : options
			};
		}

		var heads = [], array = [],
		// handler
		processor = options && options.row_processor;

		page_parser(page_data).parse()
		// 僅處理第一階層。
		.forEach(function(node) {
			if (node.type === 'section_title') {
				if (false) {
					library_namespace.debug(node.length + ','
					//
					+ node.index + ',' + node.level, 3);
					return;
				}
				// 從 section title 紀錄標題。
				var title = node[0];
				if (title.type === 'link') {
					title = title[0][0];
				}
				// console.log(title.toString());
				heads.truncate(node.level);
				heads[node.level] = title.toString().trim();

			} else if (node.type === 'table') {
				library_namespace.debug(node.length + ','
				//
				+ node.index + ',' + node.type, 3);
				node.forEach(function(row) {
					if (row.type === 'table_attributes')
						return;

					var cells = [];
					row.forEach(function(cell) {
						if (cell.type === 'table_attributes') {
							// 不計入 row style。
							return;
						}
						// return cell.toString().replace(/^[\n\|]+/, '');

						var append_cells;
						if (cell[0].type === 'table_attributes') {
							append_cells = cell[0].toString()
							// 檢測要橫向增加的 null cells。
							.match(/(?:^|\W)colspan=(?:"\s*)?(\d{1,2})/i);
							if (append_cells) {
								// -1: 不算入自身。
								append_cells = append_cells[1] - 1;
							}

							var matched = cell[0].toString()
							// 垂直向增加的 null cells。
							.match(/(?:^|\W)rowspan=(?:"\s*)?(\d{1,2})/i);

							if (matched && matched[1] > 1) {
								library_namespace.error(
								// TODO
								'We cannot deal with rowspan yet.');
							}

							// 去掉style
							// 注意: 本函式操作時不可更動到原資料。
							if (false) {
								var toString = cell.toString;
								cell = cell.clone();
								cell.shift();
								cell.toString = toString;
							}
							// remove table_attributes without lose information
							// @see toString of table_cell
							cell = cell.slice(1);
						}
						// .join(''): no delimiter
						cells.push(cell && cell.join('')
						//
						.replace(/^[\|\s]+/, '').trim() || '');
						if (append_cells > 0) {
							cells.append(new Array(append_cells).fill(''));
						}
					});
					if (cells.length > 0) {
						if (options && options.add_section_header) {
							// 將以本列 .header_count 判定本列是否算作標題列。
							if (row.header_count > 0) {
								// 對於 table header，不加入 section title 資訊。
								cells.unshift('', '');
							} else {
								cells.unshift(heads[2] || '', heads[3] || '');
							}
						}
						if (processor) {
							cells = processor(cells);
						}
						array.push(cells);
					}
				});
			}
		});

		// output file. e.g., page_data.title + '.csv.txt'
		if (options && options.file) {
			if (library_namespace.write_file && library_namespace.to_CSV_String) {
				library_namespace.write_file(options.file,
				// 存成 .txt，並用 "\t" 分隔，可方便 Excel 匯入。
				library_namespace.to_CSV_String(array, {
					field_delimiter : '\t'
				}));
			} else {
				library_namespace.error("Must includes frrst: "
						+ library_namespace.Class
						+ ".run(['application.platform.nodejs', 'data.CSV']);");
			}
		}

		return array;
	}

	// TODO: array_to_JSON()
	// https://commons.wikimedia.org/wiki/Data:Sandbox/Smalyshev/test.tab
	function array_to_table(array, options) {
		options = library_namespace.setup_options(options);
		if (!array.length && options.is_header === false)
			return '';

		var table = [ '{|' + ' class="'
		// { class: 'wikitable sortable' }
		+ (array['class'] || options['class'] || 'wikitable') + '"' ];
		if (array.style || options.style) {
			table[0] += ' style="' + (array.style || options.style) + '"';
		}
		if (options.caption) {
			table[0] += '\n|+ ' + options.caption;
		}

		array.forEach(function(row, index) {
			var separator = options.is_header === true
					|| options.is_header === undefined
					&& (index === 0 || row['class'] === 'sortbottom') ? '!'
					: '|';
			if (Array.isArray(row))
				row = row.join(' ' + separator + separator + ' ');

			var _style = row['class'] ? ' class="' + row['class'] + '"' : '';
			if (row.style) {
				_style += ' style="' + row.style + '"';
			}

			table.push(_style + '\n' + separator + ' ' + row);
		});

		return table.join('\n|-') + '\n|}';
	}

	// ------------------------------------------------------------------------

	// render_template('{{{1|}}} {{{2|}}}', '{{t|a|b}}');
	function render_template(template_code, template_arguments, options) {
		var caller_template_token = wiki_API.parse(template_arguments
				.toString());
		if (!caller_template_token
				|| caller_template_token.type !== 'transclusion') {
			return template_arguments;
		}

		var parsed = wiki_API.parse(template_code.toString());
		parsed.each('tag', function(tag_token) {
			if (tag_token.tag === 'noinclude') {
				return '';
			}
		}, true);

		function render_parameter(parameter_token) {
			var name = parameter_token[0].toString().trim();
			if (name in caller_template_token.parameters) {
				return caller_template_token.parameters[name];
			}

			name = parameter_token[1];
			if (!name) {
				// e.g., {{{class|}}}
				return name.length === 1 ? this.toString() : name;
			}

			;
		}
		function render_all_parameters(token) {
			if (Array.isArray(token))
				for_each_token.call(token, 'parameter', render_parameter, true);
		}
		function render_result_of_parameter(name) {
			name = function_token[function_token.index_of[name]];
			render_all_parameters(name);
			return name.toString().trim();
		}

		// [[mw:Help:Magic words § Parser functions]],
		// [[mw:Help:Extension:ParserFunctions]], [[Help:Magic words]]
		parsed.each('magic_word_function', function(function_token, index,
				parent) {
			switch (function_token.name) {
			case 'if':
				var name = render_result_of_parameter(1);
				return function_token[name ? 2 : 3]
				// e.g., {{#if:|v}}
				|| '';

			case 'switch':
				var name = render_result_of_parameter(1);
				if (name in function_token.parameters)
					return function_token.parameters[name];

				// TODO: {{#switch:v|{{#expr:2*3}}=six}}
				for (var index = 2; index < function_token.length; index++) {
					if (name !== render_result_of_parameter(index))
						continue;
					// found
					var index_of = function_token.index_of[index];
					while ((++index in function_token.parameters)
							&& index === ++index_of)
						;
					return function_token[function_token.index_of[index]];
				}

				return function_token.parameters['#default'] || '';

			case 'UCFIRST':
				// {{ucfirst:value}}
				return wiki_API.upper_case_initial(function_token[1] || '');

			}
		}, true);

		// 解碼剩下的 parameters。
		render_all_parameters(parsed);
	}

	// ------------------------------------------------------------------------

	// export 導出.
	// @static
	Object.assign(wiki_API, {
		KEY_page_data : typeof Symbol === 'function' ? Symbol('page data')
				: 'page data',

		switch_token : switch_token,

		// parse_table(), parse_wikitable()
		table_to_array : table_to_array,
		array_to_table : array_to_table,

		// parser : page_parser,

		setup_layout_elements : setup_layout_elements
	});

	return page_parser;
}

});
// CeL.application.net.wiki.query
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): query
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2019/10/11 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.query',

	require : 'application.net.Ajax.get_URL'
	// URLSearchParams()
	+ '|application.net.'
	// library_namespace.age_of()
	+ '|data.date.' + '|application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	// for BLANK_TOKEN
	+ '|application.net.wiki.task.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var get_URL = this.r('get_URL');

	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	var setup_API_URL = wiki_API.setup_API_URL, BLANK_TOKEN = wiki_API.BLANK_TOKEN;

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	// --------------------------------------------------------------------------------------------
	// 以下皆泛用，無須 wiki_API instance。

	// badtoken 超過這個次數則直接跳出。
	var max_badtoken_count = 2;

	function check_session_badtoken(result, callback, options) {
		var session = wiki_API.session_of_options(options);
		if (!session) {
			// run next action
			callback(result);
			return;
		}

		if (result ? result.error
		// 當運行過多次，就可能出現 token 不能用的情況。需要重新 get token。
		? result.error.code === 'badtoken'
		// The "token" parameter must be set.
		|| result.error.code === 'notoken'
		// 有時 result 可能會是 ""，或者無 result.edit。這通常代表 token lost。
		: options.rollback_action && !options.get_page_before_undo
		//
		&& (!result.edit
		// flow:
		// {status:'ok',workflow:'...',committed:{topiclist:{...}}}
		&& result.status !== 'ok'
		// e.g., success:1 @ wikidata
		&& !result.success) : result === '') {
			// Invalid token
			if (session.badtoken_count > 0)
				session.badtoken_count++;
			else
				session.badtoken_count = 1;
			library_namespace.warn([ 'check_session_badtoken: ',
			//
			(new Date).format(), ' ', wiki_API.site_name(session), ': ', {
				// gettext_config:{"id":"it-seems-that-the-token-is-lost"}
				T : '似乎丟失了令牌。'
			}, '(' + session.badtoken_count + '/' + max_badtoken_count + ')' ]);
			// console.trace(options);
			// console.trace(result);

			if (session.badtoken_count >= (isNaN(session.max_badtoken_count) ? max_badtoken_count
					// 設定 `session.max_badtoken_count = 0` ，那麼只要登入一出問題就直接跳出。
					: session.max_badtoken_count)) {
				throw new Error('check_session_badtoken: ' + gettext(
				// gettext_config:{"id":"too-many-badtoken-errors!-please-re-execute-the-program"}
				'Too many badtoken errors! Please re-execute the program!'));
				// delete session.badtoken_count;
			}

			if (!library_namespace.platform.nodejs) {
				// throw new Error();
				library_namespace.warn([ 'check_session_badtoken: ', {
					// gettext_config:{"id":"not-using-node.js"}
					T : 'Not using node.js!'
				} ]);
				callback(result);
				return;
			}

			// 下面的 workaround 僅適用於 node.js。

			// 不應該利用 `session[wiki_API.KEY_HOST_SESSION].token.lgpassword`，
			// 而是該設定 `session.preserve_password`。
			if (!session.token.lgpassword) {
				// console.log(result);
				// console.trace(session);
				// 死馬當活馬醫，仍然嘗試重新取得 token... 沒有密碼無效。
				throw new Error('check_session_badtoken: ' + gettext(
				// gettext_config:{"id":"no-password-preserved"}
				'未保存密碼！'));
			}

			// console.log(result);
			// console.log(options.action);
			// console.trace(session);
			// library_namespace.set_debug(3);
			if (typeof options.rollback_action === 'function') {
				// rollback action
				options.rollback_action();
			} else if (options.requery) {
				// hack: 登入後重新執行
				session.actions.unshift([ 'run', options.requery ]);
			} else {
				var message = 'check_session_badtoken: ' + gettext(
				// gettext_config:{"id":"did-not-set-$1"}
				'Did not set %1!', 'options.rollback_action()');
				throw new Error(message);
				library_namespace.error(message);
				console.trace(options);
			}

			// reset node agent.
			// 應付 2016/1 MediaWiki 系統更新，
			// 需要連 HTTP handler 都重換一個，重起 cookie。
			// 發現大多是因為一次處理數十頁面，可能遇上 HTTP status 413 的問題。
			setup_API_URL(session, true);
			if (false && result === '') {
				// force to login again: see wiki_API.login
				delete session.token.csrftoken;
				delete session.token.lgtoken;
				// library_namespace.set_debug(6);
			}
			// TODO: 在這即使 rollback 了 action，
			// 還是可能出現丟失 next[2].page_to_edit 的現象。
			// e.g., @ 20160517.解消済み仮リンクをリンクに置き換える.js

			// 直到 .edit 動作才會出現 badtoken，
			// 因此在 wiki_API.login 尚無法偵測是否 badtoken。
			if ('retry_login' in session) {
				if (++session.retry_login > ('max_retry_login' in session ? session.max_retry_login
						: 2)) {
					// 當錯誤 login 太多次時，直接跳出。
					throw new Error('check_session_badtoken: '
					// gettext_config:{"id":"too-many-failed-login-attempts-$1"}
					+ gettext('Too many failed login attempts: %1',
					//
					'[' + session.token.lgname + ']'));
				}
				library_namespace.info('check_session_badtoken: Retry '
						+ session.retry_login);
			} else {
				session.retry_login = 0;
			}

			library_namespace.info([ 'check_session_badtoken: ', {
				// gettext_config:{"id":"try-to-get-the-token-again"}
				T : '嘗試重新取得令牌。'
			} ]);
			wiki_API.login(session.token.lgname,
			//
			session.token.lgpassword, {
				force : true,
				// [KEY_SESSION]
				session : session,
				// 將 'login' 置於最前頭。
				login_mark : true
			});

		} else {
			if (result && result.edit) {
				if ('retry_login' in session) {
					console.trace('已成功 edit，去除 retry flag。');
					delete session.retry_login;
				}
				if ('badtoken_count' in session) {
					console.trace('已成功 edit，去除 badtoken_count flag。');
					delete session.badtoken_count;
				}
			}
			// run next action
			callback(result);
			// 注意: callback() 必須採用 handle_error() 來測試是否出問題!
		}
	}

	var need_to_wait_error_code = new Set([ 'maxlag', 'ratelimited' ]);

	/**
	 * 實際執行 query 操作，直接 call API 之核心函數。 wiki_API.query()
	 * 
	 * 所有會利用到 wiki_API.prototype.work ← wiki_API.prototype.next ← <br />
	 * wiki_API.page, wiki_API.edit, ... ← wiki_API_query ← get_URL ← <br />
	 * need standalone http agent 的功能，都需要添附 session 參數。
	 * 
	 * -----------------------------------------
	 * 
	 * accept action: {URL}
	 * 
	 * action: {Search_parameters|URLSearchParams}parameters:<br />
	 * will get API_URL from options for undefined API
	 * 
	 * action: [ {String|Undefined}API,
	 * {Object|Search_parameters|URLSearchParams|String}parameters ]:<br />
	 * will get API_URL from options for undefined API
	 * 
	 * -----------------------------------------
	 * 
	 * @param {String|Array}action
	 *            {String}action or [ {String}api URL, {String}action,
	 *            {Object}other parameters ]
	 * @param {Function}callback
	 *            回調函數。 callback(response data, error)
	 * @param {Object}[POST_data]
	 *            data when need using POST method
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項<br />
	 *            wiki_API.edit 可能輸入 session 當作 options。
	 * 
	 * @see api source:
	 *      https://phabricator.wikimedia.org/diffusion/MW/browse/master/includes/api
	 * 
	 * @since 2021/2/27 6:13:20 remove wiki_API.use_Varnish: 這方式已被 blocked。
	 */
	function wiki_API_query(action, callback, POST_data, options) {
		// 前置處理。
		options = library_namespace.setup_options(options);

		if (typeof callback !== 'function') {
			throw new Error('wiki_API_query: No {Function}callback!');
		}

		// 處理 action
		// console.trace([action, POST_data]);
		library_namespace.debug('action: ' + action, 2, 'wiki_API_query');
		// new URLSearchParams() 會將數值轉成字串。 想二次利用 {Object}, {Array}，得採用
		// new CeL.URI() 而非 new URL()。
		if ((action instanceof URL) || library_namespace.is_URI(action)) {
			// Skip normalized URL
		} else if (typeof action === 'string' && /^https?:\/\//.test(action)) {
			action = new library_namespace.URI(action);
		} else if (typeof action === 'string'
		// TODO: {Map}, {Set}
		|| (action instanceof URLSearchParams)
				|| library_namespace.is_Search_parameters(action)
				// check if `action` is plain {Object}
				|| library_namespace.is_Object(action)) {
			action = [ , action ];
		} else if (!Array.isArray(action)) {
			// Invalid URL?
			library_namespace.warn([ 'wiki_API_query: ', {
				// gettext_config:{"id":"invalid-url-$1"}
				T : [ '網址無效：%1', '[' + typeof action + '] ' + action ]
			} ]);
			console.trace(action);
		}
		if (Array.isArray(action)) {
			// [ {String}api URL, {String}action, {Object}other parameters ]
			// → {URI}URL
			if (!library_namespace.is_Search_parameters(action[1])) {
				if (typeof action[1] === 'string'
				// https://www.mediawiki.org/w/api.php?action=help&modules=query
				&& !/^[a-z]+=/.test(action[1]) && !options.post_data_only) {
					library_namespace.warn([ 'wiki_API_query: ', {
						// gettext_config:{"id":"did-not-set-$1"}
						T : [ 'Did not set %1!', 'action' ]
					}, {
						// gettext_config:{"id":"will-set-$1-automatically"}
						T : [ '將自動設定 %1。', JSON.stringify('action=') ]
					} ]);
					console.trace(action);
					action[1] = 'action=' + action[1];
				}
				action[1] = library_namespace.Search_parameters(action[1]);
			}
			library_namespace.debug('api URL: ('
					+ (typeof action[0])
					+ ') ['
					+ action[0]
					+ ']'
					+ (action[0] === wiki_API.api_URL(action[0]) ? '' : ' → ['
							+ wiki_API.api_URL(action[0]) + ']'), 3,
					'wiki_API_query');
			action[0] = wiki_API.api_URL(action[0], options);
			action[0] = library_namespace.URI(action[0]);
			action[0].search_params.set_parameters(action[1]);
			if (action[2]) {
				// additional parameters
				action[0].search_params.set_parameters(action[2]);
			}
			action = action[0];
		} else {
			// {URL|CeL.URI}action
			action = library_namespace.URI(action);
		}
		// assert: library_namespace.is_URI(action)
		// console.trace(action);

		// additional parameters
		if (options.additional_query) {
			action.search_params.set_parameters(options.additional_query);
			delete options.additional_query;
		}
		// console.trace([ action, options ]);

		var session = wiki_API.session_of_options(options);
		if (isNaN(action.search_params.maxlag)) {
			// respect maxlag
			var maxlag = !isNaN(options.maxlag) ? options.maxlag : session
					&& !isNaN(session.maxlag) ? session.maxlag
					: wiki_API_query.default_maxlag;
			if (maxlag >= 0)
				action.search_params.maxlag = maxlag;
		}

		// respect edit time interval. 若為 query，非 edit (modify)，則不延遲等待。
		var need_check_edit_time_interval
		// method 2: edit 時皆必須設定 token。
		= POST_data && POST_data.token,
		// 檢測是否間隔過短。支援最大延遲功能。
		to_wait,
		// edit time interval in ms
		edit_time_interval = options.edit_time_interval >= 0
		//
		? options.edit_time_interval :
		// ↑ wiki_API.edit 可能輸入 session 當作 options。
		// options[KEY_SESSION] && options[KEY_SESSION].edit_time_interval ||
		wiki_API_query.default_edit_time_interval;

		if (need_check_edit_time_interval) {
			to_wait = edit_time_interval
					- (Date.now() - wiki_API_query.last_operation_time[action.origin]);
		}

		// TODO: 伺服器負載過重的時候，使用 exponential backoff 進行延遲。
		if (to_wait > 0) {
			library_namespace.debug({
				// gettext_config:{"id":"waiting-$1"}
				T : [ 'Waiting %1...', library_namespace.age_of(0, to_wait, {
					digits : 1
				}) ]
			}, 2, 'wiki_API_query');
			setTimeout(function() {
				wiki_API_query(action, callback, POST_data, options);
			}, to_wait);
			return;
		}
		if (need_check_edit_time_interval) {
			// reset timer
			wiki_API_query.last_operation_time[action.origin] = Date.now();
		} else {
			library_namespace.debug('非 edit (modify)，不延遲等待。', 3,
					'wiki_API_query');
		}

		var original_action = action.toString();

		// https://www.mediawiki.org/wiki/API:Data_formats
		// 因不在 white-list 中，無法使用 CORS。
		if (session && session.general_parameters) {
			action.search_params.set_parameters(session.general_parameters);
		} else if (!action.search_params.format
				&& wiki_API.general_parameters.format) {
			action.search_params.set_parameters(wiki_API.general_parameters);
		}
		// console.trace(action);

		// 開始處理 query request。
		if (!POST_data && wiki_API_query.allow_JSONP) {
			library_namespace.debug(
					'採用 JSONP callback 的方法。須注意：若有 error，將不會執行 callback！', 2,
					'wiki_API_query');
			library_namespace.debug('callback : (' + (typeof callback) + ') ['
					+ callback + ']', 3, 'wiki_API_query');
			get_URL(action, {
				callback : callback
			});
			return;
		}

		// console.log('-'.repeat(79));
		// console.log(options);
		var get_URL_options = Object.assign(
		// 防止汙染，重新造一個 options。不汙染 wiki_API_query.get_URL_options
		Object.clone(wiki_API_query.get_URL_options), options.get_URL_options);

		if (session) {
			// assert: {String|Undefined}action.search_params.action
			if (action.search_params.action === 'edit' && POST_data
			//
			&& (!POST_data.token || POST_data.token === BLANK_TOKEN)
			// 防止未登錄編輯
			&& session.token
			//
			&& (session.token.lgpassword || session.preserve_password)) {
				// console.log([ action, POST_data ]);
				library_namespace.error('wiki_API_query: 未登錄編輯？');
				throw new Error('wiki_API_query: 未登錄編輯？');
			}

			// assert: get_URL_options 為 session。
			if (!session.get_URL_options) {
				library_namespace.debug(
						'為 wiki_API instance，但無 agent，需要造出 agent。', 2,
						'wiki_API_query');
				setup_API_URL(session, true);
			}
			Object.assign(get_URL_options, session.get_URL_options);
		}

		if (options.form_data) {
			// @see wiki_API.upload()
			library_namespace.debug('Set form_data', 6);
			// throw 'Set form_data';
			// options.form_data 會被當作傳入 to_form_data() 之 options。
			// to_form_data() will get file using get_URL()
			get_URL_options.form_data = options.form_data;
		}

		var agent = get_URL_options.agent;
		if (agent && agent.last_cookie && (agent.last_cookie.length > 80
		// cookie_cache: 若是用同一個 agent 來 access 過多 Wikipedia 網站，
		// 可能因載入 wikiSession 過多，如 last_cookie.length >= 86，
		// 而造成 413 (請求實體太大)。
		|| agent.cookie_cache)) {
			if (agent.last_cookie.length > 80) {
				library_namespace.debug('重整 cookie[' + agent.last_cookie.length
						+ ']。', 1, 'wiki_API_query');
				if (!agent.cookie_cache)
					agent.cookie_cache
					// {zh:['','',...],en:['','',...]}
					= Object.create(null);
				var last_cookie = agent.last_cookie;
				agent.last_cookie = [];
				while (last_cookie.length > 0) {
					var cookie_item = last_cookie.pop();
					if (!cookie_item) {
						// 不知為何，也可能出現這種 cookie_item === undefined 的情況。
						continue;
					}
					var matched = cookie_item.match(/^([a-z_\d]{2,20})wiki/);
					if (matched) {
						var language = matched[1];
						if (language in agent.cookie_cache)
							agent.cookie_cache[language].push(cookie_item);
						else
							agent.cookie_cache[language] = [ cookie_item ];
					} else {
						agent.last_cookie.push(cookie_item);
					}
				}
				library_namespace.debug('重整 cookie: → ['
						+ agent.last_cookie.length + ']。', 1, 'wiki_API_query');
			}

			var language = wiki_API.get_first_domain_name_of_session(session);
			if (!language) {
				library_namespace.debug('未設定 session，自 API_URL 擷取 language: ['
						+ action[0] + ']。', 1, 'wiki_API_query');
				// TODO: 似乎不能真的擷取到所需 language。
				language = wiki_API.site_name(action.origin, {
					get_all_properties : true
				});
				language = language && language.language || wiki_API.language;
				// e.g., wiki_API_query: Get "ja" from
				// ["https://ja.wikipedia.org/w/api.php?action=edit&format=json&utf8",{}]
				library_namespace.debug(
						'Get "' + language + '" from ' + action, 1,
						'wiki_API_query');
			}
			language = language.replace(/-/g, '_');
			if (language in agent.cookie_cache) {
				agent.last_cookie.append(agent.cookie_cache[language]);
				delete agent.cookie_cache[language];
			}
		}

		// console.trace(action);
		// console.log(POST_data);

		// merge `options.cached_response` to `response`
		// 以 cached_response 為基礎，後設定者為準。
		function merge_cached_response(response) {
			// console.trace([ this.cached_response, response ]);
			this.cached_response = library_namespace.deep_merge_object(
					this.cached_response, response);
			if (false) {
				// console.trace(JSON.stringify(this.cached_response));
				console.trace([ this.cached_response.query.pages[75032],
						response.query.pages[75032] ]);
			}
			return this.cached_response;
		}

		// 2021/5/4 17:32:39 看來 intitle: 最多只能取得 10000 pages，再多必須多加排除條件，例如
		// -incategory:""。
		// 編輯頁面後重新執行，或許可以取得不同的頁面清單。
		if (options.handle_continue_response === 'merge_response') {
			options.handle_continue_response = merge_cached_response;
		} else if (options.handle_continue_response === true) {
			options.handle_continue_response = function default_handle_continue_response(
					response, action, POST_data) {
				// console.trace([ action, POST_data ]);
				// console.trace([ response, JSON.stringify(response) ]);
				// console.log(response);

				if (!action.search_params.action === 'query') {
					return;
				}

				var list = response.query[
				// e.g., prop: 'revisions'
				action.search_params.prop
				//
				|| action.search_params.list || action.search_params.meta];
				if (Array.isArray(list)) {
					// console.log(list);
					if (this.cached_list) {
						// assert: Array.isArray(this.cached_list)
						this.cached_list.append(list);
					} else {
						this.cached_list = list;
					}
				}
			};
		}

		function XMLHttp_handler(XMLHttp, error) {
			var status_code, response;
			if (error) {
				// assert: !!XMLHttp === false
				status_code = error;
			} else {
				status_code = XMLHttp.status;
				response = XMLHttp.responseText;
			}

			if (error || /^[45]/.test(status_code)) {
				// e.g., 503, 413
				if (typeof get_URL_options.onfail === 'function') {
					get_URL_options.onfail(error || status_code);
				} else if (typeof callback === 'function') {
					// console.trace(get_URL_options);
					library_namespace.warn(
					// Get error:
					// status_code maybe 'Error' for connect ETIMEDOUT
					'wiki_API_query: ' + status_code + ': '
					// 避免 TypeError:
					// Cannot convert object to primitive value
					+ action);
					callback(response, error || status_code);
				}
				return;
			}

			// response = XMLHttp.responseXML;
			library_namespace.debug('response ('
					+ response.length
					+ ' characters): '
					+ (library_namespace.platform.nodejs ? '\n' + response
							: response.replace(/</g, '&lt;')), 3,
					'wiki_API_query');

			// "<\": for Eclipse JSDoc.
			if (/<\html[\s>]/.test(response.slice(0, 40))) {
				response = response.between('source-javascript', '</pre>')
						.between('>')
						// 去掉所有 HTML tag。
						.replace(/<[^>]+>/g, '');

				// '&#123;' : (")
				// 可能會導致把某些 link 中 URL 編碼也給 unescape 的情況?
				if (response.includes('&#'))
					response = library_namespace.HTML_to_Unicode(response);
			}

			// console.trace(response);
			// library_namespace.log(response);
			// library_namespace.log(library_namespace.HTML_to_Unicode(response));
			if (response) {
				try {
					response = JSON.parse(response);
				} catch (e) {
					// <title>414 Request-URI Too Long</title>
					// <title>414 Request-URI Too Large</title>
					if (response.includes('>414 Request-URI Too ')) {
						library_namespace.debug(
						//
						action.toString(), 1, 'wiki_API_query');
					} else {
						// TODO: 處理 API 傳回結尾亂編碼的情況。
						// https://phabricator.wikimedia.org/T134094
						// 不一定總是有效。

						library_namespace.error(
						//
						'wiki_API_query: Invalid content: ['
								+ String(response).slice(0, 40000) + ']');
						library_namespace.error(e);
					}

					// error handling
					if (get_URL_options.onfail) {
						get_URL_options.onfail(e);
					} else if (typeof callback === 'function') {
						callback(response, e);
					}

					// exit!
					return;
				}
			}

			if (response && response.error
			// https://www.mediawiki.org/wiki/Manual:Maxlag_parameter
			&& (need_to_wait_error_code.has(response.error.code)
			//
			|| Array.isArray(response.error.messages)
			//
			&& response.error.messages.some(function(message) {
				return message.name === 'actionthrottledtext';
			}))) {
				var waiting = response.error.info
				// /Waiting for [^ ]*: [0-9.-]+ seconds? lagged/
				.match(/([0-9.-]+) seconds? lagged/);
				waiting = waiting && +waiting[1] * 1000 || edit_time_interval;
				// console.trace(response);
				library_namespace.debug('The ' + response.error.code
				// 請注意，由於上游服務器逾時，緩存層（Varnish 或 squid）也可能會生成帶有503狀態代碼的錯誤消息。
				+ (response.error.code === 'maxlag' ? ' ' + maxlag + ' s' : '')
				// waiting + ' ms'
				+ ' hitted. Waiting ' + library_namespace.age_of(0, waiting, {
					digits : 1
				}) + ' to re-execute wiki_API.query().', 1, 'wiki_API_query');
				// console.log([ original_action, POST_data ]);
				setTimeout(wiki_API_query.bind(null, original_action, callback,
						POST_data, options), waiting);
				return;
			}

			// console.trace(response);
			if (options.handle_continue_response && !response.error
					&& ('continue' in response)) {
				// 2021/4/20 6:55:23 不曉得為什麼，在
				// 20210416.Sorting_category_and_sort_key_of_Thai_names.js 嘗試
				// wbentityusage 的時候似乎會一直跑一直跑跑不完，基本上一次平移一篇文章，只好放棄了。

				// console.trace([ action, POST_data ]);
				// console.trace([ response, JSON.stringify(response) ]);

				// e.g., merge response to cached data
				options.handle_continue_response(response, action, POST_data);

				if (false) {
					// Do not touch original action and POST_data.
					action = new library_namespace.URI(action);
					POST_data = library_namespace.is_Object(POST_data)
							&& Object.clone(POST_data) || POST_data;
				}
				// delete response['continue']['continue'];
				// response['continue'].rawcontinue = 1;
				for ( var continue_key in response['continue']) {
					var value = response['continue'][continue_key];
					action.search_params[continue_key] = value;
					if (action.href.length > 2000) {
						delete action.search_params[continue_key];
						if (!POST_data)
							POST_data = Object.create(null);
						POST_data[continue_key] = value;
					}
				}
				// reget next data
				get_URL(action, XMLHttp_handler, null, POST_data,
						get_URL_options);
				return;
			}

			if (options.handle_continue_response === merge_cached_response) {
				response = options.handle_continue_response(response);
				delete response['continue'];
				// console.trace(response.query.pages[75032]);
			}

			// ----------------------------------

			if (typeof options.rollback_action !== 'function') {
				if (need_check_edit_time_interval
						&& (!POST_data || !POST_data.token)) {
					throw new Error(
					//
					'wiki_API_query: Edit without options.rollback_action!');
				}
				// Re-run wiki_API.query() after get new token.
				options.requery = wiki_API_query.bind(null, original_action,
						callback, POST_data, options);
			}

			// console.trace(action);
			// callback(response);
			// options.action = action;
			check_session_badtoken(response, callback, options);
		}

		get_URL(action, XMLHttp_handler, null, POST_data, get_URL_options);
	}

	wiki_API_query.get_URL_options = {
		head : {
			// for mw_web_session use
			'Content-Type' : 'application/x-www-form-urlencoded; charset=UTF-8'
		},
		// default error retry 連線逾期/失敗時再重新取得頁面之重試次數。
		error_retry : 4,
		// default timeout: 1 minute
		timeout : library_namespace.to_millisecond('1 min')
	};

	/**
	 * edit (modify / create) 時之最大延遲參數。<br />
	 * default: 使用5秒的最大延遲參數。較高的值表示更具攻擊性的行為，較低的值則更好。
	 * 
	 * 在 Wikimedia Toolforge 上 edit wikidata，單線程均速最快約 1584 ms/edits。
	 * 
	 * @type {ℕ⁰:Natural+0}
	 * 
	 * @see https://www.mediawiki.org/wiki/Manual:Maxlag_parameter
	 *      https://www.mediawiki.org/wiki/API:Etiquette 禮儀
	 *      https://grafana.wikimedia.org/d/000000170/wikidata-edits
	 */
	wiki_API_query.default_maxlag = 5;

	// 用戶相關功能，避免延遲回應以使用戶等待。 The user is waiting online.
	// for manually testing only
	// delete CeL.wiki.query.default_maxlag;

	/**
	 * edit (modify / create) 時之編輯時間間隔。<br />
	 * default: 使用5秒 (5000 ms) 的編輯時間間隔。
	 * 
	 * @type {ℕ⁰:Natural+0}
	 */
	wiki_API_query.default_edit_time_interval = 5000;

	// 用戶相關功能，避免延遲回應以使用戶等待。 The user is waiting online.
	// Only respect maxlag. 因為數量太多，只好增快速度。
	// CeL.wiki.query.default_edit_time_interval = 0;
	// wiki_session.edit_time_interval = 0;

	// local rule
	// @see function setup_API_language()
	wiki_API_query.edit_time_interval = {
	// [[:ja:WP:bot]]
	// Botの速度は、おおよそ毎分 6 編集を限度としてください。
	// e.g., @ User contributions,
	// Due to high database server lag, changes newer than 30 seconds may
	// not be shown in this list.
	// 由於資料庫回應延遲，此清單可能不會顯示最近 30 秒內的變更。
	// Changes newer than 25 seconds may not be shown in this list.
	// 此清單可能不會顯示最近 25 秒內的變更。

	// [[w:ja:Wikipedia‐ノート:Bot#フラグ付きボットの速度制限変更提案]]
	// 「おおよそ毎分 6 編集」から「おおよそ毎分 12 編集」に緩和する
	// jawiki : 10000
	};

	/**
	 * 對於可以不用 XMLHttp 的，直接採 JSONP callback 法。
	 * 
	 * @type {Boolean}
	 */
	wiki_API_query.allow_JSONP = library_namespace.is_WWW(true) && false;

	/**
	 * URL last queried.<br />
	 * wiki_API_query.last_operation_time[API_URL] = {Date}last queried date
	 * 
	 * @type {Object}
	 */
	wiki_API_query.last_operation_time = Object.create(null);

	// @inner
	function join_pages() {
		return this.join('|');
	}

	/**
	 * 取得 page_data 之 title parameter。<br />
	 * e.g., page_data({pageid:8,title:'abc'}) → is_id?{pageid:8}:{title:'abc'}<br />
	 * page_data({title:'abc'}) → {title:'abc'}<br />
	 * 'abc' → {title:'abc'}<br />
	 * ['abc','def] → {title:['abc','def]}<br />
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * @param {Boolean}[multi]
	 *            page_data is {Array}multi-page_data
	 * @param {Boolean}[is_id]
	 *            page_data is page_id instead of page_data
	 * @param {String}[param_name]
	 *            param name. default: 'title' or 'titles'.
	 */
	wiki_API_query.title_param = function(page_data, multi, is_id, param_name) {
		var pageid;

		if (Array.isArray(page_data)) {
			// auto detect multiple pages
			if (multi === undefined) {
				multi = pageid && pageid.length > 1;
			}

			pageid = [];
			// 確認所有 page_data 皆有 pageid 屬性。
			if (page_data.every(function(page) {
				// {ℕ⁰:Natural+0}page.pageid
				if (page && page.pageid >= 0 && page.pageid < Infinity) {
					pageid.push(page.pageid);
					return true;
				}
			})) {
				// pageid = pageid.join('|');
				pageid.toString = join_pages;

			} else {
				if (library_namespace.is_Object(page_data)) {
					library_namespace.warn('wiki_API_query.title_param: '
							+ '看似有些非正規之頁面資料。');
					library_namespace.info('wiki_API_query.title_param: '
							+ '將採用 title 為主要查詢方法。');
				}
				// reset
				pageid = page_data.map(function(page) {
					// {String}title or {title:'title'}
					return (typeof page === 'object' ? page.title
					// assert: page && typeof page === 'string'
					: page) || '';
				});
				pageid.toString = join_pages;
				if (is_id) {
					// Warning: using .title
				} else {
					page_data = pageid;
					pageid = undefined;
				}
				library_namespace.debug((pageid || page_data).toString(), 2,
						'wiki_API_query.title_param');
			}

		} else if (library_namespace.is_Object(page_data)) {
			if (page_data.pageid > 0)
				// 有正規之 pageid 則使用之，以加速 search。
				pageid = page_data.pageid;
			else
				page_data = page_data.title;

		} else if (is_id !== false && typeof page_data === 'number'
		// {ℕ⁰:Natural+0}pageid should > 0.
		// pageid 0 回傳格式不同於 > 0 時。
		// https://www.mediawiki.org/w/api.php?action=query&prop=revisions&pageids=0
		&& page_data > 0 && page_data === (page_data | 0)) {
			pageid = page_data;

		} else if (!page_data) {
			library_namespace.error([ 'wiki_API_query.title_param: ', {
				// gettext_config:{"id":"invalid-title-$1"}
				T : [ 'Invalid title: %1', wiki_API.title_link_of(page_data) ]
			} ]);
			// console.warn(page_data);
		}

		var parameters = new library_namespace.Search_parameters();
		if (pageid !== undefined) {
			parameters[multi ? 'pageids' : 'pageid'] = pageid;
		} else if (page_data) {
			parameters[param_name || (multi ? 'titles' : 'title')] = page_data;
		}

		return parameters;
	};

	/**
	 * get id of page
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * @param {Boolean}[title_only]
	 *            get title only
	 * 
	 * @see get_page_title === wiki_API.title_of
	 */
	wiki_API_query.id_of_page = function(page_data, title_only) {
		if (Array.isArray(page_data)) {
			return page_data.map(function(page) {
				wiki_API_query.id_of_page(page, title_only);
			});
		}
		if (library_namespace.is_Object(page_data)) {
			// 有 pageid 則使用之，以加速。
			return !title_only && page_data.pageid || page_data.title;
		}

		if (!page_data) {
			library_namespace.error([ 'wiki_API_query.id_of_page: ', {
				// gettext_config:{"id":"invalid-title-$1"}
				T : [ 'Invalid title: %1', wiki_API.title_link_of(page_data) ]
			} ]);
		}
		return page_data;
	};

	// ------------------------------------------------------------------------

	if (false) {
		// 1.
		// 注意: callback 僅有在出錯時才會被執行!
		// callback() 必須採用下列方法來測試是否出問題!
		if (wiki_API.query.handle_error(data, error, callback)) {
			return;
		}
		// ...
		callback(data);

		// 2.
		error = wiki_API.query.handle_error(data, error);
		if (error) {
			// ...
			callback(data, error);
			return;
		}
		// ...
		callback(data);

		// TODO: 3.
		wiki_API.query(action, wiki_API.query.handle_error.bind({
			// on_error, on_OK 可省略。
			on_error : function(error) {
				library_namespace.error('function_name: ' + '...' + error);
			},
			on_OK : function(data) {
				// ...
			},
			callback : callback
		}));
	}

	function error_toString() {
		// TODO: 從 translatewiki 獲取翻譯。
		// e.g., for (this.code==='protectedpage'),
		// (this.info || this.message) ===
		// https://translatewiki.net/wiki/MediaWiki:Protectedpagetext/en
		return '[' + this.code + '] ' + (this.info || this.message);
	}

	wiki_API_query.error_toString = error_toString;

	/**
	 * 泛用先期處理程式。 response_handler(response)
	 */
	function handle_error(/* result of wiki_API.query() */data, error,
			callback_only_on_error) {
		// console.trace(arguments);
		if (library_namespace.is_debug(3)
		// .show_value() @ interact.DOM, application.debug
		&& library_namespace.show_value)
			library_namespace.show_value(data, 'wiki_API_query.handle_error');

		if (!error && !data) {
			error = new Error('No data get!');
		}

		if (error) {
			if (typeof callback_only_on_error === 'function') {
				callback_only_on_error(data, error);
			}
			return error;
		}

		if (data.warnings) {
			for ( var action in data.warnings) {
				library_namespace.warn('handle_error: '
						+ data.warnings[action]['*']);
			}
			console.trace(data.warnings);
		}

		// 檢查 MediaWiki 伺服器是否回應錯誤資訊。
		error = data.error;
		if (!error) {
			// No error, do not call callback_only_on_error()
			return;
		}

		error.toString = error_toString;

		// e.g., {code:'',info:'','*':''}
		if (error.code) {
			if (false) {
				library_namespace.error('wiki_API_query: ['
				//
				+ error.code + '] ' + error.info);
			}

			var message = error.toString();
			/**
			 * <code>

			{"error":{"code":"failed-save","info":"The save has failed.","messages":[{"name":"wikibase-api-failed-save","parameters":[],"html":{"*":"The save has failed."}},{"name":"abusefilter-warning","parameters":["Adding non-latin script language description in latin script","48"],"html":{"*":"..."}}],"*":"See https://www.wikidata.org/w/api.php for API usage. Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/postorius/lists/mediawiki-api-announce.lists.wikimedia.org/&gt; for notice of API deprecations and breaking changes."},"servedby":"mw1377"}

			</code>
			 */
			if (Array.isArray(error.messages)) {
				error.messages.forEach(function(_message) {
					if (!_message)
						return;
					message += ' [' + _message.name + ']';
					if (_message.html && typeof _message.html['*'] === 'string'
							&& _message.html['*'].length < 200) {
						message += ' ' + _message.html['*'];
					}
					if (Array.isArray(_message.parameters)
							&& _message.parameters.length > 0) {
						message += ' ' + JSON.stringify(_message.parameters);
					}
				});
			}

			error = new Error(message);
			error.message = message;
			error.code = data.error.code;
			error.data = data.error;
		}

		if (typeof callback_only_on_error === 'function') {
			callback_only_on_error(data, error);
		}
		return error;
	}

	wiki_API_query.handle_error = handle_error;

	// ------------------------------------------------------------------------

	// export 導出.

	return wiki_API_query;
}

});
// application.storage
/**
 * @name CeL function for storage.
 * @fileoverview 載入在不同執行環境與平台皆可使用的檔案操作功能公用API，以統一使用介面。
 * @since 2017/1/27
 */

'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.storage',

	// 依照不同執行環境與平台載入可用的操作功能。
	require : detect_require,

	// 設定不匯出的子函式。
	// no_extend : '*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	/**
	 * null module constructor
	 * 
	 * @class storage 的 functions
	 */
	var _// JSDT:_module_
	= function() {
		// null module constructor
	};

	/**
	 * for JSDT: 有 prototype 才會將之當作 Class
	 */
	_// JSDT:_module_
	.prototype = {};

	// -------------------------------------------------------------------------
	// 維護公用API。

	/**
	 * 公用API: 有些尚未完備，需要先確認。<code>

	// set/get current working directory. 設定/取得目前工作目錄。
	// current_directory() ends with path_separator
	CeL.storage.working_directory([change_to_directory])

	CeL.storage.fso_status(fso_path)
	CeL.storage.chmod(fso_path, options)
	CeL.storage.fso_exists(file_path)
	CeL.storage.file_exists(file_path)
	// get the contents of file
	CeL.storage.read_file(file_path, character_encoding = 'UTF-8').toString()
	CeL.storage.write_file(file_path, contents, character_encoding = 'UTF-8')
	CeL.storage.append_file(file_path, contents, character_encoding = 'UTF-8')
	// alias: delete
	CeL.storage.remove_file(file_path / directory_path_list)
	// alias: rename
	CeL.storage.move_file(move_from_path, move_to_path)
	CeL.storage.copy_file(copy_from_path, copy_to_path)

	// .folder_exists()
	CeL.storage.directory_exists(directory_path)
	// get the fso list (file and sub-directory list) of the directory.
	CeL.storage.read_directory(directory_path, options)
	CeL.storage.directory_is_empty(directory_path, options)
	// alias: mkdir
	CeL.storage.create_directory(directory_path / directory_path_list)
	// alias: delete. recursive: clean directory
	CeL.storage.remove_directory(directory_path / directory_path_list, recursive)
	// alias: rename
	CeL.storage.move_directory(move_from_path, move_to_path)
	CeL.storage.copy_directory(copy_from_path, copy_to_path)

	// 遍歷檔案系統，對每個 FSO 執行指定的動作。
	// TODO: 以 data.file.file_system_structure 代替 traverse_file_system()
	CeL.storage.traverse_file_system(directory_path, handler, filter or options)

	</code>
	 */

	// main module of OS adapted functions
	var storage_module;

	if (library_namespace.platform.nodejs) {
		library_namespace.debug('application.storage: use node.js functions.');
		storage_module = library_namespace.application.platform.nodejs;

		/** node.js file system module */
		var node_fs = require('fs');

		// _.current_directory()
		_.working_directory = storage_module.working_directory;

		// 警告: 此函數之API尚未規範。
		// .file_stats()
		// Not exist: will return false.
		_.fso_status = storage_module.fs_status;

		_.chmod = storage_module.chmod;

		_.file_exists = storage_module.file_exists;
		_.directory_exists = storage_module.directory_exists;

		_.read_file = storage_module.fs_read;

		_.write_file = storage_module.fs_write;

		_.copy_file = storage_module.fs_copySync;

		_.remove_file = _.remove_directory = function(path, recursive) {
			return storage_module.fs_remove(path, recursive);
		};

		_.move_directory = _.move_file =
		//
		_.move_fso = storage_module.fs_move;

		_.read_directory = function(directory_path, options) {
			try {
				// fso_name_list
				return node_fs.readdirSync(directory_path, options);
			} catch (e) {
				library_namespace.debug('Error to read directory: '
						+ directory_path);
			}
		};

		// directory exists and is empty
		_.directory_is_empty = function(directory_path, options) {
			var fso_name_list = _.read_directory(directory_path, options);
			return Array.isArray(fso_name_list) && fso_name_list.length === 0;
		};

		_.create_directory = storage_module.fs_mkdir;

		_.traverse_file_system = storage_module.traverse_file_system;

	} else if (this.has_ActiveX) {
		storage_module = library_namespace.application.OS.Windows.file;

		_.working_directory = storage_module.working_directory;

		_.read_file = storage_module.read_file;

		_.write_file = storage_module.write_file;

		// TODO: many

		// others done @ CeL.application.OS.Windows.file

	}

	// ----------------------------------------------------

	function write_file(file_path, data, options) {
		// options = library_namespace.new_options(options);
		if (library_namespace.is_Object(data)
		// JSON.stringify() 放在 try 外面。這樣出現 circular structure 的時候才知道要處理。
		&& /.json$/i.test(file_path)) {
			// 自動將資料轉成 string。
			try {
				data = JSON.stringify(data);
			} catch (e) {
				// data 可能很長，擺在首位。
				library_namespace.debug(data);
				library_namespace.error('write_file: Failed to write to '
						+ file_path + ': ' + e);
				library_namespace.error(e);
				throw e;
			}
		}

		if (options && options.changed_only) {
			var original_data = _.read_file(file_path, options);
			if (String(data) === String(original_data))
				return new Error('Nothing changed');
			// delete options.changed_only;
		}

		if (options && options.backup && _.file_exists(file_path)) {
			var backup_options = typeof options.backup === 'string' ? /[\\\/]/
					.test(options.backup) ? {
				directory : options.backup
			} : {
				directory_name : options.backup
			} : library_namespace.new_options(options.backup);

			if (!backup_options.directory && backup_options.directory_name) {
				// 設定備份目錄於與檔案相同的目錄下。
				backup_options.directory = file_path.replace(/[^\\\/]+$/, '')
						+ backup_options.directory_name;
			}

			var backup_file_path = backup_options.directory
			//
			? append_path_separator(backup_options.directory,
			// get file name only
			file_path.match(/[^\\\/]+$/)[0])
			// append file name extension
			: backup_options.extension ? file_path + backup_options.extension
			// preserve original file name extension
			: file_path.replace(/(\.\w+)$/,
					(backup_options.file_name_mark || '.bak') + '$1');

			// Create backup
			if (backup_options.directory)
				_.create_directory(backup_options.directory);
			_.remove_file(backup_file_path);
			_.move_file(file_path, backup_file_path);
		}

		return _.write_file__OS_adapted(file_path, data, options);
	}

	if (_.write_file) {
		_.write_file__OS_adapted = _.write_file;
		_.write_file = write_file;
	}

	// ----------------------------------------------------

	get_not_exist_filename.PATTERN = /( )?(?:\((\d{1,3})\))?(\.[^.]*)?$/;
	get_not_exist_filename.max_index = 999;

	// 找到下一個可用的檔案名稱。若是有重複的檔案存在，則會找到下一個沒有使用的編號為止。
	// recheck: 從頭檢查起。否則接續之前的序號檢查。
	// CeL.next_fso_NO_unused("n (2).txt") 先檢查 "n (2).txt", "n (3).txt"，
	// CeL.next_fso_NO_unused("n (2).txt", true) 先檢查 "n.txt", "n (1).txt"
	function get_not_exist_filename(move_to_path, recheck) {
		if (recheck) {
			move_to_path = move_to_path.replace(get_not_exist_filename.PATTERN,
			//
			function(all, prefix_space, index, extension) {
				return extension || '';
			});
		}
		while (_.fso_status(move_to_path)) {
			move_to_path = move_to_path.replace(
			// Get next index that can use.
			get_not_exist_filename.PATTERN, function(all, prefix_space, index,
					extension) {
				if (index > get_not_exist_filename.max_index) {
					throw new Error('get_not_exist_filename: The index '
							+ index + ' is too big! ' + move_to_path);
				}
				return (prefix_space || !index ? ' ' : '') + '('
						+ ((index | 0) + 1) + ')' + (extension || '');
			});
		}
		return move_to_path;
	}
	_.next_fso_NO_unused = get_not_exist_filename;
	_.move_fso_with_NO = function(from_path, to_path) {
		to_path = get_not_exist_filename(to_path);
		if (false)
			library_namespace.info(library_namespace.display_align([
					[ 'Move: ', from_path ], [ '→ ', move_to_path ] ]));
		_.move_fso(from_path, to_path);
	};

	// 從一個目錄或檔案列表中，找出第一個存在的。
	_.first_exist_fso = function(fso_list) {
		var first_exist;
		if (!Array.isArray(fso_list)) {
			fso_list = [ fso_list ];
		}
		if (fso_list.some(function(fso) {
			if (_.fso_status(fso)) {
				first_exist = fso;
				return true;
			}
		})) {
			return first_exist;
		}
	};

	// -------------------------------------------------------------------------
	// 一些與平台無關，且常用的檔案操作函數。或者簡單並且依賴於上面所列出操作的函數。
	// platform-independent model (PIM)
	// https://en.wikipedia.org/wiki/Platform-independent_model

	var path_separator = library_namespace.env.path_separator;

	// join path 自動加上最後的路徑分隔符號/目錄分隔符號。
	function append_path_separator(directory_path, file_name) {
		if (!directory_path) {
			return directory_path;
		}

		// assert: typeof directory_path === 'string'

		// 正規化成當前作業系統使用的路徑分隔符號。
		if (false) {
			directory_path = directory_path.replace(/[\\\/]/g, path_separator);
		}

		if (!/[\\\/]$/.test(directory_path)) {
			directory_path +=
			// 所添加的路徑分隔符號，以路徑本身的路徑分隔符號為主。
			directory_path.includes('/') ? '/'
			//
			: directory_path.includes('\\')
			// e.g., 'C:'
			|| directory_path.endsWith(':') ? '\\'
			//
			: path_separator;

		} else {
			// 去除末尾太多個、不需要也不正規的路徑分隔符號。
			directory_path = directory_path.replace(/[\\\/]{2,}$/, function(
					path_separators) {
				return path_separators[0];
			});
		}

		// library_namespace.simplify_path()
		if (file_name || file_name === 0)
			file_name = String(file_name).replace(/^(\.{0,2}[\\\/])+/, '');
		return file_name ? directory_path + file_name : directory_path;
	}

	_.append_path_separator = append_path_separator;

	function extract_wildcard(pattern, options) {
		var matched = library_namespace.simplify_path(pattern).match(
				/^([\s\S]*[\\\/])?([^\\\/]+)$/);
		if (!matched)
			return [ pattern ];

		var directory = matched[1] || '.' + path_separator;
		matched = matched[2];
		pattern = library_namespace.wildcard_to_RegExp(matched);
		// console.trace(pattern);

		var fso_list = library_namespace.read_directory(directory);
		// console.trace(fso_list);
		fso_list = fso_list.filter(function(fso_name) {
			// console.trace([ fso_name, pattern, pattern.test(fso_name) ]);
			return pattern.test(fso_name)
			// e.g., 包含 "[", "]" 時。
			|| fso_name === matched;
		});
		// console.trace(fso_list);

		if (!options || !options.get_name) {
			fso_list = fso_list.map(function(fso_name) {
				return directory + fso_name;
			});
		}
		return fso_list;
	}

	_.extract_wildcard = extract_wildcard;

	// 決定預設的主要下載目錄。
	// macOS dmg APP 中無法將檔案儲存在APP目錄下。
	// 另外安裝包也比較適合放在 home directory 之下。
	// test_current_directory: 先嘗試下載於當前目錄下。
	function determin_download_directory(test_current_directory) {
		var download_directory = test_current_directory
				&& library_namespace.platform.nodejs && require.main
				&& require.main.filename;
		if (download_directory
		// macOS dmg electron APP 中: require.main.filename 例如為
		// /Applications/work_crawler.app/Contents/Resources/app.asar/gui_electron/gui_electron.html
		//
		// Linux Mint 中 AppImage: require.main.filename 例如為
		// /tmp/.mount_work_cWtD4AY/resources/app.asar/gui_electron/gui_electron.html
		//
		// Linux Mint 中 electron: require.main.filename 例如為
		// .../work_crawler-master/gui_electron/gui_electron.html
		//
		// Windows 10 中 electron: require.main.filename 例如為
		// ...\work_crawler\gui_electron\gui_electron.html
		//
		// 2021/4/20 11:36:5 require.main===undefined @ new electron-builder
		// package
		// may use `module.filename`
		// in electron-builder package: e.g.,
		// "C:\Users\user_name\AppData\Local\Programs\work_crawler\resources\app.asar\gui_electron\gui_electron.html"
// NOT in electron-builder package: e.g.,
		// "/program/work_crawler/gui_electron/gui_electron.html"
		&& !/\.html?$/i.test(download_directory)) {
			download_directory = download_directory.match(/[^\\\/]+$/)[0]
					.replace(/\.js$/i, '');

		} else if (test_current_directory && (download_directory =
		// 避免 "/". e.g., macOS dmg APP 中 process.cwd() === '/'
		_.working_directory().replace(/[\\\/]+$/, ''))) {
			;

		} else if (download_directory = library_namespace.env.home) {
			if ([ 'Downloads', '下載' ]
			// '下載': Linux Mint
			.some(function(user_download_directory) {
				user_download_directory = append_path_separator(
						download_directory, user_download_directory);
				if (_.directory_exists(user_download_directory)) {
					download_directory = user_download_directory;
					return true;
				}
			})) {
				library_namespace.debug('預設的主要下載目錄設置於用戶預設之下載目錄下: '
						+ download_directory, 1, 'determin_download_directory');

			} else {
				library_namespace.debug(
				// 家目錄 @see os.userInfo().homedir , os.homedir()
				'預設的主要下載目錄設置於用戶個人文件夾  home directory 下: ' + download_directory,
						1, 'determin_download_directory');
			}

		} else {
			// 應該不會到這邊來。
			library_namespace
					.warn('determin_download_directory: Cannot determin main download directory!');
			download_directory = '.';
		}

		// main_directory 必須以 path separator 作結。
		download_directory = append_path_separator(download_directory);
		library_namespace.debug('預設的主要下載目錄: ' + download_directory, 1,
				'determin_download_directory');
		return download_directory;
	}

	_.determin_download_directory = determin_download_directory;

	return (_// JSDT:_module_
	);
}

});

function detect_require(library_namespace) {
	if (library_namespace.platform.nodejs) {
		return 'application.platform.nodejs.';
	}

	// 理想作法應該偵測JScript與COM環境。
	// @see CeL.application.OS.Windows.file
	this.has_ActiveX = typeof WScript === 'object'
			|| typeof ActiveXObject === 'function'
			|| typeof Server === 'object' && Server.CreateObject;

	if (this.has_ActiveX) {
		// TODO: application.OS.Windows.archive.
		return 'application.OS.Windows.file.';
	}

	library_namespace.error('It seems I am running on an unknown OS.');
}
// CeL.application.net.wiki.Flow
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): Flow, Structured
 *       Discussions
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2019/10/11 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.Flow',

	require : 'data.native.' + '|application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	//
	+ '|application.net.wiki.query.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	var is_api_and_title = wiki_API.is_api_and_title, normalize_title_parameter = wiki_API.normalize_title_parameter;

	// --------------------------------------------------------------------------------------------
	// Flow page support. Flow 功能支援。
	// [[mediawikiwiki:Extension:Flow/API]]
	// https://www.mediawiki.org/w/api.php?action=help&modules=flow

	// https://zh.wikipedia.org/w/api.php?action=query&prop=flowinfo&titles=Wikipedia_talk:Flow_tests
	// https://zh.wikipedia.org/w/api.php?action=query&prop=info&titles=Wikipedia_talk:Flow_tests
	// https://zh.wikipedia.org/w/api.php?action=flow&submodule=view-topiclist&page=Wikipedia_talk:Flow_tests&vtlformat=wikitext&utf8=1
	// .roots[0]
	// https://zh.wikipedia.org/w/api.php?action=flow&submodule=view-topic&page=Topic:sqs6skdav48d3xzn&vtformat=wikitext&utf8=1

	// https://www.mediawiki.org/w/api.php?action=flow&submodule=view-header&page=Talk:Sandbox&vhformat=wikitext&utf8=1
	// https://www.mediawiki.org/w/api.php?action=flow&submodule=view-topiclist&utf8=1&page=Talk:Sandbox

	/**
	 * get the infomation of Flow.
	 * 
	 * @param {String|Array}title
	 *            page title 頁面標題。可為話題id/頁面標題+話題標題。<br />
	 *            {String}title or [ {String}API_URL, {String}title or
	 *            {Object}page_data ]
	 * @param {Function}callback
	 *            回調函數。 callback({Object}page_data)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 */
	function Flow_info(title, callback, options) {
		var action = normalize_title_parameter(title, options);
		if (!action) {
			throw 'Flow_info: Invalid title: ' + wiki_API.title_link_of(title);
		}

		// [[mw:Extension:StructuredDiscussions/API#Detection]]
		// 'prop=flowinfo' is deprecated. use 'action=query&prop=info'.
		// The content model will be 'flow-board' if it's enabled.
		action[1] = 'action=query&prop=info&' + action[1];

		wiki_API.query(action, typeof callback === 'function'
		//
		&& function(data) {
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value)
				library_namespace.show_value(data, 'Flow_info: data');

			var error = data && data.error;
			// 檢查伺服器回應是否有錯誤資訊。
			if (error) {
				library_namespace.error('Flow_info: ['
				//
				+ error.code + '] ' + error.info);
				/**
				 * e.g., Too many values supplied for parameter 'pageids': the
				 * limit is 50
				 */
				if (data.warnings
				//
				&& data.warnings.query && data.warnings.query['*'])
					library_namespace.warn(data.warnings.query['*']);
				callback();
				return;
			}

			if (!data || !data.query || !data.query.pages) {
				library_namespace.warn('Flow_info: Unknown response: ['
				//
				+ (typeof data === 'object'
				//
				&& typeof JSON !== 'undefined'
				//
				? JSON.stringify(data) : data) + ']');
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data);
				callback();
				return;
			}

			// TODO: data.query.normalized=[{from:'',to:''},...]

			data = data.query.pages;
			var pages = [];
			for ( var pageid in data) {
				var page = data[pageid];
				pages.push(page);
			}

			// options.multi: 即使只取得單頁面，依舊回傳 Array。
			if (!options || !options.multi)
				if (pages.length <= 1) {
					if (pages = pages[0])
						pages.is_Flow = is_Flow(pages);
					library_namespace.debug('只取得單頁面 [[' + pages.title
					//
					+ ']]，將回傳此頁面資料，而非 Array。', 2, 'Flow_info');
				} else {
					library_namespace.debug('Get ' + pages.length
					//
					+ ' page(s)! The pages'
					//
					+ ' will all passed to callback as Array!'
					//
					, 2, 'Flow_info');
				}

			/**
			 * page 之 structure 將按照 wiki API 本身之 return！<br />
			 * <code>
			page_data = {ns,title,missing:'']}
			page_data = {pageid,ns,title,flowinfo:{flow:[]}}
			page_data = {pageid,ns,title,flowinfo:{flow:{enabled:''}}}
			 * </code>
			 */
			callback(pages);
		}, null, options);
	}

	/**
	 * 檢測 page_data 是否為 Flow 討論頁面系統。
	 * 
	 * other contentmodel: "MassMessageListContent"
	 * 
	 * @param {Object}page_data
	 *            page data got from wiki API.
	 * 
	 * @returns {Boolean}是否為 Flow 討論頁面。
	 */
	function is_Flow(page_data) {
		if ('contentmodel' in page_data) {
			// used in prop=info
			return page_data.contentmodel === 'flow-board';
		}

		var flowinfo = page_data &&
		// wiki_API.is_page_data(page_data) &&
		page_data.flowinfo;
		if (flowinfo) {
			// used in prop=flowinfo (deprecated)
			// flowinfo:{flow:{enabled:''}}
			return flowinfo.flow && ('enabled' in flowinfo.flow);
		}

		// e.g., 從 wiki_API.page 得到的 page_data
		if (page_data = wiki_API.content_of.revision(page_data))
			return (page_data.contentmodel || page_data.slots
					&& page_data.slots.main
					&& page_data.slots.main.contentmodel) === 'flow-board';
	}

	/** {Object}abbreviation 縮寫 */
	var Flow_abbreviation = {
		// https://www.mediawiki.org/w/api.php?action=help&modules=flow%2Bview-header
		// 關於討論板的描述。使用 .revision
		header : 'h',
		// https://www.mediawiki.org/w/api.php?action=help&modules=flow%2Bview-topiclist
		// 討論板話題列表。使用 .revisions
		topiclist : 'tl'
	};

	/**
	 * get topics of the page.
	 * 
	 * @param {String|Array}title
	 *            page title 頁面標題。可為話題id/頁面標題+話題標題。 {String}title or [
	 *            {String}API_URL, {String}title or {Object}page_data ]
	 * @param {Function}callback
	 *            回調函數。 callback({Object}topiclist)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 */
	function Flow_page(title, callback, options) {
		// 處理 [ {String}API_URL, {String}title or {Object}page_data ]
		if (!is_api_and_title(title)) {
			title = [ options[KEY_SESSION] && options[KEY_SESSION].API_URL,
					title ];
		}

		var page_data;
		if (wiki_API.is_page_data(title[1]))
			page_data = title[1];

		title[1] = 'page=' + encodeURIComponent(wiki_API.title_of(title[1]));

		if (options && options.redirects) {
			// 舊版毋須 '&redirects=1'，'&redirects' 即可。
			title[1] += '&redirects=1';
		}

		// e.g., { flow_view : 'header' }
		var view = options && options.flow_view
		//
		|| Flow_page.default_flow_view;
		title[1] = 'action=flow&submodule=view-' + view + '&v'
				+ (Flow_abbreviation[view] || view.charAt(0).toLowerCase())
				+ 'format=' + (options && options.format || 'wikitext') + '&'
				+ title[1];

		if (!title[0])
			title = title[1];

		wiki_API.query(title, typeof callback === 'function'
		//
		&& function(data) {
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value)
				library_namespace.show_value(data, 'Flow_page: data');

			var error = data && data.error;
			// 檢查伺服器回應是否有錯誤資訊。
			if (error) {
				library_namespace.error(
				//
				'Flow_page: [' + error.code + '] ' + error.info);
				callback(page_data);
				return;
			}

			// data =
			// { flow: { 'view-topiclist': { result: {}, status: 'ok' } } }
			if (!(data = data.flow)
			//
			|| !(data = data['view-' + view]) || data.status !== 'ok') {
				library_namespace.error(
				//
				'Flow_page: Error status [' + (data && data.status) + ']');
				callback(page_data);
				return;
			}

			if (page_data)
				// assert: data.result = { ((view)) : {} }
				Object.assign(page_data, data.result);
			else
				page_data = data.result[view];
			callback(page_data);
		}, null, options);
	}

	/** {String}default view to flow page */
	Flow_page.default_flow_view = 'topiclist';

	/**
	 * Create a new topic. 發新話題。 Reply to an existing topic.
	 * 
	 * @param {String|Array}title
	 *            page title 頁面標題。 {String}title or [ {String}API_URL,
	 *            {String}title or {Object}page_data ]
	 * @param {String}topic
	 *            新話題的標題文字。 {String}topic
	 * @param {String|Function}text
	 *            page contents 頁面內容。 {String}text or {Function}text(page_data)
	 * @param {Object}token
	 *            login 資訊，包含“csrf”令牌/密鑰。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @param {Function}[callback]
	 *            回調函數。 callback(title, error, result)
	 * 
	 * @see https://www.mediawiki.org/w/api.php?action=help&modules=flow%2Bnew-topic
	 *      https://www.mediawiki.org/w/api.php?action=help&modules=flow%2Breply
	 */
	function edit_topic(title, topic, text, token, options, callback) {
		// console.log(text);
		if (library_namespace.is_thenable(text)) {
			text.then(function(text) {
				edit_topic(title, topic, text, token, options, callback);
			}, function(error) {
				callback(title, error);
			});
			return;
		}

		var action = 'action=flow';
		// 處理 [ {String}API_URL, {String}title or {Object}page_data ]
		if (Array.isArray(title)) {
			action = [ title[0], action ];
			title = title[1];
		} else if (options[KEY_SESSION]) {
			action = [ options[KEY_SESSION].API_URL, action ];
		}

		if (wiki_API.is_page_data(title))
			title = title.title;
		// assert: typeof title === 'string' or title is invalid.
		if (title.length > 260) {
			// [nttopic] 話題標題已限制在 260 位元組內。
			// 自動評論與摘要的長度限制是260個字符。需要小心任何超出上述限定的東西將被裁剪掉。
			// 260 characters
			// https://github.com/wikimedia/mediawiki-extensions-Flow/blob/master/includes/Model/PostRevision.php
			// const MAX_TOPIC_LENGTH = 260;
			// https://github.com/wikimedia/mediawiki-extensions-Flow/blob/master/i18n/zh-hant.json
			library_namespace
					.warn('edit_topic: Title is too long and will be truncated: ['
							+ error.code + ']');
			title = title.slice(0, 260);
		}

		// default parameters
		var _options = {
			// notification_name : 'flow',
			submodule : 'new-topic',
			page : title,
			nttopic : topic,
			ntcontent : text,
			ntformat : 'wikitext'
		};

		edit_topic.copy_keys.forEach(function(key) {
			if (options[key])
				_options[key] = options[key];
		});

		// the token should be sent as the last parameter.
		_options.token = library_namespace.is_Object(token) ? token.csrftoken
				: token;

		wiki_API.query(action, typeof callback === 'function'
		//
		&& function(data) {
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value)
				library_namespace.show_value(data, 'edit_topic: data');

			var error = data && data.error;
			// 檢查伺服器回應是否有錯誤資訊。
			if (error) {
				library_namespace.error('edit_topic: ['
				//
				+ error.code + '] ' + error.info);
			} else if (!(data = data.flow)
			//
			|| !(data = data['new-topic']) || data.status !== 'ok') {
				// data = { flow: { 'new-topic': { status: 'ok',
				// workflow: '', committed: {} } } }
				error = 'edit_topic: Bad status ['
				//
				+ (data && data.status) + ']';
				library_namespace.error(error);
			}

			if (typeof callback === 'function') {
				// title.title === wiki_API.title_of(title)
				callback(title.title, error, data);
			}
		}, _options, options);
	}

	/** {Array}欲 copy 至 Flow edit parameters 之 keys。 */
	edit_topic.copy_keys = 'summary|bot|redirect|nocreate'.split(',');

	// ------------------------------------------------------------------------

	// export 導出.

	// CeL.wiki.Flow.*
	Object.assign(Flow_info, {
		is_Flow : is_Flow,
		page : Flow_page,
		edit : edit_topic
	});

	return Flow_info;
}

});
// CeL.application.net.wiki.page
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): page, revisions
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2019/10/10 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.page',

	require : 'data.native.'
	// CeL.data.fit_filter()
	+ '|data.'
	// CeL.date.String_to_Date(), Julian_day(), .to_millisecond(): CeL.data.date
	+ '|data.date.'
	// for library_namespace.directory_exists
	+ '|application.storage.'
	// for library_namespace.get_URL
	+ '|application.net.Ajax.' + '|application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	// for wiki_API.estimated_message()
	// + '|application.net.wiki.task.'
	//
	+ '|application.net.wiki.query.|application.net.wiki.Flow.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	var is_api_and_title = wiki_API.is_api_and_title, normalize_title_parameter = wiki_API.normalize_title_parameter, set_parameters = wiki_API.set_parameters;

	var
	/** node.js file system module */
	node_fs = library_namespace.platform.nodejs && require('fs');

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	// ------------------------------------------------------------------------

	// wiki.page() 範例。
	if (false) {
		CeL.wiki.page('史記', function(page_data) {
			CeL.show_value(page_data);
		});

		wiki.page('巴黎協議 (消歧義)', {
			query_props : 'pageprops'
		});
		// wiki.last_page

		// for "Date of page creation" 頁面建立日期 @ Edit history 編輯歷史 @ 頁面資訊
		// &action=info
		wiki.page('巴黎協議', function(page_data) {
			// e.g., '2015-12-17T12:10:18.000Z'
			console.log(CeL.wiki.content_of.edit_time(page_data));
		}, {
			rvdir : 'newer',
			rvprop : 'timestamp',
			rvlimit : 1
		});

		wiki.page('巴黎協議', function(page_data) {
			// {Date}page_data.creation_Date
			console.log(page_data);
		}, {
			get_creation_Date : true
		});

		// for many pages, e.g., more than 200, please use:
		wiki.work({
			// redirects : 1,
			each : for_each_page_data,
			last : last_operation,
			no_edit : true,
			page_options : {
				// multi : 'keep index',
				// converttitles : 1,
				redirects : 1
			}
		}, page_list);

		// 組合以取得資訊。
		wiki.page(title, function(page_data) {
			console.log(page_data);
		}, {
			prop : 'revisions|info',
			// rvprop : 'ids|timestamp',
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Binfo
			// https://www.mediawiki.org/wiki/API:Info
			additional_query : 'inprop=talkid|subjectid'
					+ '|preload|displaytitle|varianttitles'
		});

		// 組合以取得資訊。
		wiki.page(title, function(page_data) {
			console.log(page_data);
			if ('read' in page_data.actions)
				console.log('readable');
		}, {
			prop : 'info',
			// https://www.mediawiki.org/wiki/API:Info
			additional_query : 'inprop=intestactions&intestactions=read'
		// + '&intestactionsdetail=full'
		});

		// Get all summaries <del>and diffs</del>
		wiki.page('Heed (cat)', function(page_data) {
			console.log(page_data);
		}, {
			rvprop : 'ids|timestamp|comment',
			rvlimit : 'max'
		});
	}

	// assert: !!KEY_KEEP_INDEX === true
	var KEY_KEEP_INDEX = 'keep index',
	// assert: !!KEY_KEEP_ORDER === true
	KEY_KEEP_ORDER = 'keep order';

	// https://www.mediawiki.org/wiki/API:Query#Query_modules
	function setup_query_modules(title, callback, options) {
		var session = wiki_API.session_of_options(options);
		// console.trace(session.API_parameters.query);
		wiki_API_page.query_modules = Object.keys(session.API_parameters.query)
		// Should be [ 'prop', 'list', 'meta' ]
		.filter(function(key) {
			var parameters = session.API_parameters.query[key];
			return parameters.limit && parameters.submodules;
		});
		library_namespace.info([ 'setup_query_modules: ', {
			// gettext_config:{"id":"found-$2-query-modules-$1"}
			T : [ 'Found %2 query {{PLURAL:%2|module|modules}}: %1',
			// gettext_config:{"id":"Comma-separator"}
			wiki_API_page.query_modules.join(gettext('Comma-separator')),
			//
			wiki_API_page.query_modules.length ]
		} ]);

		wiki_API_page.apply(this, arguments);
	}

	/**
	 * 讀取頁面內容，取得頁面源碼。可一次處理多個標題。
	 * 
	 * 前文有 wiki.page() 範例。
	 * 
	 * 注意: 用太多 CeL.wiki.page() 並行處理，會造成 error.code "EMFILE"。
	 * 
	 * TODO:
	 * https://www.mediawiki.org/w/api.php?action=help&modules=expandtemplates
	 * or https://www.mediawiki.org/w/api.php?action=help&modules=parse
	 * 
	 * @example <code>

	// 前文有 wiki.page() 範例。

	</code>
	 * 
	 * @param {String|Array}title
	 *            title or [ {String}API_URL, {String}title or {Object}page_data ]
	 * @param {Function}[callback]
	 *            回調函數。 callback(page_data, error) { page_data.title; var
	 *            content = CeL.wiki.content_of(page_data); }
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
	 */
	function wiki_API_page(title, callback, options) {
		var action = {
			action : 'query'
		};
		if (wiki_API.need_get_API_parameters(action, options,
				setup_query_modules, arguments)) {
			return;
		}

		if (typeof callback === 'object' && options === undefined) {
			// shift arguments
			options = callback;
			callback = undefined;
		}

		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		options = library_namespace.new_options(options);

		if (false && library_namespace.is_Set(title)) {
			title = Array.from(title);
		}

		// console.log('title: ' + JSON.stringify(title));
		if (options.get_creation_Date) {
			// 警告:僅適用於單一頁面。
			wiki_API_page(title, function(page_data, error) {
				if (error || !wiki_API.content_of.page_exists(page_data)) {
					// console.trace('error? 此頁面不存在/已刪除。');
					callback(page_data, error);
					return;
				}

				// e.g., '2015-12-17T12:10:18.000Z'
				// page_data.revisions[0].timestamp;

				page_data.creation_Date
				// CeL.wiki.content_of.edit_time(page_data)
				= wiki_API.content_of.edit_time(page_data);
				if (typeof options.get_creation_Date === 'function') {
					options.get_creation_Date(page_data.creation_Date,
							page_data);
				}
				if (false) {
					console.log(page_data.creation_Date.format('%Y/%m/%d'));
				}

				delete options.get_creation_Date;
				// 去掉僅有timestamp，由舊至新的.revisions。
				delete page_data.revisions;
				// 若有需要順便取得頁面內容，需要手動設定如:
				// {get_creation_Date:true,prop:'revisions'}
				if (('query_props' in options) || ('prop' in options)) {
					wiki_API_page(title, function(_page_data, error) {
						// console.trace(title);
						callback(Object.assign(page_data, _page_data), error);
					}, options);
				} else {
					// console.trace(title);
					callback(page_data);
				}

			}, {
				rvdir : 'newer',
				rvprop : 'timestamp',
				rvlimit : 1
			});
			return;
		}

		if (options.query_props) {
			var query_props = options.query_props, page_data,
			//
			get_properties = function(page) {
				if (page) {
					if (page_data)
						Object.assign(page_data, page);
					else
						page_data = page;
				}
				var prop;
				while (query_props.length > 0
				//
				&& !(prop = query_props.shift()))
					;

				if (!prop || page_data
				//
				&& (('missing' in page_data) || ('invalid' in page_data))) {
					// 此頁面不存在/已刪除。
					callback(page_data);
				} else {
					library_namespace.debug('Get property: [' + prop + ']', 1,
							'wiki_API_page');
					options.prop = prop;
					wiki_API_page(title, get_properties, options);
				}
			};

			delete options.query_props;
			if (typeof query_props === 'string') {
				query_props = query_props.split('|');
			}
			if (Array.isArray(query_props)) {
				if (!options.no_content)
					query_props.push('revisions');
				get_properties();
			} else {
				library_namespace.error([ 'wiki_API_page: ', {
					// gettext_config:{"id":"invalid-parameter-$1"}
					T : [ 'Invalid parameter: %1', '.query_props' ]
				} ]);
				throw new Error('wiki_API_page: '
				// gettext_config:{"id":"invalid-parameter-$1"}
				+ gettext('Invalid parameter: %1', '.query_props'));
			}
			return;
		}

		// console.trace(title);
		action = normalize_title_parameter(title, options);
		// console.trace(action);
		if (!action) {
			library_namespace.error([ 'wiki_API_page: ', {
				// gettext_config:{"id":"invalid-title-$1"}
				T : [ 'Invalid title: %1', wiki_API.title_link_of(title) ]
			} ]);
			// gettext_config:{"id":"invalid-title-$1"}
			callback(undefined, gettext('Invalid title: %1', wiki_API
					.title_link_of(title)));
			return;
			throw new Error('wiki_API_page: '
			// gettext_config:{"id":"invalid-title-$1"}
			+ gettext('Invalid title: %1', wiki_API.title_link_of(title)));
		}

		// console.log(action);

		if (!wiki_API_page.query_modules
		//
		|| !wiki_API_page.query_modules.some(function(module) {
			return options[module];
		})) {
			options.prop = 'revisions';
		}

		var get_content = options.prop
		// {String|Array}
		&& options.prop.includes('revisions');
		if (get_content) {
			// 2019 API:
			// https://www.mediawiki.org/wiki/Manual:Slot
			// https://www.mediawiki.org/wiki/API:Revisions
			action[1].rvslots = options.rvslots || 'main';

			// 處理數目限制 limit。單一頁面才能取得多 revisions。多頁面(≤50)只能取得單一 revision。
			// https://www.mediawiki.org/w/api.php?action=help&modules=query
			// titles/pageids: Maximum number of values is 50 (500 for bots).
			if ('rvlimit' in options) {
				if (options.rvlimit > 0 || options.rvlimit === 'max')
					action[1].rvlimit = options.rvlimit;
			} else if (!action[1].titles && !action[1].pageids) {
				// assert: action[1].title || action[1].pageid
				// || action[1].pageid === 0
				// default: 僅取得單一 revision。
				action[1].rvlimit = 1;
			}

			// Which properties to get for each revision
			get_content = Array.isArray(options.rvprop)
			//
			&& options.rvprop.join('|')
			//
			|| options.rvprop || wiki_API_page.default_rvprop;

			action[1].rvprop = get_content;

			get_content = get_content.includes('content');
		}

		// 自動搜尋/轉換繁簡標題。
		if (!('converttitles' in options)) {
			options.converttitles = wiki_API.site_name(options, {
				get_all_properties : true
			}).language;
			if (!wiki_API_page.auto_converttitles
					.includes(options.converttitles)) {
				delete options.converttitles;
			}
		}

		// Which properties to get for the queried pages
		// 輸入 prop:'' 或再加上 redirects:1 可以僅僅確認頁面是否存在，以及頁面的正規標題。
		if (Array.isArray(options.prop)) {
			options.prop = options.prop.join('|');
		}

		for ( var parameter in {
			// e.g., rvdir=newer
			// Get first revisions
			rvdir : true,
			rvcontinue : true,
			converttitles : true,
			// e.g., prop=info|revisions
			// e.g., prop=pageprops|revisions
			// 沒 .pageprops 的似乎大多是沒有 Wikidata entity 的？
			prop : true
		}) {
			if (parameter in options) {
				action[1][parameter] = options[parameter];
			}
		}

		set_parameters(action, options);

		action[1].action = 'query';

		library_namespace.debug('get url token: ' + action, 5, 'wiki_API_page');
		// console.trace([ action, options ]);

		var post_data = library_namespace.Search_parameters();
		// 將<s>過長的</s>標題列表改至 POST，預防 "414 Request-URI Too Long"。
		// https://github.com/kanasimi/wikibot/issues/32
		// 不同 server 可能有不同 GET 請求長度限制。不如直接改成 POST。
		if (Array.isArray(action[1].pageids)) {
			post_data.pageids = action[1].pageids;
			delete action[1].pageids;
		}
		if (Array.isArray(action[1].titles)) {
			post_data.titles = action[1].titles;
			delete action[1].titles;
		}

		// console.trace(wiki_API.session_of_options(options));
		// console.trace(action);
		wiki_API.query(action, typeof callback === 'function'
		//
		&& function process_page(data) {
			// console.trace('Get page: ' + title);
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value) {
				library_namespace.show_value(data, 'wiki_API_page: data');
			}

			var error = data && data.error;
			// 檢查 MediaWiki 伺服器是否回應錯誤資訊。
			if (error) {
				library_namespace.error('wiki_API_page: ['
				//
				+ error.code + '] ' + error.info);
				/**
				 * e.g., Too many values supplied for parameter 'pageids': the
				 * limit is 50
				 */
				if (data.warnings && data.warnings.query
				//
				&& data.warnings.query['*']) {
					library_namespace.warn(
					//
					'wiki_API_page: ' + data.warnings.query['*']);
				}
				if (error.code === 'toomanyvalues' && error.limit > 0) {
					var session = wiki_API.session_of_options(options);
					if (session && !(session.slow_query_limit < error.limit)) {
						library_namespace.warn([ 'wiki_API_page: ', {
							// gettext_config:{"id":"reduce-the-maximum-number-of-pages-per-fetch-to-a-maximum-of-$1-pages"}
							T : [ '調降取得頁面的上限，改成每次最多 %1 個頁面。', error.limit ]
						} ]);
						// https://www.mediawiki.org/w/api.php
						// slow queries: 500; fast queries: 5000
						// The limits for slow queries also apply to multivalue
						// parameters.
						session.slow_query_limit = error.limit;
					}

					// 嘗試自動將所要求的 query 切成小片。
					// TODO: 此功能應放置於 wiki_API.query() 中。
					if (options.try_cut_slice && Array.isArray(title)
					// 2: 避免 is_api_and_title(title)
					&& title.length > 2) {
						// TODO: 將 title 切成 slice，重新 request。
						options.multi = true;
						options.slice_size = error.limit;
						// console.trace(title);
						wiki_API_page(title, callback, options);
						return;
					}
				}
				callback(data, error);
				return;
			}

			if (false && data.warnings && data.warnings.result
			/**
			 * <code>
			// e.g., 2021/5/23:
			{
			  continue: { rvcontinue: '74756|83604874', continue: '||' },
			  warnings: {
			    result: {
			      '*': 'This result was truncated because it would otherwise be larger than the limit of 12,582,912 bytes.'
			    }
			  },
			  query: {
			    pages: {
			      '509': [Object],
			      ...
			    }
			  }
			}
			</code>
			 * limit: 12 MB. 此時應該有 .continue。
			 */
			&& data.warnings.result['*']) {
				if (false && data.warnings.result['*'].includes('truncated'))
					data.truncated = true;
				library_namespace.warn(
				//
				'wiki_API_page: ' + data.warnings.result['*']);
			}

			if (!data || !data.query
			// assert: data.cached_response && data.query.pages
			|| !data.query.pages && !data.query.redirects) {
				// e.g., 'wiki_API_page: Unknown response:
				// [{"batchcomplete":""}]'
				library_namespace.warn([ 'wiki_API_page: ', {
					// gettext_config:{"id":"unknown-api-response-$1"}
					T : [ 'Unknown API response: %1', (typeof data === 'object'
					//
					&& typeof JSON !== 'undefined'
					//
					? JSON.stringify(data) : data) ]
				} ]);
				// library_namespace.set_debug(6);
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data);
				callback(undefined, 'Unknown response');
				return;
			}

			var page_list = [],
			//
			index_of_title = page_list.index_of_title = Object.create(null),
			// library_namespace.storage.write_file()
			page_cache_prefix = library_namespace.write_file
			//
			&& options.page_cache_prefix;

			var continue_id;
			if ('continue' in data) {
				// console.trace(data['continue']);
				// page_list['continue'] = data['continue'];
				if (data['continue']
				//
				&& typeof data['continue'].rvcontinue === 'string'
				//
				&& (continue_id = data['continue'].rvcontinue
				// assert: page_list['continue'].rvcontinue = 'date|oldid'。
				.match(/\|([1-9]\d*)$/))) {
					continue_id = Math.floor(continue_id[1]);
				}
				if (false && data.truncated)
					page_list.truncated = true;

			}

			// ------------------------

			// https://zh.wikipedia.org/w/api.php?action=query&prop=info&converttitles=zh&titles=A&redirects=&maxlag=5&format=json&utf8=1
			// 2020/10/9: for [[A]]￫[[B]]￫[[A]], we will get
			// {"batchcomplete":"","query":{"redirects":[{"from":"A","to":"B"},{"from":"B","to":"A"}]}}

			var redirect_from;
			if (data.query.redirects) {
				page_list.redirects = data.query.redirects;
				if (Array.isArray(data.query.redirects)) {
					page_list.redirect_from
					// 記錄經過重導向的標題。
					= redirect_from = Object.create(null);
					data.query.redirects.forEach(function(item) {
						redirect_from[item.to] = item.from;
					});

					if (!data.query.pages) {
						data.query.pages = {
							title : data.query.redirects[0].from
						};
						if (data.query.pages.title ===
						//
						redirect_from[data.query.redirects[0].to]) {
							library_namespace.warn([ 'wiki_API_page: ', {
								// gettext_config:{"id":"circular-redirect-$1↔$2"}
								T : [ 'Circular redirect: %1↔%2',
								//
								wiki_API.title_link_of(
								//
								data.query.pages.title),
								//
								wiki_API.title_link_of(
								//
								data.query.redirects[0].to) ]
							} ]);
							data.query.pages.redirect_loop = true;
						}
						data.query.pages = {
							'' : data.query.pages
						};
					}
				}
			}

			var convert_from;
			if (data.query.converted) {
				page_list.converted = data.query.converted;
				if (Array.isArray(data.query.converted)) {
					page_list.convert_from = convert_from
					// 記錄經過轉換的標題。
					= Object.create(null);
					data.query.converted.forEach(function(item) {
						convert_from[item.to] = item.from;
					});
				}
			}
			if (data.query.normalized) {
				page_list.normalized = data.query.normalized;
				// console.log(data.query.normalized);
				page_list.convert_from = convert_from
				// 記錄經過轉換的標題。
				|| (convert_from = Object.create(null));
				data.query.normalized.forEach(function(item) {
					convert_from[item.to] = item.from;
				});
			}

			// ------------------------

			var pages = data.query.pages;
			// console.log(options);
			var need_warn = /* !options.no_warning && */!options.allow_missing
			// 其他 .prop 本來就不會有內容。
			&& get_content;

			for ( var pageid in pages) {
				var page_data = pages[pageid];
				if (!wiki_API.content_of.has_content(page_data)) {

					if (continue_id && continue_id === page_data.pageid) {
						// 找到了 page_list.continue 所指之 index。
						// effect length
						page_list.OK_length = page_list.length;
						// 當過了 continue_id 之後，表示已經被截斷，則不再警告。
						need_warn = false;
					}

					if (need_warn) {
						/**
						 * <code>
						{"title":"","invalidreason":"The requested page title is empty or contains only the name of a namespace.","invalid":""}
						</code>
						 */
						library_namespace.warn([ 'wiki_API_page: ', {
							T : [ 'invalid' in page_data
							// gettext_config:{"id":"invalid-title-$1"}
							? 'Invalid title: %1'
							// 此頁面不存在/已刪除。Page does not exist. Deleted?
							: 'missing' in page_data
							// gettext_config:{"id":"does-not-exist"}
							? 'Does not exist: %1'
							// gettext_config:{"id":"no-content"}
							: 'No content: %1',
							//
							(page_data.title
							//
							? wiki_API.title_link_of(page_data)
							//
							: 'id ' + page_data.pageid)
							//
							+ (page_data.invalidreason
							//
							? '. ' + page_data.invalidreason : '') ]
						} ]);
					}

				} else if (page_cache_prefix) {
					library_namespace.write_file(page_cache_prefix
					//
					+ page_data.title + '.json',
					/**
					 * 寫入cache。
					 * 
					 * 2016/10/28 21:44:8 Node.js v7.0.0 <code>
					DeprecationWarning: Calling an asynchronous function without callback is deprecated.
					</code>
					 */
					JSON.stringify(pages), wiki_API.encoding, function() {
						// 因為此動作一般說來不會影響到後續操作，因此採用同時執行。
						library_namespace.debug(
						// gettext_config:{"id":"the-cache-file-is-saved"}
						'The cache file is saved.', 1, 'wiki_API_page');
					});
				}

				if (redirect_from && redirect_from[page_data.title]
				//
				&& !page_data.redirect_loop) {
					page_data.original_title = page_data.redirect_from
					// .from_title, .redirect_from_title
					= redirect_from[page_data.title];
					// e.g., "研究生教育" redirects to → "學士後"
					// redirects to → "深造文憑"
					while (redirect_from[page_data.original_title]) {
						page_data.original_title
						//
						= redirect_from[page_data.original_title];
					}
				}
				// 可以利用 page_data.convert_from
				// 來判別標題是否已經過繁簡轉換與 "_" → " " 轉換。
				if (convert_from) {
					if (convert_from[page_data.title]) {
						page_data.convert_from
						// .from_title, .convert_from_title
						= convert_from[page_data.title];
						// 注意: 這邊 page_data.original_title
						// 可能已設定為 redirect_from[page_data.title]
						if (!page_data.original_title
						// 通常 wiki 中，redirect_from 會比 convert_from 晚處理，
						// 照理來說不應該會到 !convert_from[page_data.original_title] 這邊，
						// 致使重設 `page_data.original_title`？
						|| !convert_from[page_data.original_title]) {
							page_data.original_title = page_data.convert_from;
						}
					}
					// e.g., "人民法院_(消歧义)" converted → "人民法院 (消歧义)"
					// converted → "人民法院 (消歧義)" redirects → "人民法院"
					while (convert_from[page_data.original_title]) {
						page_data.original_title
						// .from_title, .convert_from_title
						= convert_from[page_data.original_title];
					}
				}
				index_of_title[page_data.title] = page_list.length;
				page_list.push(page_data);
			}

			if (data.warnings && data.warnings.query
			//
			&& typeof data.warnings.query['*'] === 'string') {
				if (need_warn) {
					library_namespace.warn(
					//
					'wiki_API_page: ' + data.warnings.query['*']);
					// console.log(data);
				}
				/**
				 * 2016/6/27 22:23:25 修正: 處理當非 bot 索求過多頁面時之回傳。<br />
				 * e.g., <code>
				 * { batchcomplete: '', warnings: { query: { '*': 'Too many values supplied for parameter \'pageids\': the limit is 50' } },
				 * query: { pages: { '0000': [Object],... '0000': [Object] } } }
				 * </code>
				 */
				if (data.warnings.query['*'].includes('the limit is ')) {
					// TODO: 注記此時真正取得之頁面數。
					// page_list.OK_length = page_list.length;
					page_list.truncated = true;
				}
			}

			// options.multi: 明確指定即使只取得單頁面，依舊回傳 Array。
			if (!options.multi) {
				if (page_list.length <= 1) {
					// e.g., pages: { '1850031': [Object] }
					library_namespace.debug('只取得單頁面 '
					//
					+ wiki_API.title_link_of(page_list)
					//
					+ '，將回傳此頁面內容，而非 Array。', 2, 'wiki_API_page');
					page_list = page_list[0];
					if (is_api_and_title(title, true)) {
						title = title[1];
					}
					if (!options.do_not_import_original_page_data
					//
					&& wiki_API.is_page_data(title)) {
						// 去除掉可能造成誤判的錯誤標記 'missing'。
						// 即使真有錯誤，也由page_list提供即可。
						if ('missing' in title) {
							delete title.missing;
							// 去掉該由page_list提供的資料。因為下次呼叫時可能會被利用到。例如之前找不到頁面，.pageid被設成-1，下次呼叫被利用到就會出問題。
							// ** 照理說這兩者都必定會出現在page_list。
							// delete title.pageid;
							// delete title.title;
						}
						// import data to original page_data. 盡可能多保留資訊。
						page_list = Object.assign(title, page_list);
					}
					if (page_list && get_content
					//
					&& (page_list.is_Flow = wiki_API.Flow.is_Flow(page_list))
					// e.g., { flow_view : 'header' }
					&& options.flow_view) {
						// Flow_page()
						wiki_API.Flow.page(page_list, callback, options);
						return;
					}

				} else {
					library_namespace.debug('Get ' + page_list.length
					//
					+ ' page(s)! The pages will all '
					//
					+ 'passed to the callback as Array!', 2, 'wiki_API_page');
				}

			} else if ((options.multi === KEY_KEEP_INDEX
			// options.keep_order
			|| options.multi === KEY_KEEP_ORDER)
			//
			&& is_api_and_title(title, true)
			//
			&& Array.isArray(title[1]) && title[1].length >= 2) {
				var order_hash = title[1].map(function(page_data) {
					return options.is_id ? page_data.pageid
					//
					|| page_data : wiki_API.title_of(page_data);
				}).to_hash(), ordered_list = [];
				// console.log(title[1].join('|'));
				// console.log(order_hash);

				if (false) {
					// another method
					// re-sort page list
					page_list.sort(function(page_data_1, page_data_2) {
						return order_hash[page_data_1.original_title
						//
						|| page_data_1.title]
						//
						- order_hash[page_data_2.original_title
						//
						|| page_data_2.title];
					});
					console.log(page_list.map(function(page_data) {
						return page_data.original_title
						//
						|| page_data.title;
					}).join('|'));
					throw new Error('Reorder the list of pages');
				}

				// 維持頁面的順序與輸入的相同。
				page_list.forEach(function(page_data) {
					var original_title = page_data.original_title
					//
					|| page_data.title;
					if (original_title in order_hash) {
						ordered_list[order_hash[original_title]] = page_data;
					} else {
						console.log(order_hash);
						console.log(original_title);
						console.log('-'.repeat(70));
						console.log('Page list:');
						console.log(title[1].map(function(page_data) {
							return wiki_API.title_of(page_data);
						}).join('\n'));
						console.log(page_data);
						throw new Error('wiki_API_page: 取得了未指定的頁面: '
						//
						+ wiki_API.title_link_of(original_title));
					}
				});
				// 緊湊化，去掉沒有設定到的頁面。
				if (options.multi === KEY_KEEP_ORDER) {
					ordered_list = ordered_list.filter(function(page_data) {
						return !!page_data;
					});
				}

				// copy attributes form original page_list
				[ 'OK_length', 'truncated', 'normalized', 'index_of_title',
				//
				'redirects', 'redirect_from', 'converted', 'convert_from' ]
				// 需要注意page_list可能帶有一些已經設定的屬性值，因此不能夠簡單的直接指派到另外一個值。
				.forEach(function(attribute_name) {
					if (attribute_name in page_list) {
						ordered_list[attribute_name]
						//
						= page_list[attribute_name];
					}
				});
				page_list = ordered_list;
			}

			if (options.save_response) {
				// 附帶原始回傳查詢資料。
				// save_data, query_data
				// assert: !('response' in page_list)
				page_list.response = data;
			}

			if (options.expandtemplates) {
				if (options.titles_left)
					throw new Error('There are options.titles_left!');

				// 需要expandtemplates的情況。
				if (!Array.isArray(page_list)) {
					// TODO: test
					var revision = wiki_API.content_of.revision(page_list);
					// 出錯時 revision 可能等於 undefined。
					if (!revision) {
						callback(page_list);
						return;
					}
					wiki_API_expandtemplates(
					//
					wiki_API.revision_content(revision), function() {
						callback(page_list);
					}, Object.assign({
						page : page_list,
						title : page_data.title,
						revid : revision.revid,
						includecomments : options.includecomments,

						session : options[KEY_SESSION]
					}, options.expandtemplates));
					return;
				}

				// TODO: test
				page_list.run_serial(function(run_next, page_data, index) {
					var revision = wiki_API.content_of.revision(page_data);
					wiki_API_expandtemplates(
					//
					wiki_API.revision_content(revision),
					//
					run_next, Object.assign({
						page : page_data,
						title : page_data.title,
						revid : revision && revision.revid,
						includecomments : options.includecomments,

						session : options[KEY_SESSION]
					}, options.expandtemplates));
				}, function() {
					callback(page_list);
				});
				return;
			}

			if (options.titles_left) {
				if (options.titles_buffer) {
					options.titles_buffer.append(page_list);
					page_list.truncate();
					library_namespace.error(
					//
					'wiki_API_page: Lost properties: '
					//
					+ Object.keys(page_list).join(', '));
				} else {
					options.titles_buffer = page_list;
				}
				if (false) {
					console.trace('get next page slices ('
					//
					+ options.slice_size + '): ' + options.titles_left);
				}
				wiki_API_page(null, callback, options);
				return;
			}

			// 一般正常回傳。

			if (false && page_list && page_list.title) {
				console.trace('Get page and callback: ' + page_list.title);
			}
			if (options.titles_buffer)
				page_list = options.titles_buffer.append(page_list);
			// page 之 structure 將按照 wiki API 本身之 return！
			// page_data = {pageid,ns,title,revisions:[{timestamp,'*'}]}
			callback(page_list);

		}, post_data, options);
	}

	// default properties of revisions
	// ids, timestamp 是為了 wiki_API_edit.set_stamp 檢查編輯衝突用。
	wiki_API_page.default_rvprop = 'ids|timestamp|content';

	// @see https://www.mediawiki.org/w/api.php?action=help&modules=query
	wiki_API_page.auto_converttitles = 'zh,gan,iu,kk,ku,shi,sr,tg,uz'
			.split(',');

	// ------------------------------------------------------------------------

	/**
	 * 回溯看看是哪個 revision 增加/刪除了標的文字。
	 * 
	 * @param {String}title
	 *            page title
	 * @param to_search
	 *            filter / text to search.<br />
	 *            to_search(diff, revision, old_revision):<br />
	 *            `diff` 為從舊的版本 `old_revision` 改成 `revision` 時的差異。
	 * @param {Function}callback
	 *            回調函數。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 */
	function tracking_revisions(title, to_search, callback, options) {
		options = Object.assign({
			rvlimit : 20
		}, options, {
			save_response : true
		});

		if (options.search_diff && typeof to_search !== 'function') {
			throw new TypeError(
					'Only {Function}filter to search for .search_diff=true!');
		}

		function search(revision, old_revision) {
			var value = revision.revid ? wiki_API.revision_content(revision)
					: revision;

			if (!value)
				return;

			if (typeof to_search === 'string')
				return value.includes(to_search);

			if (options.search_diff)
				return to_search([ , value ], revision, old_revision);

			// return found;
			return library_namespace.fit_filter(to_search, value);
		}

		var newer_revision, revision_count = 0;
		function search_revisions(page_data, error) {
			if (error) {
				callback(null, page_data, error);
				return;
			}

			var index = 0, revisions = page_data.revisions;
			if (!newer_revision) {
				newer_revision = revisions[index++];
				newer_revision.lines = wiki_API
						.revision_content(newer_revision).split('\n');
				// console.trace([search(newer_revision),options]);
				if (!options.search_diff && !options.search_deleted
						&& !search(newer_revision)) {
					// 最新版本就已經不符合需求。
					callback(null, page_data);
					return;
				}
			}

			// console.log(revisions.length);
			while (index < revisions.length) {
				var this_revision = revisions[index++];
				// MediaWiki using line-diff
				this_revision.lines = wiki_API.revision_content(this_revision)
						.split('\n');
				var diff_list = newer_revision.diff_list
				//
				= library_namespace.LCS(this_revision.lines,
				//
				newer_revision.lines, {
					diff : true,
					// MediaWiki using line-diff
					line : true,
					treat_as_String : true
				});

				var found = diff_list.some(function(diff) {
					// console.trace(diff);
					if (options.search_diff) {
						return to_search(diff, newer_revision, this_revision);
					}
					// var removed_text = diff[0], added_text = diff[1];
					return search(diff[options.search_deleted ? 0 : 1])
					// 警告：在 line_mode，"A \n"→"A\n" 的情況下，
					// "A" 會同時出現在增加與刪除的項目中，此時必須自行檢測排除。
					&& !search(diff[options.search_deleted ? 1 : 0]);
				});
				if (options.revision_post_processor) {
					options.revision_post_processor(newer_revision);
				}
				delete newer_revision.lines;
				// console.trace([this_revision.revid,found,search(this_revision)])
				if (found) {
					delete this_revision.lines;
					// console.log(diff_list);
					callback(newer_revision, page_data);
					return;
				}
				newer_revision = this_revision;
			}
			delete this_revision.lines;

			revision_count += page_data.revisions;
			if (revision_count > options.limit) {
				// not found
				callback(null, page_data);
				return;
			}

			// console.trace(page_data.response);
			// console.trace(page_data.response['continue']);
			var rvcontinue = page_data.response['continue'];
			if (rvcontinue) {
				options.rvcontinue = rvcontinue.rvcontinue;

				// console.trace(options);
				library_namespace.debug('tracking_revisions: search next '
						+ options.rvlimit
						+ (options.limit > 0 ? '/' + options.limit : '')
						+ ' revisions...', 2);
				get_pages();
				return;
			}

			// assert: 'batchcomplete' in page_data.response

			// if no .rvcontinue, append a null revision,
			// and do not search continued revisions.
			if (!options.search_deleted && search(newer_revision)) {
				callback(newer_revision, page_data);
			} else {
				// not found
				callback(null, page_data);
			}
		}

		function get_pages() {
			wiki_API.page(title, search_revisions, options);
		}

		get_pages();
	}

	wiki_API.tracking_revisions = tracking_revisions;

	// ------------------------------------------------------------------------

	// 強制更新快取/清除緩存並重新載入/重新整理/刷新頁面。
	// @see https://www.mediawiki.org/w/api.php?action=help&modules=purge
	// 極端做法：[[WP:NULL|Null edit]], re-edit the same contents
	wiki_API.purge = function(title, callback, options) {
		var action = normalize_title_parameter(title, options);
		if (!action) {
			throw new Error('wiki_API.purge: '
			// gettext_config:{"id":"invalid-title-$1"}
			+ gettext('Invalid title: %1', wiki_API.title_link_of(title)));
		}

		// POST_parameters
		var post_data = action[1];
		action[1] = {
			// forcelinkupdate : 1,
			// forcerecursivelinkupdate : 1,
			action : 'purge'
		};

		wiki_API.query(action, typeof callback === 'function'
		//
		&& function(data, error) {
			// copy from wiki_API.redirects_here()

			if (wiki_API.query.handle_error(data, error, callback)) {
				return;
			}

			// data:
			// {"batchcomplete":"","purge":[{"ns":0,"title":"Title","purged":""}]}

			if (!data || !data.purge) {
				library_namespace.warn([ 'wiki_API_purge: ', {
					// gettext_config:{"id":"unknown-api-response-$1"}
					T : [ 'Unknown API response: %1', (typeof data === 'object'
					//
					&& typeof JSON !== 'undefined'
					//
					? JSON.stringify(data) : data) ]
				} ]);
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data);
				callback(undefined, data);
				return;
			}

			var page_data_list = data.purge;
			// page_data_list: e.g., [{ns:4,title:'Meta:Sandbox',purged:''}]
			if (page_data_list.length < 2 && (!options || !options.multi)) {
				// 沒有特別設定的時候，回傳與輸入的形式相同。輸入單頁則回傳單頁。
				page_data_list = page_data_list[0];
			}

			// callback(page_data) or callback({Array}page_data_list)
			callback(page_data_list);
		}, post_data, options);
	};

	// ------------------------------------------------------------------------

	/**
	 * 取得頁面之重定向資料（重新導向至哪一頁）。
	 * 
	 * 注意: 重定向僅代表一種強烈的關聯性，而不表示從屬關係(對於定向到章節的情況)或者等價關係。
	 * 例如我們可能將[[有罪推定]]定向至[[無罪推定]]，然而雙方是完全相反的關係。
	 * 只因為[[無罪推定]]是一種比較值得關注的特性，而[[有罪推定]]沒有特殊的性質(common)。因此我們只談[[無罪推定]]，不會特別拿[[有罪推定]]出來談。
	 * 
	 * TODO:
	 * https://www.mediawiki.org/w/api.php?action=help&modules=searchtranslations
	 * 
	 * @example <code>

	CeL.wiki.redirect_to('史記', function(redirect_data, page_data) {
		CeL.show_value(redirect_data);
	});

	 </code>
	 * 
	 * @param {String|Array}title
	 *            title or [ {String}API_URL, {String}title or {Object}page_data ]
	 * @param {Function}[callback]
	 *            回調函數。 callback({String}title that redirects to or {Object}with
	 *            redirects to what section, {Object}page_data, error)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
	 */
	wiki_API.redirect_to = function(title, callback, options) {
		wiki_API.page(title, function(page_data, error) {
			if (error || !wiki_API.content_of.page_exists(page_data)) {
				// error? 此頁面不存在/已刪除。
				callback(undefined, page_data, error);
				return;
			}

			// e.g., [ { from: 'AA', to: 'A', tofragment: 'aa' } ]
			// e.g., [ { from: 'AA', to: 'A', tofragment: '.AA.BB.CC' } ]
			var redirect_data = page_data.response.query.redirects;
			if (redirect_data) {
				if (redirect_data.length !== 1) {
					// 可能是多重重定向？
					// e.g., A→B→C
					library_namespace.warn('wiki_API.redirect_to: ' + 'Get '
							+ redirect_data.length + ' redirects for ['
							// title.join(':')
							+ title + ']!');
					library_namespace.warn(redirect_data);
				}
				// 僅取用並回傳第一筆資料。
				redirect_data = redirect_data[0];
				// assert: redirect_data && redirect_data.to === page_data.title

				// test if is #REDIRECT [[title#section]]
				if (redirect_data.tofragment) {
					try {
						redirect_data.to_link = redirect_data.to + '#'
						// 須注意: 對某些 section 可能 throw！
						+ decodeURIComponent(redirect_data.tofragment
						//
						.replace(/\./g, '%'));
					} catch (e) {
						redirect_data.to_link = redirect_data.to + '#'
						//
						+ redirect_data.tofragment;
					}
					library_namespace.debug(wiki_API.title_link_of(title)
					// →
					+ ' redirected to section [[' + redirect_data.to + '#'
							+ redirect_data.tofragment + ']]!', 1,
							'wiki_API.redirect_to');
					callback(redirect_data, page_data);
					return;
				}

			}

			// page_data.title is normalized title.
			callback(page_data.title, page_data);

		}, Object.assign({
			// 輸入 prop:'' 或再加上 redirects:1 可以僅僅確認頁面是否存在，以及頁面的正規化標題。
			prop : '',
			redirects : 1,
			// Only works if the wiki's content language supports variant
			// conversion. en, crh, gan, iu, kk, ku, shi, sr, tg, uz and zh.
			// converttitles : 1,
			save_response : true
		}, options));
	};

	// ------------------------------------------------------------------------

	// TODO: html to wikitext
	// https://zh.wikipedia.org/w/api.php?action=help&modules=flow-parsoid-utils

	/**
	 * 展開 template 內容
	 * 
	 * 這種方法不能展開 module
	 * 
	 * @example <code>

	wiki.page(title, function(page_data) {
		console.log(CeL.wiki.content_of(page_data, 'expandtemplates'));
	}, {
		expandtemplates : true
	});

	 </code>
	 * 
	 * @see wiki_API.protect
	 */
	function wiki_API_expandtemplates(wikitext, callback, options) {
		var post_data = {
			text : wikitext,
			prop : 'wikitext'
		};

		options = library_namespace.new_options(options);

		for ( var parameter in wiki_API_expandtemplates.parameters) {
			if (parameter in options) {
				if (options[parameter] || options[parameter] === 0)
					post_data[parameter] = options[parameter];
			}
		}

		wiki_API.query({
			action : 'expandtemplates'
		}, function(data, error) {
			if (wiki_API.query.handle_error(data, error, callback)) {
				return;
			}

			if (options.page) {
				// use page_data.expandtemplates.wikitext
				Object.assign(options.page, data);
			}

			typeof callback === 'function'
			//
			&& callback(data.expandtemplates);

		}, post_data, options);
	}

	wiki_API_expandtemplates.parameters = {
		title : undefined,
		// text : wikitext,
		revid : undefined,
		prop : undefined,
		includecomments : undefined,

		templatesandboxprefix : undefined,
		templatesandboxtitle : undefined,
		templatesandboxtext : undefined,
		templatesandboxcontentmodel : undefined,
		templatesandboxcontentformat : undefined
	};

	wiki_API.expandtemplates = wiki_API_expandtemplates;

	// ------------------------------------------------------------------------

	if (false) {
		CeL.wiki.convert_Chinese('中国', function(converted_text) {
			converted_text === "中國";
		});

		CeL.wiki.convert_Chinese([ '繁體', '簡體' ], function(converted_hans) {
			converted_hans[0] === "繁体";
		}, {
			uselang : 'zh-hans'
		});
	}

	// wiki API 繁簡轉換
	wiki_API.convert_Chinese = function convert_Chinese(text, callback, options) {
		if (!text) {
			// String(test)
			callback(text === 0 ? '0' : '');
			return;
		}

		if (typeof options === 'string') {
			options = {
				uselang : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		var is_JSON;
		if (typeof text === 'object') {
			is_JSON = text;
			text = JSON.stringify(text);
		}

		// 作基本的 escape。不能用 encodeURIComponent()，這樣會把中文也一同 escape 掉。
		// 多一層 encoding，避免 MediaWiki parser 解析 HTML。
		text = escape(text)
		// recover special characters (e.g., Chinese words) by unescape()
		.replace(/%u[\dA-F]{4}/g, unescape);
		// assert: 此時 text 不應包含任何可被 MediaWiki parser 解析的語法。

		// + {{int:Conversionname}}
		// assert: '!' === encodeURIComponent('!')
		text = '!' + text + '!';

		var post_data = {
			// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=languages&utf8=1
			contentmodel : 'wikitext',
			// 'zh-hans'
			uselang : options.uselang || 'zh-hant',
			// prop=text|links
			prop : 'text',
			text : text
		};

		var session = wiki_API.session_of_options(options);

		// 由於用 [[link]] 也不會自動 redirect，因此直接轉換即可。
		// https://www.mediawiki.org/w/api.php?action=help&modules=parse
		wiki_API.query([ session && session.API_URL || wiki_API.api_URL('zh'),
				{
					action : 'parse'
				} ], function(data, error) {
			if (error || !data) {
				callback(undefined, error);
				return;
			}
			data = data.parse;
			data = data.text['*']
			// 去掉 MediaWiki parser 解析器所自行添加的 token 與註解。
			.replace(/<!--[\s\S]*?-->/g, '')
			// 去掉前後包覆。 e.g., <p> or <pre>
			.replace(/![^!]*$/, '').replace(/^[^!]*!/, '');
			try {
				// recover special characters
				data = unescape(data);
				if (is_JSON) {
					data = JSON.parse(data);
					if (Array.isArray(is_JSON)
							&& is_JSON.length !== data.length) {
						throw new Error(
						//
						'wiki_API.convert_Chinese: fault on {Array}: '
								+ is_JSON.length + ' !== ' + data.length);
					}
				}
			} catch (e) {
				callback(undefined, e);
				return;
			}
			callback(data);
		}, post_data);
	};

	// ------------------------------------------------------------------------

	/**
	 * 檢查頁面是否被保護。
	 * 
	 * 採用如:
	 * 
	 * @example <code>

	wiki.page(title, function(page_data) {
		console.log(CeL.wiki.is_protected(page_data));
	}, {
		prop : 'revisions|info',
		// rvprop : 'ids|timestamp',
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Binfo
		// https://www.mediawiki.org/wiki/API:Info#inprop.3Dprotection
		additional_query : 'inprop=protection'
	});

	 </code>
	 * 
	 * @see wiki_API.protect
	 */
	wiki_API.is_protected = function has_protection(page_data) {
		var protection_list = page_data.protection || page_data;
		if (!Array.isArray(protection_list)) {
			return;
		}

		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Binfo
		// https://www.mediawiki.org/wiki/API:Info#inprop.3Dprotection
		return protection_list.some(function(protection) {
			return protection.type === 'edit' && protection.level === 'sysop';
		});
	};

	// ================================================================================================================
	// 監視最近更改的頁面。

	function get_recent_via_API(callback, options) {
		var session = wiki_API.session_of_options(options);
		if (!session) {
			// 先設定一個以方便操作。
			session = new wiki_API(null, null, options.language
					|| wiki_API.language);
		}
		// use get_list()
		// 注意: arguments 與 get_list() 之 callback 連動。
		session.recentchanges(callback, options);
	}

	// 一定會提供的功能。
	wiki_API.recent_via_API = get_recent_via_API;
	// 預防已經被設定成 `get_recent_via_databases` @ CeL.application.net.wiki.Toolforge。
	if (!wiki_API.recent) {
		// 可能會因環境而不同的功能。讓 wiki_API.recent 採用較有效率的實現方式。
		wiki_API.recent =
		// wiki_API.SQL.config ? get_recent_via_databases :
		get_recent_via_API;
	}

	// ----------------------------------------------------

	// Listen to page modification. 監視最近更改的頁面。
	// 注意: 會改變 options！
	// 注意: options之屬性名不可與 wiki_API.recent 衝突！
	// 警告: 同時間只能有一隻程式在跑，否則可能會造成混亂！
	function add_listener(listener, options) {
		if (!options) {
			options = Object.create(null);
		} else if (typeof options === 'number' && options > 0) {
			// typeof options === 'number': 避免
			// TypeError: Cannot convert object to primitive value
			// TypeError: Cannot convert a Symbol value to a number
			options = {
				interval : options
			};
		} else if (typeof options === 'string'
		//
		|| library_namespace.is_RegExp(options)) {
			options = {
				// language : '',
				// title_filter
				title : options
			};
		}

		if (isNaN(options.max_page) || options.max_page >= 1) {
			// normal
		} else {
			throw new Error(
					'add_listener: '
							+ 'assert: isNaN(options.max_page) || options.max_page >= 1');
		}

		if (!(options.limit > 0)) {
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
			options.rvlimit = 'max';
		}

		var session = wiki_API.session_of_options(options),
		// @see .SQL_config
		where = options.SQL_options
		//
		|| (options.SQL_options = Object.create(null));
		where = where.where || (where.where = Object.create(null));
		// console.log(session);

		if (!session
		//
		&& (options.with_diff || options.with_content)) {
			// 先設定一個以方便操作。
			session = new wiki_API(null, null, options.language
					|| wiki_API.language);
		}

		// console.log(options);
		// console.log(session);
		var recent_options, use_SQL = 'use_SQL' in session ? session.use_SQL
				: wiki_API.SQL && wiki_API.SQL.config;
		if (!use_SQL) {
			;
		} else if ('use_SQL' in options) {
			// options.use_SQL: Try to use SQL. Use SQL as possibile.
			use_SQL = options.use_SQL;
		} else if (typeof options.parameters === 'object') {
			// auto-detect
			use_SQL = Object.keys(options.parameters).filter(function(item) {
				// 只設定了 rcprop: SQL 將會取得所有資訊，僅設定此條件時採用 SQL 不會影響效果。
				return item && item !== 'rcprop';
			}).length === 0;
		}

		var get_recent = use_SQL ? wiki_API.recent : wiki_API.recent_via_API,
		// 僅取得最新文件版本。注意: 這可能跳過中間編輯的版本，造成有些修訂被忽略。
		latest_only = 'latest' in options ? options.latest : true;
		if (use_SQL) {
			// console.log(options);
			recent_options = Object.clone(options.SQL_options);
			if (options[KEY_SESSION]) {
				// pass API config to get_recent()
				recent_options[KEY_SESSION] = options[KEY_SESSION];
			}
		} else {
			recent_options = Object.clone(options);
			if (!recent_options.parameters)
				recent_options.parameters = Object.create(null);
			if (recent_options.rcprop) {
				if (!recent_options.parameters.rcprop)
					recent_options.parameters.rcprop = recent_options.rcprop;
				delete recent_options.rcprop;
			}
			// console.log(recent_options);
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brecentchanges
			Object.assign(recent_options.parameters, {
				// List newest first (default).
				// Note: rcstart has to be later than rcend.
				// rcdir : 'older',
				rcdir : 'newer',

				// new Date().toISOString()
				// rcstart : 'now',
				rctype : 'edit|new'
			});
			if (latest_only) {
				recent_options.parameters.rctoponly = 1;
			}
			if (recent_options.parameters.rcprop
			// 為了之後設定 last_query_time，因此必須要加上 timestamp 這一項 information。
			&& !recent_options.parameters.rcprop.includes('timestamp')) {
				if (Array.isArray(recent_options.parameters.rcprop)) {
					recent_options.parameters.rcprop.push('timestamp');
				} else if (typeof recent_options.parameters.rcprop === 'string') {
					recent_options.parameters.rcprop += '|timestamp';
				} else {
					throw new Error('Unkonwn rcprop: '
							+ recent_options.parameters.rcprop);
				}
			}
		}

		var namespace = wiki_API.namespace(options.namespace);
		if (namespace !== undefined) {
			// 不指定 namespace，或者指定 namespace 為 ((undefined)): 取得所有的 namespace。
			if (use_SQL) {
				recent_options.namespace = namespace;
			} else {
				recent_options.parameters.rcnamespace = namespace;
			}
		}

		if (options.type) {
			if (use_SQL) {
				recent_options.type = options.type;
			} else {
				recent_options.parameters.rctype = options.type;
			}
			// TODO: other options
		}

		if (options.with_diff && !options.with_diff.diff
				&& !options.with_diff.with_diff) {
			// options to LCS() diff
			if (options.with_diff === true) {
				options.with_diff = {
					LCS : true,

					// line : false,
					// index : 2,
					// with_list : true

					// MediaWiki using line-diff
					line : true
				};
			}
			options.with_diff.diff = true;
		}

		// 注意:
		// {String|Natural}options.start, options.delay:
		// 將會用 CeL.date.to_millisecond() 來解析。
		// 推薦用像是 "2days", "3min", "2d", "3m" 這樣子的方法來表現。
		//
		// {Date}options.start: 從這個時間點開始回溯。
		// {Natural}options.start: 回溯 millisecond 數。
		// {Natural}options.delay > 0: 檢查的延遲時間。等待 millisecond 數。

		var delay_ms = library_namespace.to_millisecond(options.delay),
		//
		interval = library_namespace.to_millisecond(options.interval) || 500,
		// assert: {Date}last_query_time start time
		last_query_time,
		// TODO: 僅僅採用 last_query_revid 做控制，不需要偵測是否有重複。 latest_revid
		last_query_revid = options.revid | 0;

		// @see function adapt_task_configurations() @ wiki.js
		if (!options.configuration_adapter) {
			// 採用預設的 configuration_adapter。
			options.configuration_adapter = session.task_configuration
					&& session.task_configuration.configuration_adapter;
		}
		// {String}設定頁面。 注意: 必須是已經轉換過、正規化後的最終頁面標題。
		var configuration_page_title = typeof options.configuration_adapter === 'function'
				&& wiki_API.normalize_title(options.configuration_page)
				|| session.task_configuration
				&& session.task_configuration.configuration_page_title;
		/** {Number}延遲 adapt 設定的時間: 預設為過5分鐘才 adapt configuration */
		var delay_time_to_adapt_task_configurations = 'delay_time_to_adapt_task_configurations' in options ? options.delay_time_to_adapt_task_configurations
				: session.delay_time_to_adapt_task_configurations;

		if (!(delay_ms > 0))
			delay_ms = 0;

		if (options.delay && !('start' in options)) {
			// e.g., 指定延遲兩分鐘時，就直接檢查兩分鐘前開始的資料。
			options.start = options.delay;
		}

		if (library_namespace.is_Date(options.start)) {
			last_query_time = isNaN(options.start.getTime()) ? new Date
					: options.start;
		} else if (options.start
				&& !isNaN(last_query_time = Date.parse(options.start))) {
			last_query_time = new Date(last_query_time);
		} else if ((last_query_time = library_namespace
				.to_millisecond(options.start)) > 0) {
			// treat as time back to 回溯這麼多時間。
			if (last_query_time > library_namespace.to_millisecond('31d')) {
				library_namespace.info([ 'add_listener: ', {
					// gettext_config:{"id":"wikimedia-wikis-can-be-backtracked-up-to-about-$1"}
					T : [ 'Wikimedia wikis 最多可回溯約 %1。',
					// @see https://www.mediawiki.org/wiki/Manual:$wgRCMaxAge
					library_namespace.age_of(
					// 在 2017 CE 最多可回溯約 30天。
					library_namespace.to_millisecond('30D'), {
						max_unit : 'day'
					}) ]
				}, {
					// gettext_config:{"id":"the-period-you-specified-$1-($2)-may-be-too-long"}
					T : [ '您所指定的時間 [%1]（%2）恐怕過長。', options.start,
					//
					library_namespace.age_of(last_query_time, {
						max_unit : 'day'
					}) ]
				} ]);
			}
			last_query_time = new Date(Date.now() - last_query_time);
		} else {
			// default: search from NOW
			last_query_time = new Date;
		}

		library_namespace.info([ 'add_listener: ', {
			T : [ Date.now() - last_query_time > 100
			// gettext_config:{"id":"start-monitoring-and-scanning-$2-pages-changed-since-$3-using-$1"}
			? '開始以 %1 監視、掃描 %2 自 %3 起更改的頁面。'
			// gettext_config:{"id":"start-monitoring-and-scanning-the-recently-changed-pages-of-$2-using-$1"}
			: '開始以 %1 監視、掃描 %2 最近更改的頁面。', use_SQL ? 'SQL' : 'API',
			//
			session ? wiki_API.site_name(session) : wiki_API.language,
			//
			library_namespace.indicate_date_time(last_query_time, {
				base_date : Date.now()
			}) ]
		} ]);

		if (configuration_page_title) {
			library_namespace.info([ 'add_listener: ', {
				// gettext_config:{"id":"configuration-page-$1"}
				T : [ 'Configuration page: %1',
				//
				wiki_API.title_link_of(configuration_page_title) ]
			} ]);
		}

		if (false) {
			library_namespace.debug('recent_options: '
			// TypeError: Converting circular structure to JSON
			+ JSON.stringify(recent_options), 1, 'add_listener');
		}
		// console.trace(recent_options);

		// 取得頁面資料。
		function receive() {

			function receive_next() {
				// 預防上一個任務還在執行的情況。
				// https://zh.moegirl.org.cn/index.php?limit=500&title=Special%3A%E7%94%A8%E6%88%B7%E8%B4%A1%E7%8C%AE&contribs=user&target=Cewbot&namespace=&tagfilter=&start=2019-08-12&end=2019-08-13
				if (next_task_id) {
					library_namespace
							.info('已經設定過下次任務。可能是上一個任務還在查詢中，或者應該會 timeout？將會清除之前的任務，重新設定任務。');
					// for debug:
					console.log(next_task_id);
					clearTimeout(next_task_id);
				}

				var real_interval_ms = Date.now() - receive_time;
				library_namespace
						.debug('interval from latest receive() starts: '
								+ real_interval_ms + ' ms (' + Date.now()
								+ ' - ' + receive_time + ')', 3, 'receive_next');
				next_task_id = setTimeout(receive,
				// 減去已消耗時間，達到更準確的時間間隔控制。
				Math.max(interval - real_interval_ms, 0));
			}

			var next_task_id = undefined;
			// 上一次執行 receive() 的時間。
			var receive_time = Date.now();

			library_namespace.debug('Get recent change from '
					+ (library_namespace.is_Date(last_query_time)
							&& last_query_time.getTime() ? last_query_time
							.toISOString() : last_query_time)
					+ ', last_query_revid=' + last_query_revid, 1,
					'add_listener.receive');

			// 根據不同的實現方法採用不一樣的因應方式。
			if (use_SQL) {
				if (!library_namespace.is_Date(last_query_time)) {
					// assert: !!(last_query_time)
					// 可能來自"設定成已經取得的最新一個編輯rev。"
					last_query_time = new Date(last_query_time);
				}
				where.timestamp = '>=' + last_query_time
				// MediaWiki format
				.format('%4Y%2m%2d%2H%2M%2S');
				where.this_oldid = '>' + last_query_revid;
				if (delay_ms > 0) {
					where[''] = 'rc_timestamp<='
					// 截止期限。
					+ new Date(Date.now() - delay_ms)
					// MediaWiki format
					.format('%4Y%2m%2d%2H%2M%2S');
				}
			} else {
				// rcend
				recent_options.parameters.rcstart = library_namespace
						.is_Date(last_query_time) ? last_query_time
						.toISOString() : last_query_time;
				if (false) {
					console.log('set rcstart: '
							+ recent_options.parameters.rcstart);
				}
				if (delay_ms > 0) {
					recent_options.parameters.rcend
					// 截止期限。
					= new Date(Date.now() - delay_ms).toISOString();
				}
			}

			get_recent(function process_rows(rows) {
				if (!rows) {
					library_namespace.warn((new Date).toISOString()
							+ ': No rows get.');
					return;
				}

				if (false) {
					library_namespace.log(recent_options.parameters
							|| recent_options.SQL_options);
					console.log(rows);
				}

				// 去除之前已經處理過的頁面。
				if (rows.length > 0) {
					// 判別新舊順序。
					var has_new_to_old = rows.length > 1
					// 2019/9/12: 可能有亂序。
					&& rows.some(function(row, index) {
						return index > 0 && rows[index - 1].revid > row.revid;
					});
					if (has_new_to_old) {
						// e.g., use SQL
						library_namespace.debug('判別新舊順序: 有新到舊或亂序: Get '
								+ rows.length + ' recent pages:\n'
								+ rows.map(function(row) {
									return row.revid;
								}), 2, 'add_listener');
						library_namespace.debug('把從新的排列到舊的或亂序轉成從舊的排列到新的: '
								+ rows.map(function(row) {
									return row.revid;
								}), 1, 'add_listener');
						// 因可能有亂序，不能光以 .reverse() 轉成 old to new。
						rows.sort(function(row_1, row_2) {
							return row_1.revid - row_2.revid;
						});
					}

					library_namespace.debug(
							'準備去除掉重複的紀錄。之前已處理到 last_query_revid='
									+ last_query_revid + ', 本次取得 '
									+ rows.length + ' record(s). revid: '
									+ rows.map(function(row) {
										return row.revid;
									}), 3);
					// e.g., use API 常常會回傳和上次有重疊的資料
					while (rows.length > 0
					// 去除掉重複的紀錄。因為是從舊的排列到新的，因此從起頭開始去除。
					&& rows[0].revid <= last_query_revid) {
						rows.shift();
					}

					if (rows.length > 0) {
						// assert: options.max_page >= 1
						if (rows.length > options.max_page) {
							// 直接截斷，僅處理到 .max_page。
							rows.truncate(options.max_page);
						}

						// cache the lastest record
						last_query_time = rows.at(-1);
						// 紀錄/標記本次處理到哪。
						// 注意：type=edit會增加revid，其他type似乎會沿用上一個revid。
						last_query_revid = last_query_time.revid;
						last_query_time = last_query_time.timestamp;
						// 確保 {Date}last_query_time
						// last_query_time = new Date(last_query_time);
					}

					// 預設全部都處理完，因此先登記。假如僅處理其中的一部分，屆時再特別登記。
					library_namespace.debug('The lastest record: '
							+ JSON.stringify(last_query_time), 4);
				}
				library_namespace.debug('去除掉重複的紀錄之後 last_query_revid='
				//
				+ last_query_revid + ', ' + rows.length + ' record(s) left.'
				//
				+ (rows.length > 0 ? ' revid: ' + rows.map(function(row) {
					return row.revid;
				}).join(', ') + '. title: ' + rows.map(function(row) {
					return row.title;
				}).join(', ') : ''), 1);
				library_namespace.log_temporary('add_listener: '
						+ last_query_time + ' ('
						+ library_namespace.indicate_date_time(last_query_time)
						+ ')');

				// 使 wiki.listen() 可隨時監視設定頁面與緊急停止頁面的變更。
				// 警告: 對於設定頁面的監聽，僅限於設定頁面也在監聽範圍中時方起作用。
				// 例如設定了 namespace，可能就監聽不到設定頁面的變更。
				var configuration_row, configuration_adapter,
				//
				configuration_adapter__run;
				if (configuration_page_title) {
					// 檢測看看是否有 configuration_page_title
					rows.forEach(function(row, index) {
						if (row.title === configuration_page_title) {
							configuration_row = row;
						}
					});
				}
				if (configuration_row) {
					configuration_adapter__run = function() {
						// clearTimeout(session.adapt_task_configurations_timer);
						delete session.adapt_task_configurations_timer;
						library_namespace.info([ 'add_listener: ', {
							// gettext_config:{"id":"the-configuration-page-$1-has-been-modified.-re-parse"}
							T : [ '設定頁面 %1 已變更。重新解析……',
							//
							wiki_API.title_link_of(configuration_page_title) ]
						} ]);
						session.adapt_task_configurations(configuration_row,
								options.configuration_adapter, 'once');
					};
					if (delay_time_to_adapt_task_configurations >= 0) {
						configuration_adapter = function() {
							if (session.adapt_task_configurations_timer) {
								clearTimeout(
								//
								session.adapt_task_configurations_timer);
							}
							library_namespace.info([ 'add_listener: ', {
								// gettext_config:{"id":"wait-$1-to-apply-the-settings"}
								T : [ '等待 %1 以應用設定。',
								//
								library_namespace.age_of(0,
								//
								delay_time_to_adapt_task_configurations) ]
							} ]);
							session.adapt_task_configurations_timer =
							//
							setTimeout(configuration_adapter__run,
							//
							delay_time_to_adapt_task_configurations);
						};
					} else {
						configuration_adapter = configuration_adapter__run;
					}
				}

				if (options.filter && rows.length > 0) {
					// @see CeL.data.fit_filter()
					// TODO: 把篩選功能放到 get_recent()，減少資料處理的成本。
					rows = rows.filter(
					// 篩選函數。rcprop必須加上篩選函數需要的資料，例如編輯摘要。
					typeof options.filter === 'function' ? options.filter
					// 篩選標題。警告: 從API取得的標題不包括 "/" 之後的文字，因此最好還是等到之後 listener
					// 處理的時候，才來對標題篩選。
					: library_namespace.is_RegExp(options.filter)
					// 篩選PATTERN
					? function(row) {
						return row.title && options.filter.test(row.title);
					} : Array.isArray(options.filter) ? function(row) {
						return row.title && options.filter.includes(row.title);
					} : function(row) {
						if (false)
							library_namespace.log([ row.title, options.filter,
							//
							wiki_API.normalize_title(options.filter) ]);
						// assert: typeof options.filter === 'string'
						return row.title
						// treat options.filter as page title
						&& (row.title.includes(options.filter)
						// 區分大小寫
						|| row.title.startsWith(
						//
						wiki_API.normalize_title(options.filter)));
					});
					library_namespace.debug('Get ' + rows.length
							+ ' recent pages after filter:\n'
							+ rows.map(function(row) {
								return row.revid;
							}), 2, 'add_listener');
					// console.log([ row.title, options.filter ]);
				}

				// TODO: configuration_row 應該按照 rows 的順序，
				// 並且假如特別 filter 到設定頁面的時候，那麼設定頁面還是應該要被 listener 檢查。
				if (configuration_row && !rows.includes(configuration_row)) {
					if (library_namespace.is_debug()) {
						library_namespace.debug(
								'unshift configuration_row revid='
										+ configuration_row.revid + ':', 1,
								'add_listener');
						console.log(configuration_row);
					}
					// 保證 configuration_page_title 的變更一定會被檢查到。
					rows.unshift(configuration_row);
				}

				var quit_listening, waiting_queue = [];
				var check_result = function check_result(result, run_next) {
					if (library_namespace.is_thenable(result)) {
						if (run_next) {
							// 先執行完本頁面再執行下一個頁面。
							result.then(run_next, function(error) {
								console.error(error);
								run_next();
							});
						} else {
							waiting_queue.push(result);
						}

					} else {
						if (result) {
							last_query_time = new Date;
							return quit_listening = result;
						}
						run_next && run_next();
					}

				}, check_and_receive_next = function check_and_receive_next(
						result) {
					// if listener() return true, the operation will be stopped.
					if (quit_listening) {
						library_namespace.debug(
						//
						'The listener() returns non-null, quit listening.', 0,
								'add_listener.check_and_receive_next');

					} else if (waiting_queue.length > 0) {
						library_namespace.debug('Waiting '
								+ waiting_queue.length
								+ ' work(s) and then get next recent pages', 2,
								'add_listener.check_and_receive_next');
						Promise.allSettled(waiting_queue).then(receive_next);

					} else {
						library_namespace.debug('Get next recent pages', 2,
								'add_listener.check_and_receive_next');
						receive_next();
					}
				};

				if (rows.length > 0) {
					library_namespace.debug('Get ' + rows.length
							+ ' recent pages:\n' + rows.map(function(row) {
								return row.revid;
							}), 2, 'add_listener');

					// 比較頁面修訂差異。
					if (options.with_diff || options.with_content >= 2) {
						// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
						// rvdiffto=prev 已經 parsed，因此仍須自行解析。
						// TODO: test
						// 因為採用.run_serial(.page())，因此約一秒會跑一頁面。
						rows.run_serial(function(run_next, row, index, list) {
							// console.log(row);
							if (!row.pageid) {
								run_next();
								return;
							}

							library_namespace.debug('Get page: ' + index + '/'
									+ rows.length + ' revid=' + row.revid, 2,
									'add_listener.with_diff');

							var page_options = {
								// 這裡的rvstartid指的是新→舊。
								// 偶爾有可能出現: [badid_rvstartid] No revision was
								// found for parameter "rvstartid".
								rvstartid : row.revid
							};
							// or: row.old_revid >= 0
							if (row.old_revid > 0) {
								page_options.rvendid = row.old_revid;
							}

							page_options = {
								is_id : true,
								rvlimit : options.with_content >= 3
								// default: 僅取最近的兩個版本作 diff
								? options.with_content : 2,
								// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
								parameters : page_options,
								rvprop
								// e.g.,
								// minor:'',anon:''/* e.g., IP user 匿名用戶 */,
								// bot flag: ('bot' in row)
								: 'ids|timestamp|content|user|flags|size'
							};
							if (false) {
								Object.assign(page_options, options.with_diff);
							}

							session.page(row.pageid,
							//
							function(page_data, error) {
								if (quit_listening || !page_data || error) {
									if (error)
										console.error(error);
									run_next();
									return;
								}

								// console.log(wiki_API.title_link_of(page_data));
								var revisions = page_data.revisions;
								if (latest_only && (!revisions || !revisions[0]
								// 確定是最新版本 revisions[0].revid。
								|| revisions[0].revid !== row.revid)) {
									library_namespace.log(
									//
									'add_listener.with_diff: '
									//
									+ wiki_API.title_link_of(row)
									//
									+ ': 從 recentchanges table 取得的版本 '
									//
									+ row.revid + ' 不同於從頁面內容取得的最新版本 '
									//
									+ (revisions && revisions[0]
									//
									&& revisions[0].revid) + '，跳過這一項。');
									run_next();
									return;
								}

								// merge page data
								Object.assign(row, page_data);

								// console.log(revisions);
								if (revisions && revisions.length >= 1
								//
								&& revisions[0] && revisions[0].timestamp) {
									// 設定成已經取得的最新一個編輯rev。
									last_query_time
									// 確保 {Date}last_query_time
									// = new Date(revisions[0].timestamp);
									= revisions[0].timestamp;
									// last_query_revid = revisions[0].revid;
								}

								// assert: (row.is_new || revisions.length > 1)
								if (revisions && revisions.length >= 1
										&& options.with_diff) {

									// wiki_API.content_of(row, -1);
									var from = revisions.length >= 2
											&& wiki_API.revision_content(
											// select the oldest revision.
											revisions.at(-1)) || '',
									// 解析頁面結構。
									to = wiki_API.revision_content(
									//
									revisions[0]);

									if (!options.with_diff.line) {
										from = wiki_API.parser(from).parse();
										row.from_parsed = from;
										// console.log(from);
										from = from.map(function(token) {
											if (!token && (token !== ''
											// 有時會出意外。
											|| from.length !== 1)) {
												console.log(row);
												throw new Error(row.title);
											}
											return token.toString();
										});

										to = wiki_API.parser(row).parse();
										to = to.map(function(token) {
											if (!token && (token !== ''
											//
											|| to.length !== 1)) {
												console.log(row);
												throw new Error(row.title);
											}
											return token.toString();
										});

										// verify parser

										if (wiki_API.revision_content(
										//
										revisions[0])
										//
										!== to.join('')) {
											console.log(
											//
											wiki_API.revision_content(
											//
											revisions[0]));
											console.log(to);
											to
											//
											= wiki_API.revision_content(
											//
											revisions[0]);
											console.log(library_namespace.LCS(
											//
											to, parse_wikitext(to).toString(),
													'diff'));
											throw new Error(
											//
											'Parser error (to): ' +
											// debug 用. check parser, test
											// if parser working properly.
											wiki_API.title_link_of(page_data));
										}

										if (revisions.length > 1 &&
										//
										wiki_API.revision_content(
										//
										revisions.at(-1))
										//
										!== from.join('')) {
											console.log(library_namespace.LCS(
											//
											wiki_API.revision_content(
											//
											revisions.at(-1)),
											//
											from.join(''), 'diff'));
											throw new Error(
											//
											'Parser error (from): ' +
											// debug 用. check parser, test
											// if parser working properly.
											wiki_API.title_link_of(page_data));
										}
									}

									if (options.with_diff.LCS) {
										row.diff = library_namespace.LCS(from,
												to, options.with_diff);

									} else {
										row.diff = from.diff_with(to,
												options.with_diff);
									}
								}

								if (configuration_row === row) {
									configuration_adapter();
									run_next();
									return;
								}

								check_result(listener.call(options, row, index,
										rows), run_next);
							}, page_options);

						}, check_and_receive_next);
						return;
					}

					// use options.with_content as the options of wiki.page()
					if (options.with_content || configuration_row) {
						// TODO: 考慮所傳回之內容過大，i.e. 回傳超過 limit (12 MB)，被截斷之情形。
						session.page(rows.map(function(row) {
							return row.pageid;
						}), function(page_list, error) {
							if (error || !Array.isArray(page_list)) {
								// e.g., 還原編輯
								// wiki_API.page: Unknown response:
								// [{"batchcomplete":""}]
								if (error !== 'Unknown response')
									library_namespace.error(error
											|| 'add_listener: No page got!');
								receive_next();
								return;
							}

							// 配對。
							var page_id_hash = Object.create(null);
							page_list.forEach(function(page_data, index) {
								page_id_hash[page_data.pageid] = page_data;
							});
							rows.some(function(row, index) {
								if (false) {
									console.log('-'.repeat(40));
									console.log(JSON.stringify(row));
									console.log(JSON.stringify(
									//
									page_id_hash[row.pageid]));
								}
								Object.assign(row, page_id_hash[row.pageid]);
								if (configuration_row === row) {
									configuration_adapter();
									return;
								}

								return check_result(listener.call(options, row,
										index, rows));
							});
							// Release memory. 釋放被占用的記憶體。
							page_id_hash = page_list = null;
							check_and_receive_next();

						}, Object.assign({
							// Deprecated: rvdiffto, rvcontentformat
							// rvdiffto : 'prev',
							// rvcontentformat : 'text/javascript',
							is_id : true,
							multi : true
						}, options.with_content));
						return;
					}

					// 除非設定 options.input_Array，否則單筆單筆輸入。
					if (options.input_Array) {
						check_result(listener.call(options, rows));
					} else {
						rows.some(function(row, index, rows) {
							return check_result(listener.call(options, row,
									index, rows));
						}, options);
					}

				} else if (options.even_empty) {
					// default: skip empty, 除非設定 options.even_empty.
					check_result(listener.call(options,
					//
					options.input_Array ? rows : {
						// 模擬rows單筆之結構。
						row : Object.create(null)
					}));
				}

				check_and_receive_next();

			}, recent_options);
		}

		receive();
	}

	// wiki.listen()
	wiki_API.listen = add_listener;

	// ================================================================================================================
	// Wikimedia dump

	/**
	 * 取得最新之 Wikimedia dump。
	 * 
	 * assert: library_namespace.platform.nodejs === true
	 * 
	 * TODO: using
	 * /public/dumps/public/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2
	 * 
	 * @param {String}[wiki_site_name]
	 *            project code name. e.g., 'enwiki'
	 * @param {Function}callback
	 *            回調函數。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://en.wikipedia.org/wiki/Wikipedia:Database_download#Where_do_I_get_it.3F
	 * 
	 * @inner
	 */
	function get_latest_dump(wiki_site_name, callback, options) {
		if (false && !wiki_API.wmflabs) {
			// 最起碼須有 bzip2, wget 特定版本輸出訊息 @ /bin/sh
			// Wikimedia Toolforge (2017/8 之前舊稱 Tool Labs)
			// https://wikitech.wikimedia.org/wiki/Labs_labs_labs#Toolforge
			throw new Error('Only for Wikimedia Toolforge!');
		}

		if (typeof wiki_site_name === 'function'
				&& typeof callback !== 'function' && !options) {
			// shift arguments
			options = callback;
			callback = wiki_site_name;
			wiki_site_name = null;
		}

		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		options = library_namespace.new_options(options);

		if (!wiki_site_name) {
			// console.log(options);
			// console.log(options[KEY_SESSION]);
			// throw new Error(options[KEY_SESSION].language);
			wiki_site_name = wiki_API.site_name(options || options.project
					|| options.family);
		}

		// dump host: http "301 Moved Permanently" to https
		var host = options.host || 'https://dumps.wikimedia.org/',
		// e.g., '20160305'.
		latest = options.latest;
		if (!latest) {
			library_namespace.get_URL(
			// Get the latest version.
			host + wiki_site_name + '/', function(XMLHttp) {
				var response = XMLHttp.responseText;
				var latest = 0, previous, matched,
				//
				PATTERN = / href="(\d{8,})/g;
				while (matched = PATTERN.exec(response)) {
					matched = Math.floor(matched[1]);
					if (latest < matched)
						previous = latest, latest = matched;
				}
				// 不動到原來的 options。
				options = Object.clone(options);
				// default: 'latest'
				options.latest = latest || 'latest';
				if (previous)
					options.previous = previous;
				get_latest_dump(wiki_site_name, callback, options);
			});
			return;
		}

		var directory = options.directory || './',
		//
		filepath = options.filepath || options.filename || wiki_site_name + '-'
				+ latest + '-pages-articles.xml';

		/**
		 * <code>
		head -n 80 zhwiki-20160305-pages-meta-current1.xml
		less zhwiki-20160305-pages-meta-current1.xml
		tail -n 80 zhwiki-20160305-pages-meta-current1.xml
		</code>
		 */

		/**
		 * e.g., <code>
		callback = function(data) { console.log(data); };
		latest = '20160305';
		wiki_site_name = 'enwiki';
		// directory to restore dump files.
		// 指定 dump file 放置的 directory。
		// e.g., '/shared/cache/', '/shared/dumps/', '~/dumps/'
		// https://wikitech.wikimedia.org/wiki/Help:Toolforge/Developing#Using_the_shared_Pywikibot_files_.28recommended_setup.29
		// /shared/: shared files
		dump_directory = '/shared/cache/'
		filepath = wiki_site_name + '-' + latest + '-pages-articles-multistream-index.txt';
		</code>
		 */

		// 若是目標目錄不存在/已刪除則嘗試創建之。
		try {
			node_fs.statSync(directory);
		} catch (e) {
			library_namespace.info('get_latest_dump: ' + '存放 dump file 的目錄['
					+ directory + ']不存在/已刪除，嘗試創建之。');
			node_fs.mkdirSync(directory, parseInt('777', 8));
			node_fs.writeFileSync(directory
					+ '_FEEL_FREE_TO_REMOVE_THIS_DIRECTORY_ANYTIME', '');
			// 若是沒有辦法創建目錄，那就直接throw。
		}

		var data_file_OK;
		try {
			// check if data file exists and big enough
			data_file_OK = node_fs.statSync(directory + filepath).size > 1e7;
		} catch (e) {
		}

		if (data_file_OK) {
			library_namespace.log('get_latest_dump: Using data file (.xml): ['
					+ directory + filepath + ']');
			callback(directory + filepath);
			return;
		}

		// ----------------------------------------------------

		function extract() {
			library_namespace.log('get_latest_dump.extract: ' + 'Extracting ['
					+ source_directory + archive + '] to [' + directory
					+ filepath + ']...');
			// share the xml dump file. 應由 caller 自行設定。
			// process.umask(parseInt('0022', 8));
			require('child_process').exec(
			//
			'/bin/bzip2 -cd "' + source_directory + archive + '" > "'
			//
			+ directory + filepath + '"', function(error, stdout, stderr) {
				if (error) {
					library_namespace.error(error);
				} else {
					library_namespace.log('get_latest_dump.extract: '
					//
					+ 'Done. Running callback...');
				}
				callback(directory + filepath);
			});
		}

		var public_dumps_directory = '/public/dumps/public/',
		// search the latest file in the local directory.
		// https://wikitech.wikimedia.org/wiki/Help:Tool_Labs#Dumps
		// 可在 /public/dumps/public/zhwiki/ 找到舊 dumps。 (using `df -BT`)
		// e.g.,
		// /public/dumps/public/zhwiki/20160203/zhwiki-20160203-pages-articles.xml.bz2
		source_directory, archive = options.archive || filepath + '.bz2';

		if (wiki_API.wmflabs) {
			source_directory = public_dumps_directory + wiki_site_name + '/'
					+ latest + '/';
			library_namespace.debug('Check if public dump archive exists: ['
					+ source_directory + archive + ']', 1, 'get_latest_dump');
			try {
				// 1e7: Only using the cache when it exists and big enough.
				// So we do not using node_fs.accessSync() only.
				if (node_fs.statSync(source_directory + archive).size > 1e7) {
					library_namespace
							.log('get_latest_dump: Using public dump archive file ['
									+ source_directory + archive + '].');
					extract();
					return;
				}
			} catch (e) {
			}
		}

		// ----------------------------------------------------

		source_directory = directory;

		library_namespace.debug('Check if file exists: [' + source_directory
				+ archive + ']', 1, 'get_latest_dump');
		try {
			if (node_fs.statSync(source_directory + archive).size > 1e7) {
				library_namespace.log('get_latest_dump: ' + 'Archive ['
						+ source_directory + archive + '] exists.');
				extract();
				return;
			}
		} catch (e) {
		}

		// ----------------------------------------------------

		library_namespace.log('get_latest_dump: Try to save archive to ['
				+ source_directory + archive + ']...');
		// https://nodejs.org/api/child_process.html
		var child = require('child_process').spawn('/usr/bin/wget',
		// -O=""
		[ '--output-document=' + source_directory + archive,
		// 經測試，採用 .spawn() 此種方法毋須考慮 '"' 之類 quote 的問題。
		host + wiki_site_name + '/' + latest + '/' + archive ]);

		child.stdout.setEncoding('utf8');
		child.stderr.setEncoding('utf8');

		/**
		 * http://stackoverflow.com/questions/6157497/node-js-printing-to-console-without-a-trailing-newline
		 * 
		 * In Windows console (Linux, too), you should replace '\r' with its
		 * equivalent code \033[0G:
		 */
		child.stdout.on('data', function(data) {
			library_namespace.log_temporary(data);
		});

		child.stderr.on('data', function(data) {
			data = data.toString('utf8');
			/**
			 * <code>
			 e.g.,
			259000K .......... .......... .......... .......... .......... 21%  282M 8m26s
			999950K .......... .......... .......... .......... .......... 82% 94.2M 1m46s
			1000000K .......... .......... .......... .......... .......... 82%  103M 1m46s
			</code>
			 */
			// [ all, downloaded, percentage, speed, remaining 剩下時間 ]
			var matched = data.match(/([^\n\.]+)[.\s]+(\d+%)\s+(\S+)\s+(\S+)/);
			if (matched) {
				data = matched[2] + '  ' + matched[1] + '  ' + matched[4]
						+ '                    \r';
			} else if (data.includes('....') || /\d+[ms]/.test(data)
					|| /\.\.\s*\d+%/.test(data))
				return;
			process.stderr.write(data);
		});

		child.on('close', function(error_code) {
			if (error_code) {
				library_namespace.error('get_latest_dump: ' + 'Error code '
						+ error_code);
				// 有時最新版本可能 dump 到一半，正等待中。
				if (options.previous) {
					library_namespace.info(
					// options.previous: latest 的前一個版本。
					'get_latest_dump: Use previous version: ['
							+ options.previous + '].');
					options.latest = options.previous;
					delete options.previous;
					get_latest_dump(wiki_site_name, callback, options);
				} else {
					callback();
				}
				return;
			}

			library_namespace.log('get_latest_dump: ' + 'Got archive file ['
					+ source_directory + archive + '].');
			extract();
		});
	}

	/**
	 * 還原 XML text 成原先之文本。
	 * 
	 * @param {String}xml
	 *            XML text
	 * 
	 * @returns {String}還原成原先之文本。
	 * 
	 * @inner
	 */
	function unescape_xml(xml) {
		return xml.replace(/&quot;/g, '"')
		// 2016/3/11: Wikimedia dumps do NOT include '&apos;'.
		.replace(/&lt;/g, '<').replace(/&gt;/g, '>')
		// MUST be the last one.
		.replace(/&amp;/g, '&');
	}

	/**
	 * Parse Wikimedia dump xml text.
	 * 
	 * @param {String}xml
	 *            xml text
	 * @param {ℕ⁰:Natural+0}[start_index]
	 *            start index to parse.
	 * @param {Function}[filter]
	 *            filter :<br />
	 *            function(pageid, revid) { return {Boolean}need_process; }
	 * 
	 * @returns {Object}page_data =
	 *          {pageid,ns,title,revisions:[{revid,timestamp,'*'}]}
	 */
	function parse_dump_xml(xml, start_index, filter) {
		if (!(start_index >= 0))
			start_index = 0;

		// 主要頁面內容所在。
		var revision_index = xml.indexOf('<revision>', start_index);
		if (revision_index === NOT_FOUND
		// check '<model>wikitext</model>'
		// || xml.indexOf('<model>wikitext</model>') === NOT_FOUND
		) {
			// 有 end_mark '</page>' 卻沒有 '<revision>'
			library_namespace.error('parse_dump_xml: ' + 'Bad data:\n'
					+ xml.slice(0, index));
			return;
		}

		var pageid = xml.between('<id>', '</id>', start_index) | 0,
		// ((revid|0)) 可能出問題。
		revid = Math.floor(xml.between('<id>', '</id>', revision_index));

		if (filter && !filter(pageid, revid)) {
			if (false)
				library_namespace.debug('Skip id ' + pageid, 4,
						'parse_dump_xml');
			return;
		}

		// 模擬 revisions
		// 注意: 這必須依照 revisions model 變更!
		var revision = {
			// rev_id
			revid : revid,
			parentid : Math.floor(xml.between('<parentid>', '</parentid>',
					revision_index)),
			minor : xml.slice(revision_index).includes('<minor />'),
			user : unescape_xml(xml.between('<username>', '</username>',
					revision_index)),
			// e.g., '2000-01-01T00:00:00Z'
			timestamp : xml.between('<timestamp>', '</timestamp>',
					revision_index),
			slots : {
				main : {
					contentmodel : xml.between('<model>', '</model>',
							revision_index),
					contentformat : xml.between('<format>', '</format>',
							revision_index),
					// old: e.g., '<text xml:space="preserve" bytes="80">'??
					// 2016/3/11: e.g., '<text xml:space="preserve">'
					// 2020/5/16: <text bytes="41058" xml:space="preserve">
					'*' : unescape_xml(xml.between('<text ', '</text>',
							revision_index).between('>'))
				}
			},
			comment : unescape_xml(xml.between('<comment>', '</comment>',
					revision_index))
		};

		if (revision.minor)
			revision.minor = '';
		else
			delete revision.minor;

		// page_data 之 structure 按照 wiki API 本身之 return
		// page_data = {pageid,ns,title,revisions:[{revid,timestamp,'*'}]}
		// includes redirection 包含重新導向頁面.
		// includes non-ns0.
		var page_data = {
			pageid : pageid,
			ns : xml.between('<ns>', '</ns>', start_index) | 0,
			title : unescape_xml(xml
					.between('<title>', '</title>', start_index)),
			revisions : [ revision ]
		};

		return page_data;
	}

	// @inner
	function almost_latest_revid_of_dump(filepath, callback, options) {
		// 65536 === Math.pow(2, 16); as a block
		var buffer = Buffer.alloc(65536);
		var position = Math.max(0, node_fs.statSync(filepath).size
				- buffer.length);
		// file descriptor
		var fd = node_fs.openSync(filepath, 'r');
		var latest_revid_of_dump;

		while (true) {
			node_fs.readSync(fd, buffer, 0, buffer.length, position);
			var contents = buffer.toString('utf8');
			var matched, PATTERN = /<revision>[\s\n]*<id>(\d{1,16})<\/id>[\s\S]*?$/g;
			// Warning: almost_latest_revid_of_dump() 只能快速取得最新創建幾篇文章的最新
			// revid，而非最後的 revid。
			while (matched = PATTERN.exec(contents)) {
				matched = +matched[1];
				if (!(latest_revid_of_dump > matched))
					latest_revid_of_dump = matched;
			}
			if (latest_revid_of_dump > 0) {
				callback(latest_revid_of_dump);
				return;
			}

			if (position > 0) {
				position = Math.max(0, position - buffer.length
				// +256: 預防跳過 /<id>(\d{1,16})<\/id>/。
				// assert: buffer.length > 256
				+ 256);
			} else {
				// No data get.
				callback();
				return;
			}
		}
	}

	/**
	 * 讀取/parse Wikimedia dumps 之 xml 檔案。
	 * 
	 * assert: library_namespace.platform.nodejs === true
	 * 
	 * 注意: 必須自行 include 'application.platform.nodejs'。 <code>
	   CeL.run('application.platform.nodejs');
	 * </code><br />
	 * 
	 * @param {String}[filepath]
	 *            欲讀取的 .xml 檔案路徑。
	 * @param {Function}for_each_page
	 *            Calling for each page. for_each_page({Object}page_data)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String}file path
	 * 
	 * @see <a href="http://dumps.wikimedia.org/backup-index.html">Wikimedia
	 *      database backup dumps</a>
	 * @see https://www.mediawiki.org/wiki/Help:Export
	 * 
	 * @since 2016/3/11
	 */
	function read_dump(filepath, for_each_page, options) {
		if (typeof filepath === 'function'
				&& typeof for_each_page !== 'function' && !options) {
			// shift arguments
			options = for_each_page;
			for_each_page = filepath;
			filepath = null;
		}

		if (typeof filepath !== 'string' || !filepath.endsWith('.xml')) {
			if (filepath) {
				library_namespace.log('read_dump: ' + 'Invalid file path: ['
						+ filepath + '], try to get the latest dump file...');
			}
			get_latest_dump(filepath, function(filepath) {
				read_dump(filepath, for_each_page, options);
			}, options);
			// 警告: 無法馬上取得檔案時，將不會回傳任何資訊！
			return;
		}

		options = library_namespace.setup_options(options);

		if (options.get_latest_revid) {
			almost_latest_revid_of_dump(filepath, for_each_page, options);
			return;
		}

		if (typeof options.first === 'function') {
			options.first(filepath);
		}

		var run_last = function(quit_operation) {
			library_namespace.debug('Finish work.', 1, 'read_dump');
			if (run_last && typeof options.last === 'function') {
				options.last.call(file_stream, anchor, quit_operation);
			}
			// run once only.
			run_last = null;
		},
		/** {String}file encoding for dump file. */
		encoding = options.encoding || wiki_API.encoding,
		/** {String}處理中之資料。 */
		buffer = '',
		/** end mark */
		end_mark = '</page>',
		/**
		 * 錨/定位點.<br />
		 * anchor[pageid] = [ position of the xml dump file, page length in
		 * bytes ]
		 * 
		 * @type {Array}
		 */
		anchor = options.anchor && [],
		//
		filter = options.filter,
		/**
		 * dump file stream.
		 * 
		 * filepath: XML file path.<br />
		 * e.g., 'enwiki-20160305-pages-meta-current1.xml'
		 * 
		 * @type {String}
		 */
		file_stream = new node_fs.ReadStream(filepath, {
			// 加大 buffer。據測試，改到 1 MiB 反而慢。
			highWaterMark : 128 * 1024
		}),
		/**
		 * 掌握進度用。 (100 * file_status.pos / file_status.size | 0) + '%'<br />
		 * 此時 stream 可能尚未初始化，(file_stream.fd===null)，<br />
		 * 因此不能使用 fs.fstatSync()。
		 * 
		 * @type {Object}
		 */
		// file_status = node_fs.fstatSync(file_stream.fd);
		// file_status = node_fs.statSync(filepath),
		/** {Natural}檔案長度。掌握進度用。 */
		// file_size = node_fs.statSync(filepath).size,
		/**
		 * byte counter. 已經處理過的資料長度，為 bytes，非 characters。指向 buffer 起頭在 file
		 * 中的位置。
		 * 
		 * @type {ℕ⁰:Natural+0}
		 */
		bytes = 0;
		// 若是預設 encoding，會造成 chunk.length 無法獲得正確的值。
		// 若是為了能掌握進度，則不預設 encoding。
		// 2016/3/26: 但這會造成破碎/錯誤的編碼，只好放棄。
		file_stream.setEncoding(encoding);

		file_stream.on('error', options.onerror || function(error) {
			library_namespace.error('read_dump: '
			//
			+ 'Error occurred: ' + error);
		});

		/**
		 * 工作流程: 循序讀取檔案內容。每次讀到一個區塊/段落 (chunk)，檢查是不是有結束標記。若是沒有，則得繼續讀下去。<br />
		 * 有結束標記，則取出開始標記至結束標記中間之頁面文字資料，紀錄起始與結尾檔案位置，放置於 anchor[pageid]，並開始解析頁面。<br />
		 * 此時 bytes 指向檔案中 start position of buffer，可用來設定錨/定位點。
		 */

		library_namespace.info('read_dump: ' + 'Starting read dump file...');

		/**
		 * Parse Wikimedia dump xml file slice.
		 * 
		 * TODO: 把工具函數寫到 application.platform.nodejs 裡面去。
		 */
		function parse_buffer(index) {
			index = buffer.indexOf(end_mark, index);
			if (index === NOT_FOUND)
				// 資料尚未完整，繼續讀取。
				return;

			// 回頭找 start mark '<page>'
			var start_index = buffer.lastIndexOf('<page>', index);
			if (start_index === NOT_FOUND) {
				throw new Error('parse_buffer: '
						+ 'We have end mark without start mark!');
			}

			var page_data = parse_dump_xml(buffer, start_index, filter);
			if (!page_data) {
				if (false)
					library_namespace.debug(
					//
					'跳過此筆紀錄。 index: ' + index + ', buffer: ' + buffer.length,
							3, 'parse_dump_xml');
				bytes += Buffer.byteLength(buffer.slice(0, index
						+ end_mark.length), encoding);
				// 截斷。
				buffer = buffer.slice(index + end_mark.length);
				// 雖然跳過此筆紀錄，但既然還能處理，便需要繼續處理。
				return true;
			}

			var pageid = page_data.pageid,
			//
			start_pos = Buffer.byteLength(buffer.slice(0, start_index),
					encoding),
			// 犧牲效能以確保採用無須依賴 encoding 特性之實作法。
			page_bytes = Buffer.byteLength(buffer.slice(start_index, index
					+ end_mark.length), encoding),
			// [ start position of file, length in bytes ]
			page_anchor = [ bytes + start_pos, page_bytes ];
			if (false && anchor && (pageid in anchor))
				library_namespace.error('parse_buffer: '
						+ 'Duplicated page id: ' + pageid);
			if (anchor)
				anchor[pageid] = page_anchor;
			// 跳到下一筆紀錄。
			bytes += start_pos + page_bytes;
			// 截斷。
			buffer = buffer.slice(index + end_mark.length);

			if (wiki_API.quit_operation ===
			/**
			 * function({Object}page_data, {Natural}position: 到本page結束時之檔案位置,
			 * {Array}page_anchor)
			 */
			for_each_page(page_data, bytes, page_anchor/* , file_status */)) {
				// console.log(file_stream);
				library_namespace.info('read_dump: '
						+ 'Quit operation, 中途跳出作業...');
				file_stream.end();
				// Release memory. 釋放被占用的記憶體。
				buffer = null;
				run_last(true);
				return;
			}

			return true;
		}

		file_stream.on('data', function(chunk) {

			// 之前的 buffer 已經搜尋過，不包含 end_mark。
			var index = buffer.length;

			/**
			 * 當未採用 .setEncoding(encoding)，之後才 += chunk.toString(encoding)；
			 * 則一個字元可能被切分成兩邊，這會造成破碎/錯誤的編碼。
			 * 
			 * This properly handles multi-byte characters that would otherwise
			 * be potentially mangled if you simply pulled the Buffers directly
			 * and called buf.toString(encoding) on them. If you want to read
			 * the data as strings, always use this method.
			 * 
			 * @see https://nodejs.org/api/stream.html#stream_class_stream_readable
			 */
			buffer += chunk;
			// buffer += chunk.toString(encoding);

			// --------------------------------------------

			/**
			 * 以下方法廢棄 deprecated。 an alternative method: 另一個方法是不設定
			 * file_stream.setEncoding(encoding)，而直接搜尋 buffer 有無 end_mark '</page>'。直到確認不會打斷
			 * character，才解 Buffer。若有才分割、執行 .toString(encoding)。但這需要依賴最終
			 * encoding 之特性，並且若要採 Buffer.concat() 也不見得更高效， and
			 * Buffer.prototype.indexOf() needs newer node.js. 或許需要自己寫更底層的功能，直接
			 * call fs.read()。此外由於測試後，發現瓶頸在網路傳輸而不在程式碼執行，因此不如犧牲點效能，確保採用無須依賴
			 * encoding 特性之實作法。
			 */

			;

			// --------------------------------------------
			while (parse_buffer(index))
				// 因為 buffer 已經改變，reset index.
				index = 0;

			// 頁面大小系統上限 2,048 KB = 2 MB。
			if (buffer.length > 3e6) {
				library_namespace.error('read_dump: ' + 'buffer too long ('
						+ buffer.length
						+ ' characters)! Paused! 有太多無法處理的 buffer，可能是格式錯誤？');
				console.log(buffer.slice(0, 1e3) + '...');
				file_stream.pause();
				// file_stream.resume();
				// throw buffer.slice(0,1e3);
			}
		});

		file_stream.on('end', run_last);

		// * @returns {String}file path
		// * @returns {node_fs.ReadStream}file handler
		// return file_stream;
	}

	wiki_API.read_dump = read_dump;

	// ================================================================================================================

	/**
	 * 由 Wikimedia Toolforge 上的 database replication 讀取所有 ns0，且未被刪除頁面最新修訂版本之版本編號
	 * rev_id (包含重定向)。<br />
	 * 從 `page` 之 page id 確認 page 之 namespace，以及未被刪除。然後選擇其中最大的 revision id。
	 * 
	 * should get: { i: page id, r: latest revision id }
	 * 
	 * AND `page`.`page_is_redirect` = 0
	 * 
	 * https://stackoverflow.com/questions/14726789/how-can-i-change-the-default-mysql-connection-timeout-when-connecting-through-py
	 * 
	 * @type {String}
	 * 
	 * @see https://www.mediawiki.org/wiki/Manual:Page_table#Sample_MySQL_code
	 *      https://phabricator.wikimedia.org/diffusion/MW/browse/master/maintenance/tables.sql
	 */
	var all_revision_SQL = 'SELECT `page`.`page_id` AS `i`, `page`.`page_latest` AS `r` FROM `page` INNER JOIN `revision` ON `page`.`page_latest` = `revision`.`rev_id` WHERE `revision`.`rev_id` > 0 AND `revision`.`rev_deleted` = 0 AND `page`.`page_namespace` = 0';

	if (false) {
		/**
		 * 採用此 SQL 之極大問題: page.page_latest 並非最新 revision id.<br />
		 * the page.page_latest is not the latest revision id of a page in
		 * Wikimedia Toolforge database replication.
		 */
		all_revision_SQL = 'SELECT `page_id` AS `i`, `page_latest` AS `l` FROM `page` p INNER JOIN `revision` r ON p.page_latest = r.rev_id WHERE `page_namespace` = 0 AND r.rev_deleted = 0';
		/**
		 * 2019/7 deprecated: too late
		 */
		all_revision_SQL = 'SELECT `rev_page` AS `i`, MAX(`rev_id`) AS `r` FROM `revision` INNER JOIN `page` ON `page`.`page_id` = `revision`.`rev_page` WHERE `page`.`page_namespace` = 0 AND `revision`.`rev_deleted` = 0 GROUP BY `rev_page`';
	}
	if (false) {
		// for debug.
		all_revision_SQL += ' LIMIT 8';
	}

	/**
	 * 應用功能: 遍歷所有頁面。 CeL.wiki.traversal()
	 * 
	 * TODO: 配合 revision_cacher，進一步加快速度？
	 * 
	 * @param {Object}[config]
	 *            configuration
	 * @param {Function}for_each_page
	 *            Calling for each page. for_each_page({Object}page_data)
	 */
	function traversal_pages(config, for_each_page) {
		if (typeof config === 'function' && for_each_page === undefined) {
			// shift arguments.
			for_each_page = config;
			config = Object.create(null);
		} else {
			// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
			config = library_namespace.new_options(config);
		}

		if (config.use_dump_only) {
			library_namespace.debug('use dump only: '
					+ '僅僅使用 dump，不採用 API 取得最新頁面內容。', 1, 'traversal_pages');
			// @see process_dump.js
			if (config.use_dump_only === true) {
				// 這邊的 ((true)) 僅表示要使用，並採用預設值；不代表設定 dump file path。
				config.use_dump_only = null;
			}
			read_dump(config.use_dump_only, for_each_page, {
				// 一般來說只會用到 config.last，將在本函數中稍後執行，
				// 因此先不開放 config.first, config.last。

				// options.first(filepath) of read_dump()
				// first : config.first,

				// options.last.call(file_stream, anchor, quit_operation)
				// of read_dump()
				// last : config.last,

				// directory to restore dump files.
				// 指定 dump file 放置的 directory。
				// e.g., '/shared/cache/', '/shared/dumps/', '~/dumps/'
				// https://wikitech.wikimedia.org/wiki/Help:Tool_Labs/Developing#Using_the_shared_Pywikibot_files_.28recommended_setup.29
				// /shared/: shared files
				directory : config.dump_directory
			});
			return;
		}

		// 若不想使用 dump，可不設定 .filter。
		// 經測試，全部使用 API，最快可入50分鐘內，一般在 1-2 hours 左右。
		var dump_file;
		// 若 config.filter 非 function，表示要先比對 dump，若修訂版本號相同則使用之，否則自 API 擷取。
		// 並以 try_dump() 當作 filter()。
		// 設定 config.filter 為 ((true)) 表示要使用預設為最新的 dump，
		// 否則將之當作 dump file path。
		if (config.filter && (typeof config.filter !== 'function')) {
			dump_file = config.filter;
			if (dump_file === true) {
				// 這邊的 ((true)) 僅表示要使用，並不代表設定 dump file path。
				dump_file = null;
			}
		}

		var latest_revid_of_dump = config.latest_revid_of_dump;
		if (!(latest_revid_of_dump > 0)) {
			read_dump(dump_file, function(latest_revid_of_dump) {
				config.latest_revid_of_dump = latest_revid_of_dump;
				traversal_pages(config, for_each_page);
			}, {
				get_latest_revid : true,
				directory : config.dump_directory
			});
			return;
		}

		/** {Array}id/title list */
		var id_list, rev_list,
		//
		use_language = wiki_API.site_name(config, {
			get_all_properties : true
		}).language,
		/** {Object}用在 wiki_API.cache 之 configuration。 */
		cache_config = {
			// all title/id list
			file_name : config.file_name
			// all_newer_pages.*.json 存有當前語言維基百科所有較新頁面的id以及最新版本 (*:當前語言)
			|| traversal_pages.list_file + '.' + use_language + '.json',
			operator : function(list) {
				if (!Array.isArray(list)) {
					throw new Error('traversal_pages: No list get!');
				}
				if (list.length === 3
						&& JSON.stringify(list[0]) === JSON
								.stringify(traversal_pages.id_mark)) {
					library_namespace.info('traversal_pages: '
					// cache file 內容來自 The production replicas (database)，
					// 為經過下方 generate_revision_list() 整理過之資料。
					+ '此資料似乎為 page id，來自 production replicas: ['
							+ this.file_name + ']');
					// Skip list[0] = traversal_pages.id_mark
					rev_list = list[2];
					list = list[1];
					// 讀取 production replicas 時，儲存的是 pageid。
					list.is_id = true;
				} else {
					library_namespace.error('traversal_pages: '
					//
					+ 'cache 檔案未設定 rev_list：可能是未知格式？ ' + this.file_name);
				}
				id_list = list;
			}
		};

		// default: 採用 page_id 而非 page_title 來 query。
		var is_id = 'is_id' in config ? config.is_id : true;
		// node.js v0.11.16: In strict mode code, functions can only be declared
		// at top level or immediately within another function.
		function run_SQL_callback(error, rows, fields) {
			if (error) {
				library_namespace.error('traversal_pages: '
				//
				+ 'Error reading database replication!');
				library_namespace.error(error);
				config.no_database = error;
				delete config.list;
			} else {
				library_namespace.log('traversal_pages: ' + 'All '
						+ rows.length + ' pages. 轉換中...');
				// console.log(rows.slice(0, 2));
				var id_list = [], rev_list = [];
				rows.forEach(function(row) {
					// .i, .r: @see all_revision_SQL
					id_list.push(is_id ? row.i | 0 : row.i.toString('utf8'));
					rev_list.push(row.r);
				});
				config.list = [ traversal_pages.id_mark, id_list, rev_list ];
				// config.is_id = is_id;
			}
			// 因為已經取得所有列表，重新呼叫traversal_pages()。
			traversal_pages(config, for_each_page);
		}
		function generate_revision_list() {
			library_namespace.info('traversal_pages: '
			// Wikimedia Toolforge database replicas.
			+ '嘗試讀取 Wikimedia Toolforge 上之 database replication 資料，'
					+ '一次讀取完版本號 ' + latest_revid_of_dump
					+ ' 之後，所有頁面最新修訂版本之版本號 rev_id...');
			var SQL = is_id ? all_revision_SQL : all_revision_SQL.replace(
					/page_id/g, 'page_title');
			SQL = SQL.replace(/(`rev_id` > )0 /, '$1' + latest_revid_of_dump
					+ ' ');
			// assert: 當有比 dump_fire 裡面的更新的版本時，會被篩選出。
			var SQL_config = config && config.SQL_config
			//
			|| wiki_API.new_SQL_config
			// 光從 use_language 無法獲得如 wikinews 之資訊。
			&& wiki_API.new_SQL_config(config[KEY_SESSION] || use_language);
			wiki_API.run_SQL(SQL, run_SQL_callback, SQL_config);
			return wiki_API.cache.abort;
		}

		if (Array.isArray(config.list)) {
			library_namespace.debug('採用輸入之 list，列表長度 ' + config.list.length
					+ '。', 1, 'traversal_pages');
			cache_config.list = config.list;

		} else if (wiki_API.wmflabs && !config.no_database) {
			library_namespace.debug('若沒有 cache，則嘗試讀取 database 之資料。', 1,
					'traversal_pages');

			cache_config.list = generate_revision_list;

		} else {
			library_namespace.debug('採用 API type = allpages。', 1,
					'traversal_pages');
			cache_config.type = 'allpages';
		}

		function cache__for_each_page() {
			// 有設定 config[KEY_SESSION] 才能獲得如 bot 之類，一次讀取/操作更多頁面的好處。
			var session = wiki_API.session_of_options(config)
			//
			|| new wiki_API(config.user, config.password, config.language);
			// includes redirection 包含重新導向頁面.
			library_namespace.log('traversal_pages: ' + '開始遍歷所有 dump 頁面...');

			/**
			 * 工作原理:<code>

			 * 經測試，讀取 file 會比讀取 MariaDB 快，且又更勝於經 API 取得資料。
			 * 經測試，遍歷 xml dump file 約 3分鐘(see process_dump.js)，會比隨機存取快得多。
			 * database replicas @ Wikimedia Toolforge 無 `text` table，因此實際頁面內容不僅能經過 replicas 存取。

			# 先將最新的 xml dump file 下載到本地(實為 network drive)並解開: read_dump()
			# 由 Wikimedia Toolforge database replication 讀取所有 ns0 且未被刪除頁面最新修訂版本之版本號 rev_id (包含重定向): traversal_pages() + all_revision_SQL
			# 遍歷 xml dump file，若 dump 中為最新修訂版本，則先用之 (約 95%)；純粹篩選約需近 3 minutes: try_dump()
			# 經 API 讀取餘下 dump 後近 5% 更動過的頁面內容: traversal_pages() + wiki_API.prototype.work
			# 於 Wikimedia Toolforge，解開 xml 後；自重新抓最新修訂版本之版本號起，網路連線順暢時整個作業時間約 12分鐘。

			</code>
			 */

			function try_dump() {
				var start_read_time = Date.now(),
				// max_length = 0,
				count = 0, limit = config.limit,
				//
				file_size, rev_of_id = [], is_id = id_list.is_id;

				id_list.forEach(function(id, index) {
					if (id in rev_of_id)
						library_namespace.warn('traversal_pages: '
								+ '存在重複之id: ' + id);
					rev_of_id[id] = rev_list[index];
				});

				// Release memory. 釋放被占用的記憶體。
				id_list = null;
				rev_list = null;

				read_dump(dump_file,
				// e.g., /shared/cache/zhwiki-20200401-pages-articles.xml
				function(page_data, position, page_anchor) {
					// filter

					// TODO
					if (false && limit > 0 && count > limit) {
						library_namespace.log(count + '筆資料，已到 limit，跳出。');
					}

					if (++count % 1e4 === 0) {
						library_namespace.log(
						// 'traversal_pages: ' +
						wiki_API.estimated_message(
						//
						position, file_size, start_read_time,
						// e.g.,
						// "2730000 (99%): 21.326 page/ms [[Category:大洋洲火山岛]]"
						count) + '. ' + wiki_API.title_link_of(page_data));
					}

					// ----------------------------
					// Check data.

					if (false) {
						if (!CeL.wiki.content_of.page_exists(page_data)) {
							// error? 此頁面不存在/已刪除。
							return [ CeL.wiki.edit.cancel, '條目不存在或已被刪除' ];
						}
						if (page_data.ns !== 0
								&& page_data.title !== 'Wikipedia:サンドボックス') {
							return [ CeL.wiki.edit.cancel,
							// 本作業は記事だけを編集する
							'本作業僅處理條目命名空間或模板或 Category' ];
							throw new Error('非條目: '
							//
							+ wiki_API.title_link_of(page_data)
							//
							+ '! 照理來說不應該出現非條目的情況。');
						}

						/** {Object}revision data. 修訂版本資料。 */
						var revision = page_data && page_data.revisions
						// @see function parse_dump_xml()
						&& page_data.revisions[0],
						/** {Natural}所取得之版本編號。 */
						revid = revision && revision.revid;

						/** {String}page title = page_data.title */
						var title = CeL.wiki.title_of(page_data),
						/**
						 * {String}page content, maybe undefined. 條目/頁面內容 =
						 * CeL.wiki.revision_content(revision)
						 */
						content = CeL.wiki.content_of(page_data);

						// 當取得了多個版本，欲取得最新的一個版本：
						// content = CeL.wiki.content_of(page_data, 0);

						// 似乎沒 !page_data.title 這種問題。
						if (false && !page_data.title)
							library_namespace.warn('* No title: [['
									+ page_data.pageid + ']]!');

						// typeof content !== 'string'
						if (!content) {
							content =
							// e.g., 沒有頁面內容 or: 此頁面不存在/已刪除。
							// gettext_config:{"id":"no-content"}
							gettext('No content: ')
									+ CeL.wiki.title_link_of(page_data);
							// CeL.log(content);
							return [ CeL.wiki.edit.cancel, content ];
						}

						var last_edit_Date = CeL.wiki.content_of
								.edit_time(page_data);

						// [[Wikipedia:快速删除方针]]
						if (CeL.wiki.revision_content(revision)) {
							// max_length = Math.max(max_length,
							// CeL.wiki.revision_content(revision).length);

							// filter patterns

						} else {
							library_namespace.warn('* '
							// gettext_config:{"id":"no-content"}
							+ CeL.gettext('No content: ')
									+ CeL.wiki.title_link_of(page_data));
						}

						/** {Array} parsed page content 頁面解析後的結構。 */
						var parsed = CeL.wiki.parser(page_data).parse();
						// debug 用.
						// check parser, test if parser working properly.
						CeL.assert([ content, parsed.toString() ],
						// gettext_config:{"id":"wikitext-parser-checking-$1"}
						CeL.gettext('wikitext parser checking: %1', CeL.wiki
								.title_link_of(page_data)));
						if (CeL.wiki.content_of(page_data) !== parsed
								.toString()) {
							console.log(CeL.LCS(CeL.wiki.content_of(page_data),
									parsed.toString(), 'diff'));
							throw new Error('Parser error: '
									+ CeL.wiki.title_link_of(page_data));
						}

						// using for_each_token()
						parsed.each('link', function(token, index) {
							console.log(token);
						});
					}

					// 註記為 dump。可以 ((messages)) 判斷是在 .work() 中執行或取用 dump 資料。
					// page_data.dump = true;
					// page_data.dump = dump_file;

					// ------------------------------------
					// 有必要中途跳出時則須在 for_each_page() 中設定：
					// @ for_each_page(page_data, messages):
					if (false && need_quit) {
						if (messages) {
							// 當在 .work() 中執行時。
							messages.quit_operation = true;
							// 在 .edit() 時不設定內容。但照理應該會在 .page() 中。
							return;
						}
						// 當在本函數，下方執行時，不包含 messages。
						return CeL.wiki.quit_operation;
					}
					// ------------------------------------

					return for_each_page(page_data);

				}, {
					session : config[KEY_SESSION],
					// directory to restore dump files.
					directory : config.dump_directory,
					// options.first(filepath) of read_dump()
					first : function(xml_filepath) {
						dump_file = xml_filepath;
						try {
							file_size = node_fs.statSync(xml_filepath).size;
						} catch (e) {
							// 若不存在 dump_directory，則會在此出錯。
							if (e.code === 'ENOENT') {
								library_namespace.error('traversal_pages: '
										+ 'You need to create '
										+ 'the dump directory manually!');
							}
							throw e;
						}
					},
					// @see function parse_dump_xml(xml, start_index, filter)
					filter : function(pageid, revid) {
						if (!(pageid in rev_of_id)) {
							// 開始執行時，dump_file 裡面的是最新的頁面。
							// 注意: 若執行中有新的變更，不會 traversal 到本頁面最新版本！
							return true;
						}

						// Warning: almost_latest_revid_of_dump()
						// 只能快速取得最新創建幾篇文章的最新 revid，而非最後的 revid。
						if (latest_revid_of_dump < revid) {
							// assert: latest_revid_of_dump < revid
							latest_revid_of_dump = revid;
							// assert: revid <= rev_of_id[pageid]
							if (revid === rev_of_id[pageid]) {
								// 開始執行時，dump_file 裡面的是最新的頁面。
								// 注意: 若執行中有新的變更，不會 traversal 到本頁面最新版本！
								delete rev_of_id[pageid];
								return true;
							}
						}
					},
					// options.last.call(file_stream, anchor, quit_operation)
					// of read_dump()
					last : function(anchor, quit_operation) {
						var need_API = Object.keys(rev_of_id);
						need_API.is_id = is_id;

						// Release memory. 釋放被占用的記憶體。
						rev_of_id = null;

						// 警告: 這個數字可能不準確
						var all_articles = count + need_API.length;
						var percent = (1000 * count / all_articles | 0);
						percent = percent / 10;
						// e.g.,
						// "All 1491092 pages in dump xml file, 198.165 s."
						// includes redirection 包含重新導向頁面.
						library_namespace.log('traversal_pages: ' + 'All '
								+ count + '/' + all_articles
								+ ' pages using dump xml file (' + percent
								+ '%), '
								+ ((Date.now() - start_read_time) / 1000 | 0)
								+ ' s elapsed.');
						config.latest_revid_of_dump = latest_revid_of_dump;
						// library_namespace.set_debug(3);
						// 一般可以達到 95% 以上採用 dump file 的程度，10分鐘內跑完。
						run_work(need_API, quit_operation);
					}
				});
			}

			function run_work(id_list, quit_operation) {
				if (quit_operation) {
					library_namespace.info(
					// 直接結束作業
					'traversal_pages: 已中途跳出作業，不再讀取 production database。');
					// 模擬 wiki_API.prototype.work(config) 之config.last()，與之連動。
					// 此處僅能傳入 .work() 在執行 .last() 時提供的 arguments。
					// 但因為 .work() 在執行 .last() 時也沒傳入 arguments，
					// 因此此處亦不傳入 arguments。
					if (typeof config.last === 'function') {
						config.last();
					}
					return;
				}

				if (typeof config.filter === 'function')
					library_namespace.log('traversal_pages: '
							+ '開始讀取 production，執行 .work(): '
							+ (id_list && id_list.length) + ' pages...');
				session.work({
					is_id : id_list.is_id,
					no_message : true,
					no_edit : 'no_edit' in config ? config.no_edit : true,
					each : for_each_page,
					// 取得多個頁面內容所用之 options。
					// e.g., { rvprop : 'ids|timestamp|content' }
					// Warning: 這對經由 dump 取得之 page 無效！
					page_options : config.page_options,
					// run this at last.
					// 在wiki_API.prototype.work()工作最後執行此config.last()。
					// config.last(/* no meaningful arguments */)
					// 沒傳入 arguments的原因見前 "config.last();"。
					last : config.last
				}, id_list);
			}

			// 工作流程: config.filter() → run_work()

			if (config.filter && (typeof config.filter !== 'function')) {
				config.filter = try_dump;
			}

			if (typeof config.filter === 'function') {
				// preprocessor before running .work()
				// 可用於額外功能。
				// e.g., 若 revision 相同，從 dump 而不從 API 讀取。
				// id_list, rev_list 採用相同的 index。
				config.filter(run_work, for_each_page, id_list, rev_list);
			} else {
				run_work(id_list);
			}

		}

		wiki_API.cache(cache_config, cache__for_each_page, {
			// cache path prefix
			// e.g., task name
			prefix : config.directory
		});
	}

	/**
	 * ((traversal_pages.id_mark)) indicate it's page id instead of page title.
	 * 表示此 cache list 為 page id，而非 page title。 須採用絕不可能用來當作標題之 value。<br />
	 * 勿用過於複雜、無法 JSON.stringify() 或過於簡單的結構。
	 */
	traversal_pages.id_mark = {
		id_mark : 'id_mark'
	};

	/** {String}default list file name (will append .json by wiki_API.cache) */
	traversal_pages.list_file = 'all_newer_pages';

	// --------------------------------------------------------------------------------------------

	if (false) {
		(function() {
			/**
			 * usage of revision_cacher()
			 */

			var
			/** {revision_cacher}記錄處理過的文章。 */
			processed_data = new CeL.wiki.revision_cacher(base_directory
					+ 'processed.' + use_language + '.json');

			function for_each_page(page_data) {
				// Check if page_data had processed useing revid.
				if (processed_data.had(page_data)) {
					// skipped_count++;
					return [ CeL.wiki.edit.cancel, 'skip' ];
				}

				// 在耗費資源的操作後，登記已處理之 title/revid。其他為節省空間，不做登記。
				// 初始化本頁之 processed data: 只要處理過，無論成功失敗都作登記。
				var data_to_cache = processed_data.data_of(page_data);
				// or:
				// 注意: 只有經過 .data_of() 的才造出新實體。
				// 因此即使沒有要取得資料，也需要呼叫一次 .data_of() 以造出新實體、登記 page_data 之 revid。
				processed_data.data_of(page_data);
				processed_data.data_of(title, revid);

				// page_data is new than processed data

				// main task...

				// 成功才登記。失敗則下次重試。
				processed_data.remove(title);

				// 可能中途 killed, crashed，因此尚不能 write_processed()，
				// 否則會把 throw 的當作已處理過。
			}

			function finish_work() {
				// 由於造出 data 的時間過長，可能丟失 token，
				// 因此將 processed_data 放在 finish_work() 階段。
				processed_data.renew();
			}

			function onfail() {
				// 確保沒有因特殊錯誤產生的漏網之魚。
				titles.unique().forEach(processed_data.remove, processed_data);
			}

			// Finally: Write to cache file.
			processed_data.write();
		})();
	}

	/**
	 * 記錄處理過的文章。
	 * 
	 * @param {String}cache_file_path
	 *            記錄處理過的文章。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @constructor
	 */
	function revision_cacher(cache_file_path, options) {
		this.read(cache_file_path, options);
	}

	revision_cacher.prototype = {
		KEY_DATA : 'data',
		// id or 'revid'
		KEY_ID : 'id',
		encoding : wiki_API.encoding,
		// 連續跳過超過此頁面數 .show_skip 則會顯示訊息。
		show_skip : 9,

		// renew cache data
		renew : function() {
			// Object.create(null)
			this[this.KEY_DATA] = {};
		},
		read : function(cache_file_path, options) {
			if (typeof cache_file_path === 'object' && !options) {
				options = cache_file_path;
				cache_file_path = options.file;
			}
			if (cache_file_path) {
				this.file = cache_file_path;
			}

			var setup_new;
			if (options === true) {
				setup_new = false;
				options = {
					// Do NOT discard old data, use the old one.
					// 保存舊資料不廢棄。
					// 為了預防 this[this.KEY_DATA] 肥大，一般應將舊資料放在 this.cached，
					// 本次新處理的才放在 this[this.KEY_DATA]。
					preserve : true
				};
			} else {
				options = library_namespace.setup_options(options);
				setup_new = !options.preserve;
			}

			// this.options = options;

			// for .id_only, .KEY_ID, .encoding, .show_skip
			Object.assign(this, options);

			// reset skipped_count
			// this.skipped = 0;
			// 連續跳過計數。
			if (this.show_skip > 0) {
				this.continuous_skip = 0;
			}

			/**
			 * {Object}舊資料/舊結果報告。
			 * 
			 * cached_data[local page title] = { this.KEY_ID : 0,
			 * user_defined_data }
			 * 
			 * if set .id_only, then:<br />
			 * cached_data[local page title] = {Natural}revid<br />
			 * 這可進一步減少空間消耗。cached_data cache 已經處理完成操作的 data，但其本身可能也會占用一些以至大量RAM。
			 */
			var cached_data;
			try {
				cached_data = node_fs.readFileSync(cache_file_path,
						this.encoding);
			} catch (e) {
				// nothing get.
			}
			cached_data = cached_data && JSON.parse(cached_data) || {};
			this.cached = cached_data;

			if (setup_new) {
				Object.seal(cached_data);
				this.renew();
			} else {
				// this[this.KEY_DATA]: processed data
				this[this.KEY_DATA] = cached_data;
			}
		},
		write : function(cache_file_path, callback) {
			node_fs.writeFile(cache_file_path || this.file, JSON
					.stringify(this[this.KEY_DATA]), this.encoding, function(
					error) {
				// 因為此動作一般說來不會影響到後續操作，因此採用同時執行。
				library_namespace.debug('Write to cache file: done.', 1,
						'revision_cacher.write');
				if (typeof callback === 'function')
					callback(error);
			});
			return;

			node_fs.writeFileSync(cache_file_path || this.file, JSON
					.stringify(this[this.KEY_DATA]), this.encoding);
			library_namespace.debug('Write to cache file: done.', 1,
					'revision_cacher.write');
			if (typeof callback === 'function')
				callback(error);
		},

		// 注意: 若未 return true，則表示 page_data 為正規且 cache 中沒有，或較 cache 新的頁面資料。
		had : function(page_data) {
			// page_data 為正規?
			if (!wiki_API.content_of.page_exists(page_data)) {
				// error? 此頁面不存在/已刪除。
				return 'not exists';
			}

			var
			/** {String}page title = page_data.title */
			title = wiki_API.title_of(page_data),
			/** {Natural}所取得之版本編號。 */
			revid = wiki_API.content_of.revision(page_data);
			if (revid) {
				revid = revid.revid;
			}

			// console.log(CeL.wiki.content_of(page_data));

			library_namespace.debug(wiki_API.title_link_of(title) + ' revid '
					+ revid, 4, 'revision_cacher.had');
			if (title in this.cached) {
				var this_data = this[this.KEY_DATA], setup_new = this_data !== this.cached,
				//
				cached = this.cached[title], cached_revid = this.id_only ? cached
						: cached[this.KEY_ID];
				library_namespace.debug(wiki_API.title_link_of(title)
						+ ' cached revid ' + cached_revid, 4,
						'revision_cacher.had');
				if (cached_revid === revid) {
					if (setup_new) {
						// copy old data.
						// assert: this_data[title] is modifiable.
						this_data[title] = cached;
					}
					// this.skipped++;
					this.continuous_skip++;
					library_namespace.debug('Skip ' + this.continuous_skip
							+ ': ' + wiki_API.title_link_of(title) + ' revid '
							+ revid, 2, 'revision_cacher.had');
					return true;
				}
				// assert: cached_revid < revid
				// rebuild data
				if (setup_new) {
					delete this_data[title];
				}
				// 因為要顯示連續跳過計數資訊，因此不先跳出。
				// return false;
			}

			if (this.continuous_skip > 0) {
				if (this.continuous_skip > this.show_skip) {
					library_namespace.debug(
					// 實際運用時，很少會到這邊。
					'Skip ' + this.continuous_skip + ' pages.', 1,
							'revision_cacher.had');
				}
				this.continuous_skip = 0;
			}
		},
		// 注意: 只有經過 .data_of() 的才造出新實體。
		// 因此即使沒有要取得資料，也需要呼叫一次 .data_of() 以造出新實體、登記 page_data 之 revid。
		data_of : function(page_data, revid) {
			var this_data = this[this.KEY_DATA],
			/** {String}page title = page_data.title */
			title = typeof page_data === 'string' ? page_data : wiki_API
					.title_of(page_data);

			if (title in this_data) {
				return this_data[title];
			}

			// 登記 page_data 之 revid。
			if (!revid && (!(revid = wiki_API.content_of.revision(page_data))
			/** {Natural}所取得之版本編號。 */
			|| !(revid = revid.revid))) {
				library_namespace.error('revision_cacher.data_of: '
				// 照理來說，會來到這裡的都應該是經過 .had() 確認，因此不該出現此情況。
				+ 'No revision id (.revid): (' + (typeof page_data) + ') '
						+ JSON.stringify(page_data).slice(0, 800));
				return;
			}

			if (this.id_only) {
				// 注意: 這個時候回傳的不是 {Object}
				return this_data[title] = revid;
			}

			/** {Object}本頁之 processed data。 */
			var data = this_data[title] = {};
			data[this.KEY_ID] = revid;
			return data;
		},
		remove : function(page_data) {
			var this_data = this[this.KEY_DATA],
			/** {String}page title = page_data.title */
			title = typeof page_data === 'string' ? page_data : wiki_API
					.title_of(page_data);

			if (title in this_data) {
				delete this_data[title];
			}
		}
	};

	// ------------------------------------------------------------------------

	function get_path_of_category(file_name, options) {
		options = library_namespace.setup_options(options);
		var category = this;
		var session = wiki_API.session_of_options(options);

		var path = [ session.remove_namespace(category.title) ];
		while (category.parent_categories) {
			var _category = category.parent_categories[0];
			category.parent_categories.forEach(function(__category) {
				if (__category.depth < _category.depth)
					_category = __category;
			});
			category = _category;
			path.unshift(session.remove_namespace(category.title));
		}

		var directory = path.join(library_namespace.env.path_separator);
		if (options.directory) {
			directory = library_namespace.append_path_separator(
					options.directory, directory);
		}
		if (options.create_directory !== false
				&& !library_namespace.directory_exists(directory)) {
			library_namespace.create_directory(directory,
					options.create_directory || {
						recursive : true
					});
		}

		if (file_name)
			path.push(session.remove_namespace(file_name));
		path = path.join(library_namespace.env.path_separator);
		// console.trace([ directory, path ]);
		return path;
	}

	if (false) {
		/**
		 * <code>
		When executing `session.download('Category:name', ...)`,
		wiki_API_download() will:
		# Get category tree without files, using session.category_tree(). session.category_tree() will use categoryinfo and categorymembers (category only) to increase speed.
		# Back to wiki_API_download(). For each category, get file_info (imageinfo with URL, latest date) with generator:categorymembers to get files in category.
		# For each file, check the file name and timestamp (get from generator:categorymembers), only download new file. (function download_next_file with options.max_threads)
		</code>
		 */
		wiki_session.download('Category:name', {
			directory : './',
			max_threads : 4,
			// depth of categories
			depth : 4,
			// Only download files with these formats.
			// download_derivatives : ['wav', 'mp3', 'ogg'],
			// Warning: Will skip downloading if there is no new file!
			download_derivatives : 'mp3',
			// A function to filter result pages. Return `true` if you want to
			// keep the element.
			page_filter : function(page_data) {
				return page_data.title.includes('word');
			}
		}, function(file_data_list, error) {
		});
		wiki_session.download('File:name', {
			directory : './'
		}, function(file_data, error) {
		});
	}

	// Download files to local path.

	// TODO:
	// 鏡像: 從本地目錄中刪除遠端不存在的文件
	// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bvideoinfo
	// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Btranscodestatus
	// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bstashimageinfo

	// wiki_API.download()
	// wiki_session.download(file_title, local_path || options, callback);
	function wiki_API_download(titles, options, callback) {
		// Download non-vector version of .svg
		// @see https://phabricator.wikimedia.org/T60663
		// wiki_session.download('File:Example.svg',{width:100});

		// assert: this: session
		var session = this;

		// console.trace(next);
		if (typeof titles === 'string' || wiki_API.is_page_data(titles)) {
			if (session.is_namespace(titles, 'Category')) {
				// Get category tree without files, using
				// session.category_tree().
				session.category_tree(titles, function(list, error) {
					if (error) {
						callback(undefined, error);
					} else {
						// assert: list.list_type === 'category_tree'
						wiki_API_download
								.call(session, list, options, callback);
					}
				},
				// pass options.depth: depth of categories
				Object.assign({
					namespace : 'Category',
					set_attributes : true
				}, options));
				return;
			}

			titles = [ titles ];
		} else if (!Array.isArray(titles)
				&& !(library_namespace.is_Object(titles) && titles[wiki_API.KEY_generator_title])) {
			session.next(callback, titles, new Error('Invalid file_title!'));
			return;
		}

		if (titles.list_type === 'category_tree' && !options.no_category_tree
		// && session.is_namespace(titles.namespace, 'Category')
		) {
			// Back to wiki_API_download(). For each category, get file_info
			// (imageinfo with URL, latest date) with generator:categorymembers
			// to get files in category.
			if (!titles.categories_to_process) {
				titles.categories_to_process = Object
						.values(titles.flat_subcategories);
				titles.categories_to_process.total_length = titles.categories_to_process.length;
				// options = library_namespace.new_options(options);
				wiki_API.add_session_to_options(session, options);
				options.download_file_to
				// Will create directory structure for download files.
				= function(file_url, page_data, index, pages, options) {
					// console.trace(pages);
					// console.trace(titles.flat_subcategories);
					// console.trace(pages.title);
					// console.trace(session.remove_namespace(pages.title[wiki_API.KEY_generator_title]));
					var category = titles.flat_subcategories[session
							.remove_namespace(pages.title[wiki_API.KEY_generator_title])];
					// console.trace([page_data, category]);
					var file_path = decodeURIComponent(file_url
							.match(/[^\\\/]+$/)[0]);
					file_path = get_path_of_category.call(category, file_path,
							options);
					// console.trace(file_path);
					return file_path;
				};
			}
			if (titles.categories_to_process.length === 0) {
				session.next(callback, titles);
				return;
			}
			var categories_to_process = titles.categories_to_process.pop();
			library_namespace
					.info('wiki_API_download: '
							+ (titles.categories_to_process.total_length - titles.categories_to_process.length)
							+ '/'
							+ titles.categories_to_process.total_length
							+ ' '
							+ wiki_API
									.title_link_of(categories_to_process.title)
							+ '	of ' + wiki_API.title_link_of(titles.title));
			wiki_API_download.call(session, wiki_API.generator_parameters(
					'categorymembers', {
						title : categories_to_process.title,
						namespace : session.namespace('File'),
						limit : 'max'
					}), options, wiki_API_download.bind(session, titles,
					options, callback));
			return;
		}

		if (false && titles.length < 5000) {
			// 不處理這個部分以節省資源。
			titles = titles.map(function(page) {
				// assert: page title starts with "File:"
				return session.normalize_title(page.title || page);
			}).filter(function(page_title) {
				return !!page_title;
			}).unique();
		}

		if (titles.length === 0) {
			library_namespace.debug('No file to download.', 1,
					'wiki_API_download');
			session.next(callback, titles);
			return;
		}

		if (typeof options === 'string') {
			options = titles.length > 1 ? {
				directory : options
			} : {
				file_name : options
			};
		} else {
			options = library_namespace.new_options(options);
		}

		// ----------------------------------------------------------

		var file_info_type = options.file_info_type
				|| (options.download_derivatives ? 'videoinfo' : 'imageinfo');
		if (options.download_derivatives && file_info_type !== 'videoinfo') {
			library_namespace
					.warn('wiki_API_download: '
							+ 'You should set options.file_info_type = "videoinfo" for downloading derivatives!');
		}

		var threads_now = 0;
		// For each file, check the file name and timestamp (get from
		// generator:categorymembers), only download new file.
		function download_next_file(data, error, XMLHttp) {
			var page_data;
			if (options.index > 0 && (page_data = titles[options.index - 1])) {
				// cache file name really writed to
				// @see function get_URL_cache_node()
				if (XMLHttp && XMLHttp.cached_file_path) {
					page_data.cached_file_path = XMLHttp.cached_file_path;
				}
				if (error === library_namespace.get_URL_cache.NO_NEWS) {
					page_data.no_new_data = true;
				} else if (error) {
					page_data.error = error;
					titles.error_titles.push([ page_data.title, error ]);
					library_namespace.error('Cannot download '
							+ page_data.title + ': ' + error);
				}
			}

			// console.trace([ threads_now, options.index, titles.length ]);
			if (options.index >= titles.length) {
				if (threads_now === 0) {
					// All titles downloaded.
					session.next(callback, titles,
							titles.error_titles.length > 0
									&& titles.error_titles);
				}
				return;
			}

			// ----------------------------------
			// prepare to download

			page_data = titles[options.index++];
			// console.trace(titles);
			// console.trace([ options.index, page_data ]);
			// assert: !!page_data === true
			var file_info = page_data && page_data[0];
			if (!file_info) {
				if (page_data) {
					titles.error_titles.push([ page_data && page_data.title,
							'No file_info get' ]);
					library_namespace.error('Cannot download '
							+ page_data.title + (error ? ': ' + error : ''));
				}
				download_next_file();
				return;
			}

			// download newer only
			// console.trace(file_info);
			options.web_resource_date = file_info.timestamp;

			// console.trace(page_data);
			// console.trace(file_info);

			// @see
			// [[Commons:FAQ#What_are_the_strangely_named_components_in_file_paths?]]
			// to get the URL directly.
			var file_url = file_info.thumburl || file_info.url;
			var file_url_list = options.download_derivatives;

			if (!file_url_list || !Array.isArray(file_info.derivatives)) {
				download_file(file_url, true);
				return;
			}

			// --------------------------------------------

			// console.trace([ file_url_list, file_info ]);
			if (typeof file_url_list === 'function')
				file_url_list = file_url_list(page_data);

			file_url = Array.isArray(file_url_list) ? file_url_list
					: [ file_url_list ];
			file_url_list = [];
			file_url.forEach(function(file_url) {
				if (typeof file_url !== 'string')
					return;

				if (file_url.startsWith('https://')) {
					file_url_list.push(file_url);
					return;
				}

				file_url = file_url.toLowerCase();
				file_info.derivatives.forEach(function(media_info) {
					// e.g., type: 'audio/ogg; codecs="vorbis"'
					if (media_info.type.toLowerCase().startsWith(file_url)
					// e.g., shorttitle: 'WAV source'
					|| media_info.shorttitle.toLowerCase()
					// e.g., shorttitle: 'Ogg Vorbis'
					.startsWith(file_url) || media_info.transcodekey
					// e.g., transcodekey: 'mp3'
					&& media_info.transcodekey.toLowerCase() === file_url) {
						file_url_list.push(media_info.src);
					}
				});
			});
			// console.trace(file_url_list);

			if (file_url_list.length === 0) {
				// 放棄下載本檔案。
				download_next_file();
				return;
			}

			// Release memory. 釋放被占用的記憶體。
			file_url = null;

			// 警告: 這邊會自動產生多線程下載!
			file_url_list.forEach(function(file_url, index) {
				download_file(file_url,
				//
				index === file_url_list.length);
			});
		}

		function download_file(file_url, multi_threads) {
			// console.trace([ file_url, options ]);

			var error;
			// !see options.file_name_processor @ function get_URL_cache_node()
			if (typeof options.download_file_to === 'function') {
				var index = options.index - 1;
				try {
					options.file_name = options.download_file_to(file_url,
							titles[index], index, titles, options);
				} catch (e) {
					error = e;
					console.error(e);
					titles.error_titles.push([ page_data.title, e ]);
				}
			}

			if (!error) {
				threads_now++;
				library_namespace.get_URL_cache(file_url, function() {
					threads_now--;
					download_next_file.apply(null, arguments);
				}, options);
			}

			if (multi_threads
					&& (options.index < titles.length ? threads_now < options.max_threads
							: threads_now === 0)) {
				download_next_file();
			}
		}

		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bimageinfo
		var file_info_options = Object.assign({
			type : file_info_type,
			// 'url|size|mime|timestamp'
			iiprop : 'url|timestamp',
			viprop : 'url|timestamp|derivatives',
			page_filter : options.page_filter,
			multi : true
		}, options.file_info_options);
		if (options.width > 0)
			file_info_options.iiurlwidth = options.width;
		if (options.height > 0)
			file_info_options.iiurlheight = options.height;

		// console.trace(file_info_options);
		// page title to raw data URL
		wiki_API.list(titles, function(pages, target) {
			// console.trace([pages, target, options]);
			if (pages.error) {
				session.next(callback, titles, pages.error);
				return;
			}
			// console.trace([ pages, file_info_options ]);
			titles = pages;
			options.index = 0;
			titles.error_titles = [];
			// console.trace(titles);
			download_next_file();
		}, wiki_API.add_session_to_options(session, file_info_options));
	}

	// ------------------------------------------------------------------------

	// export 導出.

	// @static
	Object.assign(wiki_API, {
		download : wiki_API_download,

		parse_dump_xml : parse_dump_xml,
		traversal : traversal_pages,

		revision_cacher : revision_cacher
	});

	return wiki_API_page;
}

});
// CeL.application.net.wiki.list
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): list
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2019/10/10 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.list',

	require : 'application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	// for library_namespace.get_URL()
	+ '|application.net.Ajax.'
	//
	+ '|application.net.wiki.query.'
	// wiki_API.parse.redirect()
	// + '|application.net.wiki.parser.'
	,

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	var is_api_and_title = wiki_API.is_api_and_title, normalize_title_parameter = wiki_API.normalize_title_parameter, set_parameters = wiki_API.set_parameters;

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	// ------------------------------------------------------------------------

	var KEY_generator_title = typeof Symbol === 'function' ? Symbol('generator title')
			: 'generator title';
	function generator_parameters(generator, options) {
		if (typeof options === 'string') {
			options = {
				title : options
			};
		}

		var parameters = {
			generator : generator
		};
		var prefix = get_list.type[generator];
		if (Array.isArray(prefix))
			prefix = prefix[0];

		for ( var parameter in options) {
			var value = options[parameter];
			if (parameter.startsWith('g' + prefix)) {
				parameters[parameter] = value;
				continue;
			}
			if (parameter.startsWith(prefix) && !(('g' + parameter) in options)) {
				parameters['g' + parameter] = value;
				continue;
			}
			parameter = 'g' + prefix + parameter;
			if (!(parameter in parameters))
				parameters[parameter] = value;
		}

		// using (KEY_generator_title in parameters) to test if parameters is a
		// generator title.
		parameters[KEY_generator_title] = parameters['g' + prefix + 'title'];

		return parameters;
	}

	wiki_API.generator_parameters = generator_parameters;
	wiki_API.KEY_generator_title = KEY_generator_title;

	// ------------------------------------------------------------------------

	/**
	 * 自 title 頁面取得後續檢索用索引值 (continuation data)。<br />
	 * e.g., 'continue'
	 * 
	 * @param {String|Array}title
	 *            the page title to search continue information
	 * @param {Function|Object}callback
	 *            回調函數 or options。 callback({Object} continue data);
	 * 
	 * @see https://www.mediawiki.org/wiki/API:Query#Continuing_queries
	 */
	function get_continue(title, callback) {
		var options;
		if (library_namespace.is_Object(callback)) {
			callback = (options = callback).callback;
		} else {
			// 前置處理。
			options = Object.create(null);
		}

		wiki_API.page(title, function(page_data) {
			var matched, done, content = wiki_API.content_of(page_data),
			// {RegExp}[options.pattern]:
			// content.match(pattern) === [ , '{type:"continue"}' ]
			pattern = options.pattern,
			// {Object} continue data
			data = Object.create(null);

			if (!pattern) {
				pattern = new RegExp(library_namespace.to_RegExp_pattern(
				//
				(options.continue_key || wiki_API.prototype.continue_key)
						.trim())
						+ ' *:? *({[^{}]{0,80}})', 'g');
			}
			library_namespace.debug('pattern: ' + pattern, 2, 'get_continue');

			while (matched = pattern.exec(content)) {
				library_namespace.debug('continue data: [' + matched[1] + ']',
						2, 'get_continue');
				if (!(done = /^{\s*}$/.test(matched[1])))
					data = Object.assign(data, JSON.parse(matched[1]));
			}

			// options.get_all: get all continue data.
			if (!options.get_all)
				if (done) {
					library_namespace.debug('最後一次之後續檢索用索引值為空，可能已完成？', 1,
							'get_continue');
					data = null;
				} else {
					// {String|Boolean}[options.type]: what type to search.
					matched = options.type;
					if (matched in get_list.type)
						matched = get_list.type[matched] + 'continue';

					content = data;
					data = Object.create(null);
					if (matched in content) {
						data[matched] = content[matched];
					}
				}

			// callback({Object} continue data);
			callback(data || Object.create(null));
		}, options);
	}

	// ------------------------------------------------------------------------

	if (false) {
		// 若是想一次取得所有 list，不應使用單次版:
		// 注意: arguments 與 get_list() 之 callback 連動。
		wiki.categorymembers('Category_name', function(pages, error) {
			console.log(pages.length);
		}, {
			limit : 'max'
		});

		// 而應使用循環取得資料版:
		// method 1: using wiki_API_list()
		CeL.wiki.list(title, function(list/* , target, options */) {
			// assert: Array.isArray(list)
			if (list.error) {
				;
			} else {
				CeL.log('Get ' + list.length + ' item(s).');
			}
		}, Object.assign({
			// [KEY_SESSION]
			session : wiki,
			type : list_type
		}, options));

		// method 2:
		CeL.wiki.cache({
			type : 'categorymembers',
			list : 'Category_name'
		}, function(list) {
			CeL.log('Get ' + list.length + ' item(s).');
		}, {
			// default options === this
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bcategorymembers
			namespace : '0|1',
			// [KEY_SESSION]
			session : wiki,
			// title_prefix : 'Template:',
			// cache path prefix
			prefix : base_directory,
			// Do not write cache file to disk.
			cache : false
		});
	}

	function combine_by_page(pages, unique_attribute) {
		var hash = Object.create(null);
		pages.forEach(function(page_data) {
			var value = page_data[unique_attribute];
			if (page_data.title in hash) {
				hash[page_data.title][unique_attribute].push(value);
			} else {
				page_data[unique_attribute] = [ value ];
				hash[page_data.title] = page_data;
			}
		});
		return Object.values(hash);
	}

	// allow async functions
	// https://github.com/tc39/ecmascript-asyncawait/issues/78
	var get_list_async_code = '(async function() {'
			+ ' try { if (wiki_API_list.exit === await options.for_each(item)) options.abort_operation = true; }'
			+ ' catch(e) { library_namespace.error(e); }' + ' })();';

	/**
	 * get list. 檢索/提取列表<br />
	 * 注意: 可能會改變 options！
	 * 
	 * TODO: options.get_sub options.ns
	 * 
	 * TODO: using iterable protocol
	 * https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Iteration_protocols
	 * 
	 * @param {String}type
	 *            one of get_list.type
	 * @param {String}[title]
	 *            page title 頁面標題。
	 * @param {Function}callback
	 *            回調函數。 callback(pages, error)<br />
	 *            注意: arguments 與 get_list() 之 callback 連動。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項. options.page_filter(): A function to
	 *            filter result pages. Return `true` if you want to keep the
	 *            element. filter result pages.
	 */
	function get_list(type, title, callback, options) {
		// console.trace(title);
		library_namespace.debug(type
				+ (title ? ' ' + wiki_API.title_link_of(title) : '')
				+ ', callback: ' + callback, 3, 'get_list');

		var parameter,
		// 預處理器
		title_preprocessor,
		/** {String} 前置字首。 */
		prefix = get_list.type[type];
		library_namespace.debug('parameters: ' + JSON.stringify(prefix), 3,
				'get_list');
		if (Array.isArray(prefix)) {
			// list_type : [ {String}prefix, {String}:query=prop|list,
			// {Function}title_preprocessor ]
			parameter = prefix[1] || get_list.default_parameter;
			title_preprocessor = prefix[2];
			prefix = prefix[0];
		} else {
			parameter = get_list.default_parameter;
		}

		var action = {
			action : 'query'
		};
		action[parameter] = type;
		if (wiki_API.need_get_API_parameters(action, options, get_list,
				arguments)) {
			return;
		}

		if (typeof options === 'string' || typeof options === 'number') {
			// 當作 namespace。
			options = {
				// {ℕ⁰:Natural+0|String|Object}namespace
				// one of wiki_API.namespace.hash.
				namespace : options
			};
		} else if (!library_namespace.is_Object(options)) {
			options = {
				// original option
				namespace : options
			};
		}
		if ('namespace' in options) {
			// 檢查 options.namespace。
			options.namespace = wiki_API.namespace(options.namespace);
			if (options.namespace === undefined) {
				library_namespace
						.warn('get_list: options.namespace 並非為正規 namespace！將被忽略！');
				delete options.namespace;
			}
		}

		if (is_api_and_title(title, true)) {
			// 處理 [ {String}API_URL, {String}title or {Object}page_data ]
			action = title.clone();
		} else {
			// assert: {String}title
			action = [ , title ];
		}

		var continue_from = prefix + 'continue';
		var session = wiki_API.session_of_options(options);
		// 注意: 這裡會改變 options！
		if (!options.next_mark) {
			// 紀錄各種後續檢索用索引值。應以 append，而非整個換掉的方式更改。
			// 對舊版本須用到 for (in .next_mark)
			library_namespace.debug('未傳入後續檢索用索引值。', 4, 'get_list');
			// initialization
			options.next_mark = Object.create(null);
		} else if (false && Object.keys(options.next_mark).length > 0) {
			// assert: library_namespace.is_Object(options.next_mark)
			// e.g., called by function wiki_API_list()
			// console.trace([ type, title, options.next_mark ]);
			library_namespace
					.debug(
							'直接傳入了 options.next_mark；可延續使用上次的後續檢索用索引值，避免重複 loading page。',
							4, 'get_list');

			// Object.assign(options, options.next_mark);
			for ( var next_mark_key in options.next_mark) {
				if (next_mark_key !== 'continue') {
					options[next_mark_key]
					// {String}options.next_mark[next_mark_key]:
					// 後續檢索用索引值。後続の索引。
					= options.next_mark[next_mark_key];
					// 經由,經過,通過來源
					library_namespace.debug('continue from ['
							+ options[next_mark_key] + '] via options', 1,
							'get_list');
				}
				delete options.next_mark[next_mark_key];
			}
			// 刪掉標記，避免無窮迴圈。
			delete options.get_continue;
			console.trace(options);

			// usage:
			// options: { next_mark : {} , get_continue : log_to }
			if (false && (continue_from in options.next_mark)) {
				// {String}options.next_mark[continue_from]:
				// 後續檢索用索引值。後続の索引。
				options[continue_from] = options.next_mark[continue_from];
				// 經由,經過,通過來源
				library_namespace.debug('continue from ['
						+ options[continue_from] + '] via options', 1,
						'get_list');
				// 刪掉標記，避免無窮迴圈。
				delete options.get_continue;
			}
		}
		// 若未設定 .next_mark，才會自 options.get_continue 取得後續檢索用索引值。
		if (typeof options.get_continue === 'string') {
			// 設定好 options.get_continue，以進一步從 page 取得後續檢索用索引值。
			// 採用 session 之 domain。
			options.get_continue = [ session.API_URL, options.get_continue ];
		}

		// options.get_continue: 用以取用後續檢索用索引值之 title。
		// {String}title || {Array}[ API_URL, title ]
		if (options.get_continue) {
			// 在多人共同編輯的情況下，才需要每次重新 load page。
			get_continue(Array.isArray(options.get_continue)
			//
			? options.get_continue : [ action[0], options.get_continue ], {
				type : type,
				session : session,
				continue_key : session.continue_key,
				callback : function(continuation_data) {
					if (continuation_data = continuation_data[continue_from]) {
						library_namespace.info('get_list: continue from ['
								+ continuation_data + '] via page');
						// 注意: 這裡會改變 options！
						// 刪掉標記，避免無窮迴圈。
						delete options.get_continue;
						// 設定/紀錄後續檢索用索引值，避免無窮迴圈。
						options.next_mark
						//
						[continue_from] = continuation_data;
						// console.trace(options.next_mark);
						get_list(type, title, callback, options);

					} else {
						// delete options[continue_from];
						library_namespace.debug('Nothing to continue!', 1,
								'get_list');
						if (typeof callback === 'function') {
							callback(undefined, new Error(
									'Nothing to continue!'));
						}
					}
				}
			});
			return;
		}

		continue_from = options[continue_from];
		if (false) {
			library_namespace.debug(type
					+ (title ? ' ' + wiki_API.title_link_of(title) : '')
					+ ': start from ' + continue_from, 2, 'get_list');
		}

		// ------------------------------------------------

		// 處理輸入過長的列表。
		if (Array.isArray(action[1]) && (options.no_post_data
		//
		? encodeURIComponent(action[1].map(function(page_data) {
			return wiki_API.title_of(page_data);
		}).join('|')).length > get_list.slice_chars
		//
		: action[1].length >
		//
		wiki_API.max_slice_size(session, options/* , action[1] */))) {
			options.next_title_index = 0;
			// multiple pages
			options.multi = true;
			options.starting_time = Date.now();
			var get_next_batch = function(pages, error) {
				if (error) {
					callback(null, error);
					return;
				}

				if (!pages) {
					// The first time running
				} else if (options.overall_pages) {
					options.overall_pages.append(pages);
				} else {
					pages.titles = action[1];
					options.overall_pages = pages;
				}
				var latest_batch_title_index = options.next_title_index;
				if (!(latest_batch_title_index < action[1].length)) {
					pages = options.overall_pages;
					delete options.overall_pages;
					// delete options.multi;
					callback(pages);
					return;
				}

				if (options.no_post_data) {
					var slice_chars = 0;
					do {
						slice_chars += encodeURIComponent(wiki_API
								.title_of(action[1][options.next_title_index++])
								+ '|').length;
						if (slice_chars > get_list.slice_chars) {
							options.next_title_index--;
							if (latest_batch_title_index === options.next_title_index) {
								library_namespace.error('第一個元素的長度過長!');
								options.next_title_index++;
							}
							break;
						}
					} while (options.next_title_index < action[1].length);
				} else {
					options.next_title_index += wiki_API.max_slice_size(
							session, options);
					if (options.next_title_index > action[1].length)
						options.next_title_index = action[1].length;
				}

				library_namespace.log_temporary('get_list: '
						+ type
						+ ' '
						+ latest_batch_title_index
						+ '/'
						+ action[1].length
						+ wiki_API.estimated_message(latest_batch_title_index,
								action[1].length, options.starting_time));
				get_list(type, [
						action[0],
						action[1].slice(latest_batch_title_index,
								options.next_title_index) ], get_next_batch,
						options);
			};
			get_next_batch();
			return;
		}

		// ------------------------------------------------

		if (!library_namespace.is_Object(action[1])
				|| wiki_API.is_page_data(action[1])) {
			action[1] = action[1] ? '&'
			// allpages 不具有 title。
			+ (parameter === get_list.default_parameter ? prefix : '')
			// 不能設定 wiki_API.query.title_param(action, true)，有些用 title 而不用
			// titles。
			// e.g., 20150916.Multiple_issues.v2.js
			+ wiki_API.query.title_param(action[1]/* , true, options.is_id */)
					: '';

			if (typeof title_preprocessor === 'function') {
				// title_preprocessor(title_parameter)
				library_namespace.debug('title_parameter: [' + action[1] + ']',
						3, 'get_list');
				action[1] = title_preprocessor(action[1], options);
				library_namespace.debug('→ [' + action[1] + ']', 3, 'get_list');
			}
		} else if (!(KEY_generator_title in action[1])) {
			// Should be a generator title
			library_namespace
					.error('get_list: You should use generator_parameters() to create a  generator title!');
		}
		action[1] = library_namespace.Search_parameters(action[1]);
		// console.trace(action);

		action[1].action = 'query';
		action[1][parameter] = type;
		// 處理數目限制 limit。
		// No more than 500 (5,000 for bots) allowed.
		if (options.limit >= 0 || options.limit === 'max') {
			// @type integer or 'max'
			// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brevisions
			action[1][prefix + 'limit'] = options.limit;
		}

		// next start from here.
		if (false && continue_from) {
			// allpages 的 apcontinue 為 title，需要 encodeURIComponent()。
			action[1][prefix + 'continue']
			// 未處理 allpages 的 escape 可能造成 HTTP status 400。
			// = encodeURIComponent(continue_from);
			continue_from;
		}
		// console.trace(options.next_mark);
		for (continue_from in options.next_mark) {
			if (continue_from !== 'continue') {
				action[1][continue_from] = options.next_mark[continue_from];
			}
			delete options.next_mark[continue_from];
		}

		if ('namespace' in options) {
			action[1][prefix + 'namespace'] = options.namespace;
		}

		if (options.redirects) {
			// 舊版毋須 '&redirects=1'，'&redirects' 即可。
			action[1].redirects = 1;
		}
		if (options.converttitles) {
			action[1].converttitles = 1;
		}

		for ( var parameter in options) {
			if (parameter.startsWith(prefix)) {
				var value = options[parameter];
				if (library_namespace.is_Date(value)) {
					// https://www.mediawiki.org/w/api.php?action=help&modules=main#main/datatype/timestamp
					value = value.toISOString();
				}
				// value = encodeURIComponent(value);
				action[1][parameter] = value;
			}
		}
		// console.trace(action);

		set_parameters(action, options);
		// action = wiki_API.extract_parameters(options, action, true);
		// console.trace(action);

		// TODO: 直接以是不是 .startsWith(prefix) 來判定是不是該加入 parameters。

		if (!action[0])
			action = action[1];
		// console.log('get_list: title: ' + title);

		if (typeof callback !== 'function') {
			library_namespace.error('callback is NOT function! callback: ['
					+ callback + ']');
			library_namespace.debug('可能是想要當作 wiki instance，卻未設定好，直接呼叫了 '
			// TODO: use module_name
			+ library_namespace.Class + '.wiki？\ne.g., 想要 var wiki = '
					+ library_namespace.Class
					+ '.wiki(user, password) 卻呼叫了 var wiki = '
					+ library_namespace.Class + '.wiki？', 3);
			return;
		}

		// console.log(action);
		var post_data;
		if (!options.no_post_data) {
			post_data = action[1];
			action[1] = undefined;
		}
		wiki_API.query(action,
		// treat as {Function}callback or {Object}wiki_API.work config.
		function(data, error) {
			// console.log(JSON.stringify(data));
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value) {
				library_namespace.show_value(data, 'get_list: ' + type);
			}

			if (error) {
				callback(undefined, error);
			}

			var
			// {Array}page_list
			pages = [],
			// 取得列表後，設定/紀錄新的後續檢索用索引值。
			// https://www.mediawiki.org/wiki/API:Query#Backwards_compatibility_of_continue
			// {Object}next_index: 後續檢索用索引值。
			next_index = data && (data['continue'] || data['query-continue']);
			if (library_namespace.is_Object(next_index)) {
				pages.next_index = next_index;

				if ('query-continue' in data) {
					// style of 2014 CE. 例如:
					// {backlinks:{blcontinue:'[0|12]'}}
					for ( var type_index in next_index) {
						Object
								.assign(options.next_mark,
										next_index[type_index]);
					}
				} else {
					// 2021 CE. e.g.,
					// {continue: { blcontinue: '0|123', continue: '-||' }}
					Object.assign(options.next_mark, next_index);
					// 因為新的 options.next_mark 無法傳遞到 caller，因此不可使用：
					// options.next_mark = next_index;
				}
				library_namespace.debug('next index of ' + type + ': '
						+ JSON.stringify(options.next_mark), 2, 'get_list');

				if (library_namespace.is_debug(2)
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value) {
					library_namespace.show_value(next_index,
							'get_list: get the continue value');
				}
				if (options.limit === 'max' && type.includes('users')) {
					library_namespace.debug(
					//
					'Too many users so we do not get full list'
					//
					+ (options.augroup ? ' of [' + options.augroup + ']' : '')
							+ '!', 1, 'get_list');
					// 必須重複手動呼叫。
				}

			} else if (library_namespace.is_Object(data)
			// ↑ 在 503 的時候 data 可能是字串。
			&& ('batchcomplete' in data)) {
				// ↑ check "batchcomplete"
				var keyword_continue = get_list.type[type];
				if (keyword_continue) {
					if (Array.isArray(keyword_continue)) {
						keyword_continue = keyword_continue[0];
					}
					// e.g., "cmcontinue"
					keyword_continue += 'continue';
					if (keyword_continue in options.next_mark) {
						library_namespace.debug('去除已經不需要的檢索用索引值。', 3,
								'get_list');
						// needless.
						delete options.next_mark[keyword_continue];
					}
				}
			}

			// 紀錄清單類型。
			// assert: overwrite 之屬性不應該是原先已經存在之屬性。
			pages.list_type = type;
			if ('namespace' in options)
				pages.namespace = options.namespace;
			if (is_api_and_title(title, true)) {
				title = title[1];
			}
			if (wiki_API.is_page_data(title)) {
				title = title.title;
			}
			if (!Array.isArray(title)) {
				// 包含 {generator:'categorymembers',gcmtitle:'Category:name'}
				pages.title = title;
			}

			if (!data || !data.query) {
				library_namespace.error('get_list: Unknown response: ['
						+ (typeof data === 'object'
								&& typeof JSON !== 'undefined' ? JSON
								.stringify(data) : data) + ']');
				callback(pages, data);
				return;
			}

			function run_for_each(error) {
				if (options.abort_operation
						|| typeof options.for_each !== 'function') {
					callback(pages, error);
					return;
				}

				// run for each item
				var promises = [];
				pages.some(function(item) {
					try {
						if (false && library_namespace
								.is_async_function(options.for_each)) {
							eval(get_list_async_code);
							// console.log(options);
							return options.abort_operation;
						}

						var result = options.for_each(item);
						if (result === wiki_API_list.exit) {
							options.abort_operation = true;
							return true;
						}
						if (library_namespace.is_thenable(result)) {
							promises.push(result);
						}

					} catch (e) {
						library_namespace.error(e);
						error = error || e;
					}
				});

				// 注意: arguments 與 get_list() 之 callback 連動。
				// 2016/6/22 change API 應用程式介面變更 of callback():
				// (title, titles, pages) → (pages, titles, title)
				// 2019/8/7 change API 應用程式介面變更 of callback():
				// (pages, titles, title) → (pages, error)
				// 按照需求程度編配/編排 arguments。
				// 因為 callback 所欲知最重要的資訊是 pages，因此將 pages 置於第一 argument。
				if (promises.length > 0) {
					Promise.all(promises)['catch'](function(e) {
						// `error` will record the first error.
						error = error || e;
					});
					Promise.allSettled(promises).then(function(result) {
						callback(pages, error);
					});
				} else {
					callback(pages, error);
				}
			}

			/**
			 * for redirects: e.g., <code>

			{"batchcomplete":"","query":{"redirects":[{"from":"Category:言語別分類","to":"Category:言語別"}],"pages":{"1664588":{"pageid":1664588,"ns":14,"title":"Category:言語別","redirects":[{"pageid":4005079,"ns":14,"title":"Category:言語別分類"}]}}},"limits":{"redirects":5000}}

			</code>
			 */
			if (type !== 'redirects' && data.query[type]) {
				data = data.query[type];
				// 一般情況。
				if (Array.isArray(data)) {
					// console.log(options);
					var page_filter = options.page_filter
					// 不採用 `options.filter`，預防誤用。
					// || options.filter
					;
					if (page_filter) {
						// console.trace(page_filter);
					}
					if (typeof page_filter === 'function') {
						// function page_filter(page_data){return passed;}
						data = data.filter(page_filter);
					}

					if (type === 'exturlusage' && options.combine_pages) {
						// 處理有同一個頁面多個網址的情況。
						data = combine_by_page(data, 'url');
					}

					pages = Object.assign(data, pages);
					// console.assert(Array.isArray(pages));
				} else if (data.results) {
					// e.g.,
					// https://en.wikipedia.org/w/api.php?action=query&list=querypage&qppage=MediaStatistics&qplimit=max&format=json&utf8
					if (typeof page_filter === 'function') {
						// function page_filter(page_data){return passed;}
						data.results = data.results.filter(page_filter);
					}
					pages = Object.assign(data.results, pages);
					pages.data = data;
					// console.assert(Array.isArray(pages));
				} else {
					// e.g., .userinfo('*')
					pages = Object.assign(data, pages);
					// console.assert(library_namespace.is_Object(pages));
				}

				if (get_list.post_processor[type]) {
					if (Array.isArray(pages))
						pages.forEach(get_list.post_processor[type]);
					else
						get_list.post_processor[type](pages);
				}

				if (Array.isArray(pages)) {
					library_namespace.debug(wiki_API.title_link_of(title)
							+ ': ' + pages.length + ' page(s)', 2, 'get_list');
				}

				run_for_each();
				return;
			}

			if (data.query.normalized)
				pages.normalized = data.query.normalized;
			// console.log(data.query);
			data = data.query.pages;
			// console.trace(data);
			// console.trace(options.page_filter);
			for ( var pageid in data) {
				var page = data[pageid];
				if (typeof options.page_filter === 'function'
						&& !options.page_filter(page)) {
					continue;
				}
				if (!(type in page)) {
					// error!
					continue;
				}

				var page_list = page[type];
				// usually Array.isArray(page_list);
				// library_namespace.is_Object(page_list) for categoryinfo
				if (Array.isArray(page_list)) {
					// page_list.title = page.title;
					Object.assign(page_list, page);
					delete page_list[type];
				} else {
					page_list = page;
				}

				pages.push(page_list);
				library_namespace.debug('[' + page.title + ']: '
						+ page_list.length + ' page(s)', 1, 'get_list');
			}
			// console.trace(pages);

			if (pages.length === 1 && !options.multi) {
				// Object.assign(pages[0], pages);
				Object.keys(pages).forEach(function(key) {
					if (key !== '0')
						pages[0][key] = pages[key];
				});
				pages = pages[0];
				run_for_each();
				return;
			}

			if (pages.length === 0) {
				library_namespace.debug('No [' + type + '] of '
						+ wiki_API.title_link_of(title), 1, 'get_list');
				// console.trace(data);
				callback(pages/* , new Error('No page got!') */);
				return;
			}

			// For multi-page-list
			library_namespace.debug(pages.length + ' ' + type + ' got!', 1,
					'get_list');
			// 紀錄 titles。 .original_title
			if (pages.title !== title)
				pages.titles = title;
			run_for_each();

		}, post_data, options);
	}

	get_list.slice_chars = 7800;

	get_list.post_processor = {
		usercontribs : function(item, index, pages) {
			var comment = item.comment;
			if (!comment)
				return;
			// https://translatewiki.net/wiki/MediaWiki:Logentry-move-move_redir/en
			// https://translatewiki.net/wiki/MediaWiki:Logentry-move-move/en
			// "User moved page [[From]] to [[To]] over redirect: summary"
			var matched = comment
					.match(/ moved page \[\[(.+?)\]\] to \[\[(.+?)\]\]( over redirect)?/);
			if (!matched)
				return;
			if (item.from || item.to) {
				library_namespace
						.warn('usercontribs: There is already item.from or item.to!');
				return;
			}
			item.from = matched[1];
			item.to = matched[2];
			if (matched[3])
				item.redirect = true;
		}
	};

	// const: 基本上與程式碼設計合一，僅表示名義，不可更改。
	get_list.default_parameter = 'list';

	// 把單數改成複數。
	function title_to_plural(title_parameter/* , options */) {
		// console.trace(title_parameter);
		return title_parameter.replace(/^&title=/, '&titles=')
		//
		.replace(/^&pageid=/, '&pageids=');
	}

	/**
	 * All list types MediaWiki supported.
	 * 
	 * @type {Object}
	 * 
	 * @see https://www.mediawiki.org/wiki/API:Lists/All
	 *      https://www.mediawiki.org/w/api.php?action=help&modules=query
	 */
	get_list.type = {
		// list_type : [ {String}prefix, {String}:query=prop|list,
		// {Function}title_preprocessor ]

		// 'type name' : 'abbreviation 縮寫 / prefix' (parameter :
		// get_list.default_parameter)

		// 按標題排序列出指定的 namespace 的頁面 title。
		// 可用來遍歷所有頁面。
		// includes redirection 包含重定向頁面.
		// @see traversal_pages()
		// https://www.mediawiki.org/wiki/API:Allpages
		// 警告: 不在 Wikimedia Toolforge 上執行 allpages 速度太慢。但若在
		// Wikimedia Toolforge，當改用 database。
		allpages : 'ap',

		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Ballimages
		// .allimages(['from','to'])
		// .allimages('from')
		// .allimages([,'to'])
		// .allimages(['2011-08-01T01:39:45Z','2011-08-01T01:45:45Z'])
		// .allimages('2011-08-01T01:39:45Z')
		// .allimages([,'2011-08-01T01:45:45Z'])
		allimages : [ 'ai', , function(title_parameter) {
			// console.trace([title_parameter]);
			// e.g., .allimages('2011-08-01T01:39:45Z'):
			// '&aititle=2011-08-01T01%3A39%3A45Z'
			// .allimages(['2011-08-01T01:39:45Z','2011-08-01T01:45:45Z']):
			// '&aititle=2011-08-01T01%3A39%3A45Z%7C2011-08-01T01%3A45%3A45Z'
			return title_parameter.replace(/^&aititle=([^&]+)/,
			//
			function(all, parameter) {
				parameter = decodeURIComponent(parameter);
				var matched = parameter.split('|');
				// console.trace(matched);
				if (matched.length !== 1 && matched.length !== 2) {
					return all;
				}
				if (matched[0] && !Date.parse(matched[0])
				//
				|| matched[1] && !Date.parse(matched[1])) {
					return (matched[0] ? '&aifrom='
					//
					+ encodeURIComponent(matched[0]) : '')
					//
					+ (matched[1] ? '&aito='
					//
					+ encodeURIComponent(matched[1]) : '');
				}
				return '&aisort=timestamp' + (matched[0] ? '&aistart='
				//
				+ new Date(matched[0]).toISOString() : '')
				//
				+ (matched[1] ? '&aiend='
				//
				+ new Date(matched[1]).toISOString() : '');
			});
		} ],

		// https://www.mediawiki.org/wiki/API:Alllinks
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Balllinks
		alllinks : 'al',

		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Ballusers
		allusers : 'au',

		allcategories : 'ac',

		/**
		 * 為頁面標題執行前綴搜索。ページ名の先頭一致検索を行います。<br />
		 * <code>
		// 注意: arguments 與 get_list() 之 callback 連動。
		CeL.wiki.prefixsearch('User:Cewbot/log/20151002/', function(pages, error){ console.log(pages); }, {limit:'max'});
		wiki_instance.prefixsearch('User:Cewbot', function(pages, error){ console.log(pages); }, {limit:'max'});
		 * </code>
		 * 
		 * @see https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bprefixsearch
		 */
		prefixsearch : [ 'ps', , function(title_parameter) {
			return title_parameter.replace(/^&pstitle=/, '&pssearch=');
		} ],

		// 取得連結到 [[title]] 的頁面。
		// リンク元
		// e.g., [[name]], [[:Template:name]].
		// https://www.mediawiki.org/wiki/API:Backlinks
		backlinks : 'bl',

		// Find all pages that embed (transclude) the given title.
		// 取得所有[[w:zh:Wikipedia:嵌入包含]] title 的頁面。 (transclusion, inclusion)
		// 参照読み込み
		// e.g., {{Template name}}, {{/title}}.
		// 設定 title 'Template:tl' 可取得使用指定 Template 的頁面。
		// https://en.wikipedia.org/wiki/Wikipedia:Transclusion
		// https://www.mediawiki.org/wiki/API:Embeddedin
		embeddedin : 'ei',

		// 回傳連結至指定頁面的所有重新導向。 Returns all redirects to the given pages.
		// 転送ページ
		// Warning: 採用 wiki_API.redirects_here(title) 才能追溯重新導向的標的。
		// wiki.redirects() 無法追溯重新導向的標的！
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bredirects
		// @since 2019/9/11
		redirects : [ 'rd', 'prop', title_to_plural ],

		// 取得所有使用 file 的頁面。
		// title 必須包括File:前綴。
		// e.g., [[File:title.jpg]].
		// https://www.mediawiki.org/wiki/API:Imageusage
		imageusage : 'iu',

		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bimageinfo
		imageinfo : [ 'ii', 'prop', title_to_plural ],
		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bstashimageinfo
		stashimageinfo : [ 'sii', 'prop', title_to_plural ],
		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Bvideoinfo
		videoinfo : [ 'vi', 'prop', title_to_plural ],
		// https://commons.wikimedia.org/w/api.php?action=help&modules=query%2Btranscodestatus

		// 列出在指定分類中的所有頁面。
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bcategorymembers
		// @see [[mw:Help:Tracking categories|追蹤分類]]
		categorymembers : [ 'cm', , function(title_parameter) {
			// 要列舉的分類（必需）。必須包括Category:前綴。不能與cmpageid一起使用。
			if (/^&cmtitle=(Category|分類|分类|カテゴリ|분류)%3A/ig
			// @see PATTERN_category @ CeL.wiki
			.test(title_parameter)) {
				return title_parameter;
			}
			return title_parameter.replace(/^&cmtitle=/, '&cmtitle=Category:');
		} ],

		// Returns information about the given categories.
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bcategoryinfo
		categoryinfo : [ 'ci', 'prop', function(title_parameter, options) {
			// There is no cilimit.
			delete options.limit;
			return title_to_plural(title_parameter);
		} ],

		// List all categories the pages belong to.
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bcategories
		categories : [ 'cl', 'prop', title_to_plural ],

		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Brecentchanges
		recentchanges : 'rc',

		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Busercontribs
		// wiki.usercontribs(user_name,function(list){console.log(list);},{limit:80});
		// get new → old
		usercontribs : [ 'uc', , function(title_parameter, options) {
			if (!options.ucdir && options.ucend - options.ucstart > 0) {
				library_namespace.warn(
				//		
				'usercontribs: Change ucdir to "newer"');
				options.ucdir = 'newer';
			}
			return title_parameter.replace(/^&uctitle=/, '&ucuser=');
		} ],

		// 'type name' : [ 'abbreviation 縮寫 / prefix', 'parameter' ]
		// ** 可一次處理多個標題，但可能較耗資源、較慢。

		// TODO:
		// **暫時使用wiki_API.langlinks()，因為尚未整合，在跑舊程式時會有問題。
		NYI_langlinks : [ 'll', 'prop', function(title_parameter, options) {
			// console.trace(title_parameter);
			if (options && options.lang && typeof options.lang === 'string') {
				return title_parameter + '&lllang=' + options.lang;
			}
			return title_parameter;
		} ],

		// linkshere: 取得連結到 [[title]] 的頁面。
		// [[Special:Whatlinkshere]]
		// [[使用說明:連入頁面]]
		// https://zh.wikipedia.org/wiki/Help:%E9%93%BE%E5%85%A5%E9%A1%B5%E9%9D%A2
		linkshere : [ 'lh', 'prop', title_to_plural ],

		// 取得所有使用 title (e.g., [[File:title.jpg]]) 的頁面。
		// 基本上同 imageusage。
		fileusage : [ 'fu', 'prop', title_to_plural ],

		// 列舉包含指定 URL 的頁面。 [[Special:LinkSearch]]
		// https://www.mediawiki.org/wiki/API:Exturlusage
		// 注意: 可能會有同一個頁面多個網址的情況！可使用 options.combine_pages。
		exturlusage : [ 'eu', , function(title_parameter) {
			// console.log(decodeURIComponent(title_parameter));
			return title_parameter.replace(/^&eutitle=([^=&]*)/,
			//
			function($0, link) {
				if (link) {
					var matched = decodeURIComponent(link)
					//
					.match(/^([a-z]+):\/\/(.+)$/i);
					if (matched) {
						// `http://www.example.com/path/`
						// → http + `www.example.com`
						link = matched[2].replace(/\/.*$/, '') + '&euprotocol='
						//
						+ encodeURIComponent(matched[1]);
					}
				} else {
					link = '';
				}
				return '&euquery=' + link;
			});
		} ],

		// 回傳指定頁面的所有連結。
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Blinks
		links : [ 'pl', 'prop', title_to_plural ],

		// 取得透過特殊頁面 QueryPage-based 所提供的清單。
		querypage : [ 'qp', , function(title_parameter) {
			return title_parameter.replace(/^&qptitle=/, '&qppage=');
		} ],

		// [[Help:Magic words]] 列出所有在 wiki 使用的頁面屬性名稱。
		pagepropnames : 'ppn',
		// 列出使用到指定頁面屬性的所有頁面。
		pageswithprop : [ 'pwp', , function(title_parameter) {
			return title_parameter.replace(/^&pwptitle=/, '&pwppropname=');
		} ],

		// 列出變更標記。
		tags : [ 'tg', , function(title_parameter) {
			if (!title_parameter)
				return '&tgprop=displayname|description'
				// all 要取得的屬性。
				+ '|hitcount|defined|source|active';
			return title_parameter.replace(/^&tgtitle=/, '&tgprop=');
		} ],

		// 取得有關使用者清單的資訊。
		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Busers
		users : [ 'us', , function(title_parameter) {
			return title_parameter.replace(/^&ustitle=/, '&ususers=');
		} ],

		// https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bglobaluserinfo
		globaluserinfo : [ 'gui', 'meta', function(title_parameter) {
			// console.trace(title_parameter);
			return title_parameter.replace(/^&title=/, '&guiuser=');
		} ],

		// .userinfo(['rights'])
		// Get information about the current user.
		userinfo : [ 'ui', 'meta', function(title_parameter) {
			// console.trace(title_parameter);
			return title_parameter.replace(/^&title=/, '&uiprop=');
		} ],

		// 從日誌中獲取事件。
		// result: new → old
		logevents : 'le'
	};

	// ------------------------------------------------------------------------

	var KEY_page_list = typeof Symbol === 'function' ? Symbol('page list')
			: 'page list';

	/**
	 * 取得完整 list 後才作業。
	 * 
	 * @param {String}target
	 *            page title 頁面標題。
	 * @param {Function}callback
	 *            回調函數。 callback(pages, target, options)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 */
	function wiki_API_list(target, callback, options) {
		// 前置處理。
		options = library_namespace.new_options(options);

		var session = wiki_API.session_of_options(options);
		if (!options.initialized) {
			// console.trace(options);
			if (!session) {
				session = new wiki_API;
			}
			if (!options.type) {
				options.type = wiki_API_list.default_type;
			}
			options.initialized = true;
		}

		if (!options.limit)
			options.limit = 'max';

		if (!options.next_mark) {
			// initialization
			options.next_mark = Object.create(null);
		}

		// 對於太大的 {Array}target，會在 get_list() 中自行處理。

		session[options.type](target,
		// 注意: arguments 與 get_list() 之 callback 連動。
		function wiki_API_list_callback(pages, error) {
			// console.trace([ target, pages ]);
			if (pages) {
				library_namespace.debug('Get ' + pages.length + ' '
						+ options.type + ' pages of ' + pages.title, 2,
						'wiki_API_list');
			} else {
				// has error!
				pages = [];
			}
			if (error) {
				console.trace(error);
				pages.error = error;
			}
			if (typeof options.callback === 'function') {
				// options.callback() 為取得每一階段清單時所會被執行的函數。
				// 注意: arguments 與 get_list() 之 callback 連動。
				options.callback(pages, target, options);
			}
			// 設定了 options.for_each 時，callback() 不會傳入 list！
			// 用意在省記憶體。options.for_each() 執行過就不用再記錄了。
			if (Array.isArray(options[KEY_page_list])) {
				if (!options.for_each || options.get_list) {
					options[KEY_page_list].append(pages);
					// console.trace([ pages.title, pages[0],
					// wiki_API.title_link_of(pages[0]) ]);
					var message = '[' + options.type + '] ';
					if (Array.isArray(target)) {
						message += target.length + ' targets:';
					} else if (target[wiki_API.KEY_generator_title]) {
						message += 'of [' + target.generator + '] '
						//
						+ wiki_API.title_link_of(
						//
						target[wiki_API.KEY_generator_title]);
					} else {
						message += wiki_API.title_link_of(target);
					}
					message += ' '
					// gettext_config:{"id":"$1-results"}
					+ gettext('%1 {{PLURAL:%1|result|results}}',
					//
					options[KEY_page_list].length) + ': +' + pages.length;
					if (pages.title && pages.length > 0) {
						message += ' ' + wiki_API.title_link_of(
						//
						pages[0].title || pages[0]);
						if (pages.length > 1) {
							message += '–' + wiki_API.title_link_of(
							//
							pages.at(-1).title || pages.at(-1));
						}
					}
					if (pages.length === 0 && options.next_mark) {
						// 增加辨識度。
						for ( var continue_from in options.next_mark) {
							if (continue_from !== 'continue') {
								message += ' (' + continue_from + ': '
								//
								+ String(options.next_mark[continue_from])
								//
								.replace(/^(.{10})[\s\S]*?(.{8})$/, '$1...$2')
										+ ')';
								break;
							}
						}
					}
					library_namespace.info(message);
				} else {
					// Only preserve length property.
					options[KEY_page_list].length += pages.length;
				}
			} else if (!options[KEY_page_list]
					|| options[KEY_page_list].length === 0) {
				if (!options.for_each || options.get_list) {
				} else {
					// Only preserve length property.
					var length = pages.length;
					pages.truncate();
					pages.length = length;
				}
				if (!options[KEY_page_list]) {
					options[KEY_page_list] = pages;
				} else {
					// assert: options[KEY_page_list].length === 0
					Object.assign(options[KEY_page_list], pages);
				}
			} else if (!pages.error) {
				pages.error = new Error(
						'options[KEY_page_list] has been set up!');
			}

			// console.log(pages.next_index);
			// console.log(options.next_mark);
			if (pages.next_index && !options.abort_operation
					&& !(options[KEY_page_list].length >= options.limit)) {
				library_namespace.debug(wiki_API.title_link_of(target)
				//
				+ ': 尚未取得所有清單，因此繼續取得下一階段清單。', 1, 'wiki_API_list');
				if (false) {
					console.trace([ wiki_API.title_link_of(target),
							options.next_mark ]);
				}
				setImmediate(wiki_API_list, target, callback, options);
			} else {
				library_namespace.debug(wiki_API.title_link_of(target)
				//
				+ ': run callback after all list got or abort operation.', 1,
						'wiki_API_list');
				// reset .next_mark
				// session.next_mark = Object.create(null);
				// console.trace(options.for_each);

				// 警告: options[KEY_page_list] 與 target 並非完全一對一對應!
				if (!options.for_each) {
					callback(options[KEY_page_list], target, options);
				} else {
					// `options.for_each` 可能還在執行中，例如正在取得頁面內容；
					// 等到 `options.for_each` 完成之後才執行 callback。
					session.run(callback, options[KEY_page_list], target,
							options);
				}
			}
		},
		// 引入 options，避免 get_list() 不能確實僅取指定 namespace。
		options);
	}

	// `options.for_each` 設定直接跳出。 `CeL.wiki.list.exit`
	wiki_API_list.exit = [ 'wiki_API_list.exit: abort the operation' ];

	wiki_API_list.default_type = 'embeddedin';
	// supported type list
	wiki_API_list.type_list = [];

	// ------------------------------------------------------------------------

	// setup wiki_API.prototype.methods
	(function wiki_API_prototype_methods() {
		// 登記 methods。
		var methods = wiki_API.prototype.next.methods;

		for ( var name in get_list.type) {
			methods.push(name);
			wiki_API_list.type_list.push(name);
			wiki_API[name] = get_list.bind(null, name);
		}

		// add method to wiki_API.prototype
		// setup other wiki_API.prototype methods.
		methods.forEach(function(method) {
			library_namespace.debug('add action to wiki_API.prototype: '
					+ method, 2);
			wiki_API.prototype[method] = function wiki_API_prototype_method() {
				// assert: 不可改動 method @ IE！
				var args = [ method ];
				Array.prototype.push.apply(args, arguments);
				if (library_namespace.is_debug() && !this.running) {
					// console.trace(method + ': ' + this.running);
				}
				try {
					library_namespace.debug('add action: '
							+ args.map(JSON.stringify).join('<br />\n'), 3,
							'wiki_API.prototype.' + method);
				} catch (e) {
					// TODO: handle exception
				}
				this.actions.push(args);
				// console.trace([ this.running, this.actions.length, args ]);

				// TODO: 不應該僅以this.running判定，
				// 因為可能在.next()中呼叫本函數，這時雖然this.running===true，但已經不會再執行。
				if (!this.running && !this.actions[
				// callback_result_relying_on_this 執行中應該只能 push 進
				// session.actions，不可執行 session.next()!
				wiki_API.KEY_waiting_callback_result_relying_on_this]

				// 當只剩下剛剛.push()進的operation時，表示已經不會再執行，則還是實行this.next()。
				// TODO: 若是其他執行序會操作this.actions、主動執行this.next()，
				// 或.next()正執行之其他操作會執行this.next()，可能造成重複執行的結果！
				// 2016/11/16 14:45:19 但這方法似乎會提早執行...
				// || this.actions.length === 1
				) {
					// this.thread_count = (this.thread_count || 0) + 1;
					if (false) {
						console.trace(
						//
						'wiki_API_prototype_methods: Calling wiki_API.prototype.next() '
						//
						+ [ this.running, this.actions.length ]);
					}
					this.next();
				} else {
					if (this.actions.length > 1) {
						library_namespace.debug(method + ': 正在執行中 ('
						//
						+ this.thread_count + ', ' + this.actions.length
						//
						+ ', ' + this.running + ') '
						// ，直接跳出。
						+ this.actions.slice(0, 9).map(function(action) {
							return action.slice(0, 1);
						}), 3, 'wiki_API_prototype_methods');
					}
					if (library_namespace.is_debug(6)) {
						console.trace(method);
						// console.log(args);
						console.log(this.actions);
					}
				}
				return this;
			};
		});
	})();

	// ------------------------------------------------------------------------

	//
	var NS_Category = wiki_API.namespace('Category');

	// export 子分類 subcategory
	wiki_API.KEY_subcategories = 'subcategories';

	// Get category only
	function get_category_tree(options, page_name, category_path) {
		var subcategories = this && this[wiki_API.KEY_subcategories];
		if (!subcategories)
			return;

		options = library_namespace.setup_options(options);
		var category_tree = Object.create(null);

		if (page_name || this.title
		//
		&& (page_name = wiki_API.remove_namespace(this.title, options))) {
			if (category_path) {
				category_path = Object.clone(category_path);
			} else {
				category_path = Object.create(null);
			}
			category_path[page_name] = category_tree;
		} else if (!category_path) {
			category_path = Object.create(null);
		}

		for ( var category_name in subcategories) {
			if (category_name in category_path) {
				// 處理遞迴結構。預防 JSON.stringify() 出現
				// "TypeError: Converting circular structure to JSON" 用。
				// .circular_mark should give primitive value
				// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values
				category_tree[category_name] = 'circular_mark' in options ? typeof options.circular_mark === 'function' ? options
						.circular_mark(category_name, category_path)
						: options.circular_mark
						: category_path[category_name];
			} else {
				category_tree[category_name] = get_category_tree.call(
						subcategories[category_name], options, category_name,
						category_path);
			}
		}

		return category_tree;
	}

	/**
	 * traversal root_category, get all categorymembers and subcategories in
	 * [CeL.wiki.KEY_subcategories]
	 * 
	 * @example<code>

	wiki.category_tree('Category:公共轉換組模板', function(list) { page_list = list; });

	</code>
	 * 
	 * 採用了 wiki_API.list()，將納進 wiki_API.prototype.next 的執行順序。
	 * 
	 * @param {String}root_category_list
	 *            category to traversal
	 * @param {Function}callback
	 *            callback({Array}page_data_list, error)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項 default: { depth :
	 *            category_tree.default_depth }
	 */
	function category_tree(root_category_list, callback, options) {
		if (typeof callback === 'object' && !options) {
			// shift arguments.
			options = callback;
			callback = null;
		}

		var session = this,
		/** {Object}執行 categorymembers 查詢時使用的選項。 */
		categorymembers_options = wiki_API.add_session_to_options(session, {
			type : 'categorymembers'
		}),
		/** {Object}執行 categoryinfo 查詢時使用的選項。 */
		categoryinfo_options = wiki_API.add_session_to_options(session, {
			multi : true,
			type : 'categoryinfo'
		}), cmtypes_hash;

		if (typeof options === 'function') {
			options = {
				for_each_page : options
			};
		} else if (typeof options === 'number'
		// ([1,2]|0)>=0
		&& options >= 0) {
			options = {
				depth : options
			};
		} else {
			// including options.namespace
			Object.assign(categorymembers_options, options);
			// 採用 page_filter 會與 get_list() 中之 page_filter 衝突。
			delete categorymembers_options.page_filter;
			categorymembers_options.namespace = 'namespace' in categorymembers_options
			// 確保一定有 NS_Category。
			? wiki_API.namespace(wiki_API
					.namespace(categorymembers_options.namespace)
					+ '|' + NS_Category) : category_tree.default_namespace;

			// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
			options = library_namespace.new_options(options);
		}

		// console.trace(options);
		// console.trace(categorymembers_options);

		if (!Array.isArray(root_category_list)) {
			root_category_list = [ root_category_list ];
			options.multi = false;
		}
		if (root_category_list.length < 1) {
			callback(root_category_list);
			return;
		}
		root_category_list = root_category_list.map(function(root_category) {
			return session.to_namespace(root_category, NS_Category);
		});

		if (options.cmtype) {
			if (typeof options.cmtype === 'string')
				options.cmtype = options.cmtype.split('|');
			// assert: Array.isArray(options.cmtype)
			cmtypes_hash = Object.create(null);
			options.cmtype.forEach(function(type) {
				cmtypes_hash[type + 's'] = true;
			});
			options.cmtype = options.cmtype.join('|');

		} else {
			cmtypes_hash = {
				subcats : true
			};

			if (options.namespace) {
				// console.trace(session.namespace(options.namespace));
				// console.trace(session.namespace('File|Category'));
				String(session.namespace(options.namespace)).split('|')
				//
				.forEach(function(_namespace) {
					_namespace = +_namespace;
					if (_namespace === session.namespace('File'))
						cmtypes_hash.files = true;
					else if (_namespace >= 0 && _namespace !== NS_Category)
						cmtypes_hash.pages = true;
				});
				// console.trace(cmtypes_hash);
			} else {
				Object.assign(cmtypes_hash, {
					pages : true,
					files : true
				});
			}
		}
		// console.trace(cmtypes_hash);

		/** {Function|Undefined}分類頁面篩選器。 */
		var category_filter = options.category_filter || options.filter,
		/** {Function|Undefined}非分類頁面之篩選器。 */
		page_filter = options.page_filter || options.filter;

		/** {Object}cache 已經取得的資料: 以避免重複獲取，以及處理遞迴結構、預防無窮執行。 */
		var tree_of_category = Object.create(null),
		// subcategory_count === Object.keys(tree_of_category).length
		subcategory_count = 0;

		// 登記準備要取得的資料。避免重複執行 categorymembers。
		/** {Array}本次要處理的分類列表。 this_category_queue = [ category, category, ... ] */
		var this_category_queue = root_category_list,
		/** {Object}下次要處理的分類。 next_category_queue = { page_name:, page_name:, ... } */
		next_category_queue;

		/** {ℕ⁰:Natural+0}當前執行階層數。depth 越大時，獲得的資訊越少。 */
		var depth = 0,
		/**
		 * {ℕ⁰:Natural+0}最大查詢階層數。 depth of categories<br />
		 * 0: 只包含 root_category 本身的檔案與子類別資訊。<br />
		 * 1: 包含 1 層子類別的檔案與子類別資訊。以此類推。
		 */
		max_depth = (options.depth >= 0 ? options.depth
				: category_tree.default_depth) | 0;

		// --------------------------------------------------------------------
		// 工具函數。

		/**
		 * Recovering list attributes.
		 * 
		 * @param {Array}from_list
		 *            Copy from list
		 * @param {Array}to_list
		 *            Copy to list
		 */
		function copy_list_attributes(from_list, to_list) {
			// Object.assign(to_list, category_page_data); to_list.trimcate();
			Object.keys(from_list).forEach(function(key) {
				if (isNaN(key))
					to_list[key] = from_list[key];
			});
			return to_list;
		}

		function add_tree_list(tree_list, page_name) {
			// console.assert(page_name in tree_of_category === false);

			tree_list.depth = depth;
			subcategory_count++;
			tree_of_category[page_name] = tree_list;

			// 警告: 一個分頁只會執行一次。
			if (options.for_each_category) {
				try {
					options.for_each_category(list);
				} catch (e) {
					library_namespace.error(e);
				}
			}
		}

		/**
		 * 分配、篩選頁面。<br />
		 * 留下非分類頁面。<br />
		 * 直接剔除掉已經查詢過的分頁頁面，即 tree_of_category 已經有的。<br />
		 * 其他 unique 之後放到 next_category_queue。
		 * 
		 * 不可動到 this_category_queue!
		 * 
		 * @param {Array}page_list
		 *            頁面列表。
		 */
		function filter_and_assign_category_pages(page_list) {
			function all_page_filter(page_data) {
				// console.log(page_data)
				if (!session.is_namespace(page_data, NS_Category)) {
					// console.log(page_data);
					// console.log(page_filter(page_data));
					try {
						if (page_filter && !page_filter(page_data)) {
							// console.log(page_data.title);
							return false;
						}
						// 警告: 只要頁面存在於多個查詢到的分類中，就會多次執行。
						if (options.for_each_page) {
							options.for_each_page(page_data);
						}
					} catch (e) {
						library_namespace.error(e);
					}
					// console.log(page_data.title);
					return true;
				}

				// All categories must return false.

				var page_name = session.remove_namespace(page_data, options);
				var cached_tree_list = tree_of_category[page_name];

				if (category_filter && !category_filter(page_data)) {
					// 直接除名。
					library_namespace.debug('Skip non-eligibled category:'
							+ page_name, 1, 'category_tree');
					return false;
				}

				// 登記 subcategory。將會在 build_category_tree() 重新指定。
				subcategories[page_name] = null;

				if (cached_tree_list) {
					// using cache: 已取得 tree_of_category[page_name] 的資料。
					// The shallowest category will be selected.
					return false;
				}

				// 註記需要取得這個 subcategory 的資料。
				if (!next_category_queue[page_name]
				// wiki_API.is_page_data(page_data)
				|| typeof page_data === 'object') {
					next_category_queue[page_name] = page_data;
				}
				return false;
			}

			var subcategories = Object.create(null);
			var filtered_page_list = page_list.filter(all_page_filter);
			copy_list_attributes(page_list, filtered_page_list);
			if (!library_namespace.is_empty_object(subcategories))
				filtered_page_list[wiki_API.KEY_subcategories] = subcategories;

			return filtered_page_list;
		}

		// --------------------------------------------------------------------
		// phase 1: Using .categoryinfo(category_list) to filter empty category.

		/**
		 * 剔除 this_category_queue 中，空的、不符資格的 category。<br />
		 * Eliminate empty and ineligible categories.<br />
		 */
		function eliminate_empty_categories() {
			next_category_queue = Object.create(null);
			// 先去掉已經處理過的 category。
			filter_and_assign_category_pages(this_category_queue);
			// setup this_category_queue.
			this_category_queue = Object.values(next_category_queue);

			// 0, 1 個 category 執行 categoryinfo 不划算。
			if (this_category_queue.length < 2) {
				get_all_categorymembers();
				return;
			}

			// --------------------------------------------

			var message = 'Get categoryinfo of ' + this_category_queue.length
					+ ' categories.';
			if (library_namespace.is_debug()) {
				library_namespace.debug(message, 1,
						'eliminate_empty_categories');
			} else {
				library_namespace.log_temporary(message);
			}

			// console.trace(this_category_queue);
			wiki_API.list(this_category_queue, for_category_info_list,
					categoryinfo_options);
		}

		function for_category_info_list(category_info_list) {
			// console.trace(category_info_list);
			// console.assert(Array.isArray(category_info_list));
			if (category_info_list.error) {
				library_namespace.error('for_category_info_list: '
						+ category_info_list.error);
				get_all_categorymembers();
				return;
			}

			// ----------------------------------------

			next_category_queue = Object.create(null);
			category_info_list.forEach(for_category_info);

			// setup this_category_queue.
			this_category_queue = Object.values(next_category_queue);
			get_all_categorymembers();
		}

		function for_category_info(category_page_data) {
			// console.trace(category_page_data);
			var page_name = wiki_API.remove_namespace(category_page_data,
					options);
			if (page_name in tree_of_category) {
				if (false && tree_of_category[page_name]
				// 有時會有同一 category 多次 for_category_info_list()。
				&& !tree_of_category[page_name].categoryinfo) {
					console.trace(tree_of_category[page_name],
							category_info_list);
				}
				return;
			}

			var categoryinfo = category_page_data.categoryinfo;
			// categoryinfo: { size: 0, pages: 0, files: 0, subcats: 0 }
			// console.log(categoryinfo);
			// console.log(category_page_data);
			// console.log(cmtypes_hash);
			for ( var types in cmtypes_hash) {
				if (categoryinfo[types] > 0) {
					// need get, cannot skip
					next_category_queue[page_name] = category_page_data;
					return;
				}
			}

			// 記錄空的、不符資格的 category。

			// 模擬空的 category tree。
			var tree_list = copy_list_attributes(category_page_data, []);
			if (categoryinfo.subcats > 0)
				tree_list[wiki_API.KEY_subcategories] = Object.create(null);
			add_tree_list(tree_list, page_name);
		}

		// --------------------------------------------------------------------
		// phase 2: 對包含子類別的 category，一個個取得其 categorymembers。
		// 取得所有這一層的類別資料後，若還有子類別或深度(depth)未達 max_depth，則回到 phase 1。
		// 否則進入 phase 3。

		function get_all_categorymembers() {
			next_category_queue = Object.create(null);
			// console.trace([depth, max_depth, this_category_queue.length]);
			if (this_category_queue.length === 0) {
				build_category_tree();
				return;
			}

			var message = 'Get categorymembers of '
					+ this_category_queue.length + ' categories. ('
					+ subcategory_count + ' subcategories got, '
					+ (max_depth - depth) + ' levels left)';
			if (library_namespace.is_debug()) {
				library_namespace.debug(message, 1, 'get_all_categorymembers');
			} else {
				library_namespace.log_temporary(message);
			}

			this_category_queue.count = 0;
			this_category_queue.forEach(get_categorymembers);
		}

		function get_categorymembers(category_page_data) {
			// 每次只能處理單一個 category。
			wiki_API.list(category_page_data, for_categorymember_list,
					categorymembers_options);
		}

		function for_categorymember_list(categorymember_list
		// , target, options
		) {
			// console.trace(categorymember_list);
			// console.assert(Array.isArray(categorymember_list));
			if (categorymember_list.error) {
				library_namespace.error('for_categorymember_list: '
						+ categorymember_list.error);
				check_categorymember();
				return;
			}

			// ----------------------------------------

			var page_name = wiki_API.remove_namespace(
					categorymember_list.title, options);
			var message = 'Depth ' + (depth + 1)
			//
			+ '/' + max_depth + ': ' + (this_category_queue.count + 1) + '/'
					+ this_category_queue.length + ' ' + page_name + ': '
					+ categorymember_list.length + ' item(s).';
			if (library_namespace.is_debug()) {
				library_namespace.debug(message, 1, 'for_categorymember_list');
			} else {
				library_namespace.log_temporary(message);
			}
			// free
			message = null;

			categorymember_list = filter_and_assign_category_pages(categorymember_list);
			// console.trace(categorymember_list);
			add_tree_list(categorymember_list, page_name);
			check_categorymember();
		}

		function check_categorymember() {
			if (++this_category_queue.count < this_category_queue.length) {
				return;
			}

			// assert: got all categorymembers of this_category_queue
			if (false) {
				console
						.assert(this_category_queue.count === this_category_queue.length);
			}

			// setup this_category_queue.
			this_category_queue = Object.values(next_category_queue);
			if (depth++ === max_depth || this_category_queue.length === 0) {
				build_category_tree();
				return;
			}
			// console.assert(depth <= max_depth);

			// Start next depth loop.
			eliminate_empty_categories();
		}

		// --------------------------------------------------------------------
		// phase 3: 最後從 tree_of_category 重建起 category tree。

		function build_category_tree() {
			// assert: got all categorymembers
			if (options.no_list) {
				callback && callback(options.no_list);
				return;
			}

			Object.keys(tree_of_category).forEach(clean_up_tree_list);
			// console.trace(tree_of_category);

			root_category_list = root_category_list
			//
			.map(function(root_category) {
				var category_name = session.remove_namespace(root_category,
						options);
				var cached_tree_list = tree_of_category[category_name];
				if (!cached_tree_list) {
					library_namespace.error(
					//
					'category_tree: Cannot get data of ' + category_name);
					return;
				}
				// console.assert(cached_tree_list.depth === 0);
				cached_tree_list.list_type = 'category_tree';
				cached_tree_list.get_category_tree = get_category_tree;
				cached_tree_list.flat_subcategories = tree_of_category;
				return cached_tree_list;
			});

			if (!options.multi && root_category_list.length < 2) {
				root_category_list = root_category_list[0];
			}
			callback && callback(root_category_list);
		}

		function clean_up_tree_list(category_name) {
			// page_list_of_category
			var cached_tree_list = tree_of_category[category_name];

			// 清理多餘標記。
			// delete cached_tree_list.depth;

			var subcategories = cached_tree_list[wiki_API.KEY_subcategories];
			// console.trace([ category_name, subcategories ]);
			if (!subcategories)
				return;

			for ( var subcategory_name in subcategories) {
				var subcategory_tree_list = subcategories[subcategory_name] = tree_of_category[subcategory_name];
				if (!subcategory_tree_list) {
					// assert: 已達 max_depth。
					continue;
				}

				if (!options.set_attributes) {
					continue;
				}

				if (false) {
					console
							.assert(subcategory_tree_list.depth <= cached_tree_list.depth + 1);
				}

				if (!subcategory_tree_list.parent_categories)
					subcategory_tree_list.parent_categories = [];
				subcategory_tree_list.parent_categories.push(cached_tree_list);
			}
		}

		eliminate_empty_categories();
	}

	category_tree.default_depth = 10;
	category_tree.default_namespace
	// 必須包含 'Category'
	= wiki_API.namespace('main|file|module|template|category|help');
	wiki_API.prototype.category_tree = category_tree;

	// ------------------------------------------------------------------------

	if (false) {
		CeL.wiki.langlinks('文明', function(title) {
			title === 'Civilization';
			if (title)
				CeL.show_value(title);
		}, 'en');

		CeL.wiki.langlinks([ 'en', 'Civilization' ], function(title) {
			title === '文明';
			if (title)
				CeL.show_value(title);
		}, 'zh');

		// TODO?
		// return 'title' or {langs:['',''], lang:'title'}
		CeL.wiki.langlinks('文明', function(title) {
			if (title)
				CeL.show_value(title);
		}) == CeL.wiki.langlinks('文明', function(title) {
			if (title)
				CeL.show_value(title);
		}, 10)
		// == {langs:['',''], lang:'title'}

		// 未指定 page，表示已完成。
	}

	/**
	 * 取得 title 在其他語系 (to_lang) 之標題。 Interlanguage title. 可一次處理多個標題。
	 * 
	 * @param {String|Array}title
	 *            the page title to search continue information
	 * @param {Function|Object}callback
	 *            回調函數 or options。
	 * @param {String}to_lang
	 *            所欲求語言。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://www.mediawiki.org/wiki/API:Langlinks
	 *      https://www.mediawiki.org/wiki/Manual:Langlinks_table
	 */
	wiki_API.langlinks = function(title, callback, to_lang, options) {
		var from_lang;
		if (is_api_and_title(title, 'language', true)) {
			from_lang = title[0];
			title = title[1];
		}
		title = 'action=query&prop=langlinks&'
				+ wiki_API.query.title_param(title, true, options
						&& options.is_id);
		if (to_lang) {
			title += (to_lang > 0 || to_lang === 'max' ? '&lllimit='
					: '&lllang=')
					+ to_lang;
		}
		if (options && (options.limit > 0 || options.limit === 'max'))
			title += '&lllimit=' + options.limit;
		// console.log('ll title:' + title);
		if (from_lang) {// llinlanguagecode 無效。
			title = [ from_lang, title ];
		}

		wiki_API.query(title, typeof callback === 'function'
		//
		&& function(data) {
			if (!data || !data.query || !data.query.pages) {
				/**
				 * From version 1.25 onwards, the API returns a batchcomplete
				 * element to indicate that all data for the current "batch" of
				 * pages has been returned.
				 * 
				 * @see https://www.mediawiki.org/wiki/API:Query#batchcomplete
				 */
				if (library_namespace.is_Object(data)
				// status 503 時，data 可能為 string 之類。
				&& ('batchcomplete' in data)) {
					// assert: data.batchcomplete === ''
					library_namespace.debug(wiki_API.title_link_of(title)
					//
					+ ': Done.', 1, 'wiki_API.langlinks');
				} else {
					library_namespace.warn(
					//
					'wiki_API.langlinks: Unknown response: ['
					//
					+ (typeof data === 'object' && typeof JSON !== 'undefined'
					//
					? JSON.stringify(data) : data) + ']');
					// console.log(data);
				}
				// console.warn(data);
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data);
				callback();
				return;
			}

			data = data.query.pages;
			var pages = [];
			for ( var pageid in data)
				pages.push(data[pageid]);
			if (pages.length !== 1 || (options && options.multi)) {
				if (library_namespace.is_debug()) {
					library_namespace.info(
					//
					'wiki_API.langlinks: Get ' + pages.length
					//
					+ ' page(s)! We will pass all pages to callback!');
				}
				// page 之 structure 按照 wiki API 本身之 return！
				// page = {pageid,ns,title,revisions:[{langlinks,'*'}]}
				callback(pages);
			} else {
				if (library_namespace.is_debug() && !pages[0].langlinks) {
					library_namespace.warn('wiki_API.langlinks: '
					//
					+ ('pageid' in pages[0] ? '無' + (to_lang && isNaN(to_lang)
					//
					? '所欲求語言[' + to_lang + ']之' : '其他語言')
					//
					+ '連結' : '不存在/已刪除此頁面') + ': [' + pages[0].title + ']');
					// library_namespace.show_value(pages);
				}
				pages = pages[0].langlinks;
				callback(pages ? to_lang && isNaN(to_lang) ? pages[0]['*']
				//
				: wiki_API.langlinks.parse(pages) : pages);
			}
		}, null, options);
	};

	wiki_API.langlinks.parse = function(langlinks, to_lang) {
		if (langlinks && Array.isArray(langlinks.langlinks)) {
			langlinks = langlinks.langlinks;
		}

		if (!Array.isArray(langlinks)) {
			if (library_namespace.is_debug()) {
				library_namespace.warn(
				//
				'wiki_API.langlinks.parse: No langlinks exists?'
						+ (langlinks && langlinks.title ? ' '
								+ wiki_API.title_link_of(langlinks) : ''));
				if (library_namespace.is_debug(2)
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(langlinks, 'langlinks.parse');
			}
			return;
		}

		var langs;
		if (to_lang) {
			langlinks.some(function(lang) {
				if (to_lang == lang.lang) {
					langs = lang['*'];
					return true;
				}
			});

		} else {
			langs = Object.create(null);
			langs.langs = [];
			langlinks.forEach(function(lang) {
				langs[lang.lang] = lang['*'];
				langs.langs.push(lang.lang);
			});
		}
		return langs;
	};

	// ------------------------------------------------------------------------

	/**
	 * full text search<br />
	 * search wikitext: using prefix "insource:". e.g.,
	 * https://www.mediawiki.org/w/api.php?action=query&list=search&srwhat=text&srsearch=insource:abc+def
	 * 
	 * TODO: [[:en:Template:Regex]] "hastemplate:", "incategory:", "intitle:",
	 * "linksto:", "morelike:", "prefer-recent:", "boost-templates:",
	 * "namespace:"
	 * 
	 * @example <code>

	wiki.search(search_key, {
		summary : summary,
		log_to : log_to,
		each : function(page_data, messages, config) {
			console.log(page_data.title);
		}
	});

	 * </code>
	 * 
	 * @param {String}key
	 *            search key
	 * @param {Function}[callback]
	 *            回調函數。 callback([ pages, searchinfo : {totalhits : {Integer}},
	 *            search_key : {String}key_used ], error)
	 * @param {Object}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://www.mediawiki.org/w/api.php?action=help&modules=query%2Bsearch
	 *      https://www.mediawiki.org/wiki/API:Search_and_discovery
	 *      https://www.mediawiki.org/wiki/Help:CirrusSearch
	 */
	wiki_API.search = function wiki_API_search(key, callback, options) {
		if (typeof options !== 'object' && (options === 'max' || options > 0)) {
			options = {
				srlimit : options
			};
		}
		var API_URL;
		if (Array.isArray(key)) {
			API_URL = key[0];
			key = key[1];
		}
		if (library_namespace.is_RegExp(key)) {
			// [[w:en:Help:Searching/Regex]]
			// [[mw:Help:CirrusSearch#Insource]]
			// 有無 global flag 結果不同。
			key = ('insource:' + key).replace(/g([^\/]*)$/, '$1');
		}
		if ('namespace' in options) {
			if (options.srnamespace) {
				library_namespace.warn('Unrecognized parameter: namespace.');
			} else {
				options.srnamespace = options.namespace;
				delete options.namespace;
			}
		}
		if (options.srnamespace) {
			options.srnamespace = wiki_API.namespace(options.srnamespace);
		}

		var _options = Object.clone(options);
		// 避免 session 也被帶入 parameters。
		delete _options[KEY_SESSION];

		options.handle_continue_response = true;

		var action = library_namespace.URI(API_URL);
		Object.assign(action.search_params, {
			action : 'query',
			list : 'search',
			srsearch : key
		}, wiki_API.search.default_parameters, _options);
		// e.g., 20220303.セミコロン1つに変更する.js
		delete action.search_params.next_mark;

		wiki_API.query(action, function(data, error) {
			// console.log([ data, error ]);
			if (library_namespace.is_debug(2)
			// .show_value() @ interact.DOM, application.debug
			&& library_namespace.show_value)
				library_namespace.show_value(data, 'wiki_API.search');

			if (wiki_API.query.handle_error(data, error, callback)) {
				return;
			}

			var cached_list = options.cached_list;
			options = data && (data['continue'] || data['query-continue']);
			if (data && !options && !('batchcomplete' in data)) {
				callback(data, new Error(
						'No batchcomplete and no continue in the API result! '
								+ key));
				return;
			}
			// var totalhits;
			if (data && (data = data.query)) {
				if (cached_list) {
					data.search = cached_list.append(data.search);
				}
				if (options) {
					// data.search.sroffset = options.search.sroffset;
					Object.assign(data.search, options.search);
				}
				// totalhits = data.searchinfo.totalhits;

				data.search.searchinfo = data.searchinfo;
				// Object.assign(data.search, data.searchinfo);

				data = data.search;
				data.search_key = key;
			} else {
				callback(data, new Error('Unknown result'));
				return;
			}

			// data: [ page_data ].sroffset = next
			if (typeof callback === 'function') {
				// callback([ pages, searchinfo : {totalhits : {Integer}},
				// search_key : {String}key_used ])
				callback(data, error);
			}
		}, null, options);
	};

	wiki_API.search.default_parameters = {
		// |プロジェクト
		srnamespace : wiki_API
				.namespace('main|file|module|template|category|help|portal'),

		srprop : 'redirecttitle',
		// srlimit : 10,
		srlimit : 'max',
		// sroffset : 0,
		srinterwiki : 1
	};

	// ------------------------------------------------------------------------

	// TODO:
	// https://zh.wikipedia.org/w/api.php?action=query&prop=revisions&rvprop&titles=Money|貨幣|數據|說明&redirects&format=json&utf8
	// https://zh.wikipedia.org/w/api.php?action=query&prop=redirects&rdprop&titles=Money|貨幣|數據|說明&redirects&format=json&utf8
	// https://zh.wikipedia.org/w/api.php?action=query&prop=redirects&rdprop=title&titles=Money|貨幣|數據|說明&redirects&format=json&utf8

	// 溯源(追尋至重定向終點) redirects_target()
	// TODO: using wiki_API.redirect_to
	wiki_API.redirects_root = function redirects_root(title, callback, options) {
		// .original_title , .convert_from
		options = Object.assign({
			redirects : 1,
			prop : 'info'
		}, options);

		// 用 .page() 可省略 .converttitles
		// .redirects() 本身不會作繁簡轉換。
		// redirect_to: 追尋至重定向終點

		wiki_API.page(title, function(page_data, error) {
			// console.trace(title);
			// console.trace(page_data);
			// console.trace(error);

			// 已經轉換過，毋須 wiki_API.parse.redirect()。
			// wiki_API.parse.redirect(wiki_API.content_of(page_data)) ||

			// 若是 convert 過則採用新的 title。
			if (Array.isArray(page_data)) {
				title = page_data.map(function(_page_data) {
					return _page_data.title;
				});
			} else {
				title = page_data && page_data.title || title
			}

			// console.error(error);
			callback(title, page_data, error);
		}, options);
	};

	/**
	 * 取得所有重定向到(title重定向標的)之頁面列表。
	 * 
	 * 注意: 無法避免雙重重定向問題!
	 * 
	 * 工作機制:<br />
	 * 1. 先溯源: 若 [[title]] redirect 到 [[base]]，則將 base(title重定向標的) 設定成 base；<br />
	 * 否則將 base(title重定向標的) 設定成 title。<br />
	 * 2. 取得所有 redirect/重定向/重新導向 到 base 之 pages。<br />
	 * 3. 若設定 options.include_root，則(title重定向標的)將會排在[0]。
	 * 
	 * 因此若 R2 → R1 → R，且 R' → R，則 wiki_API.redirects_here(R2) 會得到 [{R1},{R2}]，
	 * wiki_API.redirects_here(R1) 與 wiki_API.redirects_here(R) 與
	 * wiki_API.redirects_here(R') 皆會得到 [ {R}, {R1}, {R'} ]
	 * 
	 * 可以 [[Special:Whatlinkshere]] 確認。
	 * 
	 * @param {String}title
	 *            頁面名。
	 * @param {Function}callback
	 *            callback(root_page_data, redirect_list, error) { redirect_list = [
	 *            page_data, page_data, ... ]; }
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項. 此 options 可能會被變更！<br />
	 *            {Boolean}options.no_trace: 若頁面還重定向/重新導向到其他頁面則不溯源。溯源時 title 將以
	 *            root 替代。<br />
	 *            {Boolean}options.include_root 回傳 list 包含 title，而不只是所有 redirect
	 *            到 [[title]] 之 pages。
	 * 
	 * @see [[Special:DoubleRedirects]]
	 * 
	 * @since 2019/9/11: wiki_API.redirects → wiki_API.redirects_here,
	 *        wiki_API.redirects 改給 get_list.type .redirects 使用。
	 */
	wiki_API.redirects_here = function redirects_here(title, callback, options) {
		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		options = library_namespace.new_options(options);

		if (!options.no_trace) {
			// .original_title , .convert_from
			options.query_title = title;
			// 先溯源(追尋至重定向終點)
			wiki_API.redirects_root(title, function(title, page_data, error) {
				// cache
				options.page_data = page_data;
				// 已追尋至重定向終點，不再溯源。
				options.no_trace = true;
				wiki_API.redirects_here(title, callback, options);
			}, options);
			return;
		}

		// console.trace(title);
		var action = normalize_title_parameter(title, options);
		if (!action) {
			throw 'wiki_API.redirects_here: Invalid title: '
					+ wiki_API.title_link_of(title);
		}

		action[1] = 'action=query&prop=redirects&rdlimit=max&' + action[1];
		if (!action[0])
			action = action[1];

		// console.trace([ action, options ]);
		wiki_API.query(action, typeof callback === 'function'
		//
		&& function(data, error) {
			// copy from wiki_API.page()

			error = data && data.error;
			// 檢查 MediaWiki 伺服器是否回應錯誤資訊。
			if (error) {
				library_namespace.error('wiki_API.redirects_here: '
				//
				+ '[' + error.code + '] ' + error.info);
				/**
				 * e.g., Too many values supplied for parameter 'pageids': the
				 * limit is 50
				 */
				if (data.warnings && data.warnings.query
				//
				&& data.warnings.query['*']) {
					library_namespace.warn(data.warnings.query['*']);
				}
				// callback(root_page_data, redirect_list, error)
				callback(null, null, error);
				return;
			}

			if (!data || !data.query || !data.query.pages) {
				library_namespace.warn('wiki_API.redirects_here: '
				//
				+ 'Unknown response: ['
				//
				+ (typeof data === 'object' && typeof JSON !== 'undefined'
				//
				? JSON.stringify(data) : data) + ']');
				if (library_namespace.is_debug()
				// .show_value() @ interact.DOM, application.debug
				&& library_namespace.show_value)
					library_namespace.show_value(data);
				callback();
				return;
			}

			data = data.query.pages;
			var pages = [], page_data = options.page_data;
			var session = wiki_API.session_of_options(options);
			for ( var pageid in data) {
				var page = data[pageid];
				// 僅處理第一頁。
				if (!options.no_message
				//
				&& !wiki_API.content_of.page_exists(page)) {
					// 此頁面不存在/已刪除。Page does not exist. Deleted?
					library_namespace.warn([ 'wiki_API.redirects_here: ', {
						// e.g., 中文維基中無此頁面
						// gettext_config:{"id":"$1-is-not-exist-in-$2"}
						T : [ '%1 is not exist in %2.',
						//
						(page.title ? wiki_API.title_link_of(page)
						//
						: ' id ' + page.pageid), wiki_API.site_name(session) ]
					} ]);
				}

				// page 之 structure 將按照 wiki API 本身之 return！
				// page = {pageid,ns,title,redirects:[{},{}]}
				var redirect_list = page.redirects || [];
				library_namespace.debug(
				//
				wiki_API.title_of(page) + ': 有 ' + redirect_list.length
				//
				+ ' 個同名頁面(重定向至此頁面)。', 2, 'wiki_API.redirects_here');
				if (options.include_root) {
					// 避免修改或覆蓋 pages.redirects。
					redirect_list = redirect_list.slice();
					// Making .redirect_list[0] the redirect target.
					redirect_list.unshift(page);
					// page_data.redirects
					page.redirect_list = redirect_list;
				}

				var _page_data = page_data && page_data.index_of_title
				//
				&& page_data[page_data.index_of_title[page.title]] ||
				// wiki_API.is_page_data(page_data) &&
				page_data;
				if (_page_data) {
					// console.assert(wiki_API.is_page_data(_page_data));
					// console.assert(_page_data.pageid === page.pageid);
					page = Object.assign(_page_data, page);
				}
				redirect_list.query_title =
				//
				_page_data && (_page_data.original_title || _page_data.title)
				//
				|| options.query_title;

				library_namespace.debug('redirects (alias) of '
				//
				+ wiki_API.title_link_of(page) + ': (' + redirect_list.length
				//
				+ ') [' + redirect_list.slice(0, 3)
				// CeL.wiki.title_of(page_data)
				.map(wiki_API.title_of) + ']...',
				//
				1, 'wiki_API.redirects_here');
				pages.push(page);
			}

			if (pages.length > 1) {
				callback(pages);

			} else {
				pages = pages[0];
				// callback(root_page_data 本名, redirect_list 別名 alias list)
				callback(pages, pages.redirect_list || page.redirects);
			}

		}, null, options);
	};

	/**
	 * 計算實質[[w:zh:Wikipedia:嵌入包含]](transclusion)之頁面數。
	 * 
	 * 若條目(頁面)[[w:zh:Wikipedia:嵌入包含]]有模板(頁面)別名，則將同時登記 embeddedin 於別名 alias 與
	 * root。<br />
	 * e.g., 當同時包含 {{Refimprove}}, {{RefImprove}} 時會算作兩個，但實質僅一個。<br />
	 * 惟計數時，此時應僅計算一次。本函數可以去除重複名稱，避免模板尚有名稱重複者。
	 * 
	 * @param {Object}root_name_hash
	 *            模板本名 hash. 模板本名[{String}模板別名/本名] = {String}root 模板本名
	 * @param {Array}embeddedin_list
	 *            頁面[[w:zh:Wikipedia:嵌入包含]]之模板 list。
	 * 
	 * @returns {ℕ⁰:Natural+0}normalized count
	 */
	wiki_API.redirects_here.count = function(root_name_hash, embeddedin_list) {
		if (!Array.isArray(embeddedin_list)) {
			library_namespace.warn('wiki_API.redirects_here.count: '
					+ 'Invalid embeddedin list.');
			return 0;
		}
		var name_hash = Object.create(null);
		embeddedin_list.forEach(function(title) {
			title = wiki_API.title_of(title);
			library_namespace.debug('含有模板{{' + root_name_hash[title] + '}}←{{'
					+ title + '}}', 3, 'wiki_API.redirects_here.count');
			name_hash[root_name_hash[title] || title] = null;
		});
		return Object.keys(name_hash).length;
	};

	// ------------------------------------------------------------------------

	// export 導出.

	// wiki_API.list = wiki_API_list;
	// `CeL.wiki.list`
	return wiki_API_list;
}

});
// CeL.application.net.wiki.page.Page
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): Page
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>

</code>
 * 
 * @since
 * 
 * @see https://mwn.toolforge.org/docs/interfaces/_page_.mwnpage.html
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.page.Page',

	require : 'data.code.compatibility.'
	//
	+ '|application.net.wiki.page.'
	//
	+ '|application.net.wiki.list.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	// var get_namespace = wiki_API.namespace;

	// ------------------------------------------------------------------------

	if (false) {
		// call new_Page()
		page = wiki_session.Page(page_title);
		// {Number}p.ns
		// {String}p.title

		// await page.backlinks({get_list:true}) will get {Array}list.
		// page.backlinks() is asyncIterator
		//
		// https://www.codementor.io/@tiagolopesferreira/asynchronous-iterators-in-javascript-jl1yg8la1
		// https://stackoverflow.com/questions/55531247/using-javascripts-symbol-asynciterator-with-for-await-of-loop
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols
		// for await (const page_data of page.backlinks()) {
		// console.log(page_data); }

		// TODO:

		// typeof await(page.content() || page.read()) === 'string';

		typeof page.wikitext === 'string';

		// page.fetch() is asyncIterator 泛用方法 相當於 wiki.query()

		// page.revisions() is asyncIterator

		// typeof await(page.is_biography()) === 'boolean';
	}

	function Page(page_title, options, session) {
		this[KEY_SESSION] = session;

		// page_data 之 structure 按照 wiki API 本身之 return
		// page_data = {pageid,ns,title,revisions:[{revid,timestamp,'*'}]}
		Object.assign(this, {
			// pageid : 0,
			ns : session.namespace(page_title) || 0,
			title : session.normalize_title(page_title)
		});
	}

	// ------------------------------------------------------------------------

	function Page__list(options) {
		// options.type, options[KEY_SESSION] are setted in Page__list_async()
		var promise = new Promise(function executor(resolve, reject) {
			wiki_API.list(this.title, function(list) {
				if (list.error)
					reject(list.error);
				else
					resolve(list);
			}, options);
		}.bind(this));
		return promise;
	}

	var Symbol_asyncIterator = typeof Symbol === 'function'
			&& Symbol.asyncIterator;

	var done_object = {
		// value : generator.page_count,
		done : true
	};

	function Page__list_async(method, options) {
		var session = this[KEY_SESSION];
		options = wiki_API.add_session_to_options(session, options);
		options.type = method;
		if (!Symbol_asyncIterator || options && options.get_list) {
			return Page__list.call(this, options);
		}

		// --------------------------------------

		var list_generator = Object.create(null);
		list_generator[Symbol_asyncIterator] = (function() {
			function get_next_object() {
				return {
					value : generator.queue.shift(),
					done : false
				};
			}

			var generator = {
				queue : [],
				next : function() {
					if (generator.resolve) {
						throw new Error(
								'Call resolve() before latest promise resolved');
					}

					if (generator.queue.length > 0) {
						// 執行順序3: 中間最多的是這個程序一直反覆 loop
						return Promise.resolve(get_next_object());
					}

					// assert: generator.queue.length === 0
					if (generator.done) {
						// 執行順序4: 最後一次 iterate
						return Promise.resolve(done_object);
					}

					// 執行順序1
					return new Promise(function(resolve, reject) {
						generator.resolve = resolve;
					});
				}
			};

			options.for_each = function(item) {
				generator.queue.push(item);
				var resolve = generator.resolve;
				if (resolve) {
					delete generator.resolve;
					// 執行順序2
					resolve(get_next_object());
				}
			};
			wiki_API.list(this.title, function(list) {
				// generator.page_count = list.length;
				generator.done = true;
				var resolve = generator.resolve;
				if (resolve) {
					// 基本上不會執行到這邊 @ node.js
					delete generator.resolve;
					resolve(done_object);
				}
			}, options);

			return generator;
		}).bind(this);
		return list_generator;
	}

	// ------------------------------------------------------------------------

	// export 導出.

	Object.assign(wiki_API.prototype, {
		Page : function new_Page(page_title, options) {
			return new Page(page_title, options,/* session */this);
		}
	});

	wiki_API.list.type_list.forEach(function(method) {
		// if (!method.includes('all'))
		Page.prototype[method] = function Page__list_frontend(options) {
			return Page__list_async.call(this, method, options);
		};
	});

	return Page;
}

});
// CeL.application.net.wiki.edit
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): edit
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>


</code>
 * 
 * @since 2019/10/11 拆分自 CeL.application.net.wiki
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.edit',

	require : 'application.net.wiki.'
	// load MediaWiki module basic functions
	+ '|application.net.wiki.namespace.'
	// for BLANK_TOKEN
	+ '|application.net.wiki.task.'
	//
	+ '|application.net.wiki.page.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;

	// @inner
	var PATTERN_category_prefix = wiki_API.PATTERN_category_prefix, BLANK_TOKEN = wiki_API.BLANK_TOKEN;

	var gettext = library_namespace.cache_gettext(function(_) {
		gettext = _;
	});

	// ------------------------------------------------------------------------

	/**
	 * check if need to stop / 檢查是否需要緊急停止作業 (Emergency shutoff-compliant).
	 * 
	 * 此功能之工作機制/原理：<br />
	 * 在 .edit() 編輯（機器人執行作業）之前，先檢查是否有人在緊急停止頁面留言要求停止作業。<br />
	 * 只要在緊急停止頁面有指定的章節標題、或任何章節，就當作有人留言要停止作業，並放棄編輯。
	 * 
	 * TODO:<br />
	 * https://www.mediawiki.org/w/api.php?action=query&meta=userinfo&uiprop=hasmsg
	 * 
	 * @param {Function}callback
	 *            回調函數。 callback({Boolean}need stop)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @see https://www.mediawiki.org/wiki/Manual:Parameters_to_index.php#Edit_and_submit
	 *      https://www.mediawiki.org/wiki/Help:Magic_words#URL_encoded_page_names
	 *      https://www.mediawiki.org/wiki/Help:Links
	 *      https://zh.wikipedia.org/wiki/User:Cewbot/Stop
	 */
	wiki_API.check_stop = function(callback, options) {
		// 前置處理。
		if (!library_namespace.is_Object(options))
			if (typeof options === 'string') {
				options = {
					title : options
				};
			} else {
				options = Object.create(null);
			}

		/**
		 * 緊急停止作業將檢測之頁面標題。 check title:<br />
		 * 只檢查此緊急停止頁面。
		 * 
		 * @type {String}
		 */
		var title = options.title;
		if (typeof title === 'function') {
			title = title(options.token);
		}
		if (!title && !(title = wiki_API.check_stop.title(options.token))) {
			callback();
		}

		library_namespace.debug({
			// gettext_config:{"id":"check-the-emergency-stop-page-$1"}
			T : [ '檢查緊急停止頁面 %1', wiki_API.title_link_of(title) ]
		}, 1, 'wiki_API.check_stop');

		var session = options[KEY_SESSION] || this;
		wiki_API.page([ session.API_URL, title ], function(page_data) {
			var content = wiki_API.content_of(page_data),
			// default: NOT stopped
			stopped = false, PATTERN;

			if (!content) {
				library_namespace.info([ 'wiki_API.check_stop: ', {
					// gettext_config:{"id":"the-emergency-stop-page-was-not-found-($1)"}
					T : [ 'The emergency stop page was not found (%1).',
					//
					wiki_API.title_link_of(title) ]
				}, {
					// gettext_config:{"id":"the-operation-will-proceed-as-usual"}
					T : 'The operation will proceed as usual.'
				} ]);

			} else if (typeof options.checker === 'function') {
				// 以 options.checker 的回傳來設定是否stopped。
				stopped = options.checker(content);
				if (stopped) {
					library_namespace.warn([ 'wiki_API.check_stop: ', {
						// gettext_config:{"id":"emergency-stop-edit-has-been-set"}
						T : '已設定緊急停止編輯作業！'
					} ]);
				}
				content = null;

			} else {
				// 指定 pattern
				PATTERN = options.pattern
				// options.section: 指定的緊急停止章節標題, section title to check.
				/** {String}緊急停止作業將檢測之章節標題。 */
				|| options.section
				/**
				 * for == 停止作業: 20150503 機器人作業 == <code>
				 * (new RegExp('\n==(.*?)' + '20150503' + '\\s*==\n')).test('\n== 停止作業:20150503 ==\n') === true
				 * </code>
				 */
				&& new RegExp('\n==(.*?)' + options.section + '(.*?)==\n');
			}

			if (content) {
				if (!library_namespace.is_RegExp(PATTERN)) {
					// use default pattern
					PATTERN = wiki_API.check_stop.pattern;
				}
				library_namespace.debug(
				//
				'wiki_API.check_stop: 採用 pattern: ' + PATTERN);
				stopped = PATTERN.test(content, page_data);
				if (stopped) {
					library_namespace.warn([ 'wiki_API.check_stop: ', {
						// gettext_config:{"id":"there-is-a-messages-on-the-emergency-stop-page-$1-to-stop-the-editing-operation"}
						T : [ '緊急停止頁面 %1 有留言要停止編輯作業！',
						//
						wiki_API.title_link_of(title) ]
					} ]);
				}
			}

			callback(stopped);
		}, options);
	};

	/**
	 * default page title to check:<br />
	 * [[{{TALKSPACE}}:{{ROOTPAGENAME}}/Stop]]
	 * 
	 * @param {Object}token
	 *            login 資訊，包含“csrf”令牌/密鑰。
	 * 
	 * @returns {String}
	 */
	wiki_API.check_stop.title = function(token) {
		return token.login_user_name ? 'User talk:' + token.login_user_name
				+ '/Stop' : '';
	};

	/**
	 * default check pattern: 任何章節/段落 section<br />
	 * default: 只要在緊急停止頁面有任何章節，就當作有人留言要求 stop。
	 * 
	 * @type {RegExp}
	 */
	wiki_API.check_stop.pattern = /\n=(.+?)=\n/;

	// ------------------------------------------------------------------------

	// [[Help:Edit summary]] actual limit is 500 [[Unicode codepoint]]s.
	function add_section_to_summary(summary, section_title) {
		if (!section_title)
			return summary || '';
		// 所有"/*錨點*/"註解都會 .trim() 後轉成網頁錨點連結。
		return '/* ' + section_title + ' */ ' + (summary || '');
	}

	/**
	 * 編輯頁面。一次處理一個標題。<br />
	 * 警告:除非 text 輸入 {Function}，否則此函數不會檢查頁面是否允許機器人帳戶訪問！此時需要另外含入檢查機制！
	 * 
	 * 2016/7/17 18:55:24<br />
	 * 當採用 section=new 時，minor=1 似乎無效？
	 * 
	 * @example <code>

	// 2021/10/7 13:29:12

	// Create new page with template.
	const variable_Map = new CeL.wiki.Variable_Map({ FC_list: '* 1\n* 2' });
	variable_Map.template = function (page_data) {
		// Will run at the page created.
		// assert: !wiki_API.content_of(page_data) === true;
		return 'FC_list:\n' + this.format('FC_list');
	};
	await wiki.edit_page(new_page_title, variable_Map, { summary: 'test' });


	// Update page only (must setup manually first)
	const variable_Map = new CeL.wiki.Variable_Map({ FC_list: '* 1\n* 2' });
	// setup manually
	await wiki.edit_page('Wikipedia:沙盒', p => p.wikitext + '\nFC_list:\n' + variable_Map.format('FC_list'), { summary: 'test' });
	variable_Map.set('FC_list', '*2\n*3');
	await wiki.edit_page('Wikipedia:沙盒', variable_Map, { summary: 'test' });

	</code>
	 * 
	 * @param {String|Array}title
	 *            page title 頁面標題。 {String}title or [ {String}API_URL,
	 *            {String}title or {Object}page_data ]
	 * @param {String|Function}text
	 *            page contents 頁面內容。 {String}text or {Function}text(page_data)
	 * @param {Object}token
	 *            login 資訊，包含“csrf”令牌/密鑰。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @param {Function}callback
	 *            回調函數。 callback(page_data, {String|any}error, result)
	 * @param {String}timestamp
	 *            頁面時間戳記。 e.g., '2015-01-02T02:52:29Z'
	 * 
	 * @see https://www.mediawiki.org/w/api.php?action=help&modules=edit
	 */
	function wiki_API_edit(title, text, token, options, callback, timestamp) {
		var action = {
			action : 'edit'
		};
		if (wiki_API.need_get_API_parameters(action, options,
				wiki_API[action.action], arguments)) {
			return;
		}

		// console.trace(title);
		// console.log(text);
		if (library_namespace.is_thenable(text)) {
			// console.trace(text);
			text.then(function(text) {
				// console.trace(text);
				wiki_API_edit(title, text, token, options, callback,
				//
				timestamp);
			}, function(error) {
				callback(title, error);
			});
			var session = wiki_API.session_of_options(options);
			if (session && session.running) {
				if (false) {
					console.trace(session.actions);
					console.trace(session.actions[0]);
					console.trace('wiki_API_edit: '
							+ 'Calling wiki_API.prototype.next() '
							+ [ session.running, session.actions.length ]);
					text.then(function(text) {
						console.trace(text);
					});
				}
				session.next(text);
			}
			return;
		}

		var is_undo = options && options.undo;
		if (is_undo) {
			// 一般 undo_count 超過1也不一定能成功？因此設定輸入 {undo:1} 時改 {undo:true} 亦可。
			if (is_undo === true) {
				options.undo = is_undo = 1;
			} else if (!(is_undo >= 1)) {
				delete options.undo;
			}
		}

		var undo_count = options
				&& (options.undo_count || is_undo
						&& (is_undo < wiki_API_edit.undo_count_limit && is_undo));

		if (wiki_API.Variable_Map.is_Variable_Map(text)) {
			// 對於新創或空白頁面，應已設定 {String}text.template。
			text = text.to_page_text_updater();
		}

		if (undo_count || typeof text === 'function') {
			library_namespace.debug('先取得內容再 edit / undo '
					+ wiki_API.title_link_of(title) + '。', 1, 'wiki_API_edit');
			// console.log(title);
			var _options;
			if (undo_count) {
				_options = Object.clone(options);
				_options.get_page_before_undo = true;
				if (!_options.rvlimit) {
					_options.rvlimit = undo_count;
				}
				if (!_options.rvprop) {
					_options.rvprop =
					// user: 提供 user name 給 text() 用。
					typeof text === 'function' ? 'ids|timestamp|user'
					// 無須 content，盡量減少索求的資料量。
					: 'ids|timestamp';
				}
			} else {
				_options = Object.clone(options);
				delete _options.rollback_action;
			}

			wiki_API.page(title, function(page_data) {
				if (options && (!options.ignore_denial
				// TODO: 每經過固定時間，或者編輯特定次數之後，就再檢查一次。
				&& wiki_API_edit.denied(page_data, options.bot_id,
				// 若您不想接受機器人的通知、提醒或警告，請使用{{bots|optout=notification_name}}模板。
				// Please using {{bots|optout=notification_name}},
				// the bot will skip this page.
				options.notification_name))) {
					library_namespace.warn([ 'wiki_API_edit: ', {
						// gettext_config:{"id":"editing-of-$1-has-been-rejected-$2"}
						T : [ 'Editing of %1 has been rejected: %2',
						//
						wiki_API.title_link_of(page_data),
						//
						options.notification_name ]
					} ]);
					callback(page_data, 'denied');

				} else {
					// @see wiki_API.prototype.next()
					options.page_to_edit = page_data;
					if (undo_count) {
						delete options.undo_count;
						// page_data =
						// {pageid:0,ns:0,title:'',revisions:[{revid:0,parentid:0,user:'',timestamp:''},...]}
						var revision = wiki_API.content_of.revision(page_data);
						if (revision) {
							timestamp = revision.timestamp;
							// 指定 rev_id 版本編號。
							options.undo = revision.revid;
						}
						options.undoafter = page_data.revisions
						// get the oldest revision
						.at(-1).parentid;
					}

					// 這裡不直接指定 text，是為了使(回傳要編輯資料的)設定值函數能即時依page_data變更 options。
					if (undo_count) {
						// text = '';
					}
					if (typeof text === 'function') {
						// or: text(wiki_API.content_of(page_data),
						// page_data.title, page_data)
						// .call(options,): 使(回傳要編輯資料的)設定值函數能以this即時變更 options。
						// 注意: 更改此介面需同時修改 wiki_API.prototype.work 中 'edit' 之介面。
						text = text.call(options, page_data);
					}
					// 需要同時改變 wiki_API.prototype.next！
					wiki_API_edit(title, text, token, options, callback,
							timestamp);
				}
			}, _options);
			return;
		}

		// assert: typeof text === 'string'

		if (options.discard_changes) {
			// 手動放棄修改。
			text = [ wiki_API_edit.cancel, text || options.discard_changes ];
		}

		var not_passed = !is_undo
				&& wiki_API_edit.check_data(text, title, options,
						'wiki_API_edit');
		if (not_passed) {
			library_namespace.debug('直接執行 callback。', 2, 'wiki_API_edit');
			// console.trace([not_passed, text]);
			callback(title, options.error_with_symbol ? text : not_passed);
			return;
		}

		// 處理 [ {String}API_URL, {String}title or {Object}page_data ]
		if (Array.isArray(title)) {
			action = [ title[0], action ];
			title = title[1];
		}
		if (options && options.write_to) {
			// 設定寫入目標。一般為 debug、test 測試期間用。
			// e.g., write_to:'Wikipedia:沙盒',
			title = options.write_to;
			library_namespace.debug('依 options.write_to 寫入至 '
					+ wiki_API.title_link_of(title), 1, 'wiki_API_edit');
		}

		// 造出可 modify 的 options。
		if (options) {
			library_namespace.debug('#1: ' + Object.keys(options).join(','), 4,
					'wiki_API_edit');
		}
		// 前置處理。
		if (is_undo) {
			options = library_namespace.setup_options(options);
		} else {
			options = Object.assign({
				text : text
			}, options);
		}
		if (library_namespace.is_Object(title)) {
			// 將 {Object}page_data 最新版本的 timestamp 標記註記到 options 去。
			wiki_API_edit.set_stamp(options, title);
			if (title.pageid)
				options.pageid = title.pageid;
			else
				options.title = title.title;
		} else {
			options.title = title;
		}
		if (timestamp || options.page_to_edit) {
			// 若是 timestamp 並非最新版，則會放棄編輯。
			wiki_API_edit.set_stamp(options, timestamp);
		}
		if (options.sectiontitle && options.section !== 'new') {
			options.summary = add_section_to_summary(options.summary,
					options.sectiontitle);
			delete options.sectiontitle;
		}

		// the token should be sent as the last parameter.
		library_namespace.debug('options.token = ' + JSON.stringify(token), 6,
				'wiki_API_edit');
		options.token = (library_namespace.is_Object(token)
		//
		? token.csrftoken : token) || BLANK_TOKEN;
		library_namespace.debug('#2: ' + Object.keys(options).join(','), 4,
				'wiki_API_edit');

		var post_data = wiki_API.extract_parameters(options, action);

		wiki_API.query(action, function(data, error) {
			// console.log(data);
			if (error) {
			} else if (data.error) {
				// 檢查 MediaWiki 伺服器是否回應錯誤資訊。
				error = data.error;
				error.toString = wiki_API.query.error_toString;
			} else if (data.edit && data.edit.result !== 'Success') {
				error = {
					code : data.edit.result,
					info : data.edit.info
					/**
					 * 新用戶要輸入過多或特定內容如 URL，可能遇到:<br />
					 * [Failure] 必需輸入驗證碼
					 */
					|| (data.edit.captcha ? '必需輸入驗證碼'

					/**
					 * 垃圾連結 [[MediaWiki:Abusefilter-warning-link-spam]] e.g.,
					 * youtu.be, bit.ly
					 * 
					 * @see 20170708.import_VOA.js
					 */
					: data.edit.spamblacklist
					//
					? 'Contains spam link 包含被列入黑名單的連結: '
					//
					+ data.edit.spamblacklist
					//
					: JSON.stringify(data.edit)),
					toString : wiki_API.query.error_toString
				};
			}

			if (error || !data) {
				/**
				 * <code>
				wiki_API_edit: Error to edit [User talk:Flow]: [no-direct-editing] Direct editing via API is not supported for content model flow-board used by User_talk:Flow
				wiki_API_edit: Error to edit [[Wikiversity:互助客栈/topic list]]: [tags-apply-not-allowed-one] The tag "Bot" is not allowed to be manually applied.
				[[Wikipedia:首页/明天]]是連鎖保護
				wiki_API_edit: Error to edit [[Wikipedia:典範條目/2019年1月9日]]: [cascadeprotected] This page has been protected from editing because it is transcluded in the following page, which is protected with the "cascading" option turned on: * [[:Wikipedia:首页/明天]]
				 * </code>
				 * 
				 * @see https://doc.wikimedia.org/mediawiki-core/master/php/ApiEditPage_8php_source.html
				 */
				if (!data || !data.error) {
				} else if (data.error.code === 'no-direct-editing'
				// .section: 章節編號。 0 代表最上層章節，new 代表新章節。
				&& options.section === 'new') {
					library_namespace.debug({
						// gettext_config:{"id":"unable-to-edit-in-the-normal-way-so-try-it-as-a-flow-discussion-page"}
						T : '無法以正常方式編輯，嘗試當作 Flow 討論頁面。'
					}, 1, 'wiki_API_edit');
					// console.log(options);
					// edit_topic()
					wiki_API.Flow.edit(title,
					// 新章節/新話題的標題文字。輸入空字串""的話，會用 summary 當章節標題。
					options.sectiontitle,
					// [[mw:Flow]] 會自動簽名，因此去掉簽名部分。
					text.replace(/[\s\n\-]*~~~~[\s\n\-]*$/, ''), options.token,
							options, callback);
					return;
				} else if (data.error.code === 'missingtitle') {
					// "The page you specified doesn't exist."
					// console.log(options);
				}
				/**
				 * <del>遇到過長/超過限度的頁面 (e.g., 過多 transclusion。)，可能產生錯誤：<br />
				 * [editconflict] Edit conflict detected</del>
				 * 
				 * when edit:<br />
				 * [contenttoobig] The content you supplied exceeds the article
				 * size limit of 2048 kilobytes
				 * 
				 * 頁面大小系統上限 2,048 KB = 2 MB。
				 * 
				 * 須注意是否有其他競相編輯的 bots。
				 */
				library_namespace.warn([ 'wiki_API_edit: ', {
					// gettext_config:{"id":"failed-to-edit-the-page-$1-$2"}
					T : [ 'Failed to edit the page %1: %2',
					//
					wiki_API.title_link_of(title), String(error) ]
				} ]);
			} else if (data.edit && ('nochange' in data.edit)) {
				// 在極少的情況下，data.edit === undefined。
				library_namespace.info([ 'wiki_API_edit: ', {
					// gettext_config:{"id":"no-changes-to-page-content-$1"}
					T : [ 'No changes to page content: %1',
					//
					wiki_API.title_link_of(title) ]
				} ]);
			}
			if (typeof callback === 'function') {
				// assert: wiki_API.is_page_data(title)
				// BUT title IS NOT latest page data!
				// It contains only basic page information,
				// e.g., .pageid, .ns, .title
				// title.title === wiki_API.title_of(title)
				callback(title, error, data);
				// console.trace(title);
			}
		}, post_data, options);
	}

	/**
	 * 放棄編輯頁面用。<br />
	 * assert: true === !!wiki_API_edit.cancel
	 * 
	 * @type any
	 */
	wiki_API_edit.cancel = typeof Symbol === 'function' ? Symbol('CANCEL_EDIT')
	//
	: {
		cancel : '放棄編輯頁面用'
	};

	/** {Natural}小於此數則代表當作 undo 幾個版本。 */
	wiki_API_edit.undo_count_limit = 100;

	/**
	 * 對要編輯的資料作基本檢測。
	 * 
	 * @param data
	 *            要編輯的資料。
	 * @param title
	 *            title or id.
	 * @param {String}caller
	 *            caller to show.
	 * 
	 * @returns error: 非undefined表示((data))為有問題的資料。
	 */
	wiki_API_edit.check_data = function check_data(data, title, options, caller) {
		var action;
		// return CeL.wiki.edit.cancel as a symbol to skip this edit,
		// do not generate warning message.
		// 可以利用 ((return [ CeL.wiki.edit.cancel, 'reason' ];)) 來回傳 reason。
		// ((return [ CeL.wiki.edit.cancel, 'skip' ];)) 來跳過 (skip)
		// 本次編輯動作，不特別顯示或處理。
		// 被 skip/pass 的話，連警告都不顯現，當作正常狀況。
		if (data === wiki_API_edit.cancel) {
			// 統一規範放棄編輯頁面訊息。
			data = [ wiki_API_edit.cancel ];
		}

		// data.trim()
		if (!data && (!options || !options.allow_empty)) {
			action = [ 'empty', gettext(typeof data === 'string'
			// 內容被清空。白紙化。
			// gettext_config:{"id":"content-is-empty"}
			? 'Content is empty'
			// gettext_config:{"id":"content-is-not-settled"}
			: 'Content is not settled') ];

		} else if (Array.isArray(data) && data[0] === wiki_API_edit.cancel) {
			action = data.slice(1);
			if (action.length === 1) {
				// error messages
				// gettext_config:{"id":"abandon-change"}
				action[1] = action[0] || gettext('Abandon change');
			}
			if (!action[0]) {
				// error code
				action[0] = 'cancel';
			}

			library_namespace.debug('採用個別特殊訊息: ' + action, 2, caller
					|| 'wiki_API_edit.check_data');
		}

		if (action) {
			if (action[1] !== 'skip') {
				// 被 skip/pass 的話，連警告都不顯現，當作正常狀況。
				library_namespace.warn((caller || 'wiki_API_edit.check_data')
						+ ': ' + wiki_API.title_link_of(title) + ': '
						// gettext_config:{"id":"no-reason-provided"}
						+ (action[1] || gettext('No reason provided')));
			} else {
				library_namespace.debug(
						'Skip ' + wiki_API.title_link_of(title), 2, caller
								|| 'wiki_API_edit.check_data');
			}
			return action[0];
		}
	};

	/**
	 * 處理編輯衝突用。 to detect edit conflicts.
	 * 
	 * 注意: 會改變 options! Warning: will modify options！
	 * 
	 * 此功能之工作機制/原理：<br />
	 * 在 .page() 會取得每個頁面之 page_data.revisions[0].timestamp（各頁面不同）。於 .edit()
	 * 時將會以從 page_data 取得之 timestamp 作為時間戳記傳入呼叫，當 MediaWiki 系統 (API)
	 * 發現有新的時間戳記，會回傳編輯衝突，並放棄編輯此頁面。<br />
	 * 詳見 [https://github.com/kanasimi/CeJS/blob/master/application/net/wiki.js
	 * wiki_API_edit.set_stamp]。
	 * 
	 * @param {Object}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @param {String}timestamp
	 *            頁面時間戳記。 e.g., '2015-01-02T02:52:29Z'
	 * 
	 * @returns {Object}options
	 * 
	 * @see https://www.mediawiki.org/wiki/API:Edit
	 */
	wiki_API_edit.set_stamp = function(options, timestamp) {
		if (false && options.page_to_edit) {
			console.trace(options.page_to_edit);
			if (wiki_API.is_page_data(timestamp)) {
				console.trace(options.page_to_edit === timestamp);
			}
			// options.baserevid =
		}

		if (wiki_API.is_page_data(timestamp)
		// 在 .page() 會取得 page_data.revisions[0].timestamp
		&& (timestamp = wiki_API.content_of.revision(timestamp))) {
			// console.trace(timestamp);
			if (timestamp.revid) {
				// 添加編輯之基準版本號以偵測/避免編輯衝突。
				options.baserevid = timestamp.revid;
			}
			// 自 page_data 取得 timestamp.
			timestamp = timestamp.timestamp;
		}

		// timestamp = '2000-01-01T00:00:00Z';
		if (timestamp) {
			library_namespace.debug(timestamp, 3, 'wiki_API_edit.set_stamp');
			options.basetimestamp = options.starttimestamp = timestamp;
		}

		return options;
	};

	/**
	 * Get the contents of [[Template:Bots]].
	 * 
	 * @param {String}content
	 *            page contents 頁面內容。
	 * 
	 * @returns {Array}contents of [[Template:Bots]].
	 * 
	 * @see https://zh.wikipedia.org/wiki/Template:Bots
	 */
	wiki_API_edit.get_bot = function(content) {
		// TODO: use parse_template(content, 'bots')
		var bots = [], matched, PATTERN = /{{[\s\n]*bots[\s\n]*(\S[\s\S]*?)}}/ig;
		while (matched = PATTERN.exec(content)) {
			library_namespace.debug(matched.join('<br />'), 1,
					'wiki_API_edit.get_bot');
			if (matched = matched[1].trim().replace(/(^\|\s*|\s*\|$)/g, '')
			// .split('|')
			)
				bots.push(matched);
		}
		if (0 < bots.length) {
			library_namespace.debug(bots.join('<br />'), 1,
					'wiki_API_edit.get_bot');
			return bots;
		}
	};

	/**
	 * 測試頁面是否允許機器人帳戶訪問，遵守[[Template:Bots]]。機器人另須考慮{{Personal announcement}}的情況。
	 * 
	 * [[Special:Log/massmessage]] Delivery of "message" to [[User talk:user]]<br />
	 * was skipped because the target has opted-out of message delivery<br />
	 * failed with an error code of protectedpage / contenttoobig
	 * 
	 * @param {String}content
	 *            page contents 頁面內容。
	 * @param {String}bot_id
	 *            機器人帳戶名稱。
	 * @param {String}notification_name
	 *            message notifications of action. 按通知種類而過濾(optout)。
	 *            ignore_opted_out allows /[a-z\d\-\_]+/ that will not affects
	 *            RegExp. ignore_opted_out will splits with /[,|]/.
	 * 
	 * @returns {Boolean|String}封鎖機器人帳戶訪問。
	 */
	wiki_API_edit.denied = function(content, bot_id, notification_name) {
		if (!content)
			return;
		var page_data;
		if (wiki_API.is_page_data(content)) {
			page_data = content;
			content = wiki_API.content_of(content);
		}
		// assert: !content || typeof content === 'string'

		if (typeof content === 'string') {
			content = content.replace(/<!--[\s\S]*-->/g, '').replace(
					/<nowiki\s*>[\s\S]*<\/nowiki>/g, '');
		}
		if (!content)
			return;

		library_namespace.debug('contents to test: [' + content + ']', 3,
				'wiki_API_edit.denied');

		var bots = wiki_API_edit.get_bot(content),
		/** {String}denied messages */
		denied, allow_bot;

		if (bots) {
			library_namespace.debug('test ' + bot_id + '/' + notification_name,
					3, 'wiki_API_edit.denied');
			// botlist 以半形逗號作間隔。
			bot_id = (bot_id = bot_id && bot_id.toLowerCase()) ? new RegExp(
					'(?:^|[\\s,])(?:all|' + bot_id + ')(?:$|[\\s,])', 'i')
					: wiki_API_edit.denied.all;

			if (notification_name) {
				if (typeof notification_name === 'string'
				// 以 "|" 或半形逗號 "," 隔開 optout。
				&& notification_name.includes(',')) {
					notification_name = notification_name.split(',');
				}
				if (Array.isArray(notification_name)) {
					notification_name = notification_name.map(function(name) {
						return name.trim();
					}).join('|');
				}
				if (typeof notification_name === 'string') {
					// 預設必須包含 optout=all
					notification_name = new RegExp('(?:^|[\\s,])(?:all|'
							+ notification_name.trim() + ')(?:$|[\\s,])');
				} else if (!library_namespace.is_RegExp(notification_name)) {
					library_namespace.warn(
					//
					'wiki_API_edit.denied: Invalid notification_name: ['
							+ notification_name + ']');
					notification_name = null;
				}
				// 警告: 自訂 {RegExp}notification_name 可能頗危險。
			}

			bots.some(function(data) {
				// data = data.toLowerCase();
				library_namespace.debug('test [' + data + ']', 1,
						'wiki_API_edit.denied');

				var matched,
				/** {RegExp}封鎖機器人訪問之 pattern。 */
				PATTERN;

				// 過濾機器人所發出的通知/提醒
				// 頁面/用戶以bots模板封鎖通知
				if (notification_name) {
					PATTERN =
					//
					/(?:^|\|)[\s\n]*optout[\s\n]*=[\s\n]*([^{}|]+)/ig;
					while (matched = PATTERN.exec(data)) {
						if (notification_name.test(matched[1])) {
							// 一被拒絕即跳出。
							return denied = 'Opt out of ' + matched[1];
						}
					}
				}

				// 檢查被拒絕之機器人帳戶名稱列表（以半形逗號作間隔）
				PATTERN = /(?:^|\|)[\s\n]*deny[\s\n]*=[\s\n]*([^|]+)/ig;
				while (matched = PATTERN.exec(data)) {
					if (bot_id.test(matched[1])) {
						// 一被拒絕即跳出。
						return denied = 'Banned: ' + matched[1];
					}
				}

				// 檢查被允許之機器人帳戶名稱列表（以半形逗號作間隔）
				PATTERN = /(?:^|\|)[\s\n]*allow[\s\n]*=[\s\n]*([^|]+)/ig;
				while (matched = PATTERN.exec(data)) {
					if (!bot_id.test(matched[1])) {
						// 一被拒絕即跳出。
						return denied = 'Not in allowed bots list: ['
								+ matched[1] + ']';
					}

					if (page_data)
						allow_bot = matched[1];
				}

			});
		}

		// {{Nobots}}判定
		if (!denied && /{{[\s\n]*nobots[\s\n]*}}/i.test(content))
			denied = 'Ban all compliant bots.';

		if (denied) {
			// console.trace(content);
			library_namespace.warn('wiki_API_edit.denied: '
			//
			+ (page_data ? wiki_API.title_link_of(page_data) + ' ' : '')
					+ denied);
			return denied;
		}

		if (allow_bot) {
			// 特別標記本 bot 為被允許之 bot。
			page_data.allow_bot = allow_bot;
		}
	};

	/**
	 * pattern that will be denied.<br />
	 * i.e. "deny=all", !("allow=all")
	 * 
	 * @type {RegExp}
	 */
	wiki_API_edit.denied.all = /(?:^|[\s,])all(?:$|[\s,])/;

	// ------------------------------------------------------------------------

	// 不用 copy_to 的原因是 copy_to(wiki) 得遠端操作 wiki，不能保證同步性。
	// this_wiki.copy_from(wiki) 則呼叫時多半已經設定好 wiki，直接在本this_wiki中操作比較不會有同步性問題。
	// 因為直接採wiki_API.prototype.copy_from()會造成.page().copy_from()時.page()尚未執行完，
	// 這會使執行.copy_from()時尚未取得.last_page，因此只好另開function。
	// @see [[Template:Copied]], [[Special:Log/import]]
	// TODO: 添加 wikidata sitelinks 語言連結。處理分類。處理模板。
	function wiki_API_prototype_copy_from(title, options, callback) {
		if (typeof options === 'function') {
			// shift arguments
			callback = options;
			options = undefined;
		}

		options = wiki_API.add_session_to_options(this, options);

		var _this = this, copy_from_wiki;
		function edit() {
			// assert: wiki_API.is_page_data(title)
			var content_to_copy = wiki_API.content_of(title);
			if (typeof options.processor === 'function') {
				// options.processor(from content_to_copy, to content)
				content_to_copy = options.processor(title, wiki_API
						.content_of(_this.last_page));
			}
			if (!content_to_copy) {
				library_namespace
						.warn('wiki_API_prototype_copy_from: Nothing to copy!');
				_this.next();
			}

			var content;
			if (options.append && (content
			//
			= wiki_API.content_of(_this.last_page).trimEnd())) {
				content_to_copy = content + '\n' + content_to_copy;
				options.summary = 'Append from '
						+ wiki_API.title_link_of(title, copy_from_wiki) + '.';
			}
			if (!options.summary) {
				options.summary = 'Copy from '
				// TODO: 複製到非維基項目外的私人維基，例如moegirl時，可能需要用到[[zhwiki:]]這樣的prefix。
				+ wiki_API.title_link_of(title, copy_from_wiki) + '.';
			}
			_this.actions.unshift(
			// wiki.edit(page, options, callback)
			[ 'edit', content_to_copy, options, callback ]);
			_this.next();
		}

		if (wiki_API.is_wiki_API(title)) {
			// from page 為另一 wiki_API
			copy_from_wiki = title;
			// wiki.page('title').copy_from(wiki)
			title = copy_from_wiki.last_page;
			if (!title) {
				// wiki.page('title').copy_from(wiki);
				library_namespace.debug('先擷取同名title: '
						+ wiki_API
								.title_link_of(this.last_page, copy_from_wiki));
				// TODO: create interwiki link
				copy_from_wiki.page(wiki_API.title_of(this.last_page),
				//
				function(page_data) {
					library_namespace.debug('Continue coping page');
					// console.log(copy_from_wiki.last_page);
					wiki_API_prototype_copy_from.call(_this, copy_from_wiki,
							options, callback);
				});
				return;
			}
		}

		if (wiki_API.is_page_data(title)) {
			// wiki.page().copy_from(page_data)
			edit();

		} else {
			// treat title as {String}page title in this wiki
			// wiki.page().copy_from(title)
			var to_page_data = this.last_page;
			// 即時性，不用 async。
			// wiki_API.page(title, callback, options)
			wiki_API.page(title, function(from_page_data) {
				// recover this.last_page
				_this.last_page = to_page_data;
				title = from_page_data;
				edit();
			}, options);
		}

		return this;
	}

	wiki_API_edit.copy_from = wiki_API_prototype_copy_from;

	// ------------------------------------------------------------------------

	/**
	 * 上傳檔案/媒體。
	 * 
	 * arguments: Similar to wiki_API_edit<br />
	 * wiki_API.upload(file_path, token, options, callback);
	 * 
	 * TODO: https://commons.wikimedia.org/wiki/Commons:Structured_data<br />
	 * 檔案資訊 添加/編輯 說明 (Must be plain text. Cannot use wikitext!)
	 * https://commons.wikimedia.org/w/api.php?action=help&modules=wbsetlabel
	 * wikitext_to_plain_text(wikitext)
	 * 
	 * @param {String}file_path
	 *            file path/url
	 * @param {Object}token
	 *            login 資訊，包含“csrf”令牌/密鑰。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @param {Function}[callback]
	 *            回調函數。 callback(page_data, error, result)
	 * 
	 * @see https://commons.wikimedia.org/w/api.php?action=help&modules=upload
	 *      https://www.mediawiki.org/wiki/API:Upload
	 */
	wiki_API.upload = function upload(file_path, token, options, callback) {
		var action = {
			action : 'upload'
		};
		if (wiki_API.need_get_API_parameters(action, options,
				wiki_API[action.action], arguments)) {
			return;
		}

		// must set options.ignorewarnings to reupload

		// 前置處理。
		options = library_namespace.new_options(options);

		// When set .variable_Map, after successful update, the content of file
		// page will be auto-updated too.
		if (!('page_text_updater' in options) && options.variable_Map) {
			// auto set options.page_text_updater
			options.page_text_updater = options.variable_Map;
		}
		if (options.page_text_updater) {
			// https://www.mediawiki.org/w/api.php?action=help&modules=upload
			// A "csrf" token retrieved from action=query&meta=tokens
			options.token = token;
		}

		// 備註 comment won't accept templates and external links
		if (!options.comment && options.summary) {
			library_namespace.warn(
			// 錯置?
			'wiki_API.upload: Please use .comment instead of .summary!');
			options.comment = options.summary;
		}

		var structured_data = library_namespace
				.new_options(options.structured_data);

		// upload_text: media description
		if (!options.text) {
			// 從 options / file_data / media_data 自動抽取出文件資訊。
			options.text = {
				description : options.description,
				date : library_namespace.is_Date(options.date) ? options.date
						.toISOString().replace(/\.\d+Z$/, 'Z') : options.date,
				source : options.source_url || options.media_url
						|| options.file_url,
				author : /^Q\d+/.test(options.author) ? '{{label|'
						+ options.author + '}}' : options.author,
				permission : options.permission,
				other_versions : options.other_versions
						|| options['other versions'],
				other_fields : options.other_fields || options['other fields']
			};
			if (!structured_data.date)
				structured_data.date = options.text.date;
		} else {
			[ "description", "date", "source", "author", "permission",
					"other_versions", "other_fields" ]
					.forEach(function(parameter) {
						if (parameter in options) {
							library_namespace
									.error('wiki_API.upload: Cannot assign both options.text and options.'
											+ parameter
											+ '! Maybe you want to change options.text to options.additional_text?');
						}
					});
		}

		// options.location: [latitude, longitude, altitude / height / -depth ]
		if (options.location) {
			if (isNaN(options.location[0]) || isNaN(options.location[1])) {
				delete options.location;
			} else if (!structured_data.location) {
				structured_data.location = options.location;
			}
		}
		if (options.location && options.variable_Map) {
			if (options.location[0] && !options.variable_Map.has('latitude'))
				options.variable_Map.set('latitude', options.location[0]);
			if (options.location[1] && !options.variable_Map.has('longitude'))
				options.variable_Map.set('longitude', options.location[1]);
			if (options.location[2] && !options.variable_Map.has('altitude'))
				options.variable_Map.set('altitude', options.location[2]);
		}

		if (library_namespace.is_Object(options.text)) {
			var variable_Map = options.variable_Map;
			if (variable_Map) {
				for ( var property in options.text) {
					var value = options.text[property];
					if (!variable_Map.has(property)
					//
					&& wiki_API.is_valid_parameters_value(value)
					//
					&& !Variable_Map__PATTERN_mark.test(value)
					// 自動將每次更新可能會改變的值轉成可更新標記。
					&& [ 'date', 'source' ].includes(property)) {
						variable_Map.set(property, value);
					}
					if (variable_Map.has(property)) {
						options.text[property] = variable_Map.format(property);
					}
				}
			}

			options.text = [ '== {{int:filedesc}} ==',
			// 將 .text 當作文件資訊。
			wiki_API.template_text(options.text, {
				name : 'Information',
				separator : '\n| '
			}) ];

			// https://commons.wikimedia.org/wiki/Commons:Geocoding#Adding_a_location_template
			// If the image page has an {{Information}} template, or similar,
			// the {{Location}} template should come immediately after it.
			if (options.location) {
				options.text.push(wiki_API.template_text([
						options.location_template_name || 'Location',
						variable_Map ? variable_Map.format('latitude')
								: options.location[0],
						variable_Map ? variable_Map.format('longitude')
								: options.location[1] ]));
			}

			options.text = options.text.join('\n');
		}

		if (options.license) {
			options.text += '\n== {{int:license-header}} ==\n'
					+ wiki_API.template_text.join_array(options.license);
		}

		// Additional wikitext to place before categories.
		if (options.additional_text) {
			options.text += '\n' + options.additional_text.trim();
		}

		// append categories
		if (options.categories) {
			options.text += '\n'
			//
			+ wiki_API.template_text.join_array(options.categories
			//
			.map(function(category_name) {
				if (category_name && !category_name.includes('[[')) {
					if (!PATTERN_category_prefix.test(category_name))
						category_name = 'Category:' + category_name;
					// NG: CeL.wiki.title_link_of()
					category_name = '[[' + category_name + ']]';
				}
				return category_name;
			}));
		}

		// assert: typeof options.text === 'string'

		// TODO: check {{Information|permission=license}}
		var post_data = wiki_API.extract_parameters(options, action);

		post_data.token = token;

		// One of the parameters "filekey", "file" and "url" is required.
		if (false && file_path.includes('://')) {
			post_data.url = file_path;
			// The "filename" parameter must be set.
			if (!post_data.filename) {
				post_data.filename = file_path.match(/[\\\/]*$/)[0];
			}
			// Uploads by URL are not allowed from this domain.
		} else {
			// 自動先下載 fetch 再上傳。
			// file: 必須使用 multipart/form-data 以檔案上傳的方式傳送。
			if (!options.form_data) {
				// options.form_data 會被當作傳入 to_form_data() 之 options。
				options.form_data = true;
			}
			post_data.file = file_path.includes('://') ? {
				// to_form_data() will get file using get_URL()
				url : file_path
			} : {
				file : file_path
			};
		}

		if (!post_data.filename) {
			// file path → file name
			post_data.filename = file_path.match(/[^\\\/]*$/)[0]
			// {result:'Warning',warnings:{badfilename:''}}
			.replace(/#/g, '-');
			// https://www.mediawiki.org/wiki/Manual:$wgFileExtensions
		}

		if (!structured_data['media type']) {
			var matched;
			if (library_namespace.MIME_of) {
				matched = library_namespace.MIME_of(post_data.filename);
			} else if (matched = post_data.filename
					.match(/\.(png|jpeg|gif|webp|bmp)$/i)) {
				matched = 'image/' + matched[1].toLowerCase();
			}
			if (matched) {
				structured_data['media type'] = matched;
			}
		}

		var session = wiki_API.session_of_options(options);
		if (options.show_message && post_data.file.url) {
			library_namespace.log(file_path + '\nUpload to → '
					+ wiki_API.title_link_of(session.to_namespace(
					// 'File:' +
					post_data.filename, 'File')));
		}

		if (session && session.API_URL && options.check_media) {
			// TODO: Skip exists file
			// @see 20181016.import_earthquake_shakemap.js
		}

		// no really update
		if (options.test_only) {
			if (options.test_only !== 'no message') {
				delete options[KEY_SESSION];
				delete options.text;
				action = post_data.text;
				delete post_data.text;

				console.log('-'.repeat(80));
				console.log(options);
				console.log(post_data);
				library_namespace.info('wiki_API.upload: test edit text:\n'
						+ action);
			}
			callback(null, 'Test edit');
			return;
		}

		wiki_API.query(action, upload_callback.bind(null,
		//
		function check_structured_data(data, error) {
			// console.trace([ data, error ]);

			if (!structured_data.date) {
				structured_data.date = options.date;
			}
			if (structured_data.location
			// assert: Array.isArray(structured_data.location)
			&& !structured_data.location.precision) {
				structured_data.location.precision = .1;
			}
			// normalize structured_data
			Object.keys(structured_data).forEach(function(name) {
				if (structured_data[name] === undefined) {
					delete structured_data[name];
					return;
				}
				var property_id = structured_data_mapping[name];
				if (property_id && !(property_id in structured_data)) {
					structured_data[property_id] = structured_data[name];
					delete structured_data[name];
				}
			});
			// console.trace([ post_data.filename, structured_data ]);
			if (library_namespace.is_empty_object(structured_data)) {
				callback(data, error);
				return;
			}

			// --------------------------------------------

			// 確保不會直接執行 session.edit_structured_data()，而是將之推入 session.actions。
			session.running = true;

			session.edit_structured_data(session.to_namespace(
			// 'File:' + data.filename
			post_data.filename, 'File'),
			//
			function fill_structured_data(entity) {
				var summary_list = [], data = Object.create(null);
				for ( var property_id in structured_data) {
					if (entity.claims
					//
					&& wiki_API.data.value_of(entity.claims[property_id])) {
						if (false) {
							console.log([ property_id, wiki_API.data.value_of(
							//
							entity.claims[property_id]) ]);
						}
						continue;
					}

					var value = structured_data[property_id];
					data[property_id] = value;
					var config = structured_data_config[property_id];
					var summary_name = config && config[KEY_summary_name]
							|| property_id;
					summary_name = wiki_API.title_link_of('d:Property:'
							+ property_id, summary_name);
					summary_list.push(summary_name + '=' + value);
				}

				// console.log(entity.claims);
				// console.trace([ summary_list, data ]);

				if (summary_list.length === 0)
					return [ wiki_API.edit.cancel, 'skip' ];

				// gettext_config:{"id":"Comma-separator"}
				this.summary += summary_list.join(gettext('Comma-separator'));
				return data;

			}, {
				// 標記此編輯為機器人編輯。
				bot : options.bot,
				summary : 'Modify structured data: '
			}, function structured_data_callback(_data, _error) {
				// console.trace([ _data, error, _error ]);
				if (error) {
					if (data && data.error
							&& data.error.code === 'fileexists-no-change')
						;
				}
				callback(data, error || _error);
			});

			// 本執行序擁有執行權，因此必須手動執行 session.next()，否則會中途跳出。
			session.next();

		}, options), post_data, options);

	};

	var KEY_summary_name = 'summary_name',
	// {inner} alias
	structured_data_mapping = {
		// 描述地坐標 (P9149) [[Commons:Structured data/Modeling/Location]]
		location : 'P9149',
		// 描繪內容 (P180) [[Commons:Structured data/Modeling/Depiction]]
		depicts : 'P180',

		// [[Commons:Structured data/Modeling/Properties table]]
		// TODO: 文件格式 (P2701)
		'file format' : 'P2701',
		// TODO: 資料大小 (P3575)
		'data size' : 'P3575',

		'media type' : 'P1163',

		// 成立或建立時間 (P571) [[Commons:Structured data/Modeling/Date]]
		'created datetime' : 'P571',
		date : 'P571'
	}, structured_data_config = Object.create(null);
	Object.keys(structured_data_mapping).forEach(function(name) {
		var property_id = structured_data_mapping[name];
		var property_config = structured_data_config[property_id];
		if (!property_config) {
			structured_data_config[property_id]
			//
			= property_config = Object.create(null);
		}
		if (!property_config[KEY_summary_name])
			property_config[KEY_summary_name] = name;
	});

	function upload_callback(callback, options, data, error) {
		if (error || !data || (error = data.error)
		/**
		 * <code>
		{upload:{result:'Warning',warnings:{exists:'file_name',nochange:{}},filekey:'',sessionkey:''}}
		{upload:{result:'Warning',warnings:{"duplicate":["file_name"]}}
		{upload:{result:'Warning',warnings:{"was-deleted":"file_name","duplicate-archive":"file_name"}}
		{upload:{result:'Success',filename:'',imageinfo:{}}}
		{upload:{result:'Success',filename:'',warnings:{duplicate:['.jpg','.jpg']},imageinfo:{}}}

		{"error":{"code":"fileexists-no-change","info":"The upload is an exact duplicate of the current version of [[:File:name.jpg]].","stasherrors":[{"message":"uploadstash-exception","params":["UploadStashBadPathException","Path doesn't exist."],"code":"uploadstash-exception","type":"error"}],"*":"See https://test.wikipedia.org/w/api.php for API usage. Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce&gt; for notice of API deprecations and breaking changes."},"servedby":"mw1279"}
		{"error":{"code":"verification-error","info":"File extension \".gif\" does not match the detected MIME type of the file (image/jpeg).","details":["filetype-mime-mismatch","gif","image/jpeg"],"*":"See https://commons.wikimedia.org/w/api.php for API usage. Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/postorius/lists/mediawiki-api-announce.lists.wikimedia.org/&gt; for notice of API deprecations and breaking changes."},"servedby":"mw1450"}
		</code>
		 */
		|| !(data = data.upload) || data.result !== 'Success') {
			// console.error(error);
			if (!error) {
				if (data && data.result) {
					error = data.result;
					if (data.warnings) {
						error += ': ' + JSON.stringify(data.warnings);
					}
				} else {
					error = 'Error on uploading';
				}
			}
			if (options.show_message) {
				console.log(data);
				library_namespace.error(typeof error === 'object' ? JSON
						.stringify(error) : error);
				if (data && data.warnings) {
					library_namespace.warn(JSON.stringify(data.warnings));
				} else {
					// library_namespace.warn(JSON.stringify(data));
				}
			}
			// @see function wiki_operator()
			if (typeof error === 'string') {
				error = new Error(error);
			} else if (library_namespace.is_Object(error)) {
				error = new Error(JSON.stringify(error));
			}

			typeof callback === 'function' && callback(data, error);
			return;
		}

		if (options.show_message) {
			console.log(data);
		}

		if (!options.page_text_updater
		// uploaded a new version
		// {result:'Success',filename:'file_name',warnings:{exists:'file_name'},imageinfo:{...}}
		|| !data.warnings || !data.warnings.exists) {
			typeof callback === 'function' && callback(data);
			return;
		}

		// update description text for a existed file
		if (!options.summary && options.comment) {
			options.summary = options.comment;
		}
		delete options.text;
		delete options.form_data;
		if (wiki_API.Variable_Map.is_Variable_Map(options.page_text_updater)) {
			options.page_text_updater = options.page_text_updater
					.to_page_text_updater();
		}
		var session = wiki_API.session_of_options(options);
		// 'File:' +
		var file_path = session.to_namespace(data.filename, 'File');
		// library_namespace.info('upload_callback: options.page_text_updater');
		// console.log(JSON.stringify(data));
		// console.log(file_path);
		// console.trace(options);
		wiki_API.edit(file_path, options.page_text_updater, options.token,
				options, callback);
	}

	// ------------------------------------------
	// 使用於需要多次更新頁面內容的情況。

	if (false) {
		(function() {
			// TODO:
			var update_Variable_Map = new CeL.wiki.Variable_Map;
			update_Variable_Map.set('variable_name', wikitext_value);
			update_Variable_Map.set('timestamp', {
				// .may_not_update: 可以不更新。 e.g., timestamp
				may_not_update : true,
				wikitext : '<onlyinclude>~~~~~</onlyinclude>'
			});
			update_Variable_Map.template = '...\n' + '*date: '
					+ update_Variable_Map.format('timestamp') + '\n'
					+ update_Variable_Map.format('variable_name') + '...';
			wiki.edit(page, update_Variable_Map, options);
		})();
	}

	/**
	 * <code>CeL.wiki.Variable_Map</code> is used to update content when
	 * update pages or files. It will insert comments around the value, prevent
	 * others from accidentally editing the text that will be overwritten.
	 * 
	 * @param {Array}iterable
	 *            initial values
	 */
	function Variable_Map(iterable) {
		if (library_namespace.is_Object(iterable))
			iterable = Object.entries(iterable);
		try {
			Map.call(this, iterable);
			// Object.assign(iterable, Map.prototype);
			return;
		} catch (e) {
			// node.js 0.11: Constructor Map requires 'new'
		}

		iterable = new Map(iterable);
		// Copy all methods
		Object.assign(iterable, Variable_Map.prototype);
		return iterable;
	}
	Variable_Map.prototype = {
		format : Variable_Map_format,
		update : Variable_Map_update,
		to_page_text_updater : Variable_Map_to_page_text_updater,
		constructor : Variable_Map
	};

	Variable_Map.is_Variable_Map = function is_Variable_Map(value) {
		return value && value.constructor === Variable_Map;
	};

	function Variable_Map_format(variable_name, default_value) {
		var start_mark = '<!-- update '
				+ variable_name
				+ ': '
				// gettext_config:{"id":"the-text-between-update-comments-will-be-automatically-overwritten-by-the-bot"}
				+ gettext('The text between update comments will be automatically overwritten by the bot.')
				+ ' -->';
		var end_mark = '<!-- update end: ' + variable_name + ' -->';
		var value;
		if (this.has(variable_name)) {
			value = this.get(variable_name);
			if (library_namespace.is_Object(value)) {
				// TODO: value.wikitext === undefined
				value = value.wikitext;
			}
		} else {
			value = default_value === undefined ? '' : default_value;
		}
		return start_mark + value + end_mark;
	}

	// [ all_mark, start_mark, variable_name, original_value, end_mark ]
	var Variable_Map__PATTERN_mark = /(<!--\s*update ([^():]+)[\s\S]*?-->)([\s\S]+?)(<!--\s*update end:\s*\2(?:\W[\s\S]*?)?-->)/g;
	var Variable_Map__PATTERN_template_mark = /({{Auto-generated\s*\|([^{}|]+)}})([\s\S]+?)({{Auto-generated\s*\|\2\|end}})/;

	function Variable_Map_update(wikitext) {
		var changed, variable_Map = this;
		// console.trace(variable_Map);

		function replacer(all_mark, start_mark, variable_name, original_value,
				end_mark) {
			if (false) {
				console.trace([ all_mark, variable_name,
						variable_Map.has(variable_name) ]);
			}
			// console.trace(variable_Map);
			if (variable_Map.has(variable_name)) {
				var value = variable_Map.get(variable_name), may_not_update;
				if (library_namespace.is_Object(value)) {
					// console.trace([ variable_name, value.may_not_update ]);
					// .may_not_update: 可以不更新。 e.g., timestamp
					may_not_update = value.may_not_update;
					value = value.wikitext;
				}
				if (value !== original_value) {
					if (!may_not_update)
						changed = variable_name;
					// preserve start_mark, end_mark
					return start_mark + value + end_mark;
				}
			}
			return all_mark;
		}

		// TODO:
		if (false) {
			wikitext = wikitext.replace(Variable_Map__PATTERN_template_mark,
					replacer);
		}
		wikitext = wikitext.replace(Variable_Map__PATTERN_mark, replacer);
		// console.trace(changed);
		if (!changed) {
			return [ wiki_API.edit.cancel,
					'Variable_Map_update: Nothing to update' ];
		}
		// console.trace(wikitext);
		return wikitext;
	}

	// @inner
	function Variable_Map__page_text_updater(page_data) {
		// console.trace(page_data);
		/**
		 * {String}page content, maybe undefined. 條目/頁面內容 =
		 * CeL.wiki.revision_content(revision)
		 */
		var content = wiki_API.content_of(page_data);
		// console.trace(content);

		if (!content) {
			content = this.template;
			if (typeof content === 'function')
				content = this.template(page_data);
		}

		if (content) {
			// console.trace(content);
			// console.trace(this.update(content))
			return this.update(content);
		}

		if (false) {
			// or: 此頁面不存在/已刪除。
			// gettext_config:{"id":"no-content"}
			content = gettext('No content: ')
					+ wiki_API.title_link_of(page_data);
		}
		content = 'Variable_Map__page_text_updater: '
				+ wiki_API.title_link_of(page_data)
				+ ': No .template specified.';
		// library_namespace.log(content);
		return [ wiki_API_edit.cancel, content ];
	}
	function Variable_Map_to_page_text_updater() {
		return Variable_Map__page_text_updater.bind(this);
	}

	Variable_Map.plain_text = function plain_text(wikitext) {
		return wiki_link.replace(/<!--[\s\S]*?-->/g, '');
	};

	wiki_API.Variable_Map = Variable_Map;

	// ------------------------------------------------------------------------

	// export 導出.

	return wiki_API_edit;
}

});
// CeL.application.net.wiki.parser.wikitext
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): parse wikitext 解析維基語法
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>

parser [[WP:維基化]] [[w:en:Wikipedia:AutoWikiBrowser/General fixes]] [[w:en:Wikipedia:WikiProject Check Wikipedia]]
https://www.mediawiki.org/wiki/API:Edit_-_Set_user_preferences

</code>
 * 
 * @since 2021/12/14 18:53:43 拆分自 CeL.application.net.wiki.parser
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.parser.wikitext',

	require : 'application.net.wiki.parser.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki;
	// @inner
	var PATTERN_wikilink = wiki_API.PATTERN_wikilink, PATTERN_wikilink_global = wiki_API.PATTERN_wikilink_global, PATTERN_file_prefix = wiki_API.PATTERN_file_prefix, PATTERN_URL_WITH_PROTOCOL_GLOBAL = wiki_API.PATTERN_URL_WITH_PROTOCOL_GLOBAL, PATTERN_category_prefix = wiki_API.PATTERN_category_prefix;

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	// --------------------------------------------------------------------------------------------

	// CeL.wiki.HTML_to_wikitext(HTML)
	// TODO: 應該 parse HTML。
	// @see
	// https://www.mediawiki.org/w/api.php?action=help&modules=flow-parsoid-utils
	// https://www.mediawiki.org/w/api.php?action=help&modules=parse
	// https://www.mediawiki.org/w/api.php?action=help&modules=expandtemplates
	function HTML_to_wikitext(HTML, options) {
		return HTML
		//
		.replace(/<\/i><i>/g, '').replace(/<\/b><b>/g, '').replace(
				/<\/strong><strong>/g, '')
		//
		.replace(/<i>([\s\S]+?)<\/i>/g, "''$1''").replace(
				/<b>([\s\S]+?)<\/b>/g, "'''$1'''").replace(
				/<strong>([\s\S]+?)<\/strong>/g, "'''$1'''")
		//
		.replace_till_stable(/<span(?: [^<>]*)?>([^<>]*?)<\/span>/g, "$1")
		//
		.replace(/<a ([^<>]+)>([\s\S]+?)<\/a>/g,
		//
		function(all, attributes, innerHTML) {
			var href = attributes.match(/href="([^"]+)"/);
			return '[' + (href ? href[1] : '#') + ' ' + innerHTML + ']';
		})
		//
		.replace(/\s*<br(?:[^\w<>][^<>]*)?>[\r\n]*/ig, '\n').replace(
				/<p ?\/>\n*/ig, '\n\n')
		// ignore style, remove <p style="...">...</p>
		// .replace(/<p[^<>]*>([^<>]*)<\/p>[\s\n]*/g, '$1\n\n')
		.replace(/<p>([\s\S]+?)<\/p>\n*/g, '$1\n\n')
		//
		.replace(/\r?\n/g, '\n').replace(/\n{3,}/g, '\n\n');
	}

	// --------------------------------------------------------------------------------------------

	/**
	 * excluding the disambiguator, and remove diacritics of page_title
	 * 
	 * @param {String}page_title
	 *            頁面標題。
	 * @param {Boolean}to_lower_case
	 *            for case-insensitive compare
	 * 
	 * @returns {String} sort key
	 */
	function page_title_to_sort_key(page_title, to_lower_case) {
		if (!page_title)
			return;
		if (page_title.title) {
			// input page_data
			page_title = page_title.title;
		}
		// excluding the disambiguator
		// e.g., [[Abdoul Karim Sylla (footballer, born 1981)]]
		// → "Abdoul Karim Sylla"
		var sort_key = page_title.toString().replace(/ \([^()]+\)$/, '');
		if (sort_key.normalize) {
			// with diacritics removed. to Latin alphabet
			// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
			sort_key = sort_key.normalize("NFD")
					.replace(/[\u0300-\u036f]/g, "");
		}
		if (to_lower_case)
			sort_key = sort_key.toLowerCase();
		return sort_key;
	}

	// TODO: check the sort_key is the same as page title or DEFAULTSORT
	function set_sort_key_of_category(sort_key) {
		if (typeof sort_key === 'undefined' || sort_key === null)
			return;

		var category_token = this;
		// const
		var old_sort_key = category_token.sort_key
				&& page_title_to_sort_key(category_token.sort_key);
		if (old_sort_key) {
			if (old_sort_key === sort_key) {
				// Nothing changed
				return;
			}
			if (old_sort_key.length > sort_key
					|| !old_sort_key.startsWith(sort_key)) {
				library_namespace.debug('The sort key of <code><nowiki>'
						+ category_token + '</nowiki></code> will be set to '
						+ JSON.stringify(sort_key) + '!', 1,
						'set_sort_key_of_category');
			}
		}
		category_token[2] = category_token.sort_key = sort_key;
		return true;
	}

	// --------------------------------------------------------------------------------------------
	// parse wikitext.

	/**
	 * 不包含可 parse 之要素，不包含 text 之 type。<br />
	 * 不應包含 section title，因可能有 "==[[]]==" 的情況。
	 * 
	 * @type {Object}
	 */
	var atom_type = {
		namespace : true,
		// https://phabricator.wikimedia.org/T173889
		page_title : true,
		// external_link : true,
		url : true,
		style : true,
		tag_single : true,
		comment : true
	};

	// tree level
	var KEY_DEPTH = 'depth';

	/**
	 * 設定 token 為指定 type。將 token 轉為指定 type。
	 * 
	 * @param {Array}token
	 *            parse_wikitext() 解析 wikitext 所得之，以 {Array} 組成之結構。
	 * @param {String}type
	 *            欲指定之類型。 e.g., 'transclusion'.
	 * 
	 * @returns {Array}token
	 * 
	 * @see wiki_token_toString
	 */
	function set_wiki_type(token, type, parent) {
		// console.trace(token);
		if (typeof token === 'string') {
			token = [ token ];
		} else if (!Array.isArray(token)) {
			library_namespace.warn('set_wiki_type: The token is not Array!');
		} else if (token.type && token.type !== 'plain') {
			// 就算 token.type !== type，可能是 <span> 中嵌套 <span> 的形式，
			// 不該直接 `return token` 。

			// 預防token本來就已經有設定類型。
			token = [ token ];
		}
		// assert: Array.isArray(token)
		token.type = type;
		if (type in atom_type) {
			token.is_atom = true;
		}
		// check
		if (false && !wiki_token_toString[type]) {
			throw new Error('.toString() not exists for type [' + type + ']!');
		}

		token.toString = wiki_token_toString[type];
		// Object.defineProperty(token, 'toString', wiki_token_toString[type]);

		if (false) {
			var depth;
			if (parent >= 0) {
				// 當作直接輸入 parent depth。
				depth = parent + 1;
			} else if (parent && parent[KEY_DEPTH] >= 0) {
				depth = parent[KEY_DEPTH] + 1;
			}
			// root 的 depth 為 (undefined|0)===0
			token[KEY_DEPTH] = depth | 0;
		}

		return token;
	}

	// --------------------------------------------------------------------------------------------

	/**
	 * 將特殊標記解譯/還原成 {Array} 組成之結構。
	 * 
	 * @param {Array}queue
	 *            temporary queue.
	 * @param {String}include_mark
	 *            解析用之起始特殊標記。
	 * @param {String}end_mark
	 *            結束之特殊標記。
	 * 
	 * @see parse_wikitext()
	 */
	function resolve_escaped(queue, include_mark, end_mark) {
		if (false) {
			library_namespace.debug('queue: ' + queue.join('\n--- '), 4,
					'resolve_escaped');
			console.log('resolve_escaped: ' + JSON.stringify(queue));
		}

		var length = queue.length;
		for (var index = queue.last_resolved_length | 0; index < length; index++) {
			var item = queue[index];
			if (false)
				library_namespace.debug([ 'item', index, item ], 4,
						'resolve_escaped');
			if (typeof item !== 'string') {
				// already resolved
				// assert: Array.isArray(item)
				continue;
			}

			// result queue
			var result = [];

			item.split(include_mark).forEach(function(token, index) {
				if (index === 0) {
					if (token) {
						result.push(token);
					}
					return;
				}
				index = token.indexOf(end_mark);
				if (index === 0) {
					result.push(include_mark);
					return;
				}
				result.push(queue[+token.slice(0, index)]);
				if (token = token.slice(index + end_mark.length))
					result.push(token);
			});

			if (result.length > 1) {
				// console.log(result);
				set_wiki_type(result, 'plain');
			} else {
				result = result[0];
			}
			if (result.includes(include_mark)) {
				throw new Error('resolve_escaped: 仍有 include mark 殘留！');
			}
			queue[index] = result;
		}
		queue.last_resolved_length = length;
		// console.log('resolve_escaped end: '+JSON.stringify(queue));
	}

	// 經測試發現 {{...}} 名稱中不可有 [{}<>\[\]]
	// while(/{{{[^{}\[\]]+}}}/g.exec(wikitext));
	// [|{}] or [|{}=]
	// 但允許 "{{\n name}}"
	// 模板名#後的內容會忽略。
	/** {RegExp}模板的匹配模式。 */
	// var PATTERN_transclusion =
	// /{{[\s\n]*([^\s\n#\|{}<>\[\]][^#\|{}<>\[\]]*)(?:#[^\|{}]*)?((?:(\||{{\s*!\s*}})[^<>\[\]]*)*?)}}/g;
	/**
	 * {RegExp}wikilink內部連結的匹配模式。
	 * 
	 * @see PATTERN_wikilink
	 */
	// var PATTERN_link =
	// /\[\[[\s\n]*([^\s\n\|{}<>\[\]�][^\|{}<>\[\]�]*)((?:(\||{{\s*!\s*}})[^\|{}<>\[\]]*)*)\]\]/g;
	/**
	 * Wikimedia projects 的 external link 匹配模式。
	 * 
	 * matched: [ all external link wikitext, URL, delimiter, link name ]
	 * 
	 * 2016/2/23: 經測試，若為結尾 /$/ 不會 parse 成 external link。<br />
	 * 2016/2/23: "[ http...]" 中間有空白不會被判別成 external link。
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 * 
	 * @see https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=protocols&utf8&format=json
	 */
	var PATTERN_external_link_global = /\[((?:https?:|ftps?:)?\/\/[^\s\|<>\[\]{}\/][^\s\|<>\[\]{}]*)(?:([^\S\r\n]+)([^\]]*))?\]/ig,
	// 若包含 br|hr| 會導致 "aa<br>\nbb</br>\ncc" 解析錯誤！
	/** {String}以"|"分開之 wiki tag name。 [[Help:Wiki markup]], HTML tags. 不包含 <a>！ */
	markup_tags = 'bdi|b|del|ins|i|u|font|big|small|sub|sup|h[1-6]|cite|code|em|strike|strong|s|tt|var|div|center|blockquote|[oud]l|table|caption|pre|ruby|r[tbp]|p|span|abbr|dfn|kbd|samp|data|time|mark'
			// [[Help:Parser tag]], [[Help:Extension tag]]
			+ '|includeonly|noinclude|onlyinclude'
			// https://phabricator.wikimedia.org/T263082
			// 會讀取目標語言的 MediaWiki 轉換表
			// [[w:zh:Wikipedia:互助客栈/技术#新的语言转换语法已经启用]]
			// 使用 <langconvert> 的頁面，優先級順序大概是：-{}- 頁面語言切換 > <langconvert> > 轉換組？
			+ '|langconvert'
			// [[Special:Version#mw-version-parser-extensiontags]]
			// <ce> is deprecated, using <chem>
			// Replace all usages of <ce> with <chem> on wiki
			// https://phabricator.wikimedia.org/T155125
			+ '|categorytree|ce|chem|charinsert|gallery|graph|hiero|imagemap|indicator|inputbox|nowiki|mapframe|maplink|math|poem|quiz|ref|references|score|section|source|syntaxhighlight|templatedata|templatestyles|timeline'

			// https://www.mediawiki.org/wiki/Extension:DynamicPageList_(Wikimedia)
			// + '|DynamicPageList'

			// [[w:en:Template:Term]]
			+ '|li|dt|dd',
	// MediaWiki 可接受的 HTML void elements 標籤.
	// NO b|span|sub|sup|li|dt|dd|center|small
	// 包含可使用，亦可不使用 self-closing 的 tags。
	// self-closing: void elements + foreign elements
	// https://www.w3.org/TR/html5/syntax.html#void-elements
	// @see [[phab:T134423]]
	// https://www.mediawiki.org/wiki/Manual:OutputPage.php
	//
	// templatestyles: https://www.mediawiki.org/wiki/Extension:TemplateStyles
	self_close_tags = 'nowiki|references|ref|area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr|templatestyles'
			// Parser extension tags @ [[Special:Version]]
			// For {{#lst}}, {{#section:}}
			// [[w:en:Help:Labeled section transclusion]]
			// TODO: 標簽（tag）現在可以本地化
			+ '|section';
	/** {RegExp}HTML self closed tags 的匹配模式。 */
	var PATTERN_WIKI_TAG_VOID = new RegExp('<(\/)?(' + self_close_tags
	// allow "<br/>"
	+ ')(\/|\\s[^<>]*)?>', 'ig');

	// 在其內部的 wikitext 不會被 parse。允許內部採用 table 語法的 tags。例如
	// [[mw:Manual:Extensions]]
	// configurations.extensiontags
	var wiki_extensiontags = 'pre|nowiki|gallery|indicator|langconvert|timeline|hiero|imagemap|source|syntaxhighlight|poem|quiz|score|templatestyles|templatedata|graph|maplink|mapframe|charinsert|ref|references|inputbox|categorytree|section|math|ce|chem';
	/**
	 * {RegExp}HTML tags 的匹配模式 of <nowiki>。這些 tag 就算中間置入 "<!--" 也不會被當作
	 * comments，必須在 "<!--" 之前解析。 PATTERN_WIKI_TAG_of_wiki_extensiontags
	 */
	var PATTERN_wiki_extensiontags = wiki_API
			.get_PATTERN_full_tag(wiki_extensiontags);
	/** {RegExp}HTML tags 的匹配模式。 */
	// var PATTERN_WIKI_TAG = wiki_API.get_PATTERN_full_tag(markup_tags);
	wiki_extensiontags = wiki_extensiontags.split('|');
	markup_tags = markup_tags.split('|');
	/** {RegExp}HTML tags 的匹配模式 without <nowiki>。 */
	var PATTERN_non_wiki_extensiontags = wiki_API
			.get_PATTERN_full_tag(markup_tags.filter(function(tag) {
				return !wiki_extensiontags.includes(tag);
			}));
	wiki_extensiontags = wiki_extensiontags.to_hash();

	function evaluate_parser_function(options) {
		var argument_1 = this.parameters[1] && this.parameters[1].toString();
		var argument_2 = this.parameters[2] && this.parameters[2].toString();
		var argument_3 = this.parameters[3] && this.parameters[3].toString();

		switch (this.name) {
		case 'len':
			// {{#len:string}}

			// TODO: ags such as <nowiki> and other tag extensions will always
			// have a length of zero, since their content is hidden from the
			// parser.
			return argument_1.length;

		case 'sub':
			// {{#sub:string|start|length}}
			return argument_3 ? argument_1.substring(argument_2, argument_3)
					: argument_1.slice(argument_2);

		case 'time':
			// https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions##time
			// {{#time: format string | date/time object | language code | local
			// }}
			if (!argument_2 || argument_2 === 'now') {
				argument_2 = new Date;
				return argument_1.replace(/Y/g, argument_2.getUTCFullYear())
				//
				.replace(/n/g, argument_2.getUTCMonth() + 1)
				//
				.replace(/m/g, (argument_2.getUTCMonth() + 1).pad(2))
				//
				.replace(/j/g, argument_2.getUTCDate())
				//
				.replace(/d/g, argument_2.getUTCDate().pad(2));
				// TODO
			}

		case 'if':
			// TODO: parse output of {{#if:text|...}}, {{#if:text||...}}

			// TODO
		}

		return this;
	}

	/**
	 * .toString() of wiki elements: wiki_token_toString[token.type]<br />
	 * parse_wikitext() 將把 wikitext 解析為各 {Array} 組成之結構。當以 .toString() 結合時，將呼叫
	 * .join() 組合各次元素。此處即為各 .toString() 之定義。<br />
	 * 所有的 key (type) 皆為小寫。
	 * 
	 * @type {Object}
	 * 
	 * @see parse_wikitext()
	 */
	var wiki_token_toString = {
		// internal/interwiki link : language links : category links, file,
		// subst 替換引用, ... : title
		// e.g., [[m:en:Help:Parser function]], [[m:Help:Interwiki linking]],
		// [[:File:image.png]], [[wikt:en:Wiktionary:A]],
		// [[:en:Template:Editnotices/Group/Wikipedia:Miscellany for deletion]]
		// [[:en:Marvel vs. Capcom 3: Fate of Two Worlds]]
		// [[w:en:Help:Link#Http: and https:]]
		//
		// 應當使用 [[w:zh:維基百科:編輯提示|編輯提示]] 而非 [[:zh:w:維基百科:編輯提示|編輯提示]]，
		// 見 [[User:Cewbot/Stop]]。
		//
		// @see [[Wikipedia:Namespace]]
		// https://www.mediawiki.org/wiki/Markup_spec#Namespaces
		// [[ m : abc ]] is OK, as "m : abc".
		// [[: en : abc ]] is OK, as "en : abc".
		// [[ :en:abc]] is NOT OK.
		namespaced_title : function() {
			return this.join(this.oddly ? '' : ':');
		},
		// page title, template name
		page_title : function() {
			return this.join(':');
		},
		// link 的變體。但可採用 .name 取得 file name。
		file : function() {
			return '[[' + this[0]
			// anchor 網頁錨點
			+ this[1]
			//
			+ (this.length > 2 ? '|' + this.slice(2).join('|') : '') + ']]';
		},
		// link 的變體。但可採用 .name 取得 category name。
		category : function() {
			return '[[' + this[0]
			// anchor 網頁錨點
			+ this[1]
			//
			+ (this.length > 2 ? '|' + this.slice(2).join('|') : '') + ']]';
		},
		// 內部連結 (wikilink / internal link) + interwiki link
		link : function() {
			return '[[' + this[0]
			// + (this[1] || '')
			+ this[1] + (this.length > 2
			// && this[2] !== undefined && this[2] !== null
			? this.pipe
			// + (this[2] || '')
			+ this[2] : '') + ']]';
		},
		// 外部連結 external link, external web link
		external_link : function() {
			// assert: this.length === 1 or 3
			// assert: this.length === 3
			// && this[1].trim() === '' && this[2] === this[2].trimStart()
			return '[' + this.join('') + ']';
		},
		url : function() {
			return this.join('');
		},
		// template parameter
		parameter : function() {
			return '{{{' + this.join('|') + '}}}';
		},
		// e.g., template
		transclusion : function() {
			return '{{' + this.join('|') + '}}';
		},
		magic_word_function : function() {
			return '{{' + this[0] + this.slice(1).join('|') + '}}';
		},

		// [[Help:Table]]
		table : function() {
			// this: [ table style, row, row, ... ]
			return '{|' + this.join('') + '\n|}';
		},
		// table attributes / styles, old name before 2021/1/24: table_style
		table_attributes : function() {
			return this.join('') + (this.suffix || '');
		},
		// table caption
		caption : function() {
			// this: [ main caption, invalid caption, ... ]
			return (this.delimiter || '') + this.join('');
		},
		table_row : function() {
			// this: [ row style, cell, cell, ... ]
			return (this.delimiter || '') + this.join('');
		},
		table_cell : function() {
			// this: [ contents ]
			// this.delimiter:
			// /\n[!|]|!!|\|\|/ or undefined (在 style/第一區間就已當作 cell)
			return (this.delimiter || '') + this.join('');
		},

		// 手工字詞轉換 language conversion -{}-
		convert : function(language, lang_fallbacks, force_show) {
			if (!language) {
				return '-{'
				//
				+ ('flag' in this ? (this._flag || this.flag) + '|' : '')
						+ this.join(';') + '}-';
			}

			if (language === 'rule') {
				// gets the rule of conversion only
				return this.join(';');
			}

			var flag = this.flag;
			if (!force_show && (flag in {
				// add rule for convert code (but no display in placed code)
				H : true,
				T : true,
				'-' : true
			})) {
				return '';
			}

			if (flag in {
				// raw content
				R : true,
				// description
				D : true
			}) {
				return this.join(';');
			}

			language = language.trim().toLowerCase();
			if (Array.isArray(flag)) {
				if (!flag.includes(language)) {
					// 單純顯示不繁簡轉換的文字
					return this.join(';');
				}
				// TODO: 顯示繁簡轉換後的文字
				return this.join(';');
			}

			// TODO: 後援語種 fallback language variant

			// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=general%7Cnamespaces%7Cnamespacealiases%7Cstatistics
			// language fallbacks: [[mw:Localisation statistics]]
			// (zh-tw, zh-hk, zh-mo) → zh-hant (→ zh?)
			// (zh-cn, zh-sg, zh-my) → zh-hans (→ zh?)
			// [[Wikipedia_talk:地区词处理#zh-my|馬來西亞簡體華語]]
			// [[MediaWiki:Variantname-zh-tw]]
			if (!this.conversion[language]) {
				if (/^zh-(?:tw|hk|mo)/.test(language)) {
					language = 'zh-hant';
				} else if (/^zh/.test(language)) {
					language = 'zh-hans';
				}
			}

			var convert_to = this.conversion[language];
			if (Array.isArray(convert_to)) {
				// e.g., -{H|zh-tw:a-{b}-c}-
				var not_all_string;
				convert_to = convert_to.map(function(token) {
					if (typeof token === 'string')
						return token;
					if (token.type === 'convert'
							&& typeof token.converted === 'string')
						return token.converted;
					not_all_string = true;
				});
				if (!not_all_string)
					convert_to = convert_to.join('');
				else
					convert_to = this.conversion[language];
			}

			return convert_to
			//
			|| typeof this.converted === 'string' && this.converted
			// [[MediaWiki:Converter-manual-rule-error]]: 在手动语言转换规则中检测到错误
			|| 'converter-manual-rule-error';
		},

		// Behavior switches
		'switch' : function() {
			// assert: this.length === 1
			return '__' + this[0] + '__';
		},
		// italic type
		italic : function() {
			return "''" + this.join('') + (this.no_end ? '' : "''");
		},
		// emphasis
		bold : function() {
			return "'''" + this.join('') + (this.no_end ? '' : "'''");
		},

		// section title / section name
		// show all section titles:
		// parser=CeL.wiki.parser(page_data);parser.each('section_title',function(token,index){console.log('['+index+']'+token.title);},false,1);
		// @see for_each_token()
		// parser.each('plain',function(token){},{slice:[1,2]});
		section_title : function(get_inner) {
			// this.join(''): 必須與 wikitext 相同。見 parse_wikitext.title。
			var inner = this.join('');
			if (get_inner) {
				// section_title.toString(true): get inner
				// Must .trim() yourself.
				return inner;
			}

			var level = '='.repeat(this.level);
			return level + inner + level
			// this.postfix maybe undefined, string, {Array}
			+ (this.postfix || '');
		},

		// [[Help:Wiki markup]], HTML tags
		tag : function() {
			// this: [ {String}attributes, {Array}inner nodes ].tag
			// 欲取得 .tagName，請用 this.tag.toLowerCase();
			// 欲取得 .inner nodes，請用 this[1];
			// 欲取得 .innerHTML，請用 this[1].toString();
			return '<' + this.tag + (this[0] || '') + '>' + this[1] + '</'
					+ (this.end_tag || this.tag) + '>';
		},
		tag_attributes : function() {
			return this.join('');
		},
		tag_inner : function() {
			return this.join('');
		},
		tag_single : function() {
			// this: [ {String}attributes ].tag
			// 欲取得 .tagName，請用 this.tag.toLowerCase();
			return '<' + (this.slash || '') + this.tag + this.join('') + '>';
		},

		// comments: <!-- ... -->
		comment : function() {
			// "<\": for Eclipse JSDoc.
			return '<\!--' + this.join('') + (this.no_end ? '' : '-->');
		},
		line : function() {
			// https://www.mediawiki.org/wiki/Markup_spec/BNF/Article
			// NewLine = ? carriage return and line feed ? ;
			return this.join('\n');
		},
		list : function() {
			return this.join('');
		},
		list_item : function() {
			return (this.list_prefix || '') + this.join('');
		},
		pre : function() {
			return ' ' + this.join('\n ');
		},
		hr : function() {
			return this[0];
		},
		paragraph : function() {
			return this.join('\n') + (this.separator || '');
		},
		// plain text 或尚未 parse 的 wikitext.
		plain : function() {
			return this.join('');
		}
	};

	// const , for <dl>
	var DEFINITION_LIST = 'd';

	// !!default_magic_words_hash[magic_word] === 必須指定數值，採用 {{#MW:value}}
	// else 可單用 {{MW}}
	var default_magic_words_hash = Object.create(null);
	// https://www.mediawiki.org/wiki/Help:Magic_words
	// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=functionhooks&utf8&format=json
	('DISPLAYTITLE|DEFAULTSORT|デフォルトソート'
			+ '|ns|nse|lc|lcfirst|uc|ucfirst|urlencode|anchorencode'
			+ '|LOCALURL|FULLURL|FILEPATH'
			// TODO: [[mw:Help:Substitution]]
			// {{subst:FULLPAGENAME}} {{safesubst:FULLPAGENAME}}

			// https://www.mediawiki.org/wiki/Help:Magic_words#Transclusion_modifiers
			// https://en.wikipedia.org/wiki/Help:Transclusion#Transclusion_modifiers
			+ '|int|msg|raw|msgnw|subst|safesubst'
	// 這些需要指定數值。 e.g., {{NS:1}}: OK, {{NS}} will get " ", {{NS:}} will get ""
	).split('|').forEach(function name(magic_word) {
		default_magic_words_hash[magic_word.toUpperCase()] = true;
	});
	// https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=variables&utf8&format=json
	('!|='
			+ '|CURRENTYEAR|CURRENTMONTH|CURRENTDAY|CURRENTTIME|CURRENTHOUR|CURRENTWEEK|CURRENTTIMESTAMP'
			+ '|NAMESPACE|NAMESPACENUMBER'
			+ '|FULLPAGENAME|PAGENAME|BASEPAGENAME|SUBPAGENAME|SUBJECTPAGENAME|ARTICLEPAGENAME|TALKPAGENAME|ROOTPAGENAME'
			+ '|FULLPAGENAMEE|PAGENAMEE|BASEPAGENAMEE|SUBPAGENAMEE|SUBJECTPAGENAMEE|ARTICLEPAGENAMEE|TALKPAGENAMEE|ROOTPAGENAMEE'
	// 這些不用指定數值。
	).split('|').forEach(function name(magic_word) {
		default_magic_words_hash[magic_word.toUpperCase()] = false;
	});

	// parse 手動轉換語法的轉換標籤的語法
	// 經測試，":"前面與後面不可皆有空白。
	// (\s{2,}): 最後的單一/\s/會被轉換為"&#160;"
	// matched: [ all, 指定轉換字串, 指定轉換詞, spaces,
	// this language code, colon, this language token, last spaces ]
	var PATTERN_conversion_slice = /^(([\s\S]+?)=>)?(\s*)(zh(?:-(?:cn|tw|hk|mo|sg|my|hant|hans))?)(\s*:|:\s*)(\S.*?)(\s{2,})?$/;

	// 狀態開關: [[mw:Help:Magic words#Behavior switches]]
	var PATTERN_BEHAVIOR_SWITCH = /__([A-Z]+(?:_[A-Z]+)*)__/g;
	PATTERN_BEHAVIOR_SWITCH = /__(NOTOC|FORCETOC|TOC|NOEDITSECTION|NEWSECTIONLINK|NONEWSECTIONLINK|NOGALLERY|HIDDENCAT|NOCONTENTCONVERT|NOCC|NOTITLECONVERT|NOTC|INDEX|NOINDEX|STATICREDIRECT|NOGLOBAL)__/g;

	// [[w:en:Wikipedia:Extended image syntax]]
	// [[mw:Help:Images]]
	var file_options = {
		// Type, display format, 表示形式
		thumb : 'format',
		thumbnail : 'format',
		frame : 'format',
		framed : 'format',
		frameless : 'format',

		// Border, 外枠, 縁取る, 境界
		border : 'border',

		// Location, Horizontal alignment option, 配置位置
		right : 'location',
		left : 'location',
		// 居中, 不浮動
		center : 'location',
		// 不浮動
		none : 'location',

		// Vertical alignment option, 垂直方向の位置
		baseline : 'alignment',
		middle : 'alignment',
		sub : 'alignment',
		'super' : 'alignment',
		'text-top' : 'alignment',
		'text-bottom' : 'alignment',
		top : 'alignment',
		bottom : 'alignment',

		// Link option
		// link : 'link',

		// alt : 'alt',
		// lang : 'language',

		// https://en.wikipedia.org/wiki/Wikipedia:Creation_and_usage_of_media_files#Setting_a_video_thumbnail_image
		// thumbtime : 'video_thumbtime',
		// start : 'video_start',
		// end : 'video_end',

		// page : 'book_page',
		// 'class' : 'CSS_class',

		// Size, Resizing option
		// 放大倍數
		upright : 'size'
	};

	function join_string_of_array(array) {
		for (var index = 1; index < array.length;) {
			if (typeof array[index] !== 'string') {
				index++;
				continue;
			}

			if (array[index] === '') {
				array.splice(index, 1);
				continue;
			}

			if (typeof array[index - 1] === 'string') {
				array[index - 1] += array[index];
				array.splice(index, 1);
			} else {
				index++;
			}
		}

		return array;
	}

	function is_parsed_element(value) {
		return Array.isArray(value) && value.type;
	}

	/**
	 * parse The MediaWiki markup language (wikitext). 解析維基語法。
	 * 
	 * TODO:<code>

	parse error: [[File:]] 可以允許換行
	[[俄羅斯公民簽證要求]]: [[File:Visa requirements for Russian citizens.png|Visa requirements for Russian citizens|thumb|800px|center|俄罗斯护照持有人可免签证或落地签证前往的国家或地区 
	{{legend|#042E9B|[[俄罗斯]]}}{{legend|#2196f3|[[克里米亚]]}}{{legend|#ffc726|[[:en:Internal_passport_of_Russia|内部护照]]|]]}}{{legend|#22b14c|免签证}}{{legend|#B5E61D|落地签证}}{{legend|#61c09a|电子签证}}{{legend|#79D343|需电子签证或预先在互联网注册}}{{legend|#A8ACAB|需要申请签证}}]]

	parse 嵌入section內文 [[mw:Extension:Labeled_Section_Transclusion]]:
	{{#lsth:page_title|section begin in wikitext|section end in wikitext}}, {{#section-h:page_title}} 語意上相當於 {{page_title#section}}。如果有多個相同名稱的section，僅轉換第一個。The matching is case insensitive
	TODO: parse <section begin=chapter1 />, {{#lst:page_title|section begin|section end}}, {{#lstx:page_title|section|replacement_text}}

	提高效率。e.g., [[三国杀武将列表]], [[世界大桥列表]], [[三国杀武将列表]]<br />
	可能為模板參數特殊設計？有些 template 內含不完整的起始或結尾，使 parameter 亦未首尾對應。

	{{L<!-- -->L}} .valueOf() === '{{LL}}'
	<p<!-- -->re>...</pre>
	CeL.wiki.page('上海外国语大学',function(page_data){CeL.wiki.parser(page_data).parse();})
	[https://a.b <a>a</a><!-- -->]
	[[<a>a</a>]]
	CeL.wiki.parser('a[[未來日記-ANOTHER:WORLD-]]b').parse()[1]
	<nowiki>...<!-- -->...</nowiki> 中的註解不應被削掉!

	parse {{Template:Single chart}}

	</code>
	 * 
	 * 此功能之工作機制/原理：<br />
	 * 找出完整的最小單元，並將之 push 入 queue，並把原 string 中之單元 token 替換成:<br />
	 * {String}include_mark + ({ℕ⁰:Natural+0}index of queue) + end_mark<br />
	 * e.g.,<br />
	 * "a[[p]]b{{t}}" →<br />
	 * "a[[p]]b\00;", queue = [ ["t"].type='transclusion' ] →<br />
	 * "a\01;b\00;", queue = [ ["t"].type='transclusion', ["p"].type='link' ]<br />
	 * 最後再依 queue 與剩下的 wikitext，以 resolve_escaped() 作 resolve。
	 * 
	 * @param {String}wikitext
	 *            wikitext to parse
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * @param {Array}[queue]
	 *            temporary queue. 基本上僅供內部使用。
	 * 
	 * @returns {Array}parsed data
	 * 
	 * @see https://blog.wikimedia.org/2013/03/04/parsoid-how-wikipedia-catches-up-with-the-web/
	 *      https://phabricator.wikimedia.org/diffusion/GPAR/
	 * 
	 * @see [[w:en:Help:Wikitext]], [[Wiki標記式語言]]
	 *      https://www.mediawiki.org/wiki/Markup_spec/BNF/Article
	 *      https://www.mediawiki.org/wiki/Markup_spec/BNF/Inline_text
	 *      https://www.mediawiki.org/wiki/Markup_spec
	 *      https://www.mediawiki.org/wiki/Wikitext
	 *      https://doc.wikimedia.org/mediawiki-core/master/php/html/Parser_8php.html
	 *      Parser.php: PHP parser that converts wiki markup to HTML.
	 *      https://mwparserfromhell.readthedocs.io/
	 */
	function parse_wikitext(wikitext, options, queue) {
		if (!wikitext) {
			return wikitext;
		}

		function _set_wiki_type(token, type) {
			// 這可能性已經在下面個別處理程序中偵測並去除。
			if (false && typeof token === 'string'
					&& token.includes(include_mark)) {
				queue.push(token);
				resolve_escaped(queue, include_mark, end_mark);
				token = [ queue.pop() ];
			}

			return set_wiki_type(token, type, wikitext);

			// 因為parse_wikitext()採用的是從leaf到root的解析法，因此無法在解析leaf時就知道depth。
			// 故以下廢棄。
			var node = set_wiki_type(token, type);
			library_namespace.debug('set depth ' + depth_of_children
					+ ' to children [' + node + ']', 3, '_set_wiki_type');
			node[KEY_DEPTH] = depth_of_children;
			return node;
		}

		// 正規化並提供可隨意改變的同內容參數，以避免修改或覆蓋附加參數。
		// 每個parse_wikitext()都需要新的options，需要全新的。
		// options = Object.assign({}, options);
		options = library_namespace.setup_options(options);

		var session = wiki_API.session_of_options(options);

		if (false) {
			// assert: false>=0, (undefined>=0)
			// assert: (NaN | 0) === 0
			var depth_of_children = ((options[KEY_DEPTH]) | 0) + 1;
			// assert: depth_of_children >= 1
			library_namespace.debug('[' + wikitext + ']: depth_of_children: '
					+ depth_of_children, 3, 'parse_wikitext');
			options[KEY_DEPTH] = depth_of_children;
		}

		var
		/**
		 * 解析用之起始特殊標記。<br />
		 * 需找出一個文件中不可包含，亦不會被解析的字串，作為解析用之起始特殊標記。<br />
		 * e.g., '\u0000'.<br />
		 * include_mark + ({ℕ⁰:Natural+0}index of queue) + end_mark
		 * 
		 * assert: /\s/.test(include_mark) === false
		 * 
		 * @type {String}
		 */
		include_mark = options.include_mark || '\u0000',
		/**
		 * {String}結束之特殊標記。 end of include_mark. 不可為數字 (\d) 或
		 * include_mark，不包含會被解析的字元如 /;/。應為 wikitext 所不容許之字元。
		 */
		end_mark = options.end_mark || '\u0001',
		/** {Boolean}是否順便作正規化。預設不會規範頁面內容。 */
		normalize = options.normalize,
		/** {Array}是否需要初始化。 [ {String}prefix added, {String}postfix added ] */
		initialized_fix = !queue && [ '', '' ],
		// 這項設定不應被繼承。
		no_resolve = options.no_resolve;
		if (no_resolve) {
			delete options.no_resolve;
		}

		if (/\d/.test(end_mark) || include_mark.includes(end_mark))
			throw new Error('Error end of include_mark!');

		if (initialized_fix) {
			// 初始化。
			if (!wikitext.replace) {
				if (Array.isArray(wikitext) && wikitext.type) {
					library_namespace.debug('Treat [' + wikitext
							+ '] as parsed token anf return directly!', 1,
							'parse_wikitext');
					return wikitext;
				}
				console.trace(wikitext);
			}
			wikitext = wikitext
			// 注意: 2004年5月早期的中文維基百科換行採用 "\r\n"，因此必須保留 "\r"。
			// .replace(/\r\n/g, '\n')
			.replace(
			// 先 escape 掉會造成問題之 characters。
			new RegExp(include_mark.replace(/([\s\S])/g, '\\$1'), 'g'),
					include_mark + end_mark);
			if (!wikitext.startsWith('\n') &&
			// /\n([*#:;]+|[= ]|{\|)/:
			// https://www.mediawiki.org/wiki/Markup_spec/BNF/Article#Wiki-page
			// https://www.mediawiki.org/wiki/Markup_spec#Start_of_line_only
			/^(?:[*#;:=\s]|{\|)/.test(wikitext))
				wikitext = (initialized_fix[0] = '\n') + wikitext;
			if (!wikitext.endsWith('\n'))
				wikitext += (initialized_fix[1] = '\n');
			// setup temporary queue
			queue = [];
		}

		var section_title_hierarchy = queue.section_title_hierarchy
				|| (queue.section_title_hierarchy = []);
		if (!section_title_hierarchy[0]) {
			// As root
			section_title_hierarchy[0] = options.target_array
					|| Object.create(null);
			section_title_hierarchy[0].child_section_titles = [];
		}

		if (!queue.conversion_table) {
			// [[MediaWiki:Conversiontable/zh-hant]]
			queue.conversion_table = Object.create(null);
		}

		if (typeof options.prefix === 'function') {
			wikitext = options.prefix(wikitext, queue, include_mark, end_mark)
					|| wikitext;
		}

		// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
		// cf. deep resolve_escaped()
		function shallow_resolve_escaped(text) {
			if (text.includes(include_mark)) {
				// 經過改變，需再進一步處理。
				text = parse_wikitext(text, options, queue);
			}
			return text;
		}

		// console.trace(wikitext);

		// ------------------------------------------------------------------------
		// parse functions

		function parse_language_conversion(all, parameters) {
			// -{...}- 自 end_mark 向前回溯。
			var index = parameters.lastIndexOf('-{'), previous;
			if (index > 0) {
				previous = '-{' + parameters.slice(0, index);
				parameters = parameters.slice(index + '}-'.length);
			} else {
				previous = '';
			}
			library_namespace.debug(previous + ' + ' + parameters, 4,
					'parse_wikitext.convert');

			// console.log(parameters);

			var conversion = Object.create(null),
			//
			conversion_list = [], latest_language;

			var _flag = parameters.match(/^([a-zA-Z\-;\s]*)\|(.*)$/), flag;
			if (_flag) {
				parameters = _flag[2];
				var flag_hash = Object.create(null);
				_flag = _flag[1];
				flag = _flag.split(';').map(function(f) {
					f = f.trim();
					if (f)
						flag_hash[f] = true;
					return f;
				}).filter(function(f) {
					return !!f;
				});
				if (flag.length === 0) {
					flag = '';
				} else {
					// https://doc.wikimedia.org/mediawiki-core/master/php/ConverterRule_8php_source.html
					// 僅取首先符合者。
					[ 'R', 'N', '-', 'T', 'H', 'A', 'D' ].some(function(f) {
						if (flag_hash[f]) {
							flag = f;
							return true;
						}
					});
				}
			}

			var conversion_table = flag && (flag in {
				// '+' add rules for alltext
				// '+' : true,

				// these flags above are reserved for program

				// remove convert (not implement)
				// '-' : true,

				// add rule for convert code (but no display in placed code)
				H : true,
				// add rule for convert code (all text convert)
				A : true
			}) && queue.conversion_table;

			// console.log('parameters: ' + JSON.stringify(parameters));
			parameters = parameters.split(';');
			parameters.forEach(function(converted, index) {
				if (normalize) {
					// remove spaces
					converted = converted.trim();
				}
				if (PATTERN_conversion_slice.test(converted)
				// e.g., "-{ a; zh-tw: tw }-" 之 " a"
				|| conversion_list.length === 0
				// 最後一個是空白。
				|| !converted.trim() && index + 1 === parameters.length) {
					conversion_list.push(converted);
				} else {
					conversion_list[conversion_list.length - 1]
					// e.g., "-{zh-tw: tw ; tw : tw2}-"
					+= ';' + converted;
				}
			});
			// console.log(conversion_list);
			var convert_from_hash = conversion_table && Object.create(null);
			var unidirectional = [];
			/**
			 * [[Help:高级字词转换语法#基本语法]]
			 * 
			 * <code>

			-{zh-cn:cn; zh-tw:tw;}-
			→
			conversion_table['cn'] = conversion_table['tw'] =
			{'zh-cn':'cn','zh-tw':'tw'}


			-{txt=>zh-cn:cn; txt=>zh-tw:tw;}-
			→
			conversion_table['txt'] =
			{'zh-cn':'cn','zh-tw':'tw'}


			-{txt=>zh-cn:cn; zh-cn:cn; zh-tw:tw;}-
			→
			conversion_table['txt'] =
			{'zh-cn':'cn'}
			∪
			conversion_table['cn'] = conversion_table['tw'] =
			{'zh-cn':'cn','zh-tw':'tw'}

			</code>
			 */
			// TODO: 剖析不出任何對應規則的話，則為 R 旗標轉換，即是停用字詞轉換，顯示原文（R stands for raw）。
			conversion_list = conversion_list.map(function(token) {
				var matched = token.match(PATTERN_conversion_slice);
				// console.log(matched);
				if (!matched
				// e.g., -{A|=>zh-tw:tw}-
				|| matched[1] && !(matched[2] = matched[2].trim())) {
					// 經過改變，需再進一步處理。
					return parse_wikitext(token, options, queue);
				}

				// matched.shift();
				matched = matched.slice(1);

				// matched: [ 指定轉換字串, 指定轉換詞, spaces,
				// this language code, colon, this language token, last spaces ]
				if (!matched[6])
					matched.pop();

				// 語言代碼 language variant 用字模式
				var language_code = matched[3].trim(), convert_to
				// 經過改變，需再進一步處理。
				= matched[5] = parse_wikitext(matched[5], options, queue);
				if (!convert_to) {
					// 'converter-manual-rule-error'
					return parse_wikitext(token, options, queue);
				}
				conversion[language_code] = convert_to;
				if (!matched[2]) {
					matched.splice(2, 1);
				}
				// 指定僅轉換某些特殊詞彙。
				// unidirectional_convert_from
				var uniconvert_from;
				if (matched[0]) {
					uniconvert_from = matched[1].trim();
					if (!uniconvert_from) {
						// if $from is empty, strtr() could return a wrong
						// result.
					}
					matched.splice(1, 1);
				} else {
					matched.splice(0, 2);
				}
				token = _set_wiki_type(matched, 'plain');
				token.is_conversion = true;

				if (!conversion_table) {
					;
				} else if (uniconvert_from) {
					// 單向轉換 unidirectional convert
					unidirectional.push(uniconvert_from);
					if (!conversion_table[uniconvert_from]) {
						conversion_table[uniconvert_from]
						// Initialization
						= Object.create(null);
					} else if (conversion_table[uniconvert_from].conversion) {
						conversion_table[uniconvert_from] = Object.clone(
						// assert:
						// conversion_table[uniconvert_from].type==='convert'
						conversion_table[uniconvert_from].conversion);
					}

					if (false && options.conflict_conversion
					// overwrite
					&& conversion_table[uniconvert_from][language_code]) {
						options.conflict_conversion.call(conversion_table,
								uniconvert_from, language_code,
								conversion_table[uniconvert_from]
								//
								[language_code], convert_to);
					}

					conversion_table[uniconvert_from][language_code]
					// settle
					= convert_to;

				} else if (typeof convert_to === 'string') {
					// 後面的設定會覆蓋先前的設定。
					convert_from_hash[language_code] = convert_to;
				} else if (convert_to && convert_to.type === 'plain') {
					// 雙向轉換 bidirectional convert
					// -{H|zh-cn:俄-{匊}-斯;zh-tw:俄-{匊}-斯;zh-hk:俄-{匊}-斯;}-
					// 當作 "俄匊斯"
					var not_all_string;
					convert_to = convert_to.map(function(token) {
						if (typeof token === 'string')
							return token;
						if (token.type === 'convert'
								&& typeof token.converted === 'string')
							return token.converted;
						not_all_string = true;
					});
					if (!not_all_string) {
						// 後面的設定會覆蓋先前的設定。
						convert_from_hash[language_code] = convert_to.join('');
					}
				}

				// console.log(JSON.stringify(token));
				return token;
			});
			if (options.normalize) {
				// 正規化後可以不保留 -{...;}- 最後的 ';'
				conversion_list = conversion_list.filter(function(token) {
					return !!token;
				});
				conversion_list.sort(function(_1, _2) {
					// assert: {Array} _1, _2
					return _1[0] < _2[0] ? -1 : _1[0] > _2[0] ? 1 : 0;
				});
			}
			// console.log(conversion_list);
			parameters = _set_wiki_type(conversion_list, 'convert');
			parameters.conversion = conversion;
			if (unidirectional.length > 0)
				parameters.unidirectional = unidirectional.unique();
			if (typeof _flag === 'string') {
				if (_flag !== flag)
					parameters._flag = _flag;
				parameters.flag = flag;
				if (flag === 'T')
					options.conversion_title = parameters;
			}
			// console.log(convert_from_hash);
			convert_from_hash && Object.values(convert_from_hash)
			//
			.forEach(function(convert_from_string) {
				// console.log(convert_from_string);
				conversion_table[convert_from_string] = parameters;
			});
			// console.log(JSON.stringify(wikitext));
			// console.log(conversion_table);

			if (queue.switches && (queue.switches.__NOCC__
			// 使用魔術字 __NOCC__ 或 __NOCONTENTCONVERT__ 可避免轉換。
			|| queue.switches.__NOCONTENTCONVERT__)) {
				parameters.no_convert = true;
			} else if (Object.keys(conversion).length === 0) {
				// assert: parameters.length === 1
				// e.g., "-{ t {{T}} }-"
				// NOT "-{ zh-tw: tw {{T}} }-"
				parameters.converted = parameters[0];
			} else if (options.language) {
				// TODO: 先檢測當前使用的語言，然後轉成在當前環境下轉換過、會顯示出的結果。
				parameters.converted = parameters.toString(options.language);
			}

			queue.push(parameters);
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		// TODO: 緊接在連結後面的 /[a-zA-Z\x80-\x10ffff]+/ 會顯示為連結的一部分
		// https://phabricator.wikimedia.org/T263266
		function parse_wikilink(all_link, page_and_anchor, page_name, anchor,
				pipe_separator, display_text) {
			// 自 end_mark 向前回溯。
			var previous;
			if (display_text && display_text.includes('[[')) {
				var index = all_link.lastIndexOf('[[');
				previous = all_link.slice(0, index);
				all_link = all_link.slice(index);
				if (index = all_link.match(PATTERN_wikilink)) {
					page_and_anchor = index[1];
					// `{{NAMESPACE}}:{{PAGENAME}}`
					page_name = index[2];
					anchor = index[3];
					pipe_separator = index[4];
					display_text = index[5];
				} else {
					// revert
					all_link = previous + all_link;
					previous = '';
				}
			} else {
				previous = '';
			}

			if (/\n=+[^=]=+/.test(display_text)) {
				// incase '[[A|B]\n==T==\n<code>[[]]</code>'
				// TODO: fix '[[A|B]<code>]]'
				return all_link;
			}

			library_namespace.debug('[' + previous + '] + [' + all_link + ']',
					4, 'parse_wikitext.link');

			var file_matched, category_matched;
			if (!page_name) {
				// assert: [[#anchor]]
				page_name = '';
				// anchor, fragment, section_title
				anchor = page_and_anchor;
			} else {
				if (!anchor) {
					anchor = '';
				}
				if (normalize) {
					page_name = page_name.trim();
				}
				// test [[file:name|...|...]]
				file_matched = page_name.match(PATTERN_file_prefix);
				if (!file_matched) {
					category_matched = page_name
					// test [[Category:name|order]]
					.match(PATTERN_category_prefix);
					// console.log([ page_name, category_matched ]);
				} else if (file_matched[1]) {
					// console.trace(file_matched);
					file_matched = null;
				}
				if (page_name.includes(include_mark)) {
					// console.trace(page_name);
					// 預防有特殊 elements 置入link其中。
					page_name = parse_wikitext(page_name, options, queue);
					if (false) {
						console.log([ all_link, page_and_anchor, page_name,
								anchor, display_text ]);
					}
					if (page_name.some(function(token) {
						return token.is_link;
					})) {
						// e.g., [[:[[Portal:中國大陸新聞動態|中国大陆新闻]] 3月16日新闻]]
						// [[[[t|l]], t|l]]
						// console.trace(page_name);
						page_name.oddly = 'link_inside_link';
					} else {
						page_name.oddly = true;
					}
				} else {
					// TODO: normalize 對 [[文章名稱 : 次名稱]] 可能出現問題。
					page_name = page_name.split(normalize ? /\s*:\s*/ : ':');
				}
				page_name = _set_wiki_type(page_name, 'namespaced_title');
			}
			if (normalize) {
				// assert: anchor && anchor.startsWith('#')
				anchor = anchor.trimEnd();
			}
			if (anchor) {
				// 經過改變，需再進一步處理。
				// e.g., '[[t#-{c}-]]'
				anchor = parse_wikitext(anchor, options, queue);
			}

			// [ page_name, section_title / #anchor 網頁錨點, display_text ]
			var parameters = [ page_name, anchor ];
			if (false) {
				// page_title, full_page_name, {{FULLPAGENAME}}:
				// `{{NAMESPACE}}:{{PAGENAME}}`
				parameters.page_name = wiki_API.normalize_title(page_name);
			}

			// assert: 'a'.match(/(b)?/)[1]===undefined
			if (typeof display_text === 'string') {
				if (file_matched) {
					// caption 可以放在中間，但即使是空白也會被認作是 caption:
					// ;;; [[File:a.svg|caption|thumb]]
					// === [[File:a.svg|thumb|caption]]
					// !== [[File:a.svg|NG caption|thumb|]]
					// === [[File:a.svg|thumb|NG caption|]]

					// 先處理掉裏面的功能性代碼。 e.g.,
					// [[File:a.svg|alt=alt_of_{{tl|t}}|NG_caption|gykvg=56789{{tl|t}}|{{#ifexist:abc|alt|link}}=abc|{{#ifexist:abc|left|456}}|{{#expr:100+300}}px|thumb]]
					// e.g., [[File:a.svg|''a''|caption]]
					display_text = parse_wikitext(display_text, {
						no_resolve : true
					}, queue);

					parameters.index_of = Object.create(null);

					// [ file namespace, anchor / section_title,
					// parameters 1, parameters 2, parameters..., caption ]
					var token, file_option,
					// parameters 有分大小寫與繁簡體，並且各種類會以首先符合的為主。
					PATTERN = /([^\|]*?)(\||$)/ig;
					// assert: 這會將剩下來的全部分完。
					while (token = PATTERN.exec(display_text)) {
						var matched = token[1].match(
						// [ all, head space, option name or value, undefined,
						// undefined, tail space ]
						// or
						// [ all, head space, option name, "="+space, value,
						// tail space ]
						/^([\s\n]*)([^={}\[\]<>\s\n][^={}\[\]<>]*?)(?:(=[\s\n]*)([\s\S]*?))?([\s\n]*)$/
						// TODO: 經測試，link等號前方不可有空格，alt等號前方可有空格。必須用小寫的"alt"。
						// 現在的處理方法只允許等號前面不可有空格。
						// 檔案選項名稱可以在地化，不一定都是 [a-z]。
						);
						if (!matched) {
							// e.g., " a<br/>b "
							matched = token[1]
									.match(/^([\s\n]*)([\s\S]*?)([\s\n]*)$/);
							if (matched[1] || matched[3]) {
								// image_description
								parameters.caption
								// 相當於 .trim()
								= matched[2] = parse_wikitext(matched[2],
										options, queue);
								if (!matched[3])
									matched.pop();
								matched.shift();
								if (!matched[0])
									matched.shift();
								_set_wiki_type(matched, 'plain');
							} else {
								parameters.caption
								// assert: 前後都沒有空白。
								= matched = parse_wikitext(token[1], options,
										queue);
							}
							parameters.push(matched);
							if (!token[2]) {
								break;
							}
							continue;
						}

						// 除了 alt, caption 外，這些 option tokens 不應包含功能性代碼。

						matched[2]
						//
						= parse_wikitext(matched[2], options, queue);

						// has equal sign "="
						var has_equal = typeof matched[4] === 'string';
						if (has_equal) {
							// e.g., |alt=text|
							matched[4] = parse_wikitext(matched[4], options,
									queue);
							// [ head space, option name, "="+space, value,
							// tail space ]
							file_option = matched.slice(1);
						} else {
							// e.g., |right|
							// [ head space, option name or value, tail space ]
							file_option = [ matched[1],
							//
							matched[2], matched[5] ];
						}
						file_option = _set_wiki_type(file_option, 'plain');

						// 'right' of |right|, 'alt' of |alt=foo|
						var option_name = file_option[1],
						//
						option_value = has_equal && file_option[3];

						// reduce
						while (!file_option[0]) {
							file_option.shift();
						}
						while (!file_option.at(-1)) {
							file_option.pop();
						}
						if (file_option.length === 1) {
							file_option = file_option[0];
						}

						// console.log('-'.repeat(80)+64545646);
						// console.log(has_equal);
						// console.log(file_option);
						parameters.push(file_option);

						// 各參數設定。
						if (!has_equal && (option_name in file_options)) {
							if (!parameters[file_options[option_name]]
							// 'location' 等先到先得。
							|| file_options[option_name] !== 'location'
							// Type, display format
							&& file_options[option_name] !== 'format') {
								parameters[file_options[option_name]]
								//
								= option_name;
							}

						} else if (!has_equal
						//
						&& /^(?:(?:\d+)?x)?\d+ *px$/.test(option_name)) {
							// 以後到的為準。
							parameters.size = option_name;

						} else if (has_equal
								// 這些選項必須有 "="。無 "=" 的話，會被當作 caption。
								&&
								// page: DjVuファイルの場合、 page="ページ番号"で開始ページを指定できます。
								/^(?:link|alt|lang|page|thumbtime|start|end|class)$/
										.test(option_name)) {
							// 以後到的為準。
							if (option_name === 'link') {
								// pass .session
								option_value = wiki_API.normalize_title(
										option_value, options);
							}
							parameters[option_name] = option_value;
							parameters.index_of[option_name] = parameters.length - 1;

						} else if (has_equal
								&& /^(?:thumb|thumbnail|upright)$/
										.test(option_name)) {
							// 以後到的為準。
							// upright=1 →
							// parameters.size='upright'
							// parameters.upright='1'
							parameters[file_options
							//
							[option_name]] = option_name;
							parameters[option_name] = option_value;

						} else if (has_equal) {
							// 即使是空白也會被認作是 caption。
							// 相當於 .trim()
							if (typeof option_name === 'string'
									&& typeof option_value === 'string') {
								parameters.caption = option_name + '='
										+ option_value;
							} else {
								parameters.caption = [ option_name, '=',
										option_value ];
								parameters.caption
								//
								.toString = file_option.toString;
							}

						} else {
							// 相當於 .trim()
							parameters.caption = option_name;
						}

						if (!token[2]) {
							break;
						}
					}

				} else {
					var parsed_display_text = parse_wikitext(display_text,
							options, queue);
					// 需再進一步處理 {{}}, -{}- 之類。
					// [[w:en:Wikipedia:Categorization#Sort keys]]
					parameters[category_matched ? 'sort_key'
					// [[w:en:Wikipedia:Piped link]] the displayed text
					: 'display_text'] = parsed_display_text
					if (false && !category_matched) {
						parameters.plain_display_text = wikitext_to_plain_text(
								display_text, options);
					}
					parameters.push(parsed_display_text);
				}
			}

			if (page_name.oddly === 'link_inside_link') {
				// console.trace(parameters);
				// parameters.is_link = false;

				for (var index = 2; index < parameters.length; index++) {
					// recover missed '|' before display_text
					if (typeof parameters[index] === 'string') {
						parameters[index] = pipe_separator + parameters[index];
					} else if (parameters[index].type === 'plain') {
						parameters[index].unshift(pipe_separator);
					} else {
						parameters[index] = [ pipe_separator, parameters[index] ];
					}
				}

				parameters = parameters.flat();
				parameters.unshift('[[');
				parameters.push(']]');
				join_string_of_array(parameters);
				_set_wiki_type(parameters, 'plain');
			} else {
				if (file_matched || category_matched) {
					// shown by link, is a linking to a file
					// e.g., token[0][0].trim() === "File"; token[0]: namespace
					parameters.is_link = page_name[0].trim() === '';

					if (file_matched) {
						parameters.name
						// set file name without "File:"
						= wiki_API.normalize_title(file_matched[2]);
					} else if (category_matched) {
						parameters.name
						// set category name without "Category:"
						= wiki_API.normalize_title(category_matched[1]);
					}
				} else {
					parameters.is_link = true;
				}

				if (false) {
					pipe_separator = parse_wikitext(pipe_separator, options,
							queue);
				}
				parameters.pipe = pipe_separator;

				anchor = anchor.toString()
				// remove prefix: '#'
				.slice(1).trimEnd();
				var original_hash = anchor;
				// https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters
				if (/^([\w\-~!*'();:@&=+$,/?#\[\]]|\.[\dA-F]{2})+$/
				// [[w:en:Help:Link#Section linking (anchors)]], section_title
				// e.g.,
				// [[臺灣話#.E5.8F.97.E6.97.A5.E6.9C.AC.E8.AA.9E.E5.BD.B1.E9.9F.BF.E8.80.85|(其他參考資料)]]
				.test(anchor)) {
					anchor = anchor.replace(/\.([\dA-F]{2})/g, '%$1');
				}
				// console.log([ original_hash, anchor ]);
				try {
					// if
					// (/^([\w\-.~!*'();:@&=+$,/?#\[\]]|%[\dA-F]{2})+$/.test(anchor))
					anchor = decodeURIComponent(anchor);
					if (/[\x00-\x1F\x7F]/.test(anchor)) {
						// e.g. [[w:ja:エヴァンゲリオン (架空の兵器)#Mark.09]]
						anchor = original_hash;
					}
				} catch (e) {
					// e.g., error after convert /\.([\dA-F]{2})/g
					anchor = original_hash;
				}
				// console.log(anchor);
				// wikilink_token.anchor without "#" 網頁錨點 section_title
				parameters.anchor = wiki_API.parse.anchor
						.normalize_anchor(anchor);
				// TODO: [[Special:]]
				// TODO: [[Media:]]: 連結到圖片但不顯示圖片
				_set_wiki_type(parameters, file_matched ? 'file'
						: category_matched ? 'category' : 'link');
				if (category_matched)
					parameters.set_sort_key = set_sort_key_of_category;
			}
			// console.trace(parameters);

			// [ page_name, anchor / section_title,
			// display_text without pipe_separator '|' ]
			// anchor && anchor.startsWith('#')
			queue.push(parameters);
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		function parse_external_link(all, URL, delimiter, parameters) {
			// assert: all === URL + (delimiter || '') + (parameters || '')
			// including "'''". e.g., [http://a.b/''t'']
			var matched = URL.match(/^(.+?)(''.*)$/);
			if (matched) {
				URL = matched[1];
				if (delimiter) {
					parameters = matched[2] + delimiter + parameters;
				} else {
					// assert: parameters === undefined
					parameters = matched[2];
				}
				delimiter = '';
			}
			URL = [ URL.includes(include_mark)
			// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
			? parse_wikitext(URL, options, queue)
			// 以 token[0].toString() 取得 URL。
			: _set_wiki_type(URL, 'url') ];
			if (delimiter || parameters) {
				// assert: /^\s*$/.test(delimiter)
				// && typeof delimiter === 'string'
				// && typeof parameters === 'string'
				// assert: parameters 已去除最前面的 delimiter (space)。
				if (normalize) {
					parameters = parameters.trimEnd();
					if (delimiter)
						delimiter = ' ';
				}
				// 紀錄 delimiter as {String}token[1]，
				// 否則 .toString() 時 .join() 後會與原先不同。
				URL.push(delimiter,
				// 經過改變，需再進一步處理。
				parse_wikitext(parameters, options, queue));
			}
			_set_wiki_type(URL, 'external_link');
			queue.push(URL);
			return include_mark + (queue.length - 1) + end_mark;
		}

		function parse_template_parameter(all, parameters) {
			// 自 end_mark 向前回溯。
			var index = parameters.lastIndexOf('{{{'), previous;
			if (index > 0) {
				previous = '{{{' + parameters.slice(0, index);
				parameters = parameters.slice(index + '}}}'.length);
			} else {
				previous = '';
			}
			library_namespace.debug(previous + ' + ' + parameters, 4,
					'parse_wikitext.parameter');

			parameters = parameters.split('|');
			parameters = parameters.map(function(token, index) {
				return index === 0
				// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
				&& !token.includes(include_mark)
				//
				? _set_wiki_type(
				//
				token.split(normalize ? /\s*:\s*/ : ':'), 'page_title')
				// 經過改變，需再進一步處理。
				: parse_wikitext(token, options, queue);
			});
			_set_wiki_type(parameters, 'parameter');
			queue.push(parameters);
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		// console.trace(session.configurations);
		var magic_words_hash = session
				&& session.configurations.magic_words_hash
				|| default_magic_words_hash;

		var extensiontag_hash = session
				&& session.configurations.extensiontag_hash
				|| wiki_extensiontags;
		var PATTERN_extensiontags = session
				&& session.configurations.PATTERN_extensiontags
				|| PATTERN_wiki_extensiontags;
		// PATTERN_extensiontags 正在使用中，避免污染。
		// For old version:
		// new RegExp(PATTERN_extensiontags.source,
		// PATTERN_extensiontags.flags || 'ig')
		var PATTERN_extensiontags_duplicated = new RegExp(PATTERN_extensiontags);
		var PATTERN_non_extensiontags = session
				&& session.configurations.PATTERN_non_extensiontags
				|| PATTERN_non_wiki_extensiontags;

		// or use ((PATTERN_transclusion))
		// allow {{|=...}}, e.g., [[w:zh:Template:Policy]]
		// PATTERN_template
		var PATTERN_for_transclusion = /{{([^{}][\s\S]*?)}}/g;
		function parse_transclusion(all, parameters) {
			// 自 end_mark 向前回溯。
			var index = parameters.lastIndexOf('{{'),
			// 在先的，在前的，前面的； preceding
			// (previous 反義詞 following, preceding 反義詞 exceeds)
			previous,
			// 因為可能有 "length=1.1" 之類的設定，因此不能採用 Array。
			// token.parameters[{String}key] = {String}value
			_parameters = Object.create(null),
			// token.index_of[{String}key] = {Integer}index
			parameter_index_of = Object.create(null);
			if (index > 0) {
				previous = '{{' + parameters.slice(0, index);
				parameters = parameters.slice(index + '}}'.length);
			} else {
				previous = '';
			}
			library_namespace.debug(
					'[' + previous + '] + [' + parameters + ']', 4,
					'parse_wikitext.transclusion');

			// TODO: 像是 <b>|p=</b> 會被分割成不同 parameters，
			// 但 <nowiki>|p=</nowiki>, <math>|p=</math> 不會被分割！
			parameters = parameters.split('|');

			// matched: [ all, functionname token, functionname, argument 1 ]
			var matched = parameters[0]
					.match(/^([\s\n]*#([a-z]+):)([\s\S]*)$/i);

			// if not [[mw:Help:Extension:ParserFunctions]]
			if (!matched) {
				parameters[0].each_between(include_mark, end_mark, function(
						index) {
					if (index && queue[index = +index]
					//
					&& !(queue[index].type in {
						// incase:
						// {{Wikipedia:削除依頼/ログ/{{今日}}}}
						transclusion : true,
						// incase:
						// {{Wikipedia:削除依頼/ログ/{{#time:Y年Fj日
						// |-7 days +9 hours}}}}
						magic_word_function : true,
						// {{tl{{{1|}}}|p}}
						parameter : true,

						// allow {{tl<!-- t= -->}}
						comment : true
					})) {
						// console.log(queue[index]);
						matched = true;
					}
				});

				if (matched
				// {{t<!-- -->{|p}}
				|| /[{}]/.test(parameters[0])) {
					// console.log(parameters);

					// e.g., `{{ {{tl|t}} | p }}` is incalid:
					// → `{{ {{t}} | p }}`
					return all;
				}

				// console.log(JSON.stringify(parameters[0]));

				// e.g., token.name ===
				// 'Wikipedia:削除依頼/ログ/{{#time:Y年Fj日|-7 days +9 hours}}'

			} else {
				// console.log(matched);

				// 有特殊 elements 置入其中。
				// e.g., {{ #expr: {{CURRENTHOUR}}+8}}}}

				// [[mw:Help:Extension:ParserFunctions]]
				// [[mw:Extension:StringFunctions]]
				// [[mw:Help:Magic words#Parser_functions]]
				// [[w:en:Help:Conditional expressions]]

				// will set latter
				parameters[0] = '';
				parameters.splice(1, 0, matched[3]);
			}

			index = 1;
			parameters = parameters.map(function(token, _index) {
				// trimEnd() of value, will push spaces in token[3].
				var tail_spaces = token.match(/[\s\n]*$/)[0];
				if (_index > 0 && tail_spaces) {
					token = token.slice(0, -tail_spaces.length);
				}
				// 預防經過改變，需再進一步處理。
				token = parse_wikitext(token, Object.assign({
					inside_transclusion : true
				}, options), queue);

				if (_index === 0) {
					// console.log(token);

					if (false && typeof token === 'string') {
						return _set_wiki_type(token.split(normalize ? /\s*:\s*/
								: ':'), 'page_title');
					}
					// 有特殊 elements 置入其中。
					// e.g., {{ {{t|n}} | a }}
					return token;
				}

				// 規格書 parse parameters to:
				// numeral parameter: ['', '', value]
				// [name, '=', value]: [1, '=', value], ['', '=', value],
				// [[' name'], ' = ', [value], ' '].key = name

				// {Number}parameter_index =
				// template_token.index_of[parameter_name];
				//
				// parameter_token = template_token[parameter_index];
				// {String}parameter_name = parameter_token.key;
				// if (typeof parameter_name !== 'string') throw new
				// Error('Invalid parameter_token');
				//
				// trimmed parameter_value = parameter_token[2].toString();

				// https://test.wikipedia.org/wiki/L

				if (token.type !== 'plain') {
					// e.g., "{{#time:n月j日|2020-09-15|{{PAGELANGUAGE}}}}"
					token = _set_wiki_type([ token ], 'plain');
				}

				// assert: Array.isArray(token) && token.type === 'plain'

				var matched = undefined;
				// scan
				token.some(function(t, index) {
					if (typeof t !== 'string') {
						return t.type !== 'comment';
					}
					// allow {{|=...}}, e.g., [[w:zh:Template:Policy]]
					if (t.includes('=')) {
						// index of "=", index_of_assignment
						matched = index;
						return true;
					}
				});

				if (matched === undefined) {
					if (token.length === 1) {
						// assert: {String}token[0]
						// console.trace(token);
						token.unshift('', '');
					} else {
						// assert: token.length > 1
						token = _set_wiki_type([ '', '', token ], 'plain');
					}
					// assert: token === [ '', '', value ]
					if (tail_spaces) {
						token.push(tail_spaces);
					}

					var value = token[2];
					if (Array.isArray(value) && value.some(function(t) {
						// e.g., {{t|p<nowiki></nowiki>=v}}
						return typeof t === 'string' && t.includes('=');
					})) {
						// has_invalid_key_element
						token.invalid = true;
						// token.key = undefined;
						if (library_namespace.is_debug(3)) {
							library_namespace.error(
							//
							'parse_wikitext.transclusion: Invalid parameter ['
							//
							+ token + ']');
						}
					} else {
						token.key = index;
						parameter_index_of[index] = _index;
						if (typeof value === 'string')
							value = value.trim();
						_parameters[index++] = value;
					}
					return token;
				}

				// extract parameter name
				// https://www.mediawiki.org/wiki/Help:Templates#Named_parameters
				// assert: parameter name should these characters
				// https://test.wikipedia.org/wiki/Test_n
				// OK in parameter name: ":\\\/#\"'\n"
				// NG in parameter name: "=" /\s$/

				// 要是有合規的 `parameter_name`，
				// 則應該是 [ {String} parameter_name + " = ", ... ]。
				// prevent {{| ...{{...|...=...}}... = ... }}

				matched = token.splice(0, matched + 1);
				token = _set_wiki_type([ matched,
				//
				matched.pop(), token ], 'plain');

				// matched: [ key, value ]
				// matched = token[1].match(/^([^=]*)=([\s\S]*)$/);

				// trimEnd() of key, trimStart() of value
				matched = token[1].match(/\s*=\s*/);

				// assert: matched >= 0
				if (matched.index > 0) {
					// 將 "=" 前的非空白字元補到 key 去。
					token[0].push(token[1].slice(0, matched.index));
				}
				// key token must accept '\n'. e.g., "key_ \n _key = value"
				token.key = token[0].filter(function(t) {
					// 去除 comments
					// e.g., '{{L|p<!-- -->=v}}'
					// assert: token[0].type === 'plain'
					return typeof t === 'string';
				});
				matched.k = token.key.join('');
				if (token.key.length === token[0].length) {
					// token[0]: all {String}
					token[0] = matched.k;
				} else {
					_set_wiki_type(token[0], 'plain');
				}
				token.key = matched.k.trim();
				matched.i = matched.index + matched[0].length;
				if (matched.i < token[1].length) {
					// 將 "=" 後的非空白字元補到 value 去。
					token[2].unshift(token[1].slice(matched.i));
				}
				token[1] = matched[0];

				parameter_index_of[token.key] = _index;

				var value = token[2];
				// assert: Array.isArray(value) && value.type === 'plain'
				if (value.length < 2) {
					token[2] = value = value.length === 0 ? '' : value[0];
					if (!value && (matched = tail_spaces.match(/^[^\n]+/))) {
						// tail spaces: 刪掉 \n 前的所有 spaces。
						// [p, ' =', '', ' \n '] → [p, ' = ', '', '\n ']
						token[1] += matched[0];
						tail_spaces = tail_spaces.slice(matched[0].length);
					}
					// 處理某些特殊屬性的值。
					if (false && /url$/i.test(key)) {
						try {
							// 有些參數值會迴避"="，此時使用decodeURIComponent可能會更好。
							value = decodeURI(value);
						} catch (e) {
							// TODO: handle exception
						}
					}
				}
				// assert: token.length === 2
				if (tail_spaces) {
					token.push(tail_spaces);
				}

				// 若參數名重複: @see [[Category:調用重複模板參數的頁面]]
				// 如果一個模板中的一個參數使用了多於一個值，則只有最後一個值會在顯示對應模板時顯示。
				// parser 調用超過一個Template中參數的值，只會使用最後指定的值。

				// parameter_index_of[token.key] = _index;
				_parameters[token.key] = value;
				return token;
			});

			// add properties

			// console.trace(matched);
			if (matched) {
				parameters[0] = matched[1];
				parameters.name = matched[2];
				// 若指定 .valueOf = function()，
				// 會造成 '' + token 執行 .valueOf()。
				parameters.evaluate = evaluate_parser_function;

			} else {
				// console.trace(parameters[0]);
				if (typeof parameters[0] === 'string') {
					parameters.name = parameters[0];
				} else {
					// assert: Array.isArray(parameters[0]) &&
					// (parameters[0].type === 'page_title'
					// || parameters[0].type = 'plain')
					parameters.name = parameters[0].filter(function(t) {
						return t.type !== 'comment';
					}).join('');
				}
				// console.trace(parameters.name);
				// 後面不允許空白。 must / *DEFAULTSORT:/
				parameters.name = parameters.name.trimStart();
				var namespace = parameters.name.match(/^([^:]+):([\s\S]*)$/);
				// console.trace([ parameters.name, namespace ]);
				if (!namespace)
					namespace = [ , parameters.name ];
				// incase "{{ DEFAULTSORT : }}"
				namespace[1] = namespace[1].trim()
				// 'Defaultsort' → 'DEFAULTSORT'
				.toUpperCase();

				if ((namespace[1] in magic_words_hash)
				// 例如 {{Fullurl}} 應被視作 template。
				// test if token is [[Help:Magic words]]
				&& (magic_words_hash[namespace[1]] === false
				// 這些需要指定數值。 has ":"
				|| namespace[0])) {
					// TODO: {{ {{UCFIRST:T}} }}
					// TODO: {{ :{{UCFIRST:T}} }}
					// console.log(parameters);

					parameters.name = namespace[1];
					// 此時以 parameters[0].slice(1) 可獲得首 parameter。
					parameters.is_magic_word = true;

					if (parameters.length === 1
							&& typeof parameters[0] === 'string') {
						var matched = parameters[0].match(/^(\w+:)([\s\S]*)$/);
						if (matched) {
							parameters[0] = matched[1];
							parameters.push(matched[2]);
						}
					}

				} else {
					if (namespace[0]) {
						parameters.name = namespace[2];
						namespace = namespace[1];
					} else {
						namespace = null;
					}
					// 正規化 template name。
					// 'ab/cd' → 'Ab/cd'
					parameters.name = wiki_API.normalize_title(parameters.name);
					// console.log(parameters.name);

					// parameters.name: template without "Template:" prefix.
					// parameters.page_title: page title with "Template:"
					// prefix.

					var PATTERN_template_namespaces = /^(?:Template|模板|テンプレート|Plantilla|틀)/i;
					var not_template_name = namespace
					// 預防 {{Template:name|...}}
					&& !PATTERN_template_namespaces.test(namespace)
					// wiki_API.namespace.hash using lower case
					&& (namespace.toLowerCase() in wiki_API.namespace.hash);

					// {{T}}嵌入[[Template:T]]
					// {{Template:T}}嵌入[[Template:T]]
					// {{:T}}嵌入[[T]]
					// {{Wikipedia:T}}嵌入[[Wikipedia:T]]
					parameters.page_title
					// .page_name
					= wiki_API.normalize_title((not_template_name ? namespace
							: 'Template')
							+ ':' + parameters.name);

					if (not_template_name) {
						parameters.name = parameters.page_title;
					}

					if (true) {
						;
					} else if (typeof parameters[0] === 'string') {
						var index = parameters[0]
								.indexOf(parameters.page_title);
						if (index !== NOT_FOUND) {
							parameters.page_title = _set_wiki_type(
									parameters.page_title
											.split(normalize ? /\s*:\s*/ : ':'),
									'page_title');
							parameters[0] = [
									parameters[0].slice(0, index),
									parameters.page_title,
									parameters[0].slice(0, index
											+ parameters.page_title.length) ];
						} else if (false) {
							parameters[0] = _set_wiki_type(token
									.split(normalize ? /\s*:\s*/ : ':'),
									'page_title');
						}
					} else {
						parameters.page_title = _set_wiki_type(
								parameters.page_title
										.split(normalize ? /\s*:\s*/ : ':'),
								'page_title');
					}
				}
			}
			// 參數有分大小寫與繁簡體。
			parameters.parameters = _parameters;
			parameters.index_of = parameter_index_of;

			_set_wiki_type(parameters, matched ? 'magic_word_function'
					: 'transclusion');
			queue.push(parameters);
			// TODO: parameters.parameters = []
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		// parser 標籤中的空屬性現根據HTML5規格進行解析。
		// <pages from= to= section=1>
		// 將解析為 <pages from="to=" section="1">
		// 而不是像以前那樣的 <pages from="" to="" section="1">。
		// 請改用 <pages from="" to="" section=1> or <pages section=1>。

		// [ all attributes, name, value, unquoted value, text without "=" ]
		var PATTERN_tag_attribute = /\s*(\w+)(?:=|{{\s*=\s*(?:\|[\s\S]*?)?}})("[^"]*"|'[^']*'|([^\s"'{}\|]*))|\s*([^\s"'{}\|]*)/g;

		function extract_tag_attributes(attributes) {
			// assert: typeof attributes === 'string'
			var attribute_hash = Object.create(null);

			/**
			 * TODO: parse for templates <code>

			對於 [[w:en:Template:Infobox aircraft begin]]
			{|{{Infobox aircraft begin
			 |parameters go here
			}}
			|}

			可能把整個模板內容全部當作 attributes。
			
			</code>
			 */
			if (attributes.replace(
			// TODO: allow all magic words
			/{{\s*(?:=|ANCHORENCODE:[^{}\|]*)\s*(?:\|[\s\S]*?)?}}/ig, '')
					.includes('{{')) {
				library_namespace.debug('Skip tag attributes with template: '
						+ attributes);
				return attribute_hash;
			}

			var attributes_list = [], matched;
			while ((matched = PATTERN_tag_attribute.exec(attributes))
					&& matched[0]) {
				// console.trace(matched);
				attributes_list.push(parse_wikitext(matched[0], options));
				var name = matched[1];
				if (!name) {
					// console.assert(!!matched[4]);
					if (matched[4]) {
						name = parse_wikitext(matched[4], options);
						// assert: name.toString() === matched[4]
						attribute_hash[/* name.toString() */matched[4]] = name;
					}
					continue;
				}

				// parse attributes
				// name = parse_wikitext(name, options);
				var value = matched[3]
				// 去掉 "", ''
				|| matched[2].slice(1, -1);
				if (wiki_API.HTML_to_wikitext)
					value = wiki_API.HTML_to_wikitext(value);
				value = parse_wikitext(value, options);
				attribute_hash[name] = value;
			}
			if (false) {
				console
						.assert(PATTERN_tag_attribute.lastIndex === attributes.length);
			}
			// reset PATTERN index
			PATTERN_tag_attribute.lastIndex = 0;

			return attribute_hash;
		}

		// parse attributes of HTML tags
		// Warning: `{|\n|-\n!id="h style=color:red|h\n|}`
		// will get id==="h_style=color:red", NOT id==="h"!
		function parse_tag_attributes(attributes) {
			// assert: typeof attributes === 'string'
			attributes = _set_wiki_type(
			// e.g., '{{tl|<b a{{=}}"A">i</b>}}'
			shallow_resolve_escaped(attributes || '', options, queue),
					'tag_attributes');
			// 注意: attribute_token.attributes 中的 template 都不包含
			// template_token.expand() !
			// 可利用 for_each_token() 設定 template_token.expand()。
			attributes.attributes = extract_tag_attributes(attributes
					.toString());
			return attributes;
		}

		// ------------------------------------------------

		function parse_HTML_tag(all, tag, attributes, inner, end_tag) {
			// console.log('queue start:');
			// console.log(queue);
			// console.trace(arguments);

			// 自 end_mark (tag 結尾) 向前回溯，檢查是否有同名的 tag。
			var matched = tag !== 'nowiki' && inner.match(new RegExp(
			// 但這種回溯搜尋不包含 <nowiki>
			// @see console.log(parser[418]);
			// https://zh.moegirl.org.cn/index.php?title=Talk:%E6%8F%90%E9%97%AE%E6%B1%82%E5%8A%A9%E5%8C%BA&oldid=3704938
			// <nowiki>{{subst:unwiki|<nowiki>{{黑幕|黑幕内容}}</nowiki&gt;}}</nowiki>
			'([\\s\\S]*)<(' + tag
			//
			+ ')(\\s(?:[^<>]*[^<>/])?)?>([\\s\\S]*?)$', 'i')), previous;
			if (matched) {
				previous = all.slice(0, matched[1].length - matched[0].length
				// length of </end_tag>
				- end_tag.length - 3);
				tag = matched[2];
				attributes = matched[3];
				inner = matched[4];
			} else {
				previous = '';
			}
			library_namespace.debug(previous + ' + <' + tag + '>', 4,
					'parse_wikitext.tag');

			var is_wiki_extensiontags = tag.toLowerCase() in extensiontag_hash;
			// 在章節標題、表格 td/th 或 template parameter 結束時，
			// e.g., "| t || <del>... || </del> || <s>... || </s> ||",
			// "{{t|p=v<s>...|p2=v}}</s>"
			// 部分 HTML font style tag 似乎會被截斷，自動重設屬性，不會延續下去。
			// 因為已經先處理 {{Template}}，因此不需要用 /\n(?:[=|!]|\|})|[|!}]{2}/。
			// 此時同階的 table 尚未處理。
			if (!is_wiki_extensiontags && /\n[|!]|[|!]{2}/.test(inner.replace(
			// PATTERN_extensiontags 正在使用中，避免污染。
			PATTERN_extensiontags_duplicated, ''))) {
				// TODO: 應確認此時真在表格中。
				if (library_namespace.is_debug(3)) {
					library_namespace.warn('parse_wikitext.tag: <' + tag + '>'
					//
					+ ' 在表格 td/th 或 template parameter 中，'
					//
					+ '此時視為一般 text，當作未匹配 match HTML tag 成功。\n' + previous);
					library_namespace.info(attributes);
					library_namespace.log(inner);
					console.trace(new RegExp('^([\\s\\S]*)<(' + tag
							+ ')(\\s(?:[^<>]*[^<>/])?)?>([\\s\\S]*?)$', 'i'));
				}
				return all;
			}

			if (library_namespace.is_debug(3)) {
				library_namespace.info('parse_wikitext.tag: <' + tag
						+ '> passed:\n' + previous);
				library_namespace.debug(attributes, 0);
				library_namespace.log(inner);
			}

			// 2016/9/28 9:7:7
			// 因為 wiki_extensiontags 內部可能已解析成其他的單元，
			// 因此還是必須 parse_wikitext()。
			// e.g., '<nowiki>-{}-</nowiki>'
			// 經過改變，需再進一步處理。
			library_namespace.debug('<' + tag + '> 內部需再進一步處理。', 4,
					'parse_wikitext.tag');
			attributes = parse_tag_attributes(attributes);
			inner = parse_wikitext(inner, options, queue);

			// 處理特殊 tags。
			if (tag === 'nowiki' && Array.isArray(inner)) {
				library_namespace.debug('-'.repeat(70)
						+ '\n<nowiki> 中僅留 -{}- 有效用。', 3,
						'parse_wikitext.transclusion');
				// console.log(inner);
				if (inner.type && inner.type !== 'plain') {
					// 當 inner 本身就是特殊 token 時，先把它包裝起來。
					inner = _set_wiki_type([ inner ], 'plain');
				}
				// TODO: <nowiki><b>-{...}-</b></nowiki>
				inner.forEach(function(token, index) {
					// 處理每個子 token。 經測試，<nowiki>中 -{}- 也無效。
					if (token.type /* && token.type !== 'convert' */)
						inner[index] = inner[index].toString();
				});
				if (inner.length <= 1) {
					inner = inner[0];
				}
				// console.log(inner);
			}
			// 若為 <pre> 之內，則不再變換。
			// 但 MediaWiki 的 parser 有問題，若在 <pre> 內有 <pre>，
			// 則會顯示出內部<pre>，並取內部</pre>為外部<pre>之結尾。
			// 因此應避免 <pre> 內有 <pre>。
			if (false && !is_wiki_extensiontags) {
				inner = inner.toString();
			}

			// [ ... ]: 在 inner 為 Template 之類時，
			// 不應直接在上面設定 type=tag_inner，以免破壞應有之格式！
			// 但仍需要設定 type=tag_inner 以應 for_each_token() 之需，因此多層[]包覆。
			inner = _set_wiki_type([ inner || '' ], 'tag_inner');
			all = [ attributes, inner ];

			if (normalize) {
				tag = tag.toLowerCase();
			} else if (tag !== end_tag) {
				all.end_tag = end_tag;
			}
			all.tag = tag;
			// {String}Element.tagName
			// all.tagName = tag.toLowerCase();

			all = _set_wiki_type(all, 'tag');
			// 在遍歷 tag inner 的子 node 時，真正需要的 .parent 是 all tag 而非 inner。
			// e.g., `special page configuration.js`
			// if (parent.type === 'tag_inner' && parent.parent.type === 'tag'
			// && (parent.parent.tag === 's' || parent.parent.tag === 'del'))
			// { ... }
			inner.parent = all;
			// attributes.parent = all;
			if (attributes && attributes.attributes) {
				all.attributes = attributes.attributes;
				// delete attributes.attributes;
			}
			queue.push(all);
			// console.log('queue end:');
			// console.log(queue);
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		function parse_single_tag(all, slash, tag, attributes) {
			if (attributes) {
				if (normalize) {
					attributes = attributes.replace(/[\s\/]*$/, ' /');
				}
				attributes = parse_tag_attributes(attributes);
				if (false && attributes.type === 'plain') {
					// assert: 經過 parse_tag_attributes(), 應該不會到這邊。
					all = attributes;
				} else
					all = [ attributes ];
			} else {
				// use '' as attributes in case
				// the .join() in .toString() doesn't work.
				all = [ '' ];
			}

			if (normalize) {
				tag = tag.toLowerCase();
			}
			if (slash) {
				// prefix slash: This is invalid.
				all.slash = slash;
			}
			all.tag = tag;
			// {String}Element.tagName
			// all.tagName = tag.toLowerCase();

			_set_wiki_type(all, 'tag_single');
			if (attributes && attributes.attributes) {
				all.attributes = attributes.attributes;
				delete attributes.attributes;
			}
			queue.push(all);
			return include_mark + (queue.length - 1) + end_mark;
		}

		// ------------------------------------------------

		function parse_table(all, parameters) {
			// 經測試，table 不會向前回溯。

			function append_table_cell(table_cell, delimiter, table_row_token) {
				if (!table_cell && !delimiter) {
					// e.g., '' after 'style=""' in `{|\n|-style=""\n|t\n|}`
					return;
				}

				if (false && typeof delimiter !== 'string') {
					// e.g., 'ss' and 'ee' in
					// `{|class="wikitable"\n|-\nss||f\n|-\nee\n|}`
					table_row_token.push(shallow_resolve_escaped(table_cell));
					return;
				}

				var PATTERN_table_cell_content = /^([^|]*)\|([\s\S]*)$/;
				// cell attributes /
				// cell style / format modifier (not displayed)
				var table_cell_attributes = table_cell
						.match(PATTERN_table_cell_content);
				var data_type, value;
				if (table_cell_attributes) {
					// parse cell attributes
					table_cell = table_cell_attributes[2];
					table_cell_attributes = _set_wiki_type(
							parse_tag_attributes(table_cell_attributes[1]),
							'table_attributes');
					// '|': from PATTERN_table_cell_content
					table_cell_attributes.suffix = '|';
					data_type = table_cell_attributes.attributes
					// @see
					// [[w:en:Help:Sorting#Specifying_a_sort_key_for_a_cell]]
					&& table_cell_attributes.attributes['data-sort-type'];
				}

				var table_cell_token = _set_wiki_type(
						shallow_resolve_escaped(table_cell), 'table_cell');
				if (table_row_token.type === 'caption') {
					table_cell_token.caption = table_cell_token.toString()
							.trim();
					// 表格標題以首次出現的為主。
					if (!table_row_token.caption) {
						table_row_token.caption = table_cell_token.caption;
					}
				}
				if (table_cell_attributes) {
					table_cell_token.unshift(table_cell_attributes);
				}
				if (delimiter)
					table_cell_token.delimiter = delimiter;

				data_type = data_type && data_type.trim();
				if (data_type === 'number') {
					if (library_namespace.is_digits(table_cell)) {
						value = +table_cell;
					}
				} else if (data_type === 'isoDate') {
					value = Date.parse(table_cell);
				}
				if (value || value === 0)
					table_cell_token.value = value;

				if (table_cell_token.is_header = table_row_token.cell_is_header_now) {
					// TODO: data-sort-type in table header
					// @see
					// [[w:en:Help:Sorting#Configuring the sorting]]

					table_row_token.header_count++;
				} else {
					table_row_token.data_count++;
				}
				if (false) {
					// is cell <th> or <td> ?
					table_cell_token.table_cell_type = table_cell_token.is_header ? 'th'
							: 'td';
				}

				table_row_token.push(table_cell_token);
			}

			// 分隔 <td>, <th>
			// 必須有實體才能如預期作 .exec()。
			// matched: [ all, inner, delimiter ]
			var PATTERN_table_cell;
			// invalid:
			// | cell !! cell
			// valid:
			// ! header !! header
			// ! header || header
			// | cell || cell
			var PATTERN_table_cell_th = /([\s\S]*?)(\n[|!]|[|!]{2}|$)/g;
			// default pattern for normal row.
			var PATTERN_table_cell_td = /([\s\S]*?)(\n[|!]|\|\||$)/g;
			function append_table_row(table_row, delimiter, table_token) {
				if (!table_row && !delimiter) {
					// e.g., '' after 'style=""' in `{|\nstyle=""\n|-\n|}`
					return;
				}

				if (typeof JSON === 'object') {
					library_namespace.debug('parse table_row / row style: '
					//
					+ JSON.stringify(table_row), 5, 'parse_wikitext.table');
				}

				// 注意: caption 不被當作 table_row 看待。
				var type = delimiter === '\n|+' ?
				// 'table_caption'
				'caption' : 'table_row';
				var table_row_token = _set_wiki_type([], type);
				table_row_token.delimiter = delimiter;
				// Warning:
				// only using table_row_token.header_count may lost some td
				// <th> counter
				table_row_token.header_count = 0;
				// <td> counter
				table_row_token.data_count = 0;

				PATTERN_table_cell = PATTERN_table_cell_td;
				table_row_token.cell_is_header_now = false;

				var last_delimiter;
				// caption allow `{|\n|+style|caption 1||caption 2\n|}`
				var matched = type !== 'caption' && table_row.match(/^.+/);
				if (matched) {
					// "\n|-" 後面緊接著，換行前的 string 為
					// table row style / format modifier (not displayed)
					table_row_token.push(_set_wiki_type(
							parse_tag_attributes(matched[0]),
							'table_attributes'));
					PATTERN_table_cell.lastIndex = matched[0].length;
				} else {
					// reset PATTERN index
					PATTERN_table_cell.lastIndex = 0;
				}

				while (matched = PATTERN_table_cell.exec(table_row)) {
					// console.log(matched);
					append_table_cell(matched[1], last_delimiter,
							table_row_token);
					if (!matched[2]) {
						// assert: /$/, no separator, ended.
						if (false) {
							console
									.assert(PATTERN_table_cell.lastIndex === table_row.length);
						}
						// reset PATTERN index
						// PATTERN_table_cell.lastIndex = 0;
						break;
					}
					// matched[2] 屬於下一 cell。
					last_delimiter = matched[2];
					if (/^\n/.test(last_delimiter)
					//
					&& table_row_token.cell_is_header_now !==
					// !!matched: convert to header
					(matched = last_delimiter === '\n!')) {
						// switch pattern
						var lastIndex = PATTERN_table_cell.lastIndex;
						table_row_token.cell_is_header_now = matched;
						PATTERN_table_cell = matched ? PATTERN_table_cell_th
								: PATTERN_table_cell_td;
						PATTERN_table_cell.lastIndex = lastIndex;
					}
				}

				// 處理表格標題。
				if (table_row_token.caption
				// 表格標題以首次出現的為主。
				&& !table_token.caption) {
					table_token.caption = table_row_token.caption;
				}
				delete table_row_token.cell_is_header_now;
				table_token.push(table_row_token);
			}

			var table_token = _set_wiki_type([], 'table');
			// 添加新行由一個豎線和連字符 "|-" 組成。
			var PATTERN_table_row = /([\s\S]*?)(\n\|[\-+]|$)/g;
			// default: table_row. try `{|\n||1||2\n|-\n|3\n|}`
			var last_delimiter;
			var matched = parameters.match(/^.+/);
			if (matched) {
				// the style of whole <table>
				table_token.push(_set_wiki_type(
						parse_tag_attributes(matched[0]), 'table_attributes'));
				PATTERN_table_row.lastIndex = matched[0].length;
			}
			while (matched = PATTERN_table_row.exec(parameters)) {
				// console.log(matched);
				append_table_row(matched[1], last_delimiter, table_token);
				if (!matched[2]) {
					// assert: /$/, no separator, ended.
					if (false) {
						console
								.assert(PATTERN_table_row.lastIndex === parameters.length);
					}
					// reset PATTERN index
					// PATTERN_table_row.lastIndex = 0;
					break;
				}
				// matched[2] 屬於下一 row。
				last_delimiter = matched[2];
			}

			if (false) {
				console.assert(table_token.every(function(table_row_token) {
					return table_row_token.type === 'table_attributes'
							|| table_row_token.type === 'caption'
							|| table_row_token.type === 'table_row';
				}));
			}

			queue.push(table_token);
			// 因為 "\n" 在 wikitext 中為重要標記，因此 restore 之。
			return '\n' + include_mark + (queue.length - 1) + end_mark;
		}

		function parse_behavior_switch(all, switch_word) {
			var parameters = _set_wiki_type(switch_word, 'switch');
			if (!queue.switches) {
				queue.switches = Object.create(null);
			}
			if (!queue.switches[switch_word]) {
				queue.switches[switch_word] = [ parameters ];
			} else {
				// 照理來說通常不應該要有多個 switches...
				queue.switches[switch_word].push(parameters);
			}
			queue.push(parameters);
			return include_mark + (queue.length - 1) + end_mark;
		}

		function parse_apostrophe_type(all, apostrophes, parameters, postfix) {
			// console.log([ all, apostrophes, parameters, postfix ]);
			var index = parameters.lastIndexOf(apostrophes), previous = '';
			if (index !== NOT_FOUND) {
				previous = apostrophes + parameters.slice(0, index);
				parameters = parameters.slice(index + apostrophes.length);
			}
			// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
			parameters = parse_wikitext(parameters, options, queue);
			// console.log(parameters);
			// 注意: parameters.length 可能大於1
			var type;
			if (apostrophes === "'''''") {
				// e.g., "''''''t''''''"
				parameters = [ _set_wiki_type(parameters, 'bold') ];
				type = 'italic';
			} else {
				type = apostrophes === "''" ? 'italic' : 'bold';
			}
			parameters = _set_wiki_type(parameters, type);
			if (apostrophes === postfix) {
				postfix = '';
			} else {
				parameters.no_end = true;
			}
			queue.push(parameters);
			return previous + include_mark + (queue.length - 1) + end_mark
					+ postfix;
		}

		function parse_section(all, previous, section_level, parameters,
				postfix) {
			function not_only_comments(token) {
				return typeof token === 'string' ? !/^[ \t]+$/.test(token)
				// assert: is_parsed_element(tail)
				: token.type !== 'comment';
			}
			if (postfix && postfix.includes(include_mark)) {
				if (false) {
					console.assert(postfix.includes(include_mark)
							&& postfix.includes(end_mark))
					console.log(JSON.stringify(postfix));
				}
				var tail = parse_wikitext(postfix, options, queue);
				// console.log(tail);
				if (is_parsed_element(tail) && (tail.type === 'plain'
				//
				? tail.some(not_only_comments) : not_only_comments(tail))) {
					// console.log(all);
					return all;
				}
				// tail = "<!-- ... -->", "\s+" or ["<!-- ... -->", "\s+", ...]
				postfix = tail;
			}

			// console.log('==> ' + JSON.stringify(all));
			if (normalize) {
				parameters = parameters.trim();
			}

			parameters = wiki_API.section_link.pre_parse_section_title(
					parameters, options, queue);
			parameters = _set_wiki_type(parameters, 'section_title');

			// Use plain section_title instead of title with wikitext.
			// 因為尚未resolve_escaped()，直接使用未parse_wikitext()者會包含未解碼之code!
			// parameters.title = parameters.toString().trim();

			// console.trace(options);
			// wiki_API.section_link() 會更動 parse_wikitext() 之結果，
			// 因此不直接傳入 parsed，而是 .toString() 另外再傳一次。
			parameters.link = wiki_API.section_link(parameters.toString(),
			// options: pass session. for options.language
			Object.assign(Object.clone(options), {
				// 重新造一個 options 以避免污染。
				target_array : null
			}));
			/** {String}section title in wikitext */
			parameters.title = parameters.link.id;

			if (postfix && !normalize)
				parameters.postfix = postfix;
			var level = section_level.length;
			// assert: level >= 1
			parameters.level = level;

			parameters.child_section_titles = [];
			// 去尾。
			section_title_hierarchy.truncate(level);
			section_title_hierarchy[level] = parameters;
			// console.log(section_title_hierarchy);
			while (level > 0) {
				// 注意：可能 level 2 跳到 4，不一定連續！
				// level 1 的 child_section_titles 可能包含 level 3!
				var parent_section_title = section_title_hierarchy[--level];
				if (parent_section_title) {
					// Create linkages
					if (level > 0) {
						if (false) {
							library_namespace.log(parent_section_title + ' → '
									+ parameters);
						}
						parameters.parent_section_title = parent_section_title;
					} else {
						// assert: is root section list, parent_section_title
						// === parsed.child_section_titles
						// === section_title_hierarchy[0]
					}
					parent_section_title.child_section_titles.push(parameters);
					break;
				}
			}

			queue.push(parameters);
			// 因為 "\n" 在 wikitext 中為重要標記，因此 restore 之。
			return previous + include_mark + (queue.length - 1) + end_mark;
		}

		// @see {{Ordered list}}
		function parse_list_line(line) {
			function push_list_item(item, list_prefix, no_parse) {
				if (!no_parse) {
					// 經過改變，需再進一步處理。
					item = parse_wikitext(item, options, queue);
				}
				// console.trace(item);
				item = _set_wiki_type(item, 'list_item');
				// 將 .list_prefix 結合在 list_item 之上。
				// (list_item_token.list_prefix)。
				item.list_prefix = list_prefix;
				if (latest_list) {
					// Will be used by function remove_token_from_parent()
					item.parent = latest_list;
					// concole.assert(item.parent[item.index] === item);
					item.index = latest_list.length;
					item.list_index = latest_list.length ? latest_list.at(-1).list_index + 1
							: 0;
					if (latest_list.list_type === '#') {
						item.serial = item.list_index
						// (isNaN(item.start_serial) ? 1 : item.start_serial)
						+ 1;
					}
					latest_list.push(item);
				}
				return item;
			}

			var index = 0, position = 0;
			while (index < list_prefixes_now.length
			// 確認本行與上一行有多少相同的列表層級。
			&& list_prefixes_now[index] ===
			//
			(list_conversion[line.charAt(position)] || line.charAt(position))) {
				// position += list_prefixes_now[index++].length;
				index++;
				position++;
			}

			// console.log(list_now);
			list_prefixes_now.truncate(position);
			list_now.truncate(position);

			var list_prefix,
			// is <dt>
			is_dt,
			// latest_list === list_now[list_now.length - 1]
			latest_list = list_now[position - 1],
			// 尋找從本行開始的新列表。
			matched = line.slice(position).match(/^([*#;:]+)(\s*)(.*)$/);
			if (!matched) {
				if (position > 0) {
					// console.log([ position, line ]);
					// '\n': from `wikitext.split('\n')`
					list_prefix = '\n' + line.slice(0, position);
					is_dt = list_prefix.endsWith(';');
					line = line.slice(position);
					matched = line.match(/^\s+/);
					if (matched) {
						// 將空白字元放在 .list_prefix 可以減少很多麻煩。
						list_prefix += matched[0];
						line = line.slice(matched[0].length);
					}

					if (is_dt) {
						// line is not push_list_item() still,
						// when the `line` push_list_item(), its index will be
						// latest_list.length.
						latest_list.dt_index.push(latest_list.length);

						// search "; title : definition"
						if (matched = line.match(/^(.*)(:\s*)(.*)$/)) {
							push_list_item(matched[1], list_prefix);
							list_prefix = matched[2];
							line = matched[3];
						}
					}

					push_list_item(line, list_prefix);
				} else {
					// 非列表。
					// assert: position === -1
					lines_without_style.push(line.slice(position));
				}
				return;
			}

			if (position > 0) {
				// '\n': from `wikitext.split('\n')`
				list_prefix = '\n' + line.slice(0, position);
				if (list_prefix.endsWith(';')) {
					// line is not push_list_item() still,
					// when the `line` push_list_item(), its index will be
					// latest_list.length.
					latest_list.dt_index.push(latest_list.length);
				}
			} else {
				list_prefix = '';
			}

			var list_symbols = matched[1].split('');
			line = matched[3];
			list_symbols.forEach(function handle_list_item(list_type) {
				// 處理直接上多層選單的情況。
				// e.g., ";#a\n:#b"
				var list = _set_wiki_type([], 'list');
				// 注意: 在以 API 取得頁面列表時，也會設定 pages.list_type。
				list.list_type = list_conversion[list_type] || list_type;
				if (list.list_type === DEFINITION_LIST) {
					// list[list.dt_index[NO]] 為 ";"。
					list.dt_index = [];
				}

				if (latest_list) {
					var list_item = push_list_item([ list ],
					//
					list_prefix, true);
					if (false) {
						// is setup @ push_list_item()
						// list_item.parent = latest_list;
						// concole.assert(list_item.parent[list_item.index] ===
						// list_item);
						// list_item.index = latest_list.length - 1;
					}
					// 要算在上一個。
					list_item.list_index--;
					list_item.serial > 1 && list_item.serial--;
					list_item.no_need_to_count = true;
					list_prefix = list_type;
				} else {
					list_prefix += list_type;
					queue.push(list);
					lines_without_style.push(
					//
					include_mark + (queue.length - 1) + end_mark);
				}

				latest_list = list;
				list_now.push(list);
				list_prefixes_now.push(list.list_type);
			});

			// console.trace(latest_list);
			is_dt = list_prefix.endsWith(';');

			// matched[2]: 將空白字元放在 .list_prefix 可以減少很多麻煩。
			list_prefix += matched[2];

			// is <dt>, should use: ';' ===
			// latest_list.list_prefix.at(-1)
			// assert: latest_list.length === latest_list.list_prefix.length - 1
			if (is_dt) {
				// assert: latest_list.length === 0
				// latest_list.dt_index.push(latest_list.length);
				latest_list.dt_index.push(0);

				// search "; title : definition"
				if (matched = line.match(/^(.*)(:\s*)(.*)$/)) {
					push_list_item(matched[1], list_prefix);
					list_prefix = matched[2];
					line = matched[3];
				}
			}

			push_list_item(line, list_prefix);
		}

		function parse_hr_tag(line, index) {
			var matched = line.match(/^(-{4,})(.*)$/);
			if (!matched
			// 例如在模板、link 中，一開始就符合的情況。
			|| index === 0 && !initialized_fix) {
				lines_without_style.push(line);
				return;
			}

			var hr = _set_wiki_type(matched[1], 'hr');

			queue.push(hr);
			lines_without_style.push(include_mark + (queue.length - 1)
					+ end_mark + matched[2]);
		}

		function parse_preformatted(line, index) {
			if (!line.startsWith(' ')
			// 例如在模板、link 中，一開始就符合的情況。
			|| index === 0 && !initialized_fix) {
				if (list_now) {
					// reset
					list_now = null;
				}
				lines_without_style.push(line);
				return;
			}

			// 經過改變，需再進一步處理。
			// 1: ' '.length
			line = parse_wikitext(line.slice(1), options, queue);

			if (list_now) {
				list_now.push(line);
				return;
			}

			list_now = _set_wiki_type([ line ], 'pre');

			queue.push(list_now);
			lines_without_style.push(include_mark + (queue.length - 1)
					+ end_mark);
		}

		// ------------------------------------------------------------------------
		// parse sequence start / start parse

		// parse 範圍基本上由小到大。
		// e.g., transclusion 不能包括 table，因此在 table 前。

		// 得先處理完有開闔的標示法，之後才是單一標示。
		// e.g., "<pre>\n==t==\nw\n</pre>" 不應解析出 section_title。

		// 可順便作正規化/維護清理/修正明顯破壞/修正維基語法/維基化，
		// 例如修復章節標題 (section title, 節タイトル) 前後 level 不一，
		// table "|-" 未起新行等。

		// ----------------------------------------------------
		// 因為<nowiki>可以打斷其他的語法，包括"<!--"，因此必須要首先處理。

		wikitext = wikitext.replace_till_stable(PATTERN_extensiontags,
				parse_HTML_tag);

		// ----------------------------------------------------
		// comments: <!-- ... -->

		// TODO: <nowiki> 之優先度更高！置於 <nowiki> 中，
		// 如 "<nowiki><!-- --></nowiki>" 則雖無功用，但會當作一般文字顯示，而非註解。

		// "<\": for Eclipse JSDoc.
		if (initialized_fix) {
			wikitext = wikitext.replace(/<\!--([\s\S]*?)-->/g,
			// 因為前後標記間所有內容無作用、能置於任何地方（除了 <nowiki> 中，"<no<!-- -->wiki>"
			// 之類），又無需向前回溯；只需在第一次檢測，不會有遺珠之憾。
			function(all, parameters) {
				// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
				// e.g., "<!-- <nowiki>...</nowiki> ... -->"
				parameters = parse_wikitext(parameters, options, queue);
				// 不再作 parse。
				parameters = parameters.toString();
				queue.push(_set_wiki_type(parameters, 'comment'));
				return include_mark + (queue.length - 1) + end_mark;
			})
			// 缺 end mark: "...<!--..."
			.replace(/<\!--([\s\S]*)$/, function(all, parameters) {
				if (initialized_fix[1]) {
					parameters = parameters.slice(0,
					//
					-initialized_fix[1].length);
					initialized_fix[1] = '';
				}
				// 預防有特殊 elements 置入其中。此時將之當作普通 element 看待。
				// e.g., "<!-- <nowiki>...</nowiki> ... -->"
				parameters = parse_wikitext(parameters, options, queue);
				// 不再作 parse。
				parameters = parameters.toString();
				parameters = _set_wiki_type(parameters, 'comment');
				if (!normalize)
					parameters.no_end = true;
				queue.push(parameters);
				return include_mark + (queue.length - 1) + end_mark;
			});
		}

		// ----------------------------------------------------

		// 為了 "{{Tl|a<ref>[http://a.a.a b|c {{!}} {{CURRENTHOUR}}]</ref>}}"，
		// 將 -{}-, [], [[]] 等，所有中間可穿插 "|" 的置於 {{{}}}, {{}} 前。

		// ----------------------------------------------------
		// language conversion -{}- 以後來使用的為主。
		// TODO: -{R|里}-
		// TODO: -{zh-hans:<nowiki>...</nowiki>;zh-hant:<nowiki>...</nowiki>;}-
		// TODO: 特別注意語法中帶有=>的單向轉換規則 [[w:zh:模組:CGroup/IT]]
		// 注意: 有些 wiki，例如 jawiki，並沒有開啟 language conversion。
		// https://zh.wikipedia.org/wiki/Help:中文维基百科的繁简、地区词处理#常用的轉換工具語法
		// [[w:zh:H:Convert]], [[w:zh:H:AC]]
		// [[mw:Help:Magic words]], [[mw:Writing systems/LanguageConverter]]
		// https://doc.wikimedia.org/mediawiki-core/master/php/LanguageConverter_8php_source.html
		// https://doc.wikimedia.org/mediawiki-core/master/php/ConverterRule_8php_source.html
		// https://doc.wikimedia.org/mediawiki-core/master/php/ZhConversion_8php_source.html
		// https://github.com/wikimedia/mediawiki/blob/master/languages/data/ZhConversion.php
		// {{Cite web}}漢字不被轉換: 可以使用script-title=ja:。
		// TODO: 使用魔術字 __NOTC__ 或 __NOTITLECONVERT__ 可避免標題轉換。
		// TODO: <source></source>內之-{}-無效。
		// TODO:
		// 自動轉換程序會自動規避「程式碼」類的標籤，包括<pre>...</pre>、<code>...</code>兩種。如果要將前兩種用於條目內的程式範例，可以使用空轉換標籤-{}-強制啟用轉換。

		wikitext = wikitext.replace_till_stable(/-{(|[^{].*?)}-/g,
				parse_language_conversion);

		// ----------------------------------------------------
		// wikilink
		// [[~:~|~]], [[~:~:~|~]]

		// 須注意: [[p|\nt]] 可，但 [[p\n|t]] 不可！

		// 注意: [[p|{{tl|t}}]] 不會被解析成 wikilink，因此 wikilink 應該要擺在 transclusion
		// 前面檢查，或是使 display_text 不包含 {{}}。

		// 但注意: "[[File:title.jpg|thumb|a{{tl|t}}|param\n=123|{{tl|t}}]]"
		// 可以解析成圖片, Caption: "{{tl|t}}"

		// TODO: bug: 正常情況下 "[[ ]]" 不會被 parse，但是本函數還是會 parse 成 link。
		// TODO: [[::zh:title]] would be rendered as plaintext

		wikitext = wikitext.replace_till_stable(
		// or use ((PATTERN_link))
		PATTERN_wikilink_global, parse_wikilink);

		// ----------------------------------------------------
		// external link
		// [http://... ...]
		// TODO: [{{}} ...]
		wikitext = wikitext.replace_till_stable(PATTERN_external_link_global,
				parse_external_link);

		// ----------------------------------------------------
		// {{{...}}} 需在 {{...}} 之前解析。
		// [[w:zh:Help:模板]]
		// 在模板頁面中，用三個大括弧可以讀取參數。
		// MediaWiki 會把{{{{{{XYZ}}}}}}解析為{{{ {{{XYZ}}} }}}而不是{{ {{ {{XYZ}} }} }}
		// allow "{{{}}}", e.g., [[w:zh:Template:Policy]]
		wikitext = wikitext.replace_till_stable(/{{{(|[^{}][\s\S]*?)}}}/g,
				parse_template_parameter);

		// ----------------------------------------------------
		// 模板（英語：Template，又譯作「樣板」、「範本」）
		// {{Template name|}}
		wikitext = wikitext.replace_till_stable(
		//
		PATTERN_for_transclusion, parse_transclusion);

		// ----------------------------------------------------

		// 由於 <tag>... 可能被 {{Template}} 截斷，因此先處理 {{Template}} 再處理 <t></t>。
		// 先處理 <t></t> 再處理 <t/>，預防單獨的 <t> 被先處理了。

		// ----------------------------------------------------
		// [[Help:HTML in wikitext]]

		// <del>不採用 global variable，預防 multitasking 並行處理。</del>
		// reset PATTERN index
		// PATTERN_WIKI_TAG.lastIndex = 0;

		// console.log(PATTERN_TAG);
		// console.trace(PATTERN_non_extensiontags);
		// console.trace(wikitext);

		// HTML tags that must be closed.
		// <pre>...</pre>, <code>int f()</code>
		wikitext = wikitext.replace_till_stable(PATTERN_non_extensiontags,
				parse_HTML_tag);

		// ----------------------------------------------------
		// single tags. e.g., <hr />
		// TODO: <nowiki /> 能斷開如 [[L<nowiki />L]]

		// reset PATTERN index
		// PATTERN_WIKI_TAG_VOID.lastIndex = 0;

		// assert: 有 end tag 的皆已處理完畢，到這邊的是已經沒有 end tag 的。
		wikitext = wikitext.replace_till_stable(PATTERN_WIKI_TAG_VOID,
				parse_single_tag);
		// 處理有明確標示為 simgle tag 的。
		// 但 MediaWiki 現在會將 <b /> 轉成 <b>，因此不再處理這部分。
		if (false) {
			wikitext = wikitext.replace_till_stable(
					/<(\/)?([a-z]+)(\s[^<>]*\/)?>/ig, parse_single_tag);
		}

		// ----------------------------------------------------
		// table: \n{| ... \n|}
		// TODO: 在遇到過長過大的表格時，耗時甚久。 [[w:en:List of Leigh Centurions players]]
		// 因為 table 中較可能包含 {{Template}}，但 {{Template}} 少包含 table，
		// 因此先處理 {{Template}} 再處理 table。
		// {|表示表格開始，|}表示表格結束。

		wikitext = wikitext.replace_till_stable(
		// [[Help:Table]]
		/\n{\|([\s\S]*?)\n\|}/g, parse_table);

		// ----------------------------------------------------

		wikitext = wikitext.replace(PATTERN_BEHAVIOR_SWITCH,
				parse_behavior_switch);

		// 若是要處理<b>, <i>這兩項，也必須調整 wiki_API.section_link()。

		// ''''b''''' → <i><b>b</b></i>
		// 因此先從<b>開始找。

		// '''~''' 不能跨行！ 注意: '''{{font color}}''', '''{{tsl}}'''
		// ''~'' 不能跨行！
		wikitext = wikitext.replace_till_stable(
				/('''''|'''?)([^'\n].*?'*)(\1)/g, parse_apostrophe_type);
		if (false) {
			// \n, $ 都會截斷 italic, bold
			// <tag> 不會截斷 italic, bold
			wikitext = wikitext.replace_till_stable(
					/('''''|'''?)([^'\n].*?)($|\n)/g, parse_apostrophe_type);
		}
		// '', ''' 似乎會經過微調: [[n:zh:Special:Permalink/120676]]

		// ~~~, ~~~~, ~~~~~: 不應該出現

		// ----------------------------------------------------
		// parse_wikitext.section_title

		// TODO: 經測試，"\n== <code>code<code> =="會被當作title，但採用本函數將會解析錯誤。
		// [[w:zh:Special:Diff/46814116]]

		// postfix 沒用 \s，是因為 node 中， /\s/.test('\n')，且全形空白之類的確實不能用在這。

		// @see PATTERN_section
		var PATTERN_section = new RegExp(
		// 採用 positive lookahead (?=\n|$) 是為了循序匹配 section title，不跳過任何一個。
		// 不採用則 parse_wiki 處理時若遇到連續章節，不會按照先後順序，造成這邊還不能設定
		// section_title_hierarchy，只能在 parsed.each_section() 設定。
		/(^|\n)(={1,6})(.+)\2((?:[ \t]|mark)*)(?=\n|$)/g.source.replace('mark',
				library_namespace.to_RegExp_pattern(include_mark) + '\\d+'
						+ library_namespace.to_RegExp_pattern(end_mark)), 'g');
		// console.log(PATTERN_section);
		// console.log(JSON.stringify(wikitext));

		// 應該一次遍歷就找出所有的 section title，否則 section_title_hierarchy 會出錯。
		wikitext = wikitext.replace(PATTERN_section, parse_section);

		// console.log('10: ' + JSON.stringify(wikitext));

		if (false) {
			// another method to parse.
			wikitext = '{{temp|{{temp2|p{a}r{}}}}}';
			pattern = /{{[\s\n]*([^\s\n#\|{}<>\[\]][^#\|{}<>\[\]]*)/g;
			matched = pattern.exec(wikitext);
			end_index = wikitext.indexOf('}}', pattern.lastIndex);

			PATTERN_wikilink;
		}

		// ----------------------------------------------------
		// 處理 / parse bare / plain URLs in wikitext: https:// @ wikitext
		// @see [[w:en:Help:Link#Http: and https:]]

		// console.log('11: ' + JSON.stringify(wikitext));

		// 在 transclusion 中不會被當作 bare / plain URL。
		if (!options.inside_transclusion) {
			wikitext = wikitext.replace(PATTERN_URL_WITH_PROTOCOL_GLOBAL,
			//
			function(all, previous, URL) {
				all = _set_wiki_type(URL, 'url');
				// 須注意:此裸露 URL 之 type 與 external link 內之type相同！
				// 因此需要測試 token.is_bare 以確定是否在 external link 內。
				all.is_bare = true;
				queue.push(all);
				return previous + include_mark + (queue.length - 1) + end_mark;
			});
		}

		// ----------------------------------------------------
		// 處理 / parse list @ wikitext
		// @see [[w:en:MOS:LIST]], [[w:en:Help:Wikitext#Lists]]
		// 注意: 這裡僅處理在原wikitext中明確指示列表的情況，無法處理以模板型式表現的列表。

		// 列表層級。 e.g., ['#','*','#',':']
		var list_prefixes_now = [], list_now = [],
		//
		lines_without_style = [],
		//
		list_conversion = {
			';' : DEFINITION_LIST,
			':' : DEFINITION_LIST
		};

		// console.log('12: ' + JSON.stringify(wikitext));
		// console.log(queue);

		wikitext = wikitext.split('\n');
		// e.g., for "<b>#ccc</b>"
		var first_line = !initialized_fix && wikitext.shift();

		wikitext.forEach(parse_list_line);
		wikitext = lines_without_style;

		// ----------------------------------------------------
		// parse horizontal rule, line, HTML <hr /> element: ----, -{4,}
		// @see [[w:en:Help:Wikitext#Horizontal rule]]
		// Their use in Wikipedia articles is deprecated.
		// They should never appear in regular article prose.

		// reset
		lines_without_style = [];

		wikitext.forEach(parse_hr_tag);
		wikitext = lines_without_style;

		// ----------------------------------------------------
		// parse preformatted text, HTML <pre> element: \n + space
		// @seealso [[w:en:Help:Wikitext#Pre]]

		// reset
		lines_without_style = [];
		// pre_list
		list_now = null;

		wikitext.forEach(parse_preformatted);
		wikitext = lines_without_style;

		// Release memory. 釋放被占用的記憶體。
		lines_without_style = null;

		if (!initialized_fix) {
			// recover
			wikitext.unshift(first_line);
		}
		wikitext = wikitext.join('\n');

		// ↑ parse sequence finished *EXCEPT FOR* paragraph
		// ------------------------------------------------------------------------

		// console.log('13: ' + JSON.stringify(wikitext));
		if (typeof options.postfix === 'function')
			wikitext = options.postfix(wikitext, queue, include_mark, end_mark)
					|| wikitext;

		// console.log('14: ' + JSON.stringify(wikitext));
		if (initialized_fix) {
			// 去掉初始化時添加的 fix。
			// 須預防有些為完結的標記，把所添加的部分吃掉了。此時不能直接 .slice()，
			// 而應該先檢查是不是有被吃掉的狀況。
			if (initialized_fix[0] || initialized_fix[1])
				wikitext = wikitext.slice(initialized_fix[0].length,
				// assert: '123'.slice(1, undefined) === '23'
				// if use length as initialized_fix[1]:
				// assert: '1'.slice(0, [ 1 ][1]) === '1'
				initialized_fix[1] ? -initialized_fix[1].length : undefined);
		}

		// ----------------------------------------------------
		// MUST be last: 處理段落 / parse paragraph @ wikitext

		// console.log('15: ' + JSON.stringify(wikitext));
		// [ all, text, separator ]
		var PATTERN_paragraph = /([\s\S]*?)((?:\s*?\n){2,}|$)/g;
		if (initialized_fix && options.parse_paragraph
				&& /\n\s*?\n/.test(wikitext)) {
			// 警告: 解析段落的動作可能破壞文件的第一層結構，會使文件的第一層結構以段落為主。
			wikitext = wikitext.replace(PATTERN_paragraph,
			// assert: 這個 pattern 應該能夠完全分割 wikitext。
			function(all, text, separator) {
				if (!all) {
					return '';
				}
				all = text.split('\n');
				// console.log(all);
				// 經過改變，需再進一步處理。
				all = all.map(function(t) {
					return parse_wikitext(t, options, queue);
				});
				// console.log(all);
				all = _set_wiki_type(all, 'paragraph');
				if (separator)
					all.separator = separator;
				// console.log('queue index: ' + queue.length);
				queue.push(all);
				return include_mark + (queue.length - 1) + end_mark;
			});
		}

		// console.log(wikitext);
		if (no_resolve) {
			return wikitext;
		}

		// console.log('16: ' + JSON.stringify(wikitext));
		queue.push(wikitext);
		if (false) {
			console.log('='.repeat(80));
			console.log(queue);
			console.log(JSON.stringify(wikitext));
			console.log(options);
		}
		resolve_escaped(queue, include_mark, end_mark);

		wikitext = queue.at(-1);
		// console.log(wikitext);
		if (initialized_fix
		// 若是解析模板，那麼添加任何的元素，都可能破壞轉換成字串後的結果。
		// plain: 表示 wikitext 可能是一個頁面。最起碼是以 .join('') 轉換成字串的。
		&& (wikitext.type === 'plain'
		// options.no_reduce, options.is_page
		|| options.with_properties)) {
			if (Array.isArray(options.target_array) && Array.isArray(wikitext)) {
				// 可藉以複製必要的屬性。
				// @see function parse_page(options)
				options.target_array.truncate();
				// copy parsed data to .target_array
				Array.prototype.push.apply(options.target_array, wikitext);
				wikitext = options.target_array;
			}

			if (queue.switches)
				wikitext.switches = queue.switches;

			if (!library_namespace.is_empty_object(queue.conversion_table))
				wikitext.conversion_table = queue.conversion_table;
			if (options.conversion_title)
				wikitext.conversion_title = queue.conversion_title;
		}

		// Release memory. 釋放被占用的記憶體。
		queue = null;

		if (initialized_fix
		// 若是解析模板，那麼添加任何的元素，都可能破壞轉換成字串後的結果。
		// plain: 表示 wikitext 可能是一個頁面。最起碼是以 .join('') 轉換成字串的。
		&& wikitext.type === 'plain' && !options.parse_paragraph) {
			// console.log(wikitext);
			// 純文字分段。僅切割第一層結構。
			for (var index = 0; index < wikitext.length; index++) {
				var token = wikitext[index], matched;
				// console.log('---> [' + index + '] ' + token);
				if (typeof token === 'string') {
					if (!/\n\s*?\n/.test(token)) {
						continue;
					}
					// 刪掉原先的文字 token = wikitext[index]。
					wikitext.splice(index, 1);
					// 從這裡開始，index 指的是要插入字串的位置。
					while ((matched = PATTERN_paragraph.exec(token))
							&& matched[0]) {
						// console.log('#1 ' + token);
						// console.log(matched);
						// text, separator 分開，在做 diff 的時候會更容易處理。
						if (matched[1] && matched[2]) {
							wikitext.splice(index, 0, matched[1], matched[2]);
							index += 2;
						} else {
							// assert:
							// case 1: matched[2] === '',
							// matched[0] === matched[1]
							// case 2: matched[1] === '',
							// matched[0] === matched[2]
							wikitext.splice(index++, 0, matched[0]);
						}
					}
					// 回復 index 的位置。
					index--;
					// reset PATTERN index
					PATTERN_paragraph.lastIndex = 0;

				} else {
					// assert: typeof wikitext[index] === 'object'
					if (index > 0
							&& typeof (token = wikitext[index - 1]) === 'string'
							&& (matched = token
									.match(/^([\s\S]*[^\s\n])([\s\n]*\n)$/))) {
						// e.g., ["abc \n","{{t}}"] → ["abc"," \n","{{t}}"]
						// console.log('#2 ' + token);
						// console.log(matched);
						// text, space 分開，在做 diff 的時候會更容易處理。
						wikitext.splice(index - 1, 1, matched[1], matched[2]);
						index++;
					}
					token = wikitext[index + 1];
					// console.log('>>> ' + token);
					if (typeof token === 'string'
							&& (matched = token.match(/^(\n+)([^\n][\s\S]*?)$/))) {
						// e.g., ["{{t}}","\nabc"] → ["{{t}}","\n","abc"]
						// console.log('#3 ' + token);
						// console.log(matched);
						// text, space 分開，在做 diff 的時候會更容易處理。
						wikitext.splice(index + 1, 1, matched[1], matched[2]);
					}
				}
			}

			// console.trace(section_title_hierarchy[0]);
			if (!options.target_array)
				Object.assign(wikitext, section_title_hierarchy[0]);
		}

		if (false) {
			library_namespace.debug('set depth ' + (depth_of_children - 1)
					+ ' to node [' + wikitext + ']', 3, 'parse_wikitext');
			wikitext[KEY_DEPTH] = depth_of_children - 1;
		}

		return wikitext;
	}

	// ------------------------------------------------------------------------

	// export 導出.

	Object.assign(parse_wikitext, {
		wiki_token_toString : wiki_token_toString,

		set_wiki_type : set_wiki_type
	});

	Object.assign(wiki_API, {
		// {Object} file option hash
		file_options : file_options,

		markup_tags : markup_tags,

		DEFINITION_LIST : DEFINITION_LIST,

		page_title_to_sort_key : page_title_to_sort_key,

		HTML_to_wikitext : HTML_to_wikitext,
		// wikitext_to_plain_text : wikitext_to_plain_text,

		parse : parse_wikitext
	});

	// --------------------------------------------------------------------------------------------

	// 不設定(hook)本 module 之 namespace，僅執行 module code。
	return library_namespace.env.not_to_extend_keyword;
}

});
// CeL.application.net.wiki.parser.section
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): parse sections and
 *       anchors
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>

</code>
 * 
 * @since 2021/12/15 6:7:47 拆分自 CeL.application.net.wiki.parser 等
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.parser.section',

	require : 'application.net.wiki.parser.'
	//
	+ '|application.net.wiki.parser.wikitext',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki, KEY_SESSION = wiki_API.KEY_SESSION;
	// @inner
	var PATTERN_BOT_NAME = wiki_API.PATTERN_BOT_NAME;
	var for_each_token = wiki_API.parser.parser_prototype.each;

	var
	/** {Number}未發現之index。 const: 基本上與程式碼設計合一，僅表示名義，不可更改。(=== -1) */
	NOT_FOUND = ''.indexOf('_');

	// --------------------------------------------------------------------------------------------

	// 這些 <tag> 都不能簡單解析出來。
	// @see wiki_extensiontags
	var untextify_tags = {
		ref : true,
		// e.g., <references group="gg"/>
		references : true,
		math : true
	};

	// @inner
	function preprocess_section_link_token(token, options) {
		// console.trace(token);

		// 前置作業: 處理模板之類特殊節點。
		if (typeof options.preprocess_section_link_token === 'function') {
			token = options.preprocess_section_link_token(token, options);
		}
		// console.log(token);

		while (token.type === 'transclusion'
				&& typeof token.expand === 'function') {
			// console.trace(options);
			// expand template, .expand_template(), .to_wikitext()
			// https://www.mediawiki.org/w/api.php?action=help&modules=expandtemplates
			token = wiki_API.parse(token.expand(options), options);
			if (wiki_API.template_functions) {
				// console.trace(options);
				wiki_API.template_functions.adapt_function(token, null, null,
						options);
			}
			// console.trace([ token, token.expand, options ]);
		}

		// ------------------------

		if (token.type in {
			plain : true,
			tag_inner : true
		}) {
			for_each_token.call(token, function(sub_token, index, parent) {
				// console.trace(sub_token);
				sub_token = preprocess_section_link_token(sub_token, options);
				// console.trace(sub_token);
				return sub_token;
			}, options);
			return token;
		}

		if (token.type === 'comment') {
			return '';
		}

		// console.log(token);
		if (token.type === 'tag'/* || token.type === 'tag_single' */) {
			// token: [ tag_attributes, tag_inner ]
			if (token.tag === 'nowiki') {
				// escape characters inside <nowiki>
				return preprocess_section_link_token(token[1] ? token[1]
						.toString() : '', options);
			}

			// 容許一些特定標籤能夠顯示格式。以繼承原標題的粗體斜體和顏色等等格式。
			// @see markup_tags
			if (token.tag in {
				// style
				b : true,
				i : true,
				q : true,
				s : true,
				u : true,
				big : true,
				small : true,
				sub : true,
				sup : true,
				em : true,
				ins : true,
				del : true,
				strike : true,
				strong : true,
				font : true,
				code : true,
				ruby : true,
				rb : true,
				rt : true,
				// container
				span : true,
				div : true,

				// nowiki : true,
				langconvert : true
			}) {
				// reduce HTML tags. e.g., <b>, <sub>, <sup>, <span>
				token.tag_attributes = token.shift();
				token.original_type = token.type;
				token.type = 'plain';
				token.toString = wiki_API.parse.wiki_token_toString[token.type];
				return token;
			}

			// console.trace(token);

			// 其他 HTML tag 大多無法精確轉換。
			options.root_token_list.imprecise_tokens.push(token);

			if (token.tag in untextify_tags) {
				// trick: 不再遍歷子節點。避免被進一步的處理。
				token.is_atom = true;
				token.unconvertible = true;
				return token;
			}

			// TODO: <a>

			// token that may be handlable 請檢查是否可處理此標題。
			options.root_token_list.tokens_maybe_handlable.push(token);
			// reduce HTML tags. e.g., <ref>
			var new_token = preprocess_section_link_tokens(token[1] || '',
					options);
			new_token.tag = token.tag;
			return new_token;
		}

		if (token.type === 'tag_single') {
			if (token.tag in {
				// For {{#lst}}, {{#section:}}
				// [[w:en:Help:Labeled section transclusion]]
				// e.g., @ [[w:en:Island Line, Isle of Wight]]
				section : true,
				// hr : true,
				// e.g., <br />
				br : true,
				nowiki : true
			}) {
				return '';
			}

			options.root_token_list.imprecise_tokens.push(token);

			// 從上方 `token.type === 'tag'` 複製過來的。
			if (token.tag in untextify_tags) {
				// trick: 不再遍歷子節點。避免被進一步的處理。
				token.is_atom = true;
				token.unconvertible = true;
				return token;
			}

			// token that may be handlable 請檢查是否可處理此標題。
			options.root_token_list.tokens_maybe_handlable.push(token);
			return token;
		}

		if (false && token.type === 'convert') {
			// TODO: e.g., '==-{[[:三宝颜共和国]]}-=='
			token = token.converted;
			// 接下來交給 `token.type === 'link'` 處理。
		}

		if ((token.type === 'file' || token.type === 'category')
				&& !token.is_link) {
			// 顯示時，TOC 中的圖片、分類會被消掉，圖片在內文中才會顯現。
			return '';
		}

		// TODO: interlanguage links will be treated as normal link!
		if (token.type === 'link' || token.type === 'category'
		// e.g., [[:File:file name.jpg]]
		|| token.type === 'file') {
			// escape wikilink
			// return display_text
			if (token.length > 2) {
				token = token.slice(2);
				token.type = 'plain';
				// @see wiki_API.parse.wiki_token_toString.file, for
				// token.length > 2
				token.toString = function() {
					return this.join('|')
				};
				token = preprocess_section_link_tokens(token, options);
			} else {
				// 去掉最前頭的 ":"。 @see wiki_API.parse.wiki_token_toString
				token = token[0].toString().replace(/^ *:?/, '') + token[1];
			}
			// console.log(token);
			return token;
		}

		// 這邊僅處理常用模板。需要先保證這些模板存在，並且具有預期的功能。
		// 其他常用 template 可加在 wiki.template_functions[site_name] 中。
		//
		// 模板這個部分除了解析模板之外沒有好的方法。
		// 正式應該採用 parse 或 expandtemplates 解析出實際的 title，之後 callback。
		// https://www.mediawiki.org/w/api.php?action=help&modules=parse
		if (token.type === 'transclusion') {
			// 各語言 wiki 常用 template-linking templates:
			// {{Tl}}, {{Tlg}}, {{Tlx}}, {{Tls}}, {{T1}}, ...
			if (/^(?:T[l1n][a-z]{0,3}[23]?)$/.test(token.name)) {
				// TODO: should expand as
				// "&#123;&#123;[[Template:{{{1}}}|{{{1}}}]]&#125;&#125;"
				token.shift();
				return token;
			}

			if (token.name in {
				// {{lang|語言標籤|內文}}
				Lang : true
			}) {
				return preprocess_section_link_token(token.parameters[2],
						options);
			}

			// moved to CeL.application.net.wiki.template_functions.zhmoegirl
			if (false
					&& token.name === 'Lj'
					&& wiki_API.site_name(wiki_API.session_of_options(options)) === 'zhmoegirl') {
				return preprocess_section_link_token(wiki_API.parse('-{'
						+ token.parameters[1] + '}-'), options);
			}

			// TODO: [[Template:User link]], [[Template:U]]

			// TODO: [[Template:疑問]], [[Template:Block]]

			// console.trace(token);

			// 警告: 在遇到標題包含模板時，因為不能解析連模板最後產出的結果，會產生錯誤結果。
			options.root_token_list.imprecise_tokens.push(token);
			// trick: 不再遍歷子節點。避免被進一步的處理。
			token.is_atom = true;
			token.unconvertible = true;
			return token;
		}

		if (token.type === 'external_link') {
			// escape external link
			// console.log('>> ' + token);
			// console.log(token[2]);
			// console.log(preprocess_section_link_tokens(token[2], options));
			if (token[2]) {
				return preprocess_section_link_tokens(token[2], options);
			}
			// TODO: error: 用在[URL]無標題連結會失效。需要計算外部連結的序號。
			options.root_token_list.imprecise_tokens.push(token);
			// trick: 不再遍歷子節點。避免被進一步的處理。
			token.is_atom = true;
			token.unconvertible = true;
			return token;
		}

		if (token.type === 'switch') {
			options.root_token_list.imprecise_tokens.push(token);
			return '';
		}

		if (token.type === 'bold' || token.type === 'italic') {
			// 去除粗體與斜體。
			token.original_type = token.type;
			token.type = 'plain';
			token.toString = wiki_API.parse.wiki_token_toString[token.type];
			return token;
		}

		if (typeof token === 'string') {
			// console.log('>> ' + token);
			// console.log('>> [' + index + '] ' + token);
			// console.log(parent);

			// decode '&quot;', '%00', ...
			token = library_namespace.HTML_to_Unicode(token);
			if (/\S/.test(token)) {
				// trick: 不再遍歷子節點。避免被進一步的處理，例如"&amp;amp;"。
				token = [ token ];
				token.is_atom = true;
				token.unconvertible = true;
				token.is_plain = true;
			}
			// console.trace(token);
			return token;
		}

		if (token.type in {
			convert : true,
			url : true
		}) {
			// 其他可處理的節點。
			return token;
		}

		// console.trace(token);
		if (token.type in {
			magic_word_function : true,
			parameter : true
		}) {
			// TODO: return token.evaluate()
			token.unconvertible = true;
		}

		// console.trace(token);

		// token that may be handlable 請檢查是否可處理此標題。
		if (!token.unconvertible)
			options.root_token_list.tokens_maybe_handlable.push(token);
		if (!token.is_plain) {
			// `token.is_plain`: 由 {String} 轉換而成。
			options.root_token_list.imprecise_tokens.push(token);
		}
		return token;
	}

	// @inner
	function preprocess_section_link_tokens(tokens, options) {
		if (tokens.type !== 'plain') {
			tokens = wiki_API.parse.set_wiki_type([ tokens ], 'plain');
		}

		if (false) {
			library_namespace.info('preprocess_section_link_tokens: tokens:');
			console.log(tokens);
		}
		// console.trace(tokens);

		if (!tokens.imprecise_tokens) {
			// options.root_token_list.imprecise_tokens
			tokens.imprecise_tokens = [];
			tokens.tokens_maybe_handlable = [];
		}

		if (!options.root_token_list)
			options.root_token_list = tokens;

		options.modify = true;

		// console.trace(tokens);
		return preprocess_section_link_token(tokens, options);
	}

	// TODO: The method now is NOT a good way!
	// extract_plain_text_of_wikitext(), get_plain_display_text()
	// @see [[w:en:Module:Delink]]
	function wikitext_to_plain_text(wikitext, options) {
		options = library_namespace.new_options(options);

		wikitext = wiki_API.parse(String(wikitext), options);
		// console.trace(wikitext);
		wikitext = preprocess_section_link_tokens(wikitext, options);

		// console.trace(wikitext);
		return wikitext.toString();
	}

	// --------------------------------

	// 用在 summary 必須設定 is_URI !
	function section_link_escape(text, is_URI) {
		// escape wikitext control characters,
		// including language conversion -{}-
		if (true) {
			text = text.replace(
			// 盡可能減少字元的使用量，因此僅處理開頭，不處理結尾。
			// @see [[w:en:Help:Wikitext#External links]]
			// @see PATTERN_page_name
			is_URI ? /[\|{}<>\[\]%]/g
			// 為了容許一些特定標籤能夠顯示格式，"<>"已經在preprocess_section_link_token(),section_link()裡面處理過了。
			// display_text 在 "[[", "]]" 中，不可允許 "[]"
			: /[\|{}<>]/g && /[\|{}\[\]]/g,
			// 經測試 anchor 亦不可包含[\[\]{}\n�]。
			function(character) {
				if (is_URI) {
					return '%' + character.charCodeAt(0)
					// 會比 '&#' 短一點。
					.toString(16).toUpperCase();
				}
				return '&#' + character.charCodeAt(0) + ';';
			}).replace(/[ \n]{2,}/g, ' ');
		} else {
			// 只處理特殊字元而不是採用encodeURIComponent()，這樣能夠保存中文字，使其不被編碼。
			text = encodeURIComponent(text);
		}

		return text;
	}

	// @inner
	// return [[維基連結]]
	// TODO: using external link to display "�"
	function section_link_toString(page_title, style) {
		var anchor = (this[1] || '').replace(/�/g, '?'),
		// 目前 MediaWiki 之 link anchor, display_text 尚無法接受
		// REPLACEMENT CHARACTER U+FFFD "�" 這個字元。
		display_text = (this[2] || '').replace(/�/g, '?');

		display_text = display_text ?
		//
		style ? '<span style="' + style + '">' + display_text + '</span>'
				: display_text : '';

		return wiki_API.title_link_of((page_title || this[0] || '') + '#'
				+ anchor, display_text);
		return '[[' + (page_title || this[0] || '') + '#' + anchor + '|'
				+ display_text + ']]';
	}

	// 用來保留 display_text 中的 language conversion -{}-，
	// 必須是標題裡面不會存在的字串，並且也不會被section_link_escape()轉換。
	var section_link_START_CONVERT = '\0\x01', section_link_END_CONVERT = '\0\x02',
	//
	section_link_START_CONVERT_reg = new RegExp(library_namespace
			.to_RegExp_pattern(section_link_START_CONVERT), 'g'),
	//
	section_link_END_CONVERT_reg = new RegExp(library_namespace
			.to_RegExp_pattern(section_link_END_CONVERT), 'g');

	// wiki_API.section_link.pre_parse_section_title()
	function pre_parse_section_title(parameters, options, queue) {
		parameters = parameters.toString()
		// 先把前頭的空白字元提取出來，避免被當作 <pre>。
		// 先把前頭的列表字元提取出來，避免被當作 list。
		// 這些會被當作普通文字。
		.match(/^([*#;:=\s]*)([\s\S]*)$/);
		// console.trace(parameters);
		var prefix = parameters[1];
		// 經過改變，需再進一步處理。
		parameters = wiki_API.parse(parameters[2], options, queue);
		// console.trace(parameters);
		if (parameters.type !== 'plain') {
			parameters = wiki_API.parse.set_wiki_type([ parameters ], 'plain');
		}
		if (prefix) {
			if (typeof parameters[0] === 'string')
				parameters[0] = prefix + parameters[0];
			else
				parameters.unshift(prefix);
		}
		return parameters;
	}

	section_link.pre_parse_section_title = pre_parse_section_title;

	/**
	 * 從話題/議題/章節標題產生連結到章節標題的wikilink。
	 * 
	 * @example <code>

	CeL.wiki.section_link(section_title)

	</code>
	 * 
	 * @param {String}section_title
	 *            section title in wikitext. 章節標題。 節のタイトル。
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Array}link object (see below)
	 * 
	 * @see [[phabricator:T18691]] 未來章節標題可能會有分享連結，這將更容易連結到此章節。
	 * @see [[H:MW]], {{anchorencode:章節標題}}, [[Template:井戸端から誘導の使用]], escapeId()
	 * @see https://phabricator.wikimedia.org/T152540
	 *      https://lists.wikimedia.org/pipermail/wikitech-l/2017-August/088559.html
	 */
	function section_link(section_title, options) {
		if (typeof options === 'string') {
			options = {
				page_title : options
			};
		} else if (typeof options === 'function') {
			options = {
				// TODO
				callback : options
			};
		} else {
			options = library_namespace.setup_options(options);
		}

		// console.trace(wiki_API.parse(section_title, null, []));
		// TODO: "==''==text==''==\n"
		var parsed_title = pre_parse_section_title(section_title, options);
		// pass session.
		parsed_title = preprocess_section_link_tokens(parsed_title, options);

		// 注意: 當這空白字字出現在功能性token中時，可能會出錯。
		var id = parsed_title.toString().trim().replace(/[ \n]{2,}/g, ' '),
		// anchor 網頁錨點: 可以直接拿來做 wikilink anchor 的章節標題。
		// 有多個完全相同的 anchor 時，後面的會加上"_2", "_3",...。
		// 這個部分的處理請見 function for_each_section()
		anchor = section_link_escape(id
		// 處理連續多個空白字元。長度相同的情況下，盡可能保留原貌。
		.replace(/([ _]){2,}/g, '$1').replace(/&/g, '&amp;'), true);

		var session = wiki_API.session_of_options(options);
		// TODO: for zhwiki, the anchor should NOT includes "-{", "}-"

		// console.log(parsed_title);
		for_each_token.call(parsed_title, function(token, index, parent) {
			if (token.type === 'convert') {
				// @see wiki_API.parse.wiki_token_toString.convert
				// return token.join(';');
				token.toString = function() {
					var converted = this.converted;
					if (converted === undefined) {
						// e.g., get display_text of
						// '==「-{XX-{zh-hans:纳; zh-hant:納}-克}-→-{XX-{奈}-克}-」=='
						return section_link_START_CONVERT
						// @see wiki_API.parse.wiki_token_toString.convert
						+ this.join(';') + section_link_END_CONVERT;
					}
					if (Array.isArray(converted)) {
						// e.g., '==-{[[:三宝颜共和国]]}-=='
						converted = converted.toString()
						// e.g.,
						// '==「-{XX-{zh-hans:纳; zh-hant:納}-克}-→-{XX-{奈}-克}-」=='
						// recover language conversion -{}-
						.replace(section_link_START_CONVERT_reg, '-{').replace(
								section_link_END_CONVERT_reg, '}-');
						var _options = Object.clone(options);
						// recursion, self-calling, 遞迴呼叫
						_options.is_recursive = true;
						converted = section_link(converted, _options)[2];
					}
					return section_link_START_CONVERT
					// + this.join(';')
					+ converted + section_link_END_CONVERT;
				};
			} else if (token.original_type) {
				// revert type
				token.type = token.original_type;
				token.toString
				//
				= wiki_API.parse.wiki_token_toString[token.type];
				// 保留 display_text 中的 ''', '', <b>, <i>, <span> 屬性。
				if (token.type === 'tag') {
					// 容許一些特定標籤能夠顯示格式: 會到這裡的應該都是一些被允許顯示格式的特定標籤。
					token.unshift(token.tag_attributes);
				}
			} else if (token.type === 'tag' || token.type === 'tag_single') {
				parent[index] = token.toString().replace(/</g, '&lt;').replace(
						/>/g, '&gt;');

			} else if (token.is_plain) {
				if (false) {
					// use library_namespace.DOM.Unicode_to_HTML()
					token[0] = library_namespace.Unicode_to_HTML(token[0])
					// reduce size
					.replace(/&gt;/g, '>');
				}
				// 僅作必要的轉換
				token[0] = token[0].replace(/&/g, '&amp;')
				// 這邊也必須 escape "<>"。這邊可用 "%3C", "%3E"。
				.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g,
						'&quot;').replace(/'/g, "&apos;");
			}
		}, true);
		// console.log(parsed_title);
		// console.trace(parsed_title.toString().trim());

		// display_text 應該是對已經正規化的 section_title 再作的變化。
		var display_text = parsed_title.toString().trim();
		display_text = section_link_escape(display_text);
		if (!options.is_recursive) {
			// recover language conversion -{}-
			display_text = display_text.replace(section_link_START_CONVERT_reg,
					'-{').replace(section_link_END_CONVERT_reg, '}-');
		}

		// link = [ page title 頁面標題, anchor 網頁錨點 / section title 章節標題,
		// display_text / label 要顯示的連結文字 default: section_title ]
		var link = [ options && options.page_title,
		// Warning: anchor, display_text are with "&amp;",
		// id is not with "&amp;".
		anchor, display_text ];
		// console.log(link);
		if (parsed_title.imprecise_tokens
		// section_title_token.link.imprecise_tokens
		&& parsed_title.imprecise_tokens.length > 0) {
			link.imprecise_tokens = parsed_title.imprecise_tokens;
			// section_title_token.link.tokens_maybe_handlable
			if (parsed_title.tokens_maybe_handlable
					&& parsed_title.tokens_maybe_handlable.length > 0)
				link.tokens_maybe_handlable = parsed_title.tokens_maybe_handlable;
		}
		Object.assign(link, {
			// link.id = {String}id
			// section title, NOT including "<!-- -->" and "&amp;"
			id : id,
			// original section title, including "<!-- -->",
			// not including "&amp;".
			title : section_title,
			// only for debug
			// parsed_title : parsed_title,

			// anchor : anchor.toString().trimEnd(),
			// display_text : display_text,

			// section.section_title.link.toString()
			toString : section_link_toString
		});
		// 用以獲得實際有效的 anchor 網頁錨點。 effect anchor: parsed.each_section()
		// and then section_title_token.link.id
		return link;
	}

	// --------------------------------------------------------------------------------------------

	/**
	 * 快速取得第一個標題 lead section / first section / introduction 序言 導入文 文字用。
	 * 
	 * TODO: expandtemplates for cascading protection
	 * 
	 * @example <code>

	CeL.wiki.lead_text(content);

	</code>
	 * 
	 * @param {String}wikitext
	 *            wikitext to parse
	 * 
	 * @returns {String}lead section wikitext 文字
	 * 
	 * @see [[mw:Extension:Labeled_Section_Transclusion#Transclude_the_introduction]]
	 *      {{subst:#lsth:page title}}
	 * 
	 * @see 文章的開頭部分[[WP:LEAD|導言章節]] (lead section, introduction),
	 *      [[en:Wikipedia:Hatnote]] 頂註
	 */
	function lead_text(wikitext) {
		var page_data;
		if (wiki_API.is_page_data(wikitext)) {
			page_data = wikitext;
			wikitext = wiki_API.content_of(page_data);
		}
		if (!wikitext || typeof wikitext !== 'string') {
			return wikitext;
		}

		var matched = wikitext.indexOf('\n=');
		if (matched >= 0) {
			wikitext = wikitext.slice(0, matched);
		}

		// match/去除一開始的維護模板/通知模板。
		// <del>[[File:file|[[link]]...]] 因為不容易除盡，放棄處理。</del>
		while (matched = wikitext.match(/^[\s\n]*({{|\[\[)/)) {
			// 注意: 此處的 {{ / [[ 可能為中間的 token，而非最前面的一個。但若是沒有中間的 token，則一定是第一個。
			matched = matched[1];
			// may use wiki_API.title_link_of()
			var index_end = wikitext.indexOf(matched === '{{' ? '}}' : ']]');
			if (index_end === NOT_FOUND) {
				library_namespace.debug('有問題的 wikitext，例如有首 "' + matched
						+ '" 無尾？ [' + wikitext + ']', 2, 'lead_text');
				break;
			}
			// 須預防 -{}- 之類 language conversion。
			var index_start = wikitext.lastIndexOf(matched, index_end);
			wikitext = wikitext.slice(0, index_start)
			// +2: '}}'.length, ']]'.length
			+ wikitext.slice(index_end + 2);
		}

		if (page_data) {
			page_data.lead_text = lead_text;
		}

		return wikitext.trim();
	}

	// ------------------------------------------

	/**
	 * 擷取出頁面簡介。例如使用在首頁優良條目簡介。
	 * 
	 * @example <code>

	CeL.wiki.extract_introduction(page_data).toString();

	</code>
	 * 
	 * @param {Array|Object}first_section
	 *            first section or page data
	 * @param {String}[title]
	 *            page title.
	 * 
	 * @returns {Undefined|Array} introduction object
	 * 
	 * @since 2019/4/10
	 */
	function extract_introduction(first_section, title) {
		var parsed;
		if (wiki_API.is_page_data(first_section)) {
			if (!title)
				title = wiki_API.title_of(first_section);
			parsed = page_parser(first_section).parse();
			parsed.each_section(function(section, index) {
				if (!section.section_title) {
					first_section = section;
				}
			});
		}
		if (!first_section)
			return;

		// --------------------------------------

		var introduction_section = [], representative_image;
		if (parsed) {
			introduction_section.page = parsed.page;
			introduction_section.title = title;
			// Release memory. 釋放被占用的記憶體。
			parsed = null;
		}
		introduction_section.toString = first_section.toString;

		// --------------------------------------

		var index = 0;
		for (; index < first_section.length; index++) {
			var token = first_section[index];
			// console.log(token);
			if (token.type === 'file') {
				// {String}代表圖像。
				if (!representative_image) {
					representative_image = token;
				}
				continue;
			}

			if (token.type === 'transclusion') {
				if (token.name === 'NoteTA') {
					// preserve 轉換用詞
					// TODO:
					// 因為該頁會嵌入首頁，所以請不要使用{{noteTA}}進行繁簡轉換；請用-{zh-hans:簡體字;zh-hant:繁體字}-進行單個詞彙轉換。
					// [[繁體字]] → [[繁體字|-{zh-hans:簡體字;zh-hant:繁體字}-]]
					introduction_section.push(token);
					continue;
				}

				if (token.name in {
					Cfn : true,
					Sfn : true,
					Sfnp : true,
					Efn : true,
					NoteTag : true,
					R : true,
					Clear : true
				}) {
					// Skip references
					continue;
				}

				// 抽取出代表圖像。
				if (!representative_image) {
					representative_image = token.parameters.image
							|| token.parameters.file
					// ||token.parameters['Image location']
					;
				}
				if (!representative_image) {
					token = token.toString();
					// console.log(token);
					var matched = token
							.match(/\|[^=]+=([^\|{}]+\.(?:jpg|png|svg|gif|bmp))[\s\n]*[\|}]/i);
					if (matched) {
						representative_image = matched[1];
					}
				}

				continue;
			}

			if ((token.type === 'tag' || token.type === 'tag_single')
					&& token.tag === 'ref') {
				// 去掉所有參考資料。
				continue;
			}

			if (token.type === 'table'
			// e.g., __TOC__
			|| token.type === 'switch') {
				// 去掉所有參考資料。
				continue;
			}

			if (!token.toString().trim()) {
				continue;
			}

			if (token.type === 'bold' || token.type === 'plain'
					&& token.toString().includes(title)) {
				// title_piece
				introduction_section.title_token = token;
			}

			if (token.type === 'link') {
				if (!token[0] && token[1]) {
					// 將[[#章節|文字]]的章節連結改為[[條目名#章節|文字]]的形式。
					token[0] = title;
				}
			}

			// console.log('Add token:');
			// console.log(token);
			introduction_section.push(token);
			if (introduction_section.title_token)
				break;
		}

		// ------------------

		// 已經跳過導航模板。把首段餘下的其他內容全部納入簡介中。
		while (++index < first_section.length) {
			token = first_section[index];
			// remove {{Notetag}}, <ref>
			if ((token.type === 'tag' || token.type === 'tag_single')
					&& token.tag === 'ref' || token.type === 'transclusion'
					&& token.name === 'Notetag')
				continue;
			introduction_section.push(token);
		}
		index = introduction_section.length;
		// trimEnd() 去頭去尾
		while (--index > 0) {
			if (introduction_section[index].toString().trim())
				break;
			introduction_section.pop();
		}

		// --------------------------------------

		// 首個段落不包含代表圖像。檢查其他段落以抽取出代表圖像。
		if (!representative_image) {
			parsed.each('file', function(token) {
				representative_image = token;
				return for_each_token.exit;
			});
		}

		// --------------------------------------

		if (typeof representative_image === 'string') {
			// assert: {String}representative_image

			// remove [[File:...]]
			representative_image = representative_image.replace(/^\[\[[^:]+:/i,
					'').replace(/\|[\s\S]*/, '').replace(/\]\]$/, '');
			representative_image = wiki_API.parse('[[File:'
					+ wiki_API.title_of(representative_image) + ']]');
		}
		introduction_section.representative_image = representative_image;

		return introduction_section;
	}

	// ------------------------------------------

	/**
	 * <code>

	CeL.wiki.sections(page_data);
	page_data.sections.forEach(for_sections, page_data.sections);

	CeL.wiki.sections(page_data)
	//
	.forEach(for_sections, page_data.sections);

	</code>
	 */

	// 將 wikitext 拆解為各 section list
	// get {Array}section list
	//
	// @deprecated: 無法處理 '<pre class="c">\n==t==\nw\n</pre>'
	// use for_each_section() instead.
	function deprecated_get_sections(wikitext) {
		var page_data;
		if (wiki_API.is_page_data(wikitext)) {
			page_data = wikitext;
			wikitext = wiki_API.content_of(page_data);
		}
		if (!wikitext || typeof wikitext !== 'string') {
			return;
		}

		var section_list = [], index = 0, last_index = 0,
		// 章節標題。
		section_title,
		// [ all title, "=", section title ]
		PATTERN_section = /\n(={1,2})([^=\n]+)\1\s*?\n/g;

		section_list.toString = function() {
			return this.join('');
		};
		// 章節標題list。
		section_list.title = [];
		// index hash
		section_list.index = Object.create(null);

		while (true) {
			var matched = PATTERN_section.exec(wikitext),
			// +1 === '\n'.length: skip '\n'
			// 使每個 section_text 以 "=" 開頭。
			next_index = matched && matched.index + 1,
			//
			section_text = matched ? wikitext.slice(last_index, next_index)
					: wikitext.slice(last_index);

			if (false) {
				// 去掉章節標題。
				section_text.replace(/^==[^=\n]+==\n+/, '');
			}

			library_namespace.debug('next_index: ' + next_index + '/'
					+ wikitext.length, 3, 'get_sections');
			// console.log(matched);
			// console.log(PATTERN_section);

			if (section_title) {
				// section_list.title[{Number}index] = {String}section title
				section_list.title[index] = section_title;
				if (section_title in section_list) {
					// 重複標題。
					library_namespace.debug('重複 section title ['
							+ section_title + '] 將僅取首個 section text。', 2,
							'get_sections');

				} else {
					if (!(section_title >= 0)) {
						// section_list[{String}section title] =
						// {String}wikitext
						section_list[section_title] = section_text;
					}

					// 不採用 section_list.length，預防 section_title 可能是 number。
					// section_list.index[{String}section title] = {Number}index
					section_list.index[section_title] = index;
				}
			}

			// 不採用 section_list.push(section_text);，預防 section_title 可能是 number。
			// section_list[{Number}index] = {String}wikitext
			section_list[index++] = section_text;

			if (matched) {
				// 紀錄下一段會用到的資料。

				last_index = next_index;

				section_title = matched[2].trim();
				// section_title = wiki_API.section_link(section_title).id;
			} else {
				break;
			}
		}

		if (page_data) {
			page_data.sections = section_list;
			// page_data.lead_text = lead_text(section_list[0]);
		}

		// 檢核。
		if (false && wikitext !== section_list.toString()) {
			// debug 用. check parser, test if parser working properly.
			throw new Error('get_sections: Parser error'
			//
			+ (page_data ? ': ' + wiki_API.title_link_of(page_data) : ''));
		}
		return section_list;
	}

	/**
	 * 為每一個章節(討論串)執行特定作業 for_section(section)
	 * 
	 * If you want to get **every** sections, please using
	 * `parsed..each('section_title', ...)` or traversals hierarchy of
	 * `parsed.child_section_titles` instead of enumerating `parsed.sections`.
	 * `parsed.sections` do NOT include titles like this:
	 * {{Columns-list|\n==title==\n...}}
	 * 
	 * CeL.wiki.parser.parser_prototype.each_section
	 * 
	 * TODO: 這會漏算沒有日期標示的簽名
	 * 
	 * @example <code>

	// TODO: includeing `<h2>...</h2>`, `==<h2>...</h2>==`

	parsed = CeL.wiki.parser(page_data);

	parsed.each_section(function(section, section_index) {
		if (!section.section_title) {
			// first_section = section;
			// Skip lead section / first section / introduction.
			return;
		}
		console.log('#' + section.section_title);
		console.log([ section.users, section.dates ]);
		console.log([section_index, section.toString()]);

		section.each('link', function(token) {
			console.log(token.toString());
		}, {
			// for section.users, section.dates
			get_users : true,
			// 採用 parsed 的 index，而非 section 的 index。
			// 警告: 會從 section_title 開始遍歷 traverse！
			use_global_index : true
		});

		return parsed.each.exit;
	}, {
		level_filter : [ 2, 3 ],
		get_users : true
	});

	parsed.each_section();
	parsed.sections.forEach(...);

	</code>
	 */
	function for_each_section(for_section, options) {
		options = library_namespace.new_options(options);
		// this.options is from function page_parser(wikitext, options)
		if (!options[KEY_SESSION] && this.options && this.options[KEY_SESSION]) {
			// set options[KEY_SESSION] for
			// `var date = wiki_API.parse.date(token, options);`
			options[KEY_SESSION] = this.options[KEY_SESSION];
		}

		// this: parsed
		var _this = this, page_title = this.page && this.page.title,
		// parsed.sections[0]: 常常是設定與公告區，或者放置維護模板/通知模板。
		all_root_section_list = this.sections = [];

		/**
		 * 2021/11/3 18:23:24: .parent_section 歸於 .parent_section_title，
		 * .subsections 歸於 .child_section_titles。
		 */
		// var section_hierarchy = [ this.subsections = [] ];
		//
		/** `section link anchor` in section_title_hash: had this title */
		var section_title_hash = Object.create(null);
		// this.section_title_hash = section_title_hash;

		// to test: 沒有章節標題的文章, 以章節標題開頭的文章, 以章節標題結尾的文章, 章節標題+章節標題。
		// 加入 **上一個** section, "this_section"
		function add_root_section(next_section_title_index) {
			// assert: _this.type === 'plain'
			// section_title === parsed[section.range[0] - 1]
			var this_section_title_index = all_root_section_list.length > 0 ? all_root_section_list
					.at(-1).range[1]
					: undefined,
			// range: 本 section inner 在 root parsed 中的 index.
			// parsed[range[0]] to parsed[range[1] - 1]
			range = [ this_section_title_index >= 0
			// +1: 這個範圍不包括 section_title。
			? this_section_title_index + 1 : 0, next_section_title_index ],
			//
			section = _this.slice(range[0], range[1]);
			if (this_section_title_index >= 0) {
				// page_data.parsed[section.range[0]-1]===section.section_title
				section.section_title = _this[this_section_title_index];
			}
			// 添加常用屬性與方法。
			// TODO: using Object.defineProperties(section, {})
			Object.assign(section, {
				type : 'section',
				// section = parsed.slice(range[0], range[1]);
				// assert: parsed[range[0]] === '\n',
				// is the tail '\n' of "==title== "
				range : range,
				each : for_each_token,
				replace_by : replace_section_by,
				toString : _this.toString
			});
			section[wiki_API.KEY_page_data] = _this.page;
			all_root_section_list.push(section);
		}

		// max_section_level
		var level_filter
		// 要篩選的章節標題層級 e.g., {level_filter:[1,2]}
		= Array.isArray(options.level_filter)
		// assert: 必須皆為 {Number}
		? (Math.max.apply(null, options.level_filter) | 0) || 2
		// e.g., { level_filter : 3 }
		: 1 <= options.level_filter && (options.level_filter | 0)
		// default: level 2. 僅處理階級2的章節標題。
		|| 2;

		// get topics / section title / stanza title using for_each_token()
		// 讀取每一個章節的資料: 標題,內容
		// TODO: 不必然是章節，也可以有其它不同的分割方法。
		// TODO: 可以讀取含入的子頁面
		this.each('section_title', function(section_title_token,
		// section 的 index of parsed。
		section_title_index, parent_token) {
			var section_title_link = section_title_token.link;
			if (page_title) {
				// [0]: page title
				section_title_link[0] = page_title;
			}
			var id = section_title_link.id;
			if (id in section_title_hash) {
				// The index of 2nd title starts from 2
				var duplicate_NO = 2, base_anchor = id;
				// 有多個完全相同的 anchor 時，後面的會加上 "_2", "_3", ...。
				// [[w:en:Help:Section#Section linking]]
				while ((id = base_anchor + ' ' + duplicate_NO)
				// 測試是否有重複的標題 duplicated section title。
				in section_title_hash) {
					duplicate_NO++;
				}
				if (!section_title_link.duplicate_NO) {
					section_title_link.duplicate_NO = duplicate_NO;
					// hack for [[w:en:WP:DUPSECTNAME|Duplicate section names]]
					if (Array.isArray(section_title_link[1]))
						section_title_link[1].push('_' + duplicate_NO);
					else
						section_title_link[1] += '_' + duplicate_NO;
					// 用以獲得實際有效的 anchor 網頁錨點。 effect anchor
					section_title_link.id = id;
					// console.trace(section_title_token);
				}
			}
			// 登記已有之 anchor。
			section_title_hash[id] = null;

			var level = section_title_token.level;
			// console.trace([ level, level_filter, id ]);
			if (parent_token === _this
			// ↑ root sections only. Do not include
			// {{Columns-list|\n==title==\n...}}

			// level_filter: max_section_level
			&& level <= level_filter) {
				// console.log(section_title_token);
				add_root_section(section_title_index);
			} else {
				// library_namespace.warn('Ignore ' + section_title_token);
				// console.log([ parent_token === _this, level ]);
			}

			// ----------------------------------

			if (false) {
				// 此段已搬到 parse_section() 中。
				if (section_hierarchy.length > level) {
					// 去尾。
					section_hierarchy.length = level;
				}
				section_hierarchy[level] = section_title_token;
				// console.log(section_hierarchy);
				while (--level >= 0) {
					// 注意: level 1 的 subsections 可能包含 level 3!
					var parent_section = section_hierarchy[level];
					if (parent_section) {
						if (parent_section.subsections) {
							if (false) {
								library_namespace.log(parent_section + ' → '
										+ section_title_token);
							}
							parent_section.subsections
									.push(section_title_token);
							section_title_token
							//
							.parent_section = parent_section;
						} else {
							// assert: is root section list, parent_section ===
							// this.subsections === section_hierarchy[0]
							parent_section.push(section_title_token);
						}
						break;
					}
				}
				section_title_token.subsections = [];
			}

		}, Object.assign({
			// 不可只檢查第一層之章節標題。就算在 template 中的 section title 也會被記入 TOC。
			// e.g.,
			// [[w:en:Wikipedia:Vital_articles/Level/5/Everyday_life/Sports,_games_and_recreation]]
			// max_depth : 1,

			modify : false
		},
		// options.for_each_token_options
		options));
		// add the last section
		add_root_section(this.length);
		if (all_root_section_list[0].range[1] === 0) {
			// 第一個章節為空。 e.g., 以章節標題開頭的文章。
			// 警告：此時應該以是否有 section.section_title 來判斷是否為 lead_section，
			// 而非以 section_index === 0 判定！
			all_root_section_list.shift();
		}

		// ----------------------------

		// 讀取每一個章節的資料: 參與討論者,討論發言的時間
		// 統計各討論串中簽名的次數和發言時間。
		// TODO: 無法判別先日期，再使用者名稱的情況。 e.g., [[w:zh:Special:Diff/54030530]]
		if (options.get_users) {
			all_root_section_list.forEach(function(section) {
				// console.log(section);
				// console.log('section: ' + section.toString());

				// [[WP:TALK]] conversations, dialogues, discussions, messages
				// section.discussions = [];
				// 發言用戶名順序
				section.users = [];
				// 發言時間日期
				section.dates = [];
				for (var section_index = 0,
				// list buffer
				buffer = [], this_user, token;
				// Only check the first level. 只檢查第一層。
				// TODO: parse [[Wikipedia:削除依頼/暫定2車線]]: <div>...</div>
				// check <b>[[User:|]]</b>
				section_index < section.length || buffer.length > 0;) {
					token = buffer.length > 0 ? buffer.shift()
							: section[section_index++];
					while (/* token && */token.type === 'list') {
						var _buffer = [];
						token.forEach(function(list_item) {
							// 因為使用習慣問題，每個列表必須各別計算使用者留言次數。
							_buffer.append(list_item);
						});
						token = _buffer.shift();
						Array.prototype.unshift.apply(buffer, _buffer);
					}

					if (typeof token === 'string') {
						// assert: {String}token
						if (!token.trim() && token.includes('\n\n')) {
							// 預設簽名必須與日期在同一行。不可分段。
							this_user = null;
							continue;
						}

					} else {
						// assert: {Array}token
						token = token.toString();
						// assert: wikiprojects 計畫的簽名("~~~~~")必須要先從名稱再有日期。
						// 因此等到出現日期的時候再來處理。
						// 取得依照順序出現的使用者序列。
						var user_list = wiki_API.parse.user.all(token, true);
						if (false && section.section_title
								&& section.section_title.title.includes('')) {
							console.log('token: ' + token);
							console.log('user_list: ' + user_list);
						}

						// 判別一行內有多個使用者名稱的情況。
						// 當一行內有多個使用者名稱的情況，會取最後一個簽名。
						if (user_list.length > 0) {
							this_user = user_list.at(-1);
							// ↑ 這個使用者名稱可能為 bot。
							if (options.ignore_bot
									&& PATTERN_BOT_NAME.test(this_user)) {
								this_user = null;
							}
						}

						// --------------------------------
						if (false) {
							// 以下為取得多個使用者名稱的情況下，欲判別出簽名的程式碼。由於現在僅簡單取用最後一個簽名，已經被廢棄。

							if (user_list.length > 1
							// assert: 前面的都只是指向機器人頁面的連結。
							&& /^1+0$/.test(user_list.map(function(user) {
								return PATTERN_BOT_NAME.test(user) ? 1 : 0;
							}).join(''))) {
								user_list = user_list.slice(-1);
							}

							// 因為現在有個性化簽名，需要因應之。應該包含像[[w:zh:Special:Diff/48714597]]的簽名。
							if (user_list.length === 1) {
								this_user = user_list[0];
							} else {
								// 同一個token卻沒有找到，或找到兩個以上簽名，因此沒有辦法準確判別到底哪一個才是真正的留言者。
								// console.log(token);
								// console.log(token.length);
								// console.log(this_user);
								if (user_list.length >= 2
								// 若是有其他非字串的token介於名稱與日期中間，代表這個名稱可能並不是發言者，那麼就重設名稱。
								// 簽名長度不應超過255位元組。
								|| token.length > 255 - '[[U:n]]'.length) {
									// 一行內有多個使用者名稱的情況，取最後一個？
									// 例如簽名中插入自己的舊名稱或者其他人的情況
									this_user = null;
								}
								if (!this_user) {
									continue;
								}
							}
						}

						// 繼續解析日期，預防有類似 "<b>[[User:]] date</b>" 的情況。
					}

					if (!this_user) {
						continue;
					}
					var date = wiki_API.parse.date(token, options);
					// console.log([ this_user, date ]);
					if (!date
					// 預設不允許未來時間。
					|| !options.allow_future && !(Date.now() - date > 0)) {
						continue;
					}
					// 同時添加使用者與日期。
					section.dates.push(date);
					section.users.push(this_user);
					// reset
					this_user = null;
				}

				var min_timevalue, max_timevalue;
				// console.trace(section.dates);
				section.dates.forEach(function(date) {
					if (!date || isNaN(date = +date)) {
						return;
					}
					if (!(min_timevalue <= date))
						min_timevalue = date;
					else if (!(max_timevalue >= date))
						max_timevalue = date;
				});
				// console.trace([ min_timevalue, max_timevalue ]);
				if (min_timevalue) {
					section.dates.min_timevalue = min_timevalue;
					section.dates.max_timevalue = max_timevalue
							|| min_timevalue;
				}
				if (false) {
					section.dates.max_timevalue = Math.max.apply(null,
							section.dates.map(function(date) {
								return date.getTime();
							}));
				}

				if (false) {
					parsed.each_section();
					// scan / traversal section templates:
					parsed.each.call(parsed.sections[section_index],
							'template', function(token) {
								;
							});
				}

				if (false) {
					// 首位發言者, 發起人 index
					section.initiator_index = parsed.each_section.index_filter(
							section, true, 'first');
				}

				// 最後發言日期 index
				var last_update_index = for_each_section.index_filter(section,
						true, 'last');
				// section.users[section.last_update_index] = {String}最後更新發言者
				// section.dates[section.last_update_index] = {Date}最後更新日期
				if (last_update_index >= 0) {
					section.last_update_index = last_update_index;
				}
				// 回應數量
				section.replies
				// 要先有不同的人發言，才能算作有回應。
				= section.users.unique().length >= 2 ? section.users.length - 1
						: 0;
				// console.log('users: ' + section.users);
				// console.log('replies: ' + section.replies);
			});
		}

		// console.trace(for_section);
		if (typeof for_section === 'function') {
			level_filter
			// 要篩選的章節標題層級 e.g., {level_filter:[1,2]}
			= Array.isArray(options.level_filter) ? options.level_filter
			// e.g., { level_filter : 3 }
			: 1 <= options.level_filter && (options.level_filter | 0)
			// default: level 2. 僅處理階級2的章節標題。
			|| 2;

			var section_filter = function(section) {
				var section_title = section.section_title;
				if (!section_title)
					return true;
				if (Array.isArray(level_filter))
					return level_filter.includes(section_title.level);
				return level_filter === section_title.level;
			};

			// TODO: return (result === for_each_token.remove_token)
			// TODO: move section to another page
			if (library_namespace.is_async_function(for_section)) {
				// console.log(all_root_section_list);
				return Promise.allSettled(all_root_section_list.map(function(
						section, section_index) {
					return section_filter(section)
							&& for_section.apply(this, arguments);
				}));

				// @deprecated
				all_root_section_list
						.forEach(function(section, section_index) {
							if (false) {
								console.log('Process: ' + section.section_title
								// section_title.toString(true): get inner
								&& section.section_title.toString(true));
							}
							if (!section_filter(section))
								return;
							return eval('(async function() {'
									+ ' try { return await for_section(section, section_index); }'
									+ ' catch(e) { library_namespace.error(e); }'
									+ ' })();');
						});
			} else {
				// for_section(section, section_index)
				all_root_section_list.some(function(section) {
					// return parsed.each.exit;
					return section_filter(section) && (for_each_token.exit ===
					// exit if the result calls exit
					for_section.apply(this, arguments));
				}, this);
			}
		}
		return this;
	}

	function replace_section_by(wikitext, options) {
		options = library_namespace.setup_options(options);
		var parsed = this[wiki_API.KEY_page_data].parsed;
		// assert: parsed[range[0]] === '\n',
		// is the tail '\n' of "==title== "
		var index = this.range[0];
		if (typeof wikitext === 'string')
			wikitext = wikitext.trim();
		if (options.preserve_section_title === undefined
		// 未設定 options.preserve_section_title，則預設若有 wikitext，則保留 section title。
		? !wikitext : !options.preserve_section_title) {
			// - 1: point to section_title
			index--;
		}
		if (wikitext) {
			parsed[index] += wikitext + '\n\n';
		} else {
			parsed[index] = '';
		}
		while (++index < this.range[1]) {
			// 清空到本章節末尾。
			parsed[index] = '';
		}
	}

	// var section_index_filter =
	// CeL.wiki.parser.parser_prototype.each_section.index_filter;
	for_each_section.index_filter = function filter_users_of_section(section,
			filter, type) {
		// filter: user_name_filter
		var _filter;
		if (typeof filter === 'function') {
			_filter = filter;
		} else if (Array.isArray(filter)) {
			_filter = function(user_name) {
				// TODO: filter.some()
				return filter.includes(user_name);
			};
		} else if (library_namespace.is_Object(filter)) {
			_filter = function(user_name) {
				return user_name in filter;
			};
		} else if (library_namespace.is_RegExp(filter)) {
			_filter = function(user_name) {
				return filter.test(user_name);
			};
		} else if (typeof filter === 'string') {
			_filter = function(user_name) {
				return filter === user_name;
			};
		} else if (filter === true) {
			_filter = function() {
				return true;
			};
		} else {
			throw 'for_each_section.index_filter: Invalid filter: ' + filter;
		}

		// ----------------------------

		if (!type) {
			var user_and_date_indexs = [];
			section.users.forEach(function(user_name, index) {
				if (_filter(user_name)) {
					user_and_date_indexs.push(index);
				}
			});

			return user_and_date_indexs;
		}

		// ----------------------------

		var index_specified, date_specified;

		section.dates.forEach(function(date, index) {
			// assert: {Date}date is valid
			date = date.getTime();
			if (type === 'first' ? date_specified <= date : type === 'last'
					&& date < date_specified) {
				return;
			}

			var user_name = section.users[index];
			if (_filter(user_name)) {
				date_specified = date;
				index_specified = index;
			}
		});

		return index_specified;
	};

	// ------------------------------------------------------------------------

	// CeL.wiki.parse.anchor.normalize_anchor()
	function normalize_anchor(anchor) {
		return anchor
		// '&#39;' → "'"
		&& library_namespace.HTML_to_Unicode(anchor.toString())
		// 警告: 實際上的網頁錨點應該要 .replace(/ /g, '_')
		// 但由於 wiki 頁面中使用[[#P Q]]與[[#P_Q]]效果相同，都會產生<a href="#P_Q">，因此採用"P Q"。
		.replace(/_/g, ' ')
		// " a " → "a"
		.trim();
	}
	get_all_anchors.normalize_anchor = normalize_anchor;

	if (false) {
		wiki_session.register_redirects(
				CeL.wiki.parse.anchor.essential_templates, {
					namespace : 'Template'
				});

		// ...

		var anchor_list = CeL.wiki.parse.anchor(wikitext, CeL.wiki
				.add_session_to_options(wiki_session));

		// ------------------

		// bad method: work without session
		var anchor_list = CeL.wiki.parse.anchor(wikitext);
	}

	// CeL.wiki.parse.anchor()
	function get_all_anchors(wikitext, options) {
		if (!wikitext) {
			return [];
		}

		// const
		var anchor_hash = Object.create(null);
		function register_anchor(anchor, token) {
			anchor = normalize_anchor(anchor);
			if (typeof anchor === 'string' && anchor.length > 1000) {
				// console.trace(token);
				// console.trace(anchor);
				throw new Error('Invalid anchor!');
			}
			// 以首個出現的為準。
			if (anchor && !(anchor in anchor_hash)) {
				anchor_hash[anchor] = token;
			}
		}

		// options: pass session. for options.language
		// const
		/** {Array} parsed page content 頁面解析後的結構。 */
		var parsed = wiki_API.parser(wikitext, options).parse();
		if (false) {
			library_namespace.assert([ wikitext, parsed.toString() ],
					'wikitext parser check for wikitext');
			console.log(parsed);
		}

		var session = wiki_API.session_of_options(options);
		// console.log(wiki_API.site_name(session));

		parsed.each_section();
		parsed.each('section_title', function(section_title_token) {
			// console.log(section_title_token);
			// const
			var section_title_link = section_title_token.link;
			// TODO: 忽略包含不合理元素的編輯，例如 url。
			if (!section_title_link.imprecise_tokens) {
				// console.log(section_title_link);
				// `section_title_token.title` will not transfer "[", "]"
				register_anchor(section_title_link.id, section_title_token);

			} else if (section_title_link.tokens_maybe_handlable) {
				// exclude "=={{T}}=="
				library_namespace.warn('Title maybe handlable 請檢查是否可處理此標題: '
						+ section_title_token.title);
				console.log(section_title_link.tokens_maybe_handlable);
				console.trace(section_title_token);
			} else {
				library_namespace
						.warn('若包含的是模板，請檢查是否可於 template_functions 添加此標題中的模板: '
								+ section_title_token.title);
				console.trace(section_title_link);
			}
		});

		var _options = Object.clone(options);
		if (options)
			delete _options.print_anchors;
		// 處理包含於 template 中之 anchor 網頁錨點 (section title / id="" / name="")
		parsed.each('transclusion', function(template_token) {
			// console.trace([ template_token.name, template_token.expand ]);
			if (template_token.expand) {
				// 處理包括 {{Anchor}}, {{Anchors}}, {{Visible anchor}}, {{term}}
				// const
				var anchor = template_token.expand();
				if (!anchor || typeof anchor.toString !== 'function')
					return;
				anchor = get_all_anchors(anchor.toString(), _options);
				// console.trace(anchor);
				anchor.forEach(function(anchor) {
					register_anchor(anchor, template_token);
				});
				return;
			}

			// e.g., {{Cite book|...|ref=anchor}} @ [[日本の原子爆弾開発]]
			// {{Cite journal|...|ref=anchor}}
			if (/^Cite \w+/.test(template_token.name) || (session || wiki_API)
			// {{Citation|...|ref=anchor}}
			.is_template('Citation', template_token, options)) {
				// console.trace(JSON.stringify(template_token.name));
				var parameters = template_token.parameters;
				var anchor = parameters.ref;
				// console.trace(JSON.stringify(anchor));
				if (anchor) {
					if (anchor !== 'none') {
						// e.g., {{SfnRef|...}}
						anchor = wiki_API.wikitext_to_plain_text(anchor);
						register_anchor(anchor, template_token);
					}
					return;
				}

				// https://en.wikipedia.org/wiki/Template:Citation/doc#Anchors_for_Harvard_referencing_templates
				anchor = '';
				if (parameters.last)
					anchor += parameters.last.toString().trim();
				// @see [[w:en:Module:Citation/CS1]]
				// local function make_citeref_id (namelist, year)
				for (var index = 1; index <= 4; index++) {
					if (parameters['last' + index])
						anchor += parameters['last' + index].toString().trim();
				}

				var year = parameters.year;
				if (!year) {
					year = parameters.date;
					// TODO: extract year
					year = year && year.toString().match(/[12]\d{3}/);
					if (year)
						year = year[0];
				}
				if (year)
					anchor += year.toString().trim();

				if (anchor)
					register_anchor('CITEREF' + anchor, template_token);
				return;
			}

			if (false && options && options.print_anchors) {
				library_namespace
						.warn('get_all_anchors: Cannot expand template: '
								+ template_token);
			}
		});

		// 處理 <span class="anchor" id="anchor"></span>, <ref name="anchor">,
		// id in table cell attribute
		parsed.each('tag_attributes', function(attribute_token, index, parent) {
			// console.log(parent);
			// console.trace(attribute_token);
			// console.log(attribute_token.attributes);
			// const
			var anchor = attribute_token.attributes.id
					|| attribute_token.attributes.name;
			// console.trace(anchor);
			// <ref name="..."> 會轉成 id="cite_re-..."
			if (parent.tag ? parent.tag.toLowerCase() !== 'ref'
			// e.g., @ [[w:en:Daniel Ricciardo]]
			: parent.type === 'table_attributes') {
				// e.g., <span id="anchor">, <div id="anchor">
				if (Array.isArray(anchor)) {
					if (anchor.type !== 'plain') {
						// token = _set_wiki_type([ token ], 'plain');
						anchor = [ anchor ];
					}
					// e.g., {{Wikicite|ref={{sfnref|...}} }} .expand() 之後，
					// 解析 id="{{sfnref|...}}"
					for_each_token.call(anchor, 'transclusion', function(
							template_token, index, parent) {
						// replace by expanded text
						if (template_token.expand)
							parent[index] = template_token.expand();
					}, _options);
					anchor = anchor.map(function(token) {
						if (token.type === 'magic_word_function'
						// && token.is_magic_word
						&& token.name === 'ANCHORENCODE') {
							return token[1];
						}
						return token;
					});
				}
				if (false && /{{/.test(normalize_anchor(anchor))) {
					// Should not go to here.
					console.trace([ anchor, attribute_token ]);
				}
				register_anchor(anchor, attribute_token);
			}
		});

		var anchor_list = Object.keys(anchor_hash);
		if (options && options.print_anchors) {
			library_namespace.info('get_all_anchors: anchors:');
			console.trace(anchor_list.length > 100 ? JSON
					.stringify(anchor_list) : anchor_list);
		}
		return anchor_list;
	}

	// CeL.wiki.parse.anchor.essential_templates
	// required, indispensable
	get_all_anchors.essential_templates = [ 'Citation' ];

	// ------------------------------------------------------------------------

	// export 導出.
	// @static
	Object.assign(wiki_API, {
		lead_text : lead_text,
		extract_introduction : extract_introduction,
		// sections : deprecated_get_sections,

		section_link : section_link,
		section_link_escape : section_link_escape,

		// HTML_to_wikitext : HTML_to_wikitext,
		wikitext_to_plain_text : wikitext_to_plain_text
	});

	Object.assign(wiki_API.parser.parser_prototype, {
		each_section : for_each_section
	});

	Object.assign(wiki_API.parse, {
		anchor : get_all_anchors
	});

	// --------------------------------------------------------------------------------------------

	// 不設定(hook)本 module 之 namespace，僅執行 module code。
	return library_namespace.env.not_to_extend_keyword;
}

});
// CeL.application.net.wiki.parser.misc
/**
 * @name CeL function for MediaWiki (Wikipedia / 維基百科): parse misc 歸屬於
 *       wiki_API.parse === CeL.application.net.wiki.parser.wikitext
 * 
 * @fileoverview 本檔案包含了 MediaWiki 自動化作業用程式庫的子程式庫。
 * 
 * TODO:<code>

</code>
 * 
 * @since 2021/12/14 18:53:43 拆分自 CeL.application.net.wiki.parser
 */

// More examples: see /_test suite/test.js
// Wikipedia bots demo: https://github.com/kanasimi/wikibot
'use strict';
// 'use asm';

// --------------------------------------------------------------------------------------------

// 不採用 if 陳述式，可以避免 Eclipse JSDoc 與 format 多縮排一層。
typeof CeL === 'function' && CeL.run({
	// module name
	name : 'application.net.wiki.parser.misc',

	require : 'application.net.wiki.parser.wikitext.',

	// 設定不匯出的子函式。
	no_extend : 'this,*',

	// 為了方便格式化程式碼，因此將 module 函式主體另外抽出。
	code : 

function module_code(library_namespace) {

	// requiring
	var wiki_API = library_namespace.application.net.wiki;
	// @inner
	var PATTERN_URL_prefix = wiki_API.PATTERN_URL_prefix;

	// --------------------------------------------------------------------------------------------

	// @see Nullish coalescing operator (??)
	// exclude NaN, null, undefined
	function is_valid_parameters_value(value) {
		return value
		// e.g., .text === ''
		// String(value) === ''
		|| value === '' || value === 0;
	}

	wiki_API.is_valid_parameters_value = is_valid_parameters_value;

	// 僅添加有效的 parameters。基本上等同於 Object.assign()，只是不添加無效值。
	function set_template_object_parameters(template_object, parameters,
			value_mapping) {
		if (!template_object)
			template_object = Object.create(null);

		for ( var key in parameters) {
			var value = parameters[key];
			if (value_mapping)
				value = value_mapping[value];
			// 不添加無效值。
			if (is_valid_parameters_value(value)) {
				template_object[key] = value;
			}
		}

		return template_object;
	}

	/**
	 * 將 parameters 形式的 object 轉成 wikitext。
	 * 
	 * @example<code>

	CeL.wiki.parse.template_object_to_wikitext('t', {
		1 : 'v1',
		2 : 'v2',
		p1 : 'vp1',
		p2 : 'vp2'
	}) === '{{t|v1|v2|p1=vp1|p2=vp2}}';

	CeL.wiki.parse.template_object_to_wikitext('t', {
		1 : 'v1',
		2 : 'v2',
		4 : 'v4',
		p1 : 'vp1'
	}) === '{{t|v1|v2|4=v4|p1=vp1}}';

	CeL.wiki.parse.template_object_to_wikitext('t', {
		1 : 'v1',
		2 : 'v2',
		p1 : 'vp1',
		q2 : 'vq2'
	}, function(text_array) {
		return text_array.filter(function(text, index) {
			return !/^q/.test(text);
		});
	}) === '{{t|v1|v2|p1=vp1}}';

	 </code>
	 * 
	 * @param {String}template_name
	 *            template name
	 * @param {Object}template_object
	 *            parameters 形式的 object。<br />
	 *            e.g., { '1': value, '2': value, parameter1 : value1 }
	 * @param {Object}[post_processor]
	 *            post-processor for text_array
	 */
	function template_object_to_wikitext(template_name, template_object,
			post_processor) {
		var text_array = [ '{{' + template_name ], index = 1;

		while (true) {
			var value = template_object[index];
			if (!is_valid_parameters_value(value)) {
				break;
			}

			if (false && typeof value !== 'string') {
				value = typeof value.toString === 'function' ? value.toString()
						: String(value);
			}
			value = String(value);

			if (value.includes('='))
				value = index + '=' + value;

			// text_array.push(value); index++;
			text_array[index++] = value;
		}

		for ( var key in template_object) {
			if (key in text_array)
				continue;
			var value = template_object[key];
			if (is_valid_parameters_value(value)) {
				value = String(value);
				if (value.includes('\n') && !text_array.at(-1).endsWith('\n')) {
					text_array[text_array.length - 1] += '\n';
				}
				text_array.push(key + '=' + value);
			}
		}

		if (post_processor) {
			// text_array = [ '{{template_name', 'parameters', ... ]
			// 不包含 '}}' !
			text_array = post_processor(text_array);
		}

		return text_array.join('|') + '}}';
	}

	// ------------------------------------------

	var KEY_remove_parameter = {
		remove_parameter : true
	};
	replace_parameter.KEY_remove_parameter = KEY_remove_parameter;

	function to_parameter_name_only(parameter_name_pairs) {
		var config = Object.create(null);
		Object.keys(parameter_name_pairs)
		//
		.forEach(function(from_parameter_name) {
			var to_parameter_name = parameter_name_pairs[from_parameter_name];
			if (typeof to_parameter_name === 'string'
			//
			|| typeof to_parameter_name === 'number') {
				config[from_parameter_name] = function(value) {
					var config = Object.create(null);
					config[to_parameter_name] = value;
					return config;
				};
			} else if (to_parameter_name === KEY_remove_parameter) {
				config[from_parameter_name] = to_parameter_name;
			} else {
				library_namespace.error(
				//
				'to_parameter_name_only: Replace to invalid parameter name: '
				//
				+ to_parameter_name);
			}
		});
		return config;
	}

	// @inner
	function mode_space_of_parameters(template_token, parameter_name) {
		if (false) {
			template_token.forEach(function(parameter, index) {
				if (index === 0)
					return;
				// TODO: 分析模板參數的空白模式典型。
				// return |$0parameter$1=$2value$3|
			});
		}

		var index = template_token.index_of[parameter_name];
		if (!(index >= 0)) {
			// 不存在此 parameter name 可 replace。
			return;
		}

		var this_parameter = template_token[index];
		// this_parameter = [ key, " = ", value ] || [ "", "", value ]

		// 判斷上下文使用的 spaces。
		var spaces = this_parameter[0];
		if (Array.isArray(spaces)) {
			spaces = spaces[0];
		}
		spaces = typeof spaces === 'string' ? spaces.match(/^\s*/)[0] : '';

		/**
		 * 保留屬性質結尾的排版:多行保留行先頭的空白，但不包括末尾的空白。單行的則留最後一個空白。 preserve spaces for:
		 * <code>

		{{T
		 | 1 = 1
		 | 2 = 2
		 | 3 = 3
		}}

		</code>
		 */
		// var spaces = template_token[index].toString().match(/(\n *| ?)$/);
		//
		// parameter: spaces[0] + key + spaces[1] + value + spaces[2]
		spaces = [ spaces,/* " = " */this_parameter[1],
		/* tail spaces */
		this_parameter[3] || '' ];

		return spaces;
	}

	/**
	 * 將 wiki_API.parse === parse_wikitext() 獲得之 template_token 中的指定 parameter
	 * 換成 replace_to。 replace_template_parameter(), set_parameter(),
	 * modify_template()
	 * 
	 * WARNING: 若不改變 parameter name，只變更 value，<br />
	 * 則應該使用 { value_only: true }，<br />
	 * 或使用 'parameter name = value' 而非僅 'value'。
	 * 
	 * @example<code>

	// replace value only
	token = CeL.wiki.parse('{{t|parameter_name=12|parameter_name_2=32}}');
	changed_count = CeL.wiki.parse.replace_parameter(token, {
		parameter_name : 'replace to value',
		parameter_name_2 : 'replace to value_2',
	}, 'value_only');
	token.toString();

	// replace value and parameter name
	token = CeL.wiki.parse('{{t|parameter_name=12|parameter_name_2=32}}');
	changed_count = CeL.wiki.parse.replace_parameter(token, {
		parameter_name : 'parameter name 3=replace to value',
		parameter_name_2 : 'parameter name 4=replace to value_2',
	});
	token.toString();

	// force_add
	token = CeL.wiki.parse('{{t}}');
	CeL.wiki.parse.replace_parameter(token, {
		parameter_name : 'replace_to_value',
		parameter_name_2 : 'replace_to_value_2',
	}, { value_only : true, force_add : true, append_key_value : true });
	token.toString();

	// replace value only: old style 舊格式
	CeL.wiki.parse.replace_parameter(token, parameter_name,
		{ parameter_name : replace_to_value }
	);

	// {{T|p=v|n=v}} → {{T|V|n=v}}
	CeL.wiki.parse.replace_parameter(token, 'p', 'V');
	// replace `replace_from_parameter_name = *` to "replace to wikitext"
	CeL.wiki.parse.replace_parameter(token, replace_from_parameter_name,
		"replace to wikitext"
	);

	// replace parameter name only
	CeL.wiki.parse.replace_parameter(token, replace_from_parameter_name,
		value => {
			return { replace_to_parameter_name : value };
		}
	);
	CeL.wiki.parse.replace_parameter(token, {
		parameter_1 : replace_to_parameter_1,
		parameter_2 : replace_to_parameter_2,
	}, 'parameter_name_only');

	// replace parameter name: 不在乎 spaces 的版本。
	CeL.wiki.parse.replace_parameter(token, replace_from_parameter_name,
		value => replace_from_parameter_name + '=' + value
	);

	// replace 1 parameter to 2 parameters
	CeL.wiki.parse.replace_parameter(token, replace_from_parameter_name,
		original_value => {
			parameter_1 : value_1,
			parameter_2 : original_value,
		}
	);

	// multi-replacement
	CeL.wiki.parse.replace_parameter(token, {
		replace_from_1 : replace_to_config_1,
		replace_from_2 : replace_to_config_2,
	});

	 </code>
	 * 
	 * @see 20190912.fix_Infobox_company.js, 20190913.move_link.js
	 * 
	 * @param {Array}template_token
	 *            由 wiki_API.parse === parse_wikitext() 獲得之 template_token
	 * @param {String}parameter_name
	 *            指定屬性名稱 parameter name
	 * @param {String|Number|Array|Object|Function}replace_to
	 *            要換成的屬性名稱加上賦值。 e.g., "parameter name = value" ||<br />
	 *            {parameter_1 = value, parameter_2 = value} ||<br />
	 *            function replace_to(value, parameter_name, template_token)
	 * 
	 * @returns {ℕ⁰:Natural+0} count of templates successful replaced
	 */
	function replace_parameter(template_token, parameter_name, replace_to) {
		function convert_replace_to(parameter_name) {
			if (typeof replace_to === 'function') {
				// function replace_to(value, parameter_name, template_token) {
				// return 'replace to value'; }
				replace_to = replace_to(
						template_token.parameters[parameter_name],
						parameter_name, template_token);
			}
			return replace_to;
		}

		if (library_namespace.is_Object(parameter_name)) {
			// treat `replace_to` as options
			var options = library_namespace.setup_options(replace_to);
			// Replace parameter name only, preserve value.
			if (options.parameter_name_only) {
				parameter_name = to_parameter_name_only(parameter_name);
			}

			var operated_template_count = 0, latest_OK_key, key_of_spaces, spaces, next_insert_index;
			for ( var replace_from in parameter_name) {
				replace_to = parameter_name[replace_from];
				if (convert_replace_to(replace_from) === undefined) {
					continue;
				}
				var index = template_token.index_of[replace_from];
				if (!(index >= 1)) {
					// 不存在此 parameter name 可 replace。
					if (options.value_only && options.force_add) {
						if ((!key_of_spaces || key_of_spaces !== latest_OK_key)
						//
						&& (key_of_spaces = options.append_key_value
						//
						&& latest_OK_key
						// mode_parameter
						|| Object.keys(template_token.parameters).pop())) {
							spaces = mode_space_of_parameters(template_token,
									key_of_spaces);
							// console.log(spaces);
						}
						replace_to = spaces && spaces[1] ? spaces[0]
								+ replace_from + spaces[1] + replace_to
								+ spaces[2] : replace_from + '=' + replace_to;
						if (options.append_key_value && next_insert_index >= 1) {
							// 警告: 這會使 template_token[next_insert_index]
							// 不合正規格式！但能插入在最接近前一個插入點之後。
							template_token[next_insert_index] += '|'
									+ replace_to;
						} else {
							template_token.push(replace_to);
						}
						operated_template_count = 1;
					}
					continue;
				}

				var skip_replacement;
				if (options.value_only
						&& (typeof replace_to === 'string' || typeof replace_to === 'number')) {
					var this_parameter = template_token[template_token.index_of[replace_from]];
					// keep spaces and parameter name.
					// e.g., "| key<!---->=1 |" → "| key<!---->=2 |"
					// NOT: "| key<!---->=1 |" → "| key=2 |"
					this_parameter[2] = replace_to;
					skip_replacement = 1;

					// @deprecated:
					// replace_to = { [_replace_from] : replace_to };
					// replace_to = Object.create(null);
					// replace_to[replace_from] = replace_to;
				}

				latest_OK_key = replace_from;
				next_insert_index = index;
				// console.trace([ replace_from, replace_to ]);
				if (skip_replacement) {
					operated_template_count += skip_replacement;
					continue;
				}
				operated_template_count += replace_parameter(template_token,
						replace_from, replace_to);
			}
			return operated_template_count;
		}

		// --------------------------------------

		var index = template_token.index_of[parameter_name];
		if (!(index >= 1)) {
			// 不存在此 parameter name 可 replace。
			return 0;
		}

		if (convert_replace_to(parameter_name) === undefined) {
			return 0;
		}

		if (replace_to === KEY_remove_parameter) {
			if (isNaN(parameter_name)) {
				// remove the parameter
				template_token.splice(index, 1);
				replace_to = wiki_API.parse(template_token.toString());
				Object.clone(replace_to, false, template_token);
			} else {
				// For numeral parameter_name, just replace to empty value.
				template_token[index] = '';
				// Warning: this will NOT change .index_of , .parameters !
				while (!template_token.at(-1))
					template_token.pop();
			}
			return 1;
		}

		// --------------------------------------
		// 判斷上下文使用的 spaces。

		var spaces = mode_space_of_parameters(template_token, parameter_name);
		// console.trace(spaces);
		// console.trace(replace_to);

		// --------------------------------------
		// 正規化 replace_to。

		if (library_namespace.is_Object(replace_to)) {
			// console.trace(replace_to);
			replace_to = Object.keys(replace_to).map(function(key) {
				var value = replace_to[key];
				if (!key) {
					library_namespace.warn('Including empty key: '
					// TODO: allow {{|=...}}, e.g., [[w:zh:Template:Policy]]
					+ JSON.stringify(replace_to));
					key = parameter_name;
				}
				// TODO: using is_valid_parameters_value(value)
				return spaces[1] ? spaces[0] + key + spaces[1] + value
				//
				+ spaces[2] : key + '=' + value;
			});
		}
		if (Array.isArray(replace_to)) {
			replace_to = replace_to.join('|');
		} else {
			replace_to = replace_to.toString();
		}

		// assert: {String}replace_to
		// console.trace(replace_to);

		if (!spaces[1] && !isNaN(parameter_name)) {
			var matched = replace_to.match(/^\s*(\d+)\s*=\s*([\s\S]*)$/);
			if (matched && matched[1] == parameter_name
			// 假如包含 "=" 就不能省略數字指定 prefix。
			// TODO: template 本身假如會產出 "a=b" 這樣的字串，恐怕會造成問題。
			&& !matched[2].replace(/{{ *= *(?:\|[^{}]*)?}}/g, '').includes('=')) {
				// e.g., replace [2] to non-named 'value' in {{t|1|2}}
				library_namespace.debug('auto remove numbered parameter: '
				// https://www.mediawiki.org/wiki/Help:Templates#Numbered_parameters
				+ parameter_name, 3, 'replace_parameter');
				// console.trace([ replace_to, matched ]);
				replace_to = matched[2];
			}
		}

		if (spaces[2].includes('\n') && !/\n\s*?$/.test(replace_to)) {
			// Append new-line without tail "|"
			replace_to += spaces[2];
		}

		if (template_token[index]
				&& template_token[index].toString() === replace_to) {
			// 不處理沒有變更的情況。
			return 0;
		}

		// TODO: 不處理僅添加空白字元的情況。

		// --------------------------------------
		// a little check: parameter 的數字順序不應受影響。

		var PATERN_parameter_name = /(?:^|\|)[\s\n]*([^=\s\n][\s\S]*?)=/;
		if (index + 1 < template_token.length) {
			// 後面沒有 parameter 了，影響較小。
		} else if (isNaN(parameter_name)) {
			// TODO: NG: {{t|a=a|1}} → {{t|a|1}}
			if (!PATERN_parameter_name.test(replace_to)) {
				library_namespace
						.warn('replace_parameter: Insert named parameter and disrupt the order of parameters? '
								+ template_token);
			}
		} else {
			// NG: {{t|a|b}} → {{t|a=1|b}}
			var matched = replace_to.match(PATERN_parameter_name);
			if (!matched) {
				if (index != parameter_name) {
					library_namespace
							.warn('replace_parameter: Insert non-named parameter to ['
									+ parameter_name
									+ '] and disrupt the order of parameters? '
									+ template_token);
				}
			} else if (matched[1].trim() != parameter_name) {
				library_namespace
						.warn('replace_parameter: Insert numerical parameter name and disrupt the order of parameters? '
								+ template_token);
			}
		}

		// --------------------------------------

		library_namespace.debug(parameter_name + ': "' + template_token[index]
				+ '"→"' + replace_to + '"', 2, 'replace_parameter');
		template_token[index] = replace_to;

		return 1;
	}

	// ------------------------------------------------------------------------

	// 模板名#後的內容會忽略。
	// matched: [ , Template name ]
	var TEMPLATE_NAME_PATTERN = /{{[\s\n]*([^\s\n#\|{}<>\[\]][^#\|{}<>\[\]]*)[|}]/,
	//
	TEMPLATE_START_PATTERN = new RegExp(TEMPLATE_NAME_PATTERN.source.replace(
			/\[[^\[]+$/, ''), 'g');
	/** {RegExp}內部連結 PATTERN */
	// var LINK_NAME_PATTERN =
	// /\[\[[\s\n]*([^\s\n\|{}<>\[\]�][^\|{}<>\[\]]*)(\||\]\])/;
	/**
	 * parse template token. 取得完整的模板 token。<br />
	 * CeL.wiki.parse.template();
	 * 
	 * TODO:<br />
	 * {{link-en|{{convert|198|cuin|L|abbr=on}} ''斜置-6'' 198|Chrysler Slant 6
	 * engine#198}}
	 * 
	 * @param {String}wikitext
	 *            模板前後之 content。<br />
	 *            assert: wikitext 為良好結構 (well-constructed)。
	 * @param {String|Array}[template_name]
	 *            擷取模板名 template name。
	 * @param {Number}[parse_type]
	 *            1: [ {String}模板名, parameters ]<br />
	 *            true: 不解析 parameters。<br />
	 *            false: 解析 parameters。
	 * 
	 * @returns {Undefine}wikitext 不包含此模板。
	 * @returns {Array}token = [ {String}完整的模板 wikitext token, {String}模板名,
	 *          {Array}parameters ];<br />
	 *          token.count = count('{{') - count('}}')，正常情況下應為 0。<br />
	 *          token.index, token.lastIndex: index.<br />
	 *          parameters[0] is {{{1}}}, parameters[1] is {{{2}}}, ...<br />
	 *          parameters[p] is {{{p}}}
	 */
	function parse_template(wikitext, template_name, parse_type) {
		template_name = wiki_API.normalize_title_pattern(template_name, true,
				true);
		var matched = template_name
		// 模板起始。
		? new RegExp(/{{[\s\n]*/.source + template_name + '\\s*[|}]', 'ig')
				: new RegExp(TEMPLATE_NAME_PATTERN.source, 'g');
		library_namespace.debug('Use pattern: ' + matched, 3, 'parse_template');
		// template_name : start token
		template_name = matched.exec(wikitext);

		if (!template_name) {
			// not found.
			return;
		}

		var pattern = new RegExp('}}|'
		// 不用 TEMPLATE_NAME_PATTERN，預防把模板結尾一起吃掉了。
		+ TEMPLATE_START_PATTERN.source, 'g'), count = 1;
		// lastIndex - 1 : the last char is [|}]
		template_name.lastIndex = pattern.lastIndex = matched.lastIndex - 1;

		while (count > 0 && (matched = pattern.exec(wikitext))) {
			// 遇到模板結尾 '}}' 則減1，否則增1。
			if (matched[0] === '}}')
				count--;
			else
				count++;
		}

		wikitext = pattern.lastIndex > 0 ? wikitext.slice(template_name.index,
				pattern.lastIndex) : wikitext.slice(template_name.index);
		var result = [
		// [0]: {String}完整的模板token
		wikitext,
		// [1]: {String}模板名
		template_name[1].trim(),
		// [2] {String}parameters
		// 接下來要作用在已經裁切擷取過的 wikitext 上，需要設定好 index。
		// assert: 其他餘下 parameters 的部分以 [|}] 起始。
		// -2: 模板結尾 '}}'.length
		wikitext.slice(template_name.lastIndex - template_name.index, -2) ];
		Object.assign(result, {
			count : count,
			index : template_name.index,
			lastIndex : pattern.lastIndex
		});

		if (!parse_type || parse_type === 1) {
			// {{t|p=p|1|q=q|2}} → [ , 1, 2; p:'p', q:'q' ]
			var index = 1,
			/** {Array}parameters */
			parameters = [];
			// 警告: 這邊只是單純的以 '|' 分割，但照理來說應該再 call parser 來處理。
			// 最起碼應該除掉所有可能包含 '|' 的語法，例如內部連結 [[~|~]], 模板 {{~|~}}。
			result[2].split(/[\s\n]*\|[\s\n]*/)
			// 不處理 template name。
			.slice(1)
			//
			.forEach(function(token) {
				var matched = token.match(/^([^=]+)=(.*)$/);
				if (matched) {
					var key = matched[1].trim(),
					//
					value = matched[2].trim();
					if (false) {
						if (key in parameters) {
							// 參數名重複: @see [[Category:調用重複模板參數的頁面]]
							// 如果一個模板中的一個參數使用了多於一個值，則只有最後一個值會在顯示對應模板時顯示。
							// parser 調用超過一個Template中參數的值，只有最後提供的值會被使用。
							if (Array.isArray(parameters[key]))
								parameters[key].push(value);
							else
								parameters[key] = [ parameters[key], value ];
						} else {
							parameters[key] = value;
						}
					}
					parameters[key] = value;
				} else {
					parameters[index++] = token;
				}
			});

			if (parse_type === 1) {
				parameters[0] = result[1];
				result = parameters;
				// result[0] is template name.
				// result[p] is {{{p}}}
				// result[1] is {{{1}}}
				// result[2] is {{{2}}}
			} else {
				// .shift(): parameters 以 '|' 起始，因此需去掉最前面一個。
				// 2016/5/14 18:1:51 採用 [index] 的方法加入，因此無須此動作。
				// parameters.shift();
				result[2] = parameters;
			}
		}

		return result;
	}

	// ----------------------------------------------------

	// [[w:ks:وِکیٖپیٖڈیا:وَقٕت تہٕ تأریٖخ]]
	var ks_month_name = ',جَنؤری,فَرؤری,مارٕچ,اَپریل,مٔیی,جوٗن,جُلَے,اَگَست,سَتَمبَر,اَکتوٗبَر,نَوَمبَر,دَسَمبَر'
			.split(',');

	// 因應不同的 mediawiki projects 來處理日期。機器人只識別標準時間格式，預防誤判。
	// date_parser_config[language]
	// = [ {RegExp}PATTERN, {Function}parser({Array}matched) : return {String},
	// {Function}to_String({Date}date) : return {String} ]
	//
	// 可使用 parse API 來做測試。
	// https://www.mediawiki.org/w/api.php?action=help&modules=parse
	//
	// 須注意當使用者特別設定時，在各維基計劃上可能採用不同語系的日期格式。
	//
	// to_String: 日期的模式, should match "~~~~~".
	//
	// @see
	// https://www.mediawiki.org/wiki/Manual:$wgDefaultUserOptions#Available_preferences
	// $wgDefaultUserOptions['date']
	var date_parser_config = {
		en : [
				// e.g., "01:20, 9 September 2017 (UTC)"
				// [, time(hh:mm), d, m, Y, timezone ]
				/([0-2]?\d:[0-6]?\d)[, ]+([0-3]?\d) ([a-z]{3,9}) ([12]\d{3})(?: \(([A-Z]{3})\))?/ig,
				function(matched, options) {
					return matched[2] + ' ' + matched[3] + ' ' + matched[4]
							+ ' ' + matched[1] + ' ' + (matched[6] || 'UTC');
				}, {
					format : '%2H:%2M, %d %B %Y (UTC)',
					// use UTC
					zone : 0,
					locale : 'en-US'
				} ],

		ks : [
				// [, time(hh:mm), d, m, Y, timezone ]
				/([0-2]?\d:[0-6]?\d)[, ]+([0-3]?\d) ([\u0624-\u06d2]{4,9}) ([12]\d{3})(?: \(([A-Z]{3})\))?/ig,
				function(matched, options) {
					matched[3] = ks_month_name.indexOf(matched[3]);
					return matched[3] > 0 && matched[4] + '-'
							+ matched[3].pad(2) + '-' + +matched[2].pad(2)
							+ ' ' + matched[1] + ' ' + (matched[6] || 'UTC');
				}, {
					format : '%2H:%2M, %d %B %Y (UTC)',
					// use UTC
					zone : 0,
					locale : 'ks-IN'
				} ],

		ja : [
				// e.g., "2017年9月5日 (火) 09:29 (UTC)"
				// [, Y, m, d, week, time(hh:mm), timezone ]
				/([12]\d{3})年([[01]?\d)月([0-3]?\d)日 \(([日月火水木金土])\)( [0-2]?\d:[0-6]?\d)(?: \(([A-Z]{3})\))?/g,
				function(matched) {
					return matched[1] + '/' + matched[2] + '/' + matched[3]
							+ matched[5] + ' ' + (matched[6] || 'UTC+9');
				}, {
					format : '%Y年%m月%d日 (%a) %2H:%2M (UTC)',
					// use UTC
					zone : 0,
					locale : 'ja-JP'
				} ],
		'zh-classical' : [
				// Warning: need CeL.data.numeral
				/([一二][〇一二三四五六七八九]{3})年([[〇一]?[〇一二三四五六七八九])月([〇一二三]?[〇一二三四五六七八九])日 （([日一二三四五六])）( [〇一二三四五六七八九]{1,2}時[〇一二三四五六七八九]{1,2})分(?: \(([A-Z]{3})\))?/g,
				function(matched, options) {
					return library_namespace
							.from_positional_Chinese_numeral(matched[1] + '/'
									+ matched[2] + '/' + matched[3]
									+ matched[5].replace('時', ':'))
							+ ' ' + (matched[6] || 'UTC+8');
				},
				function(date, options) {
					return library_namespace.to_positional_Chinese_numeral(date
							.format({
								format : '%Y年%m月%d日 （%a） %2H時%2M分 (UTC)',
								// use UTC
								zone : 0,
								locale : 'cmn-Hant-TW'
							}));
				} ],
		zh : [
				// $dateFormats, 'Y年n月j日 (D) H:i'
				// https://github.com/wikimedia/mediawiki/blob/master/languages/messages/MessagesZh_hans.php
				// e.g., "2016年8月1日 (一) 00:00 (UTC)",
				// "2016年8月1日 (一) 00:00 (CST)"
				// [, Y, m, d, week, time(hh:mm), timezone ]
				/([12]\d{3})年([[01]?\d)月([0-3]?\d)日 \(([日一二三四五六])\)( [0-2]?\d:[0-6]?\d)(?: \(([A-Z]{3})\))?/g,
				function(matched, options) {
					return matched[1] + '/' + matched[2] + '/' + matched[3]
					//
					+ matched[5] + ' '
					// 'CST' in zh should be China Standard Time.
					// But `new Date('2017/12/1 0:0 CST')` using
					// Central Standard Time (North America)
					// === new Date('2017/12/1 0:0 UTC-6')
					// !== new Date('2017/12/1 0:0 UTC+8')
					+ (!matched[6] || matched[6] === 'CST' ? 'UTC+8'
					//
					: matched[6]);
				}, {
					format : '%Y年%m月%d日 (%a) %2H:%2M (UTC)',
					// use UTC
					zone : 0,
					locale : 'cmn-Hant-TW'
				} ]
	};
	// all wikimedia using English in default.
	// e.g., wikidata, commons
	date_parser_config.multilingual = date_parser_config.en;

	// warning: number_to_signed(-0) === "+0"
	function number_to_signed(number) {
		return number < 0 ? number : '+' + number;
	}

	// @inner
	function normalize_parse_date_options(options) {
		var session = wiki_API.session_of_options(options);
		if (options === true) {
			options = {
				get_timevalue : true
			};
		} else if (typeof options === 'string'
				&& (options in date_parser_config)) {
			options = {
				language : options
			};
		} else {
			options = library_namespace.new_options(options);
		}

		var language = wiki_API.get_first_domain_name_of_session(options);
		if (session) {
			if (!language) {
				language = wiki_API.site_name(session, {
					get_all_properties : true
				});
				language = language && language.language;
			}
			if (!date_parser_config[language]) {
				// e.g., https://simple.wikipedia.org/ →
				// wiki_API.get_first_domain_name_of_session(session) ===
				// 'simple' && session.language === 'en'
				language = session.language;
			}
			if (!isNaN(options.timeoffset)) {
				options.zone = options.timeoffset / 60;
			} else if (!('timeoffset' in options)) {
				// e.g., 480 : UTC+8
				options.zone = session.configurations.timeoffset / 60;
			} else {
				library_namespace
						.warn('normalize_parse_date_options: Invalid timeoffset: '
								+ options.timeoffset);
			}
		}
		options.zone |= 0;

		options.date_parser_config = date_parser_config[language];
		if (!options.date_parser_config) {
			if (language) {
				library_namespace.error(
				//
				'normalize_parse_date_options: Invalid language: ' + language);
			}
			// console.log(session);
			// console.trace([ language, wiki_API.language ]);
			options.date_parser_config = date_parser_config[wiki_API.language];
		}

		return options;
	}

	/**
	 * parse date string / 時間戳記 to {Date}
	 * 
	 * @example <code>

	date_list = CeL.wiki.parse.date(CeL.wiki.content_of(page_data), {
		//language : 'en',
		session : session,
		get_timevalue : true,
		get_all_list : true
	});

	</code>
	 * 
	 * 技術細節警告：不同語系wiki有相異的日期辨識模式，採用和當前wiki不同語言的日期格式，可能無法辨識。
	 * 
	 * 經查本對話串中沒有一般型式的一般格式的日期，造成無法辨識。下次遇到這樣的問題，可以在最後由任何一個人加上本討論串已終結、準備存檔的字樣，簽名並且'''加上一般日期格式'''即可。
	 * 
	 * @param {String}wikitext
	 *            date text to parse.
	 * @param {Object}options
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {Date|Array}date of the date string
	 * 
	 * @see [[en:Wikipedia:Signatures]], "~~~~~",
	 *      [[en:Help:Sorting#Specifying_a_sort_key_for_a_cell]]
	 */
	function parse_date(wikitext, options) {
		options = normalize_parse_date_options(options);

		var date_list;
		if (options.get_all_list) {
			// 若設定 options.get_all_list，須保證回傳 {Array}。
			date_list = [];
		}
		if (!wikitext) {
			return date_list;
		}

		// <del>去掉</del>skip年分前之雜項。
		// <del>去掉</del>skip星期與其後之雜項。
		var date_parser = options.date_parser_config[1];
		var PATTERN_date = options.date_parser_config[0], matched;
		// console.log('Using PATTERN_date: ' + PATTERN_date);

		var min_timevalue, max_timevalue;
		// reset PATTERN index
		PATTERN_date.lastIndex = 0;
		while (matched = PATTERN_date.exec(wikitext)) {
			// console.log(matched);
			// Warning:
			// String_to_Date()只在有載入CeL.data.date時才能用。但String_to_Date()比parse_date()功能大多了。
			var date = date_parser(matched, options);
			// console.log(date);

			// Date.parse('2019/11/6 16:11 JST') === NaN
			date = date.replace(/ (JST)/, function(all, zone) {
				zone = library_namespace.String_to_Date
				// Warning:
				// String_to_Date()只在有載入CeL.data.date時才能用。但String_to_Date()功能大多了。
				&& (zone in library_namespace.String_to_Date.zone)
				//
				? library_namespace.String_to_Date.zone[zone] : 9;
				return ' UTC' + number_to_signed(zone);
			});

			date = Date.parse(date);
			if (isNaN(date)) {
				continue;
			}

			if (!(min_timevalue < date)) {
				min_timevalue = date;
			} else if (!(date < max_timevalue)) {
				max_timevalue = date;
			}

			if (!options.get_timevalue) {
				date = new Date(date);
			}
			if (!options.get_all_list) {
				return date;
			}
			date_list.push(date);
		}

		// Warning: 不一定總有 date_list.min_timevalue, date_list.max_timevalue
		if (min_timevalue) {
			date_list.min_timevalue = min_timevalue;
			date_list.max_timevalue = max_timevalue || min_timevalue;
		}

		return date_list;
	}

	/**
	 * 產生時間戳記。日期格式跟標準簽名一樣，讓時間轉換的小工具起效用。
	 * 
	 * assert: the same as "~~~~~".
	 * 
	 * @example <code>

	CeL.wiki.parse.date.to_String(new Date, session);

	</code>
	 */
	function to_wiki_date(date, options) {
		options = normalize_parse_date_options(options);

		// console.log(language || wiki_API.language);
		var to_String = options.date_parser_config[2];

		if (typeof to_String === 'function') {
			date = to_String(date, options);
		} else {
			// treat `to_String` as date format
			// assert: library_namespace.is_Object(to_String)
			var zone = options.zone;
			if (!isNaN(zone) && to_String.zone !== zone) {
				// 不污染原型。
				to_String = Object.clone(to_String);
				to_String.zone = zone;
				to_String.format = to_String.format
				// 顯示的時間跟隨 session.configurations.timeoffset。
				.replace(/\(UTC(?:[+\-]\d)?\)/, '(UTC'
						+ (zone < 0 ? zone : zone ? '+' + zone : '') + ')');
			}
			// console.trace([ date, date.format(to_String), to_String ]);
			date = date.format(to_String);
		}
		return date;
	}

	parse_date.to_String = to_wiki_date;

	// ------------------------------------------

	/**
	 * 使用者/用戶對話頁面所符合的匹配模式。
	 * 
	 * matched: [ all, " user name " ]
	 * 
	 * user_name = matched[1].trim()
	 * 
	 * match: [[:language_code:user_talk:user_name]]
	 * 
	 * TODO: using PATTERN_page_name
	 * 
	 * @type {RegExp}
	 * 
	 * @see 使用者簽名將不能再有Lint錯誤和包含一些無效的HTML，嵌套替換引用也不允許，必須包含到使用者頁面、使用者討論頁或使用者貢獻頁之一的連結。
	 *      https://www.mediawiki.org/wiki/New_requirements_for_user_signatures#Outcome
	 * @see https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=general|namespaces|namespacealiases|statistics&utf8
	 *      https://github.com/wikimedia/mediawiki/blob/master/languages/messages/MessagesZh_hant.php
	 */
	var PATTERN_user_link =
	// user name do not allow "\/": e.g., [[user talk:user_name/Flow]]
	// 大小寫無差，但NG: "\n\t"
	//
	// https://zh.wikipedia.org/wiki/Wikipedia:互助客栈/其他#增设空间“U：”、“UT：”作为“User：”、“User_talk：”的Alias
	// https://phabricator.wikimedia.org/T183711
	// Doesn't conflict with any language code or other interwiki link.
	// https://gerrit.wikimedia.org/r/#/c/400267/4/wmf-config/InitialiseSettings.php
	/\[\[ *:?(?:[a-z\d\-]{1,14}:?)?(?:user(?:[ _]talk)?|使用者(?:討論)?|用戶(?:討論|對話)?|用户(?:讨论|对话)?|利用者(?:‐会話)?|사용자(?:토론)?|UT?) *: *((?:&#(?:\d{1,8}|x[\da-fA-F]{1,8});|[^\[\]\|{}<>\n#�\/])+)/i,
	// [[特殊:功績]]: zh-classical, [[特別:投稿記録]]: ja
	// matched: [ all, " user name " ]
	PATTERN_user_contributions_link = /\[\[(?:Special|特別|特殊|特別) *: *(?:Contributions|Contribs|使用者貢獻|用戶貢獻|(?:用户)?贡献|投稿記録|功績)\/((?:&#(?:\d{1,8}|x[\da-fA-F]{1,8});|[^\[\]\|{}<>\n#�\/])+)/i,
	//
	PATTERN_user_link_all = new RegExp(PATTERN_user_link.source, 'ig'), PATTERN_user_contributions_link_all = new RegExp(
			PATTERN_user_contributions_link.source, 'ig');

	/**
	 * parse user name. 解析使用者/用戶對話頁面資訊。找出用戶頁、用戶討論頁、用戶貢獻頁的連結。
	 * 
	 * @example <code>

	if (CeL.wiki.parse.user(CeL.wiki.title_link_of(title), user)) {}

	</code>
	 * 
	 * 採用模板來顯示簽名連結的方法，會影響到許多判斷簽名的程式，不只是簽名偵測。您可使用
	 * <code><nowiki>[[User:Example|<span style="color: #007FFF;">'''我的簽名'''</span>]]</nowiki></code>
	 * 的方法來添加顏色，或者參考[[zhwiki:Wikipedia:簽名]]的其他範例。
	 * 
	 * TODO: 應該按照不同的維基項目來做篩選。
	 * 
	 * @param {String}wikitext
	 *            wikitext to parse
	 * @param {String}[user_name]
	 *            測試是否為此 user name。 注意:這只會檢查第一個符合的連結。若一行中有多個連結，應該採用
	 *            CeL.wiki.parse.user.all() !
	 * @param {Boolean}[to_full_link]
	 *            get a full link
	 * 
	 * @returns {String}user name / full link
	 * @returns {Boolean}has the user name
	 * @returns {Undefined}Not a user link.
	 */
	function parse_user(wikitext, user_name, to_full_link) {
		if (!wikitext) {
			return;
		}

		var matched = wikitext.match(PATTERN_user_link), via_contributions;
		if (!matched) {
			matched = wikitext.match(PATTERN_user_contributions_link);
			if (!matched) {
				return;
			}
			via_contributions = true;
		}

		if (typeof user_name === 'boolean') {
			to_full_link = user_name;
			user_name = undefined;
		}
		// 正規化連結中的使用者名稱。
		var name_from_link = wiki_API.normalize_title(matched[1]);
		if (user_name) {
			// 用戶名正規化。
			user_name = wiki_API.normalize_title(user_name);
			if (user_name !== name_from_link) {
				return false;
			}
			if (!to_full_link) {
				return true;
			}
		}

		// may use wiki_API.title_link_of()
		return to_full_link ? via_contributions ? '[[User:' + name_from_link
				+ ']]' : matched[0].trimEnd() + ']]' : name_from_link;
	}

	/**
	 * parse all user name. 解析所有使用者/用戶對話頁面資訊。 CeL.wiki.parse.user.all()
	 * 
	 * @example <code>

	// 取得各使用者的簽名數量hash。
	var user_hash = CeL.wiki.parse.user.all(wikitext), user_list = Object.keys(user_hash);
	// 取得依照第一次出現處排序、不重複的使用者序列。
	var user_list = Object.keys(CeL.wiki.parse.user.all(wikitext));
	// 取得依照順序出現的使用者序列。
	var user_serial_list = CeL.wiki.parse.user.all(wikitext, true);

	</code>
	 * 
	 * @param {String}wikitext
	 *            wikitext to parse/check
	 * @param {String}[user_name]
	 *            測試是否有此 user name，return {Integer}此 user name 之連結數量。
	 *            若輸入true表示取得依照順序出現的使用者序列。
	 * 
	 * @returns {Integer}link count of the user name
	 * @returns {Object}normalized user name hash: hash[name] = {Integer}count
	 */
	function parse_all_user_links(wikitext, user_name) {
		function check_pattern(PATTERN_all) {
			// reset PATTERN index
			PATTERN_all.lastIndex = 0;
			var matched;
			library_namespace.debug(PATTERN_all, 3, 'parse_all_user_links');
			while (matched = PATTERN_all.exec(wikitext)) {
				// 用戶名正規化。
				var name = wiki_API.normalize_title(matched[1]);
				if (!user_name || user_name === name) {
					// console.log(name);
					if (user_list) {
						user_list.push(name);
					} else if (name in user_hash) {
						user_hash[name]++;
					} else {
						user_hash[name] = 1;
					}
				}
			}
		}

		var user_hash, user_list;
		if (user_name === true) {
			user_list = [];
			user_name = null;
		} else if (user_name) {
			// user_name should be {String}user name
			user_name = wiki_API.normalize_title(user_name);
		} else {
			user_hash = Object.create(null);
		}

		if (!wikitext) {
			return user_name ? 0 : user_list || user_hash;
		}

		library_namespace.debug(wikitext, 3, 'parse_all_user_links');
		library_namespace.debug('user name: ' + user_name, 3,
				'parse_all_user_links');

		check_pattern(PATTERN_user_link_all);
		check_pattern(PATTERN_user_contributions_link_all);

		if (user_list) {
			return user_list;
		}

		if (user_name) {
			return user_name in user_hash[user_name] ? user_hash[user_name] : 0;
		}

		return user_hash;
	}

	// CeL.wiki.parse.user.all === wiki_API.parse.user.all
	parse_user.all = parse_all_user_links;

	//
	/**
	 * redirect/重定向頁所符合的匹配模式。 Note that the redirect link must be explicit – it
	 * cannot contain magic words, templates, etc.
	 * 
	 * matched: [ all, "title#section" ]
	 * 
	 * zh-classical: 重新導向
	 * 
	 * @type {RegExp}
	 * 
	 * @see function p.getTargetFromText(text) @ https://en.wikipedia.org/wiki/Module:Redirect
	 *      https://zh.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=general|namespaces|namespacealiases|statistics&utf8
	 *      https://github.com/wikimedia/mediawiki/blob/master/languages/messages/MessagesZh_hant.php
	 *      https://en.wikipedia.org/wiki/Help:Redirect
	 *      https://phabricator.wikimedia.org/T68974
	 */
	var PATTERN_redirect = /^[\s\n]*#(?:REDIRECT|重定向|重新導向|転送|リダイレクト|넘겨주기)\s*(?::\s*)?\[\[([^\[\]\|{}<>\n�]+)(?:\|[^\[\]{}]+?)?\]\]/i;

	/**
	 * parse redirect page. 解析重定向資訊，或判斷頁面是否為重定向頁面。<br />
	 * 若 wikitext 重定向到其他頁面，則回傳其{String}頁面名: "title#section"。
	 * 
	 * 應採用如下方法，可以取得 `('redirect' in page_data) && page_data.redirect === ''` 。
	 * 
	 * @example <code>

	wiki.page(title, function(page_data) {
		var redirect_to = CeL.wiki.parse.redirect(page_data);
		// `true` or {String}redirect_to or `undefined`
		console.log(redirect_to);
	});

	wiki.page(title, function(page_data) {
		var is_protected = CeL.wiki.is_protected(page_data);
		// `true` or `undefined`
		console.log(is_protected);
	}, {
		prop : 'info'
	});

	 </code>
	 * 
	 * @param {String}page_data
	 *            page data or wikitext to parse
	 * 
	 * @returns {String}title#section
	 * @returns {Undefined}Not a redirect page.
	 * 
	 * @see all_revision_SQL: page_is_redirect
	 */
	function parse_redirect(page_data) {
		var wikitext, is_page_data = wiki_API.is_page_data(page_data);
		if (is_page_data) {
			wikitext = wiki_API.content_of(page_data);
		} else {
			// treat page_data as wikitext.
			wikitext = page_data;
		}

		if (false) {
			if (Array.isArray(wikitext)) {
				throw '您可能取得了多個版本';
				// 應該用:
				// content = CeL.wiki.content_of(page_data, 0);
				// 但是卻用成了:
				// content = CeL.wiki.content_of(page_data);
			}
			if (!wikitext || typeof wikitext !== 'string') {
				throw typeof wikitext;
				return;
			}
		}

		var matched = wikitext && wikitext.match(PATTERN_redirect);
		if (matched) {
			return matched[1].trim();
		}

		if (is_page_data && ('redirect' in page_data)) {
			// assert: page_data.redirect === ''
			return true;
		}

		if (false && wikitext.includes('__STATICREDIRECT__')) {
			library_namespace.debug('雖然特別指定了重定向頁面的 Magic word，但是並沒有發現重定向資訊。',
					3, 'parse_redirect');
		}
	}

	// ------------------------------------------------------------------------

	// const
	// ! 變數名 (不可更改) !! 變數值 !! 注解說明
	var NAME_INDEX = 0, VALUE_INDEX = 1;
	var KEY_ORIGINAL_ARRAY = typeof Symbol === 'function' ? Symbol('KEY_ORIGINAL_ARRAY')
			: '|ORIGINAL_ARRAY';

	/**
	 * 解析設定參數 wikitext configuration → JSON
	 * 
	 * 當解析發生錯誤的時候，應該要在設定頁面的討論頁顯示錯誤訊息。
	 * 
	 * @example <code>

	var configuration = CeL.wiki.parse.configuration(page_data);

	value = configuration[variable_name];

	</code>
	 * 
	 * 允許使用的設定格式: <code>

	(頁面開頭)
	註解說明(可省略)
	本頁面為 [[User:bot|]] ~~~作業的設定。每次執行作業前，機器人都會從本頁面讀入設定。您可以更改特定數值，但請盡量不要改變本頁的格式。自動生成的報表請參見：[[報告]]
	 * 請注意：變更本頁面後，必須重新執行機器人程式才有效果。

	; 單一值變數名1: 變數值
	; 單一值變數名2: 變數值

	; 列表變數名1
	: 變數值1
	: 變數值2

	 == 列表變數名2 ==
	 註解說明(可省略)
	 * 變數值1
	 * <nowiki>變數值2</nowiki>

	== 列表變數名3 ==
	註解說明(可省略)
	# 變數值1
	# <nowiki>變數值2</nowiki>

	</code>
	 * 
	 * @see [[w:zh:User:Cewbot/規範多個問題模板設定]], [[w:zh:User:Cewbot/討論頁面主題列表設定]]
	 * @see 存檔 舊議 [[w:zh:Template:Easy_Archive]],
	 *      [[w:en:Template:Auto_archiving_notice]],
	 *      [[w:en:Template:Setup_auto_archiving]]
	 */
	function parse_configuration(wikitext, options) {
		// 忽略 <span> 之類。
		function filter_tags(token) {
			// console.log(token);
			if (token.type === 'tag' /* || token.type === 'tag_single' */) {
				// console.log(token);
				if (token.tag in {
					nowiki : true,
					code : true,
					syntaxhighlight : true
				}) {
					// console.trace(token);
					// console.trace(token[1].toString());
					// assert: token[1].type === 'tag_inner'
					// do not show type: 'tag_attributes' when .join('')
					token[0][0] = '';
					// token = token[1];
					// token.is_nowiki = true;
					return token;
				}
				// `<b>value</b>` -> `value`
				return filter_tags(token[1]);
			}
			if (Array.isArray(token)) {
				var value = token.map(filter_tags);
				if (false) {
					// 去掉前後的空白字元。
					while (typeof value[0] === 'string' && !value[0].trim())
						value.shift();
					while (typeof value.at(-1) === 'string'
							&& !value.at(-1).trim())
						value.pop();
					// console.trace(value);
					if (value.length === 1
							&& value[0].tag === 'syntaxhighlight'
							// https://www.mediawiki.org/wiki/Extension:SyntaxHighlight#Other_markup
							&& /^JSON/i.test(value[0].attributes.lang)) {
						return value[0];
					}
				}
				value = token.toString.call(value);
				if (token.type === 'list')
					token.value = value;
				else
					return value;
			}
			return token;
		}

		function normalize_value(value) {
			// console.trace(value);
			// console.trace(JSON.stringify(value));
			// console.trace(JSON.stringify(filter_tags(value)));
			value = filter_tags(value);
			value = value.toString().trim();
			if (false) {
				var token = wiki_API.parse(value, options);
				if (token.type === 'tag' && token.tag === 'syntaxhighlight'
						&& /^JSON/i.test(token.attributes.lang)) {
					console.trace(token[1].toString());
					return JSON.parse(token[1].toString());
				}
			}

			// console.log(JSON.stringify(value));
			value = value
			// TODO: <syntaxhighlight lang="JavaScript" line start="55">
			// https://www.mediawiki.org/wiki/Extension:SyntaxHighlight
			// <source lang="cpp">
			.replace(/<\/?(?:nowiki|code|syntaxhighlight)>/g, '')
			// link → page title
			.replace(/^\[\[([^\[\]\|{}<>\n�]+)(?:\|[^\[\]{}]+?)?\]\]$/, '$1')
			// Remove comments
			.replace(/<!--[\s\S]*?-->/g, '');
			try {
				// e.g., 'true' / 'false' / number
				value = JSON.parse(value);
				// TODO: 應避免安全問題。
			} catch (e) {
				// TODO: handle exception
			}
			return value;
		}

		/** {Object}設定頁面/文字所獲得之個人化設定/手動設定 manual settings。 */
		var configuration = Object.create(null),
		/** {String}當前使用之變數名稱 */
		variable_name,
		// using wiki_API.parser()
		parsed, configuration_page_title;

		if (wiki_API.is_page_data(wikitext)) {
			variable_name = wikitext.title;
			configuration_page_title = variable_name;
			parsed = wiki_API.parser(wikitext).parse();
			// console.trace(parsed);
			// wikitext = wiki_API.content_of(wikitext);
		} else {
			// assert: typeof wikitext === 'string'
			parsed = wiki_API.parse(wikitext, options);
		}

		if (!Array.isArray(parsed)) {
			return configuration;

			return;
			throw 'Invalid configuration wikitext';
		}

		// 僅處理第一階層。
		parsed.forEach(function(token/* , index, parent */) {
			if (token.type === 'section_title') {
				variable_name = normalize_value(token.title);
				return;
			}

			// parse table
			// @see wiki_API.table_to_array
			if (token.type === 'table' && (token.caption || variable_name)) {
				var value_hash = Object.create(null);
				token.forEach(function(line) {
					if (line.type !== 'table_row') {
						return;
					}
					if (line.header_count > 0) {
						// TODO: using the heaser data
						return;
					}
					var row = [];
					line.forEach(function(cell) {
						if (cell.type !== 'table_cell') {
							// e.g., cell.type !== 'table_attributes'
							return;
						}

						// TODO: data-sort-type in table head

						var data_type, has_list, has_non_empty_token;
						// console.log(cell);
						cell = cell.filter(function(token) {
							if (token.type !== 'table_attributes') {
								if (token.type === 'list') {
									has_list = true;
								} else {
									has_non_empty_token
									//
									= !!token.toString().trim();
								}
								return true;
							}

							// console.log(token);
							data_type = token.toString()
							// @see
							// [[w:en:Help:Sorting#Configuring the sorting]]
							// [[w:en:Help:Sorting#Specifying_a_sort_key_for_a_cell]]
							.match(
							//
							/data-sort-type\s*=\s*(["']([^"']+)["']|\S+)/);
							if (data_type) {
								data_type = data_type[2] || data_type[1];
							}
						}).map(filter_tags);
						if (!has_list) {
							// console.log(cell);
							cell.toString = function() {
								return this.join('');
							};
							cell = normalize_value(cell);
						} else if (has_non_empty_token) {
							// 有些不合格之 token。
							cell.forEach(function(token, index) {
								if (token.type === 'list')
									cell[index] = token.value;
							});
							cell = normalize_value(cell.join(''));
						} else {
							has_list = null;
							// console.trace(cell);
							cell.forEach(function(token) {
								if (token.type === 'list') {
									if (has_list) {
										has_list.append(token
												.map(normalize_value));
									} else {
										has_list = token.map(normalize_value);
									}
								}
								// 只取 list 中的值。
							});
							cell = has_list;
						}

						// console.log([ data_type, cell ]);
						if (data_type === 'number') {
							// console.log(cell);
							if (!isNaN(data_type = +cell))
								cell = data_type;
						} else if (data_type === 'isoDate') {
							data_type = Date.parse(cell
									.replace(/<[^<>]+>/g, ''));
							if (!isNaN(data_type))
								cell = new Date(data_type);
						} else if (data_type) {
							library_namespace.warn('Invalid type: ['
									+ data_type + '] ' + cell);
						}

						// console.log(cell);
						row.push(cell);
					});
					// console.log(line);
					if (row.length >= 2) {
						// ! 變數名 (不可更改) !! 變數值 !! 注解說明
						var name = row[NAME_INDEX];
						if (name && typeof name === 'string') {
							// TODO: "false" → false
							value_hash[name] = row[VALUE_INDEX];
						}
					}
				});
				value_hash[KEY_ORIGINAL_ARRAY] = token;
				configuration[token.caption || variable_name] = value_hash;
				// 僅採用第一個列表。
				if (!token.caption)
					variable_name = null;
			}

			if (token.type !== 'list')
				return;

			if (token.list_type !== wiki_API.DEFINITION_LIST) {
				if (variable_name) {
					configuration[variable_name] = token.map(normalize_value);
					// 僅採用一個列表。
					variable_name = null;
				}
				return;
			}

			token.dt_index.forEach(function(dt_index, index) {
				variable_name = normalize_value(token[dt_index]);
				if (!variable_name)
					return;
				var next_dt_index = token.dt_index[index + 1] || token.length;
				configuration[variable_name]
				// 變數的值
				= dt_index + 2 === next_dt_index
				// 僅僅提供單一數值。
				? normalize_value(token[dt_index + 1])
				// 提供了一個列表。
				: token.slice(dt_index + 1, next_dt_index)
				//
				.map(normalize_value);
			});
			variable_name = null;
		});

		// 避免被覆蓋。保證用 configuration.configuration_page_title 可以檢查是否由頁面取得了設定。
		// 注意: 當設定頁面為空的時候，無法獲得這個值。
		if (configuration_page_title) {
			configuration.configuration_page_title = configuration_page_title;
		} else {
			delete configuration.configuration_page_title;
		}

		return configuration;
	}

	// CeL.wiki.parse.configuration.KEY_ORIGINAL_ARRAY
	parse_configuration.KEY_ORIGINAL_ARRAY = KEY_ORIGINAL_ARRAY;

	// ----------------------------------------------------

	// https://zh.wikipedia.org/wiki/條目#hash 說明
	// https://zh.wikipedia.org/zh-tw/條目#hash 說明
	// https://zh.wikipedia.org/zh-hans/條目#hash 說明
	// https://zh.wikipedia.org/w/index.php?title=條目
	// https://zh.wikipedia.org/w/index.php?uselang=zh-tw&title=條目
	// https://zh.m.wikipedia.org/wiki/條目#hash
	/**
	 * Wikipedia:Wikimedia sister projects 之 URL 匹配模式。
	 * 
	 * matched: [ all, 第一 domain name (e.g., language code / family / project),
	 * title 條目名稱, section 章節, link說明 ]
	 * 
	 * TODO: /wiki/條目#hash 說明
	 * 
	 * TODO: https://zh.wikipedia.org/zh-tw/標題 →
	 * https://zh.wikipedia.org/w/index.php?title=標題&variant=zh-tw
	 * 
	 * @type {RegExp}
	 * 
	 * @see PATTERN_PROJECT_CODE
	 * @see PATTERN_URL_GLOBAL, PATTERN_URL_WITH_PROTOCOL_GLOBAL,
	 *      PATTERN_URL_prefix, PATTERN_WIKI_URL, PATTERN_wiki_project_URL,
	 *      PATTERN_external_link_global
	 * @see https://en.wikipedia.org/wiki/Wikipedia:Wikimedia_sister_projects
	 */
	var PATTERN_WIKI_URL = /^(?:https?:)?\/\/([a-z][a-z\d\-]{0,14})\.(?:m\.)?wikipedia\.org\/(?:(?:wiki|zh-[a-z]{2,4})\/|w\/index\.php\?(?:uselang=zh-[a-z]{2}&)?title=)([^ #]+)(#[^ ]*)?( .+)?$/i;

	/**
	 * Convert URL to wiki link.
	 * 
	 * TODO: 在 default language 非 zh 時，使用 uselang, /zh-tw/條目 會有問題。 TODO: [[en
	 * link]] → [[:en:en link]] TODO: use {{tsl}} or {{link-en}},
	 * {{en:Template:Interlanguage link multi}}.
	 * 
	 * TODO: 與 wiki_API.title_link_of() 整合。
	 * 
	 * @param {String}URL
	 *            URL text
	 * @param {Boolean}[need_add_quote]
	 *            是否添加 [[]] 或 []。
	 * @param {Function}[callback]
	 *            回調函數。 callback({String}wiki link)
	 * @param {Object}[options]
	 *            附加參數/設定選擇性/特殊功能與選項
	 * 
	 * @returns {String}wiki link
	 * 
	 * @see [[WP:LINK#跨语言链接]]
	 */
	function URL_to_wiki_link(URL, need_add_quote, callback, options) {
		URL = URL.trim();
		// URL = URL.replace(/[\s\n]+/g, ' ');

		var matched = URL.match(PATTERN_WIKI_URL);
		if (!matched) {
			library_namespace.debug('Cannot parse URL: [' + URL
					+ ']. Not a wikipedia link?', 3, 'URL_to_wiki_link');
			if (need_add_quote) {
				if (PATTERN_URL_prefix.test(URL)) {
					// 當作正常外部連結 external link。
					// e.g., 'http://a.b.c ABC'

					// TODO: parse.
					// @see function fix_86() @ 20151002.WPCHECK.js
					// matched = URL.match(/^([^\|]+)\|(.*)$/);

					URL = '[' + URL + ']';
				} else {
					// 當作正常內部連結 wikilink / internal link。
					// e.g., 'ABC (disambiguation)|ABC'
					URL = wiki_API.title_link_of(URL);
				}
			}
			if (callback) {
				callback(URL);
			}
			return URL;
		}

		/** {String}章節 = URL hash */
		var section = matched[3] || '';
		// for [[:mw:Multimedia/Media Viewer]],
		// [[:mw:Extension:MultimediaViewer|媒體檢視器]]
		if (section) {
			if (section.startsWith('#/media/File:')) {
				// 8 === '#/media/'.length
				return section.slice(8);
			}

			// 須注意: 對某些 section 可能 throw！
			try {
				section = decodeURIComponent(section.replace(/\./g, '%'));
			} catch (e) {
				// TODO: handle exception
			}
		}

		/** {String}URL之語言 */
		var language = matched[1].toLowerCase(),
		/** {String}條目名稱 */
		title = decodeURIComponent(matched[2]);

		function compose_link() {
			var link = (language === wiki_API.language ? ''
			//
			: ':' + language + ':') + title + section
			// link 說明
			+ (matched[4] && (matched[4] = matched[4].trim())
			//
			!== title ? '|' + matched[4]
			// [[Help:編輯頁面#链接]]
			// 若"|"後直接以"]]"結束，則儲存時會自動添加連結頁面名。
			: !section && /\([^()]+\)$/.test(title)
			// e.g., [[title (type)]] → [[title (type)|title]]
			// 在 <gallery> 中，"[[title (type)|]]" 無效，因此需要明確指定。
			? '|' + title.replace(/\s*\([^()]+\)$/, '') : '');

			if (need_add_quote) {
				link = wiki_API.title_link_of(link);
			}

			return link;
		}

		// 無 callback，直接回傳 link。
		if (!callback) {
			return compose_link();
		}

		// 若非外 project 或不同 language，則直接 callback(link)。
		if (section || language === wiki_API.language) {
			callback(compose_link());
			return;
		}

		// 嘗試取得本 project 之對應連結。
		wiki_API.langlinks([ language, title ], function(to_title) {
			if (to_title) {
				language = wiki_API.language;
				title = to_title;
				// assert: section === ''
			}
			callback(compose_link());
		}, wiki_API.language, options);
	}

	// ----------------------------------------------------

	// Using JSON.parse() instead of eval()
	function eval_object(code) {
		// library_namespace.log('eval_object: eval(' + code + ')');
		// console.log(code);
		// code = eval(code);

		code = code.trim();
		if (code.startsWith("'") && code.endsWith("'")) {
			// '' to ""
			code = code.replace(
					/\\(.)|(.)/g,
					function(all, escaped_character, character) {
						if (character)
							return character === '"' ? '\\"' : all;
						return /^["\\\/bfnrtu]$/.test(escaped_character) ? all
								: escaped_character;
					}).replace(/^'|'$/g, '"');
			code = code.replace(/\t/g, '\\t');
		} else if (code.startsWith('"') && code.endsWith('"')) {
			code = code.replace(/\\(.)/g, function(all, escaped_character) {
				return /^["\\\/bfnrtu]$/.test(escaped_character) ? all
						: escaped_character;
			});
			code = code.replace(/\t/g, '\\t');
		}
		try {
			return JSON.parse(code);
		} catch (e) {
			console.trace('eval_object: Failed to parse code.');
			console.log(JSON.stringify(code));
			throw e;
		}
	}

	// 簡易但很有可能出錯的 converter。
	// object = CeL.wiki.parse.lua_object(page_data.wikitext);
	// @see https://www.lua.org/manual/5.3/manual.html#3.1
	// TODO: secutity check
	function parse_lua_object_code(lua_code) {
		lua_code = wiki_API.content_of(lua_code);
		if (!/^[;\s\n]*return[\s\n]*{/.test(lua_code.replace(
				/(\n|^)[;\s]*--[^\n]*/g, ''))) {
			library_namespace.warn('parse_lua_object_code: Invalid lua code? '
			//
			+ (typeof lua_code === 'string' && lua_code.length > 200
			//
			? lua_code.slice(0, 200) + '...' : lua_code));
			return;
		}

		// --------------------------------------
		// 將所有 String 轉存至 __strings，方便判別 Array, Object。

		var __strings = [];
		library_namespace.debug("轉存 `[=[ string ]=]`", 7,
				'parse_lua_object_code');
		// an opening long bracket of level 1 is written as [=[, and so on.
		lua_code = lua_code.replace(/\[(=*)\[([\s\S]*?)\](?:\1)\]/g, function(
				all, equal_signs, string) {
			// 另外儲存起來以避免干擾。
			// e.g., [[w:zh:Module:CGroup/Physics]]
			__strings.push(string);
			return "__strings[" + (__strings.length - 1) + "]";
		});

		// console.log(lua_code);
		library_namespace.debug(
				"Convert `\"string\"`, `'string'` to \"string\"", 6,
				'parse_lua_object_code');
		lua_code = lua_code
				.replace(
						/("(?:\\[\s\S]|[^\\\n"])*"|'(?:\\[\s\S]|[^\\\n'])*')(?:\\t|[\s\n]|--[^\n]*\n)*(?:(\.\.)(?:\\t|[\s\n]|--[^\n]*\n)*)?/g,
						function(all, string, concatenation) {
							string = eval_object(string);
							return JSON.stringify(string)
									+ (concatenation || '');
						});
		// console.log(lua_code);
		if (false) {
			library_namespace
					.debug(
							"remove comments after / between strings: `''..\\n--\\n''` , ``''--`",
							6, 'parse_lua_object_code');
			lua_code = lua_code
					.replace_till_stable(
							/"((?:\\[\s\S]|[^\\"])*)"(?:\\t|[\s\n])*(\.\.(?:\\t|[\s\n])*)?--[^\n]*/g,
							'$1$2');
			// console.log(lua_code);
		}

		library_namespace.debug('concat `"string".."`', 6,
				'parse_lua_object_code');
		// Lua denotes the string concatenation operator by " .. " (two dots).
		lua_code = lua_code
				.replace_till_stable(
						/("(?:\\[\s\S]|[^\\"])+)"(?:\\t|[\s\n])*\.\.(?:\\t|[\s\n])*"/g,
						'$1');

		// console.log(lua_code);

		library_namespace.debug('轉存 `"string"`', 6, 'parse_lua_object_code');
		lua_code = lua_code.replace(/"(?:\\[\s\S]|[^\\\n"])*"/g, function(all) {
			// library_namespace.log(all);
			__strings.push(JSON.parse(all));
			return "__strings[" + (__strings.length - 1) + "]";
		});
		// console.log(lua_code);

		// fix `-- comments` → `// comments`
		// lua_code = lua_code.replace(/([\n\s]|^)\s*--/g, '$1//');
		// fix `-- comments` → 直接消掉
		// lua_code = lua_code.replace(/([\n\s]|^)\s*--[^\n]*/g, '$1');
		library_namespace.debug('remove all -- comments', 6,
				'parse_lua_object_code');
		lua_code = lua_code.replace(/--[^\n]*/g, '');

		// console.log(lua_code);

		// --------------------------------------
		var __table_values = [];
		library_namespace.debug('patch fieldsep ::= ‘,’ | ‘;’', 6,
				'parse_lua_object_code');
		lua_code = lua_code.replace_till_stable(/{([^{}]+)}/g, function(all,
				fieldlist) {
			// console.log(fieldlist);
			var object_value = {},
			// patch {Array}table: `{ field, field, ... }`
			// field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp
			// fields of the form exp are equivalent to [i] = exp, where i are
			// consecutive integers starting with 1.
			// [,]
			array_value = new Array(1);

			fieldlist = fieldlist.split(/[,;]/);
			fieldlist = fieldlist.forEach(function(field) {
				field = field.trim();
				if (!field) {
					// assert: the last field
					return;
				}
				var matched = field.match(
				//
				/^\[([\s\n]*__strings\[\d+\][\s\n]*)\][\s\n]*=([\s\S]+)$/
				//
				) || field.match(/^\[([\s\S]+)\][\s\n]*=([\s\S]+)$/);
				if (matched) {
					matched[1] = eval_object(matched[1]);
					object_value[matched[1]] = matched[2].trim();
					return;
				}

				// patch {Object}table: `{ name = exp }` → `{ name : exp }`
				matched = field.match(/^([\w]+)[\s\n]*=([\s\S]+)$/);
				if (matched) {
					object_value[matched[1]] = matched[2].trim();
					return;
				}

				array_value.push(field);
			});

			if (array_value.length > 1) {
				if (library_namespace.is_empty_object(object_value)) {
					__table_values.push(array_value);
				} else {
					// mixed array, object
					array_value.forEach(function(item, index) {
						if (index > 0)
							object_value[index] = item;
					});

					__table_values.push(object_value);
				}
			} else {
				__table_values.push(object_value);
			}

			return '__table_values[' + (__table_values.length - 1) + ']';
		});
		// console.log(lua_code);

		function recovery_code(code) {
			if (!code) {
				return code;
			}
			return code.replace(/__table_values\[(\d+)\]/g,
			//
			function(all, index) {
				var table_value = __table_values[+index];
				// console.log(table_value);
				if (Array.isArray(table_value)) {
					table_value = table_value.map(recovery_code);
					if (table_value[0] === undefined)
						table_value[0] = JSON.stringify(null);
					// console.log('[' + table_value + ']');
					// console.log(table_value);
					return '[' + table_value + ']';
				}

				var value_list = [];
				for ( var name in table_value)
					value_list.push(JSON.stringify(name) + ':'
							+ recovery_code(table_value[name]));
				return '{' + value_list + '}';
			});
		}

		library_namespace.debug('recovery_code...', 6, 'parse_lua_object_code');
		lua_code = recovery_code(lua_code);
		// console.log(lua_code);

		// --------------------------------------

		lua_code = lua_code.replace_till_stable(/([\W])nil([\W])/g, '$1null$2');

		// TODO: or, and

		if (false) {
			library_namespace.log(lua_code);
			lua_code = lua_code.replace(/([{,])\s*([a-z_][a-z_\d]*)\s*:/g,
					'$1"$2":');
			console.log(lua_code.replace_till_stable(
			//
			/\{(\s*[a-z_][a-z_\d]*\s*:\s*[a-z_][a-z_\d]*(\[\d+\])?\s*\,?)*\}/i,
					'_'));
		}
		lua_code = lua_code.replace(/__strings\[(\d+)\]/g, function(all, id) {
			return JSON.stringify(__strings[id]);
		});
		// lua_code = eval('(function(){' + lua_code + '})()');

		lua_code = lua_code.replace(/^[;\s\n]*return[\s\n]*{/, '{');
		lua_code = lua_code.replace(/\t/g, '\\t');

		// console.log(JSON.stringify(lua_code));
		try {
			lua_code = JSON.parse(lua_code);
		} catch (e) {
			library_namespace.error('parse_lua_object_code: Cannot parse: '
			//
			+ JSON.stringify(lua_code
			// .slice(0)
			));
			// TODO: handle exception
			return;
		}
		// console.log(lua_code);

		return lua_code;
	}

	// 簡易快速但很有可能出錯的 parser。
	// e.g.,
	// CeL.wiki.parse.every('{{lang}}','~~{{lang|en|ers}}ff{{ee|vf}}__{{lang|fr|fff}}@@{{lang}}',function(token){console.log(token);})
	// CeL.wiki.parse.every('{{lang|ee}}','~~{{lang|en|ers}}ff{{ee|vf}}__{{lang|fr|fff}}@@{{lang}}',function(token){console.log(token);})
	// CeL.wiki.parse.every(['template','lang'],'~~{{lang|en|ers}}ff{{ee|vf}}__{{lang|fr|fff}}@@{{lang}}',function(token){console.log(token);})
	// CeL.wiki.parse.every(/{{[Ll]ang\b[^{}]*}}/g,'~~{{lang|en|ers}}ff{{ee|vf}}__{{lang|fr|fff}}@@{{lang}}',function(token){console.log(token);},CeL.wiki.parse.template)
	function parse_every(pattern, wikitext, callback, parser) {
		// assert: pattern.global === true
		var matched, count = 0;

		if (!parser) {
			if (typeof pattern === 'string'
					&& (matched = pattern.match(/{{([^{}]+)}}/)))
				pattern = [ 'template', matched[1] ];

			if (Array.isArray(pattern)) {
				parser = wiki_API.parse[matched = pattern[0]];
				pattern = pattern[1];
				if (typeof pattern === 'string') {
					if (matched === 'template')
						pattern = new RegExp('{{ *(?:' + pattern
								+ ')(?:}}|[^a-z].*?}})', 'ig');
				}
			}
		}

		while (matched = pattern.exec(wikitext)) {
			if (parser) {
				var data = matched;
				matched = parser(matched[0]);
				if (!matched)
					// nothing got.
					continue;

				// 回復 recover index
				matched.index = data.index;
			}

			matched.lastIndex = pattern.lastIndex;
			matched.count = count++;
			callback(matched);
		}
	}

	function parse_timestamp(timestamp) {
		// return Date.parse(timestamp);
		return new Date(timestamp);
	}

	// ------------------------------------------------------------------------

	// export 導出.

	// CeL.wiki.parse.*
	// CeL.wiki.parser(wikitext) 傳回 parser，可作 parser.parse()。
	// CeL.wiki.parse.*(wikitext) 僅處理單一 token，傳回 parse 過的 data。
	// TODO: 統合於 CeL.wiki.parser 之中。
	Object.assign(wiki_API.parse, {
		template : parse_template,
		set_template_object_parameters : set_template_object_parameters,
		template_object_to_wikitext : template_object_to_wikitext,
		// CeL.wiki.parse.replace_parameter()
		replace_parameter : replace_parameter,

		// wiki_API.parse.date()
		date : parse_date,
		// timestamp : parse_timestamp,
		user : parse_user,
		// CeL.wiki.parse.redirect , wiki_API.parse.redirect
		redirect : parse_redirect,

		// anchor : get_all_anchors,

		configuration : parse_configuration,

		wiki_URL : URL_to_wiki_link,

		lua_object : parse_lua_object_code,

		every : parse_every
	});

	// --------------------------------------------------------------------------------------------

	// 不設定(hook)本 module 之 namespace，僅執行 module code。
	return library_namespace.env.not_to_extend_keyword;
}

});
// application/locale/resources/gettext_plural_rules.js
/*	gettext plural rules of CeL.
	This file is auto created by auto-generate tool: build.nodejs(.js) @ 2022.
*/'use strict';typeof CeL==='function'&&CeL.application.locale.gettext.set_plural_rules({
	ach: [2, function(n){return +(n > 1);}],
	af: [2, function(n){return +(n != 1);}],
	ak: [2, function(n){return +(n > 1);}],
	am: [2, function(n){return +(n > 1);}],
	ar: [6, function(n){return (n == 0) ? 0 : ( (n == 1) ? 1 : ( (n == 2) ? 2 : ( (n%100 >= 3 && n%100 <= 10) ? 3 : ( (n%100 >= 11 && n%100 <= 99) ? 4 : 5 ) ) ) );}],
	arn: [2, function(n){return +(n > 1);}],
	ast: [2, function(n){return +(n != 1);}],
	ay: [1, 0],
	az: [2, function(n){return +(n != 1);}],
	be: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	bg: [2, function(n){return +(n != 1);}],
	bn: [2, function(n){return +(n != 1);}],
	bo: [1, 0],
	br: [2, function(n){return +(n > 1);}],
	bs: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	ca: [2, function(n){return +(n != 1);}],
	cgg: [1, 0],
	cs: [3, function(n){return (n == 1) ? 0 : ( (n >= 2 && n <= 4) ? 1 : 2 );}],
	csb: [3, function(n){return (n == 1) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	cy: [6, function(n){return (n == 0) ? 0 : ( (n == 1) ? 1 : ( (n == 2) ? 2 : ( (n == 3) ? 3 : ( (n == 6) ? 4 : 5 ) ) ) );}],
	da: [2, function(n){return +(n != 1);}],
	de: [2, function(n){return +(n != 1);}],
	dz: [1, 0],
	el: [2, function(n){return +(n != 1);}],
	en: [2, function(n){return +(n != 1);}],
	"en-gb": [2, function(n){return +(n != 1);}],
	eo: [2, function(n){return +(n != 1);}],
	es: [2, function(n){return +(n != 1);}],
	et: [2, function(n){return +(n != 1);}],
	eu: [2, function(n){return +(n != 1);}],
	fa: [1, 0],
	fi: [2, function(n){return +(n != 1);}],
	fil: [2, function(n){return +(n > 1);}],
	fo: [2, function(n){return +(n != 1);}],
	fr: [2, function(n){return +(n > 1);}],
	fur: [2, function(n){return +(n != 1);}],
	fy: [2, function(n){return +(n != 1);}],
	ga: [5, function(n){return (n == 1) ? 0 : ( (n == 2) ? 1 : ( (n < 7) ? 2 : ( (n < 11) ? 3 : 4 ) ) );}],
	gd: [4, function(n){return (n == 1 || n == 11) ? 0 : (n == 2 || n == 12) ? 1 : (n > 2 && n < 20) ? 2 : 3;}],
	gl: [2, function(n){return +(n != 1);}],
	gu: [2, function(n){return +(n != 1);}],
	gun: [2, function(n){return +(n > 1);}],
	ha: [2, function(n){return +(n != 1);}],
	he: [2, function(n){return +(n != 1);}],
	hi: [2, function(n){return +(n != 1);}],
	hr: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	hu: [2, function(n){return +(n != 1);}],
	hy: [2, function(n){return +(n != 1);}],
	ia: [2, function(n){return +(n != 1);}],
	id: [1, 0],
	is: [2, function(n){return +(n != 1);}],
	it: [2, function(n){return +(n != 1);}],
	ja: [1, 0],
	jbo: [1, 0],
	jv: [2, function(n){return +(n != 0);}],
	ka: [1, 0],
	kk: [1, 0],
	km: [1, 0],
	kn: [2, function(n){return +(n != 1);}],
	ko: [1, 0],
	ku: [2, function(n){return +(n != 1);}],
	kw: [4, function(n){return (n == 1) ? 0 : ( (n == 2) ? 1 : ( (n == 3) ? 2 : 3 ) );}],
	ky: [1, 0],
	lb: [2, function(n){return +(n != 1);}],
	ln: [2, function(n){return +(n > 1);}],
	lo: [1, 0],
	lt: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	lv: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n != 0) ? 1 : 2 );}],
	mai: [2, function(n){return +(n != 1);}],
	mfe: [2, function(n){return +(n > 1);}],
	mg: [2, function(n){return +(n > 1);}],
	mi: [2, function(n){return +(n > 1);}],
	mk: [2, function(n){return +((n == 1 || n%10 == 1) ? 0 : 1);}],
	ml: [2, function(n){return +(n != 1);}],
	mn: [2, function(n){return +(n != 1);}],
	mnk: [3, function(n){return (n == 0) ? 0 : n == 1 ? 1 : 2;}],
	mr: [2, function(n){return +(n != 1);}],
	ms: [1, 0],
	mt: [4, function(n){return (n == 1) ? 0 : ( (n == 0 || (n%100 > 1 && n%100 < 11)) ? 1 : ( (n%100 > 10 && n%100 < 20) ? 2 : 3 ) );}],
	nah: [2, function(n){return +(n != 1);}],
	nap: [2, function(n){return +(n != 1);}],
	nb: [2, function(n){return +(n != 1);}],
	ne: [2, function(n){return +(n != 1);}],
	nl: [2, function(n){return +(n != 1);}],
	nn: [2, function(n){return +(n != 1);}],
	no: [2, function(n){return +(n != 1);}],
	nso: [2, function(n){return +(n > 1);}],
	oc: [2, function(n){return +(n > 1);}],
	or: [2, function(n){return +(n != 1);}],
	pa: [2, function(n){return +(n != 1);}],
	pap: [2, function(n){return +(n != 1);}],
	pl: [3, function(n){return (n == 1) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	pms: [2, function(n){return +(n != 1);}],
	ps: [2, function(n){return +(n != 1);}],
	pt: [2, function(n){return +(n != 1);}],
	"pt-br": [2, function(n){return +(n > 1);}],
	rm: [2, function(n){return +(n != 1);}],
	ro: [3, function(n){return (n == 1) ? 0 : ( (n == 0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2 );}],
	ru: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	sco: [2, function(n){return +(n != 1);}],
	si: [2, function(n){return +(n != 1);}],
	sk: [3, function(n){return (n == 1) ? 0 : ( (n >= 2 && n <= 4) ? 1 : 2 );}],
	sl: [4, function(n){return (n%100 == 1) ? 0 : ( (n%100 == 2) ? 1 : ( (n%100 == 3 || n%100 == 4) ? 2 : 3 ) );}],
	so: [2, function(n){return +(n != 1);}],
	sq: [2, function(n){return +(n != 1);}],
	sr: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	"sr-ec": [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	"sr-el": [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	su: [1, 0],
	sv: [2, function(n){return +(n != 1);}],
	sw: [2, function(n){return +(n != 1);}],
	ta: [2, function(n){return +(n != 1);}],
	te: [2, function(n){return +(n != 1);}],
	tg: [2, function(n){return +(n != 1);}],
	th: [1, 0],
	ti: [2, function(n){return +(n > 1);}],
	tk: [2, function(n){return +(n != 1);}],
	tr: [1, 0],
	tt: [1, 0],
	ug: [1, 0],
	uk: [3, function(n){return (n%10 == 1 && n%100 != 11) ? 0 : ( (n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20)) ? 1 : 2 );}],
	ur: [2, function(n){return +(n != 1);}],
	uz: [1, 0],
	vi: [1, 0],
	wa: [2, function(n){return +(n > 1);}],
	wo: [1, 0],
	yo: [2, function(n){return +(n != 1);}],
	zh: [1, 0],
	"zh-hans": [1, 0],
	"zh-hant": [1, 0],
	"zh-tw": [1, 0]
});

// application/locale/resources/cmn-Hant-TW.js
/*	Localized messages of CeL.
	This file is auto created by auto-generate tool: build.nodejs(.js) @ 2022.
*/'use strict';typeof CeL==='function'&&CeL.application.locale.gettext.set_text({
	"Espa\u00f1a": "\u897f\u73ed\u7259",
	"Calendrier r\u00e9publicain": "\u6cd5\u570b\u5171\u548c\u66c6",
	"untranslated message count": "7",
	"Load failed": "\u8f09\u5165\u5931\u6557",
	"\u8a9e\u6cd5\u932f\u8aa4\uff01": "\u8a9e\u6cd5\u932f\u8aa4\uff01",
	"\u51fd\u6578\u540d\u7a31\u4e0d\u76f8\u7b26\uff0c\u53ef\u80fd\u662f\u7528\u4e86 reference\uff1f": "\u51fd\u6578\u540d\u7a31\u4e0d\u76f8\u7b26\uff0c\u53ef\u80fd\u662f\u7528\u4e86 reference\uff1f",
	"Treat [%1] as RegExp.": "\u5c07[%1]\u8996\u70ba RegExp\u3002",
	"Invalid flags: [%1]": "\u7121\u6548\u6a19\u8a8c\uff1a[%1]",
	"Illegal pattern: [%1]": "\u9055\u53cd\u898f\u5247\u7684\u6a21\u5f0f\uff1a[%1]",
	"\u8f49\u63db\u6a21\u5f0f [%1] \u51fa\u932f\uff1a\u4e26\u975e RegExp\uff1f %2": "\u8f49\u63db\u6a21\u5f0f [%1] \u51fa\u932f\uff1a\u4e26\u975e RegExp\uff1f %2",
	"Treat pattern [%1] as Windows wildcard search string.": "\u5c07\u6a21\u5f0f[%1]\u8996\u70ba Windows \u842c\u7528\u5b57\u5143\u641c\u5c0b\u5b57\u4e32\u3002",
	"\u7121\u6cd5\u8f49\u63db\u6a21\u5f0f [%1]\uff01": "\u7121\u6cd5\u8f49\u63db\u6a21\u5f0f [%1]\uff01",
	"\u6b72\u6b21": "\u6b72\u6b21",
	"\u65e5\u5e72\u652f": "\u65e5\u5e72\u652f",
	"Italy": "\u7fa9\u5927\u5229",
	"Poland": "\u6ce2\u862d",
	"Portugal": "\u8461\u8404\u7259",
	"Spain": "\u897f\u73ed\u7259",
	"France": "\u6cd5\u570b",
	"Luxembourg": "\u76e7\u68ee\u5821",
	"Netherlands": "\u8377\u862d",
	"Bavaria": "\u5df4\u4f10\u5229\u4e9e",
	"Austria": "\u5967\u5730\u5229",
	"Switzerland": "\u745e\u58eb",
	"Hungary": "\u5308\u7259\u5229",
	"Germany": "\u5fb7\u570b",
	"Norway": "\u632a\u5a01",
	"Denmark": "\u4e39\u9ea5",
	"Great Britain": "\u82f1\u570b",
	"Sweden": "\u745e\u5178",
	"Finland": "\u82ac\u862d",
	"Bulgaria": "\u4fdd\u52a0\u5229\u4e9e",
	"Soviet Union": "\u8607\u806f",
	"Serbia": "\u585e\u723e\u7dad\u4e9e",
	"Romania": "\u7f85\u99ac\u5c3c\u4e9e",
	"Greece": "\u5e0c\u81d8",
	"T\u00fcrkiye": "\u571f\u8033\u5176",
	"Egypt": "\u57c3\u53ca",
	"%1 {{PLURAL:%1|year|years}} and %2 {{PLURAL:%2|month|months}}": "%1{{PLURAL:%1|\u5e74}}%2{{PLURAL:%2|\u500b\u6708}}",
	"%1 Y %2 M": "%1\u5e74%2\u500b\u6708",
	"%1 {{PLURAL:%1|year|years}}": "%1{{PLURAL:%1|\u5e74}}",
	"%1 Y": "%1\u5e74",
	"%1 {{PLURAL:%1|month|months}}": "%1\u500b{{PLURAL:%1|\u6708}}",
	"%1 M": "%1\u500b\u6708",
	"%1 {{PLURAL:%1|millisecond|milliseconds}}": "%1{{PLURAL:%1|\u6beb\u79d2}}",
	"%1 ms": "%1\u6beb\u79d2",
	"%1 {{PLURAL:%1|second|seconds}}": "%1{{PLURAL:%1|\u79d2\u9418}}",
	"%1 s": "%1\u79d2",
	"%1 {{PLURAL:%1|minute|minutes}}": "%1{{PLURAL:%1|\u5206\u9418}}",
	"%1 min": "%1\u5206",
	"%1 {{PLURAL:%1|hour|hours}}": "%1{{PLURAL:%1|\u5c0f\u6642}}",
	"%1 hr": "%1\u5c0f\u6642",
	"%1 {{PLURAL:%1|day|days}}": "%1{{PLURAL:%1|\u5929}}",
	"%1 d": "%1\u5929",
	"%1 {{PLURAL:%1|week|weeks}}": "%1\u500b{{PLURAL:%1|\u79ae\u62dc}}",
	"%1 W": "%1\u9031",
	"2 days before yesterday, %H:%M": "\u5927\u524d\u5929%H\u6642%M\u5206",
	"the day before yesterday, %H:%M": "\u524d\u5929%H\u6642%M\u5206",
	"yesterday, %H:%M": "\u6628\u5929%H\u6642%M\u5206",
	"today, %H:%M": "\u4eca\u5929%H\u6642%M\u5206",
	"tomorrow, %H:%M": "\u660e\u5929%H\u6642%M\u5206",
	"the day after tomorrow, %H:%M": "\u5f8c\u5929%H\u6642%M\u5206",
	"2 days after tomorrow, %H:%M": "\u5927\u5f8c\u5929%H\u6642%M\u5206",
	"3 days after tomorrow, %H:%M": "\u5927\u5927\u5f8c\u5929%H\u6642%M\u5206",
	"now": "\u73fe\u5728",
	"several seconds ago": "\u5e7e\u79d2\u524d",
	"soon": "\u99ac\u4e0a",
	"%1 {{PLURAL:%1|second|seconds}} ago": "%1{{PLURAL:%1|\u79d2}}\u524d",
	"%1 {{PLURAL:%1|second|seconds}} later": "%1{{PLURAL:%1|\u79d2}}\u5f8c",
	"%1 {{PLURAL:%1|minute|minutes}} ago": "%1{{PLURAL:%1|\u5206}}\u524d",
	"%1 {{PLURAL:%1|minute|minutes}} later": "%1{{PLURAL:%1|\u5206}}\u5f8c",
	"%1 {{PLURAL:%1|hour|hours}} ago": "%1{{PLURAL:%1|\u5c0f\u6642}}\u524d",
	"%1 {{PLURAL:%1|hour|hours}} later": "%1{{PLURAL:%1|\u5c0f\u6642}}\u5f8c",
	"%1 {{PLURAL:%1|day|days}} ago": "%1{{PLURAL:%1|\u5929}}\u524d",
	"%1 {{PLURAL:%1|day|days}} later": "%1{{PLURAL:%1|\u5929}}\u5f8c",
	"%1 {{PLURAL:%1|week|weeks}} ago": "%1{{PLURAL:%1|\u9031}}\u524d",
	"%1 {PLURAL:%1|week|weeks}} later": "%1{{PLURAL:%1|\u9031}}\u5f8c",
	"Invalid date: %1": "\u7121\u6548\u7684\u65e5\u671f\uff1a%1",
	"You may need to set %1 = %2!": "\u60a8\u4e5f\u8a31\u9700\u8981\u8a2d\u5b9a %1 = %2",
	"Load the main functions and necessary dependencies to operate MediaWiki.": "\u8f09\u5165\u64cd\u4f5c MediaWiki \u7cfb\u7d71\u7684\u4e3b\u8981\u529f\u80fd\u8207\u5fc5\u8981\u7684\u4f9d\u8cf4\u934a\u3002",
	"All wiki submodules are loaded.": "\u5df2\u52a0\u8f09\u6240\u6709wiki\u5b50\u6a21\u584a\u3002",
	"Not Yet Implemented!": "\u5c1a\u672a\u5be6\u73fe\uff01",
	"\u5df2\u8f09\u5165\u904e [%1]\uff0c\u76f4\u63a5\u8a2d\u5b9a\u4f7f\u7528\u8005\u81ea\u8a02\u8cc7\u6e90\u3002": "\u5df2\u8f09\u5165\u904e [%1]\uff0c\u76f4\u63a5\u8a2d\u5b9a\u4f7f\u7528\u8005\u81ea\u8a02\u8cc7\u6e90\u3002",
	"\u5f37\u5236\u518d\u6b21\u8f09\u5165/\u4f7f\u7528 [%2] (%1) \u9818\u57df/\u8a9e\u7cfb\u3002": "\u5f37\u5236\u518d\u6b21\u8f09\u5165/\u4f7f\u7528 [%2] (%1) \u9818\u57df/\u8a9e\u7cfb\u3002",
	"\u8f09\u5165/\u4f7f\u7528 [%2] (%1) \u9818\u57df/\u8a9e\u7cfb\u3002": "\u8f09\u5165/\u4f7f\u7528 [%2] (%1) \u9818\u57df/\u8a9e\u7cfb\u3002",
	"\u6240\u6307\u5b9a\u4e4b domain [%1] \u5c1a\u672a\u8f09\u5165\uff0c\u82e5\u6709\u5fc5\u8981\u8acb\u4f7f\u7528\u5f37\u5236\u8f09\u5165 flag\u3002": "\u6240\u6307\u5b9a\u4e4b domain [%1] \u5c1a\u672a\u8f09\u5165\uff0c\u82e5\u6709\u5fc5\u8981\u8acb\u4f7f\u7528\u5f37\u5236\u8f09\u5165 flag\u3002",
	"\u7121\u6cd5\u5224\u5225 domain\uff0c\u537b\u8a2d\u5b9a\u6709 callback\u3002": "\u7121\u6cd5\u5224\u5225 domain\uff0c\u537b\u8a2d\u5b9a\u6709 callback\u3002",
	"Illegal domain alias list: [%1]": "\u9818\u57df\u5225\u540d\u5217\u8868\u7121\u6548\uff1a[%1]",
	"Adding domain alias [%1] \u2192 [%2]...": "\u6dfb\u52a0\u9818\u57df\u5225\u540d [%1]\u2192[%2] ...",
	"Testing domain alias [%1]...": "\u6e2c\u8a66\u9818\u57df\u5225\u540d [%1] ...",
	"Failed to extract gettext id.": "\u63d0\u53d6 gettext id \u5931\u6557\u3002",
	"Loading language / domain [%1]...": "\u6b63\u5728\u52a0\u8f09\u8a9e\u8a00/\u9818\u57df [%1] ...",
	"Language / domain [%1] loaded.": "\u5df2\u52a0\u8f09[%1]\u8a9e\u8a00/\u9818\u57df\u3002",
	"Cannot find menu node: [%1]": "\u627e\u4e0d\u5230\u9078\u55ae\u7bc0\u9ede\uff1a[%1]",
	"Language": "\u8a9e\u8a00",
	"\u8f49\u63db\u6578\u5b57\uff1a[%1]\u6210 %2 \u683c\u5f0f\u3002": "\u8f49\u63db\u6578\u5b57\uff1a[%1]\u6210 %2 \u683c\u5f0f\u3002",
	"\u661f\u671f": "\u661f\u671f",
	"\u66dc\u65e5": "\u65e5\u8a9e\u661f\u671f",
	"\u7121\u6cd5\u8f49\u63db\u6578\u5b57 [%1]\uff01": "\u7121\u6cd5\u8f49\u63db\u6578\u5b57 [%1]\uff01",
	"\u2191Back to TOC": "\u2191\u56de\u5230\u76ee\u9304",
	"Pin/unpin the TOC": "\u8a2d\u5b9a\u76ee\u9304\u70ba\u56fa\u5b9a\u6216\u76f8\u5c0d\u5b9a\u4f4d",
	"Set TOC to left or right": "\u8a2d\u5b9a\u76ee\u9304\u5de6\u53f3\u5b9a\u4f4d",
	"Contents of [%1]": "[%1] \u7684\u76ee\u9304",
	"Contents": "\u76ee\u6b21",
	"expand": "\u5c55\u958b",
	"collapse": "\u6536\u5408",
	"\u8f38\u5165\u4e86\u975e\u5b57\u4e32\u4e4b\u53c3\u6578\uff1a[%1]": "\u8f38\u5165\u4e86\u975e\u5b57\u4e32\u4e4b\u53c3\u6578\uff1a[%1]",
	"\u8a2d\u5b9a %1 \u6210\u975e\u5b57\u4e32\u4e4b\u53c3\u6578\uff1a%2": "\u8a2d\u5b9a %1 \u6210\u975e\u5b57\u4e32\u4e4b\u53c3\u6578\uff1a%2",
	"\u5171%1\u500b\u53c3\u6578\uff1a": "\u5171%1\u500b\u53c3\u6578\uff1a",
	"Invalid title: %1": "\u6a19\u984c\u7121\u6548\uff1a%1",
	"Continue key": "\u5f8c\u7e8c\u7d22\u5f15",
	"Cache information about the API modules of %1: module path=%2": "\u5feb\u53d6 %1 \u7684 API \u6a21\u7d44\u8cc7\u8a0a\uff1a\u6a21\u7d44\u8def\u5f91\u70ba %2",
	"Error: connect ECONNREFUSED %1": "\u8207 %1 \u7684\u9023\u7dda\u88ab\u62d2",
	"Error: connect ETIMEDOUT %1": "\u8207 %1 \u7684\u9023\u7dda\u903e\u6642",
	"Error: getaddrinfo ENOTFOUND %1": "\u627e\u4e0d\u5230\u6b64\u57df\u540d\uff1a%1",
	"Error: Timeout %1": "\u932f\u8aa4\uff1a\u9023\u7dda\u8d85\u904e %1\uff0c\u5df2\u903e\u6642\u3002",
	"Error: read ECONNRESET": "\u670d\u52d9\u5668\u91cd\u8a2d\u9023\u7dda",
	"Error: socket hang up": "\u9023\u7dda\u4e2d\u65b7",
	"Error: unexpected end of file": "\u63a5\u6536\u5230\u7684\u8cc7\u6599\u4e0d\u5b8c\u6574",
	"Error: write ECONNABORTED": "\u670d\u52d9\u5668\u6c92\u6709\u6b63\u5e38\u7684\u95dc\u9589\u9023\u7dda",
	"The chunk do not has regular .content_length!": "\u672c\u5c0f\u584a\u672a\u8a2d\u5b9a\u6b63\u898f\u7684 .content_length\uff01",
	"Illegal chunk.content_length!": "\u9055\u53cd\u898f\u5247\u7684 chunk.content_length\uff01",
	"Retry too many times!": "\u91cd\u8a66\u592a\u591a\u6b21\u4e86\uff01",
	"Failed to get file: [%1]": "\u7121\u6cd5\u7372\u53d6\u6a94\u6848\uff1a[%1]",
	"\u81ea\u7db2\u8def\u53d6\u5f97 URL\uff1a%1": "\u81ea\u7db2\u8def\u53d6\u5f97 URL\uff1a%1",
	"Got error when retrieving [%1]: %2": "\u7372\u53d6 [%1] \u51fa\u932f\uff1a%2",
	"\u81ea\u7db2\u8def\u53d6\u5f97 URL\uff1a%1\uff0c%2{{PLURAL:%2|\u4f4d\u5143\u7d44}}\u3002": "\u81ea\u7db2\u8def\u53d6\u5f97 URL\uff1a%1\uff0c%2{{PLURAL:%2|\u4f4d\u5143\u7d44}}\u3002",
	"Invalid cookie?": "cookie \u7121\u6548\uff1f",
	"cookie \u540d\u7a31\u91cd\u8907\uff01\u4ee5\u5f8c\u4f86/\u65b0\u51fa\u73fe\u8005\u70ba\u6e96\u3002": "cookie \u540d\u7a31\u91cd\u8907\uff01\u4ee5\u5f8c\u4f86/\u65b0\u51fa\u73fe\u8005\u70ba\u6e96\u3002",
	"Waiting %1/%2 {{PLURAL:%1|connection|connections}}: %3": "\u6b63\u5728\u7b49\u5f85 %1/%2 \u500b{{PLURAL:%1|\u9023\u63a5}}\uff1a%3",
	"Using HTTPS proxy to get URL: %1": "\u4f7f\u7528HTTPS\u4ee3\u7406\u7372\u53d6URL\uff1a%1",
	"Using HTTP proxy to get URL: %1": "\u4f7f\u7528HTTP\u4ee3\u7406\u7372\u53d6URL\uff1a%1",
	"\u4f7f\u7528\u65b0 agent\u3002": "\u4f7f\u7528\u65b0 agent\u3002",
	"\u4f7f\u7528\u81ea\u5b9a\u7fa9 agent\u3002": "\u4f7f\u7528\u81ea\u5b9a\u7fa9 agent\u3002",
	"\u81ea\u5b9a\u7fa9 agent \u8207 URL \u4e4b\u5354\u5b9a\u4e0d\u540c\uff0c\u5c07\u5617\u8a66\u63a1\u7528\u7b26\u5408\u7684\u5354\u5b9a\uff1a%1": "\u81ea\u5b9a\u7fa9 agent \u8207 URL \u4e4b\u5354\u5b9a\u4e0d\u540c\uff0c\u5c07\u5617\u8a66\u63a1\u7528\u7b26\u5408\u7684\u5354\u5b9a\uff1a%1",
	"\u63a1\u7528\u6cdb\u7528\u7684 agent\u3002": "\u63a1\u7528\u6cdb\u7528\u7684 agent\u3002",
	"\u91cd\u65b0\u8a2d\u5b9a cookie \u6210\uff1a%1": "\u91cd\u65b0\u8a2d\u5b9a cookie \u6210\uff1a%1",
	"Retry %1/%2: %3": "\u91cd\u8a66 %1/%2\uff1a%3",
	"URL not found: [%1]": "\u627e\u4e0d\u5230\u7db2\u5740\uff1a[%1]",
	"Node.js v12 and later versions disable TLS v1.0 and v1.1 by default.": "Node.js v12\u53ca\u66f4\u9ad8\u7248\u672c\u9ed8\u8a8d\u7981\u7528TLS v1.0\u548cv1.1\u3002",
	"Please set tls.DEFAULT_MIN_VERSION = \"TLSv1\" first!": "\u8acb\u5148\u8a2d\u7f6etls.DEFAULT_MIN_VERSION =\u201cTLSv1\u201d\uff01",
	"%1 Redirecting to [%2] \u2190 [%3]": "%1\u91cd\u5b9a\u5411\u5230 [%2] \u2190 [%3]",
	"response HEADERS: %1": "HTTP \u56de\u61c9\u6a19\u982d\u6b04\u4f4d\uff1a%1",
	"HTTP status code: %1 %2": "HTTP \u72c0\u614b\u78bc\uff1a%1 %2",
	"Exception HTTP status code %1: %2": "\u7570\u5e38 HTTP \u72c0\u614b\u78bc %1\uff1a%2",
	"\u6a94\u6848\u540d\u7a31\uff1a%1": "\u6a94\u6848\u540d\u7a31\uff1a%1",
	"Got URL [%1], but there is no listener!": "\u53d6\u5f97\u4e86\u7db2\u5740 [%1] \u7684\u8cc7\u6599\uff0c\u4f46\u6c92\u6709\u8a2d\u7f6e\u8655\u7406\u8cc7\u6599\u7684\u65b9\u6cd5\uff01",
	"\u7b49\u5f85\u63a5\u6536\u5f9e\u7db2\u5740 [%1] \u50b3\u8f38\u56de\u7684\u8cc7\u6599\u2026\u2026": "\u7b49\u5f85\u63a5\u6536\u5f9e\u7db2\u5740 [%1] \u50b3\u8f38\u56de\u7684\u8cc7\u6599\u2026\u2026",
	"Unknown HTTP compression method: [%1]": "\u672a\u77e5\u7684 HTTP \u58d3\u7e2e\u65b9\u6cd5\uff1a[%1]",
	"You need to bypass the DDoS protection by Cloudflare!": "\u60a8\u9700\u8981\u7e5e\u904e Cloudflare \u7684\u963b\u65b7\u670d\u52d9\u653b\u64ca\u4fdd\u8b77\uff01",
	"Write %2 {{PLURAL:%2|byte|bytes}} to file [%1]: %3": "\u5c07 %2 {{PLURAL:%2|\u4f4d\u5143\u7d44}}\u5beb\u5165\u6a94\u6848 [%1]\uff1a%3",
	"Failed to write %2 {{PLURAL:%2|byte|bytes}} to [%1]: %3": "\u7121\u6cd5\u5c07 %2 {{PLURAL:%2|\u4f4d\u5143\u7d44}}\u5beb\u5165 [%1]\uff1a%3",
	"Request path contains unescaped characters": "\u8acb\u6c42\u8def\u5f91\u5305\u542b\u672a\u89e3\u78bc\u7684\u5b57\u7b26",
	"Invalid POST data: %1": "\u7121\u6548\u7684 POST \u8868\u55ae\u6578\u64da\uff1a%1",
	"Connection timeout for %1: [%2]": "\u9023\u7dda\u8d85\u904e %1\uff0c\u5df2\u903e\u6642\uff1a%2",
	"Add timeout %1: [%2]": "\u6dfb\u52a0\u903e\u6642\u8a2d\u5b9a %1\uff1a[%2]",
	"Invalid timeout: %1": "\u7121\u6548\u7684\u903e\u6642\u6642\u9593\uff1a%1",
	"Must specify proxy server: hostname:port": "\u5fc5\u9808\u6307\u5b9a\u4ee3\u7406\u670d\u52d9\u5668\uff1a\"hostname:port\"",
	"\u7121 node.js \u4e4b `fs` \u5957\u4ef6\uff0c\u56e0\u6b64\u4e0d\u5177\u5099 node \u4e4b\u6a94\u6848\u64cd\u4f5c\u529f\u80fd\u3002": "\u7121 node.js \u4e4b `fs` \u5957\u4ef6\uff0c\u56e0\u6b64\u4e0d\u5177\u5099 node \u4e4b\u6a94\u6848\u64cd\u4f5c\u529f\u80fd\u3002",
	"\u81ea URL \u53d6\u5f97\u6a94\u540d\uff1a%1": "\u81ea URL \u53d6\u5f97\u6a94\u540d\uff1a%1",
	"No file name specified.": "\u6c92\u6709\u6307\u5b9a\u6a94\u6848\u540d\u3002",
	"\u4e0b\u8f09 %1": "\u4e0b\u8f09 %1",
	"%1 (file encoding %2, charset %3)": "%1\uff08\u6a94\u6848\u7de8\u78bc%2\uff0c\u5b57\u5143\u7de8\u78bc%3\uff09",
	"Using cached data.": "\u4f7f\u7528\u5feb\u53d6\u8cc7\u6599\u3002",
	"No valid cached data. Try to get data (again)...": "\u6c92\u6709\u6709\u6548\u7684\u5feb\u53d6\u8cc7\u6599\u3002\u5617\u8a66\uff08\u518d\u6b21\uff09\u7372\u53d6\u8cc7\u6599\u2026\u2026",
	"Got file name from HTTP header: %1": "\u5f9e HTTP \u6a19\u982d\u7372\u5f97\u6a94\u6848\u540d\uff1a%1",
	"Set file name: [%1], file name from header: [%2].": "\u8a2d\u7f6e\u6a94\u6848\u540d\uff1a[%1]\uff0cHTTP \u6a19\u982d\u6307\u5b9a\u7684\u6a94\u6848\u540d\uff1a[%2]\u3002",
	"\u91cd\u65b0\u7372\u53d6\u6a94\u6848\u5f8c\u767c\u73fe\u539f\u6a94\u6848\u5df2\u5b58\u5728\uff0c\u8df3\u904e\u4e0d\u8986\u5beb\uff1a[%1]": "\u91cd\u65b0\u7372\u53d6\u6a94\u6848\u5f8c\u767c\u73fe\u539f\u6a94\u6848\u5df2\u5b58\u5728\uff0c\u8df3\u904e\u4e0d\u8986\u5beb\uff1a[%1]",
	"Write data to cache file [%1].": "\u5c07\u8cc7\u6599\u5beb\u5165\u5feb\u53d6\u6a94\u6848 [%1]\u3002",
	"The data to cache: %1...": "\u8981\u5feb\u53d6\u7684\u8cc7\u6599\uff1a%1 ...",
	"\u7121\u9801\u9762\u91cd\u5b9a\u5411\u81f3\u672c\u9801": "\u7121\u9801\u9762\u91cd\u5b9a\u5411\u81f3\u672c\u9801",
	"\u5171\u6709%1\u500b{{PLURAL:%1|\u9801\u9762}}\u91cd\u5b9a\u5411\u81f3\u672c\u9801": "\u5171\u6709%1\u500b{{PLURAL:%1|\u9801\u9762}}\u91cd\u5b9a\u5411\u81f3\u672c\u9801",
	"no change": "\u7121\u6539\u8b8a",
	"finished: %1": "\u7d50\u675f\uff1a%1",
	"finished": "\u5b8c\u6210",
	"%1 elapsed, %3 at %2": "\u9694 %1\uff0c%2 %3",
	"First, it takes %1 to get %2 {{PLURAL:%2|page|pages}}.": "\u9996\u5148\u4f7f\u7528 %1 \u4ee5\u53d6\u5f97 %2 \u500b{{PLURAL:%2|\u9801\u9762}}\u5167\u5bb9\u3002",
	"Processed %1 {{PLURAL:%1|page|pages}}.": "\u8655\u7406\u4e86%1\u500b{{PLURAL:%1|\u9801\u9762}}\u3002",
	"Page handling function error: %1": "\u9801\u9762\u8655\u7406\u51fd\u6578\u932f\u8aa4\uff1a%1",
	"Edit %1": "\u7de8\u8f2f %1",
	"Missing page": "\u4f5a\u5931\u9801\u9762",
	"Invalid page title": "\u9801\u9762\u6a19\u984c\u932f\u8aa4",
	"Page edit function error: %1": "\u9801\u9762\u7de8\u8f2f\u51fd\u6578\u932f\u8aa4\uff1a%1",
	"%1 {{PLURAL:%2|page|pages}} processed": "\u5b8c\u6210 %1 {{PLURAL:%2|\u689d\u76ee}}",
	"no page modified,": "\u672a\u6539\u8b8a\u4efb\u4f55\u689d\u76ee\u3002",
	"%1 {{PLURAL:%1|page|pages}} have not changed,": "%1 {{PLURAL:%1|\u689d\u76ee}}\u672a\u4f5c\u8b8a\u66f4\u3002",
	"%1 elapsed.": "\u5171\u8cbb\u6642 %1\u3002",
	"'''Stopped''', give up editing.": "'''\u5df2\u505c\u6b62\u4f5c\u696d'''\uff0c\u653e\u68c4\u7de8\u8f2f\u3002",
	"No changes.": "\u5168\u7121\u8b8a\u66f4\u3002",
	"\u8655\u7406\u5206\u584a %1\u2013%2": "\u8655\u7406\u5206\u584a %1\u2013%2",
	"No user name or password provided. The login attempt was abandoned.": "\u672a\u63d0\u4f9b\u7528\u6236\u540d\u6216\u5bc6\u78bc\u3002\u653e\u68c4\u767b\u9304\u3002",
	"There are more than one %1 in %2": "\u65bc%1\u6709\u591a\u65bc\u4e00\u500b%2",
	"\u4f3c\u4e4e\u4e1f\u5931\u4e86\u4ee4\u724c\u3002": "\u4f3c\u4e4e\u4e1f\u5931\u4e86\u4ee4\u724c\u3002",
	"Too many badtoken errors! Please re-execute the program!": "\u592a\u591a badtoken \u932f\u8aa4\uff01\u8acb\u91cd\u65b0\u57f7\u884c\u7a0b\u5e8f\uff01",
	"Not using node.js!": "\u975e\u4f7f\u7528 node.js\uff01",
	"\u672a\u4fdd\u5b58\u5bc6\u78bc\uff01": "\u672a\u4fdd\u5b58\u5bc6\u78bc\uff01",
	"Did not set %1!": "\u672a\u8a2d\u5b9a %1\uff01",
	"Too many failed login attempts: %1": "\u767b\u5165\u5931\u6557\u6b21\u6578\u904e\u591a\uff1a%1",
	"\u5617\u8a66\u91cd\u65b0\u53d6\u5f97\u4ee4\u724c\u3002": "\u5617\u8a66\u91cd\u65b0\u53d6\u5f97\u4ee4\u724c\u3002",
	"\u7db2\u5740\u7121\u6548\uff1a%1": "\u7db2\u5740\u7121\u6548\uff1a%1",
	"\u5c07\u81ea\u52d5\u8a2d\u5b9a %1\u3002": "\u5c07\u81ea\u52d5\u8a2d\u5b9a %1\u3002",
	"Waiting %1...": "\u7b49\u5f85 %1...",
	"Found %2 query {{PLURAL:%2|module|modules}}: %1": "\u5171\u6709%2\u7a2e\u67e5\u8a62{{PLURAL:%2|\u6a21\u7d44}}\uff1a%1",
	"Comma-separator": "\u3001",
	"Invalid parameter: %1": "\u7121\u6548\u7684\u53c3\u6578\uff1a%1",
	"\u8abf\u964d\u53d6\u5f97\u9801\u9762\u7684\u4e0a\u9650\uff0c\u6539\u6210\u6bcf\u6b21\u6700\u591a %1 \u500b\u9801\u9762\u3002": "\u8abf\u964d\u53d6\u5f97\u9801\u9762\u7684\u4e0a\u9650\uff0c\u6539\u6210\u6bcf\u6b21\u6700\u591a %1 \u500b\u9801\u9762\u3002",
	"Unknown API response: %1": "\u672a\u77e5\u7684 API \u56de\u61c9\uff1a%1",
	"Circular redirect: %1\u2194%2": "\u5faa\u74b0\u91cd\u5b9a\u5411\uff1a%1\u2194%2",
	"Does not exist": "\u4e0d\u5b58\u5728",
	"No content": "\u7121\u5167\u5bb9",
	"The cache file is saved.": "\u5feb\u53d6\u6a94\u5df2\u5132\u5b58\u3002",
	"Wikimedia wikis \u6700\u591a\u53ef\u56de\u6eaf\u7d04 %1\u3002": "Wikimedia wikis \u6700\u591a\u53ef\u56de\u6eaf\u7d04 %1\u3002",
	"\u60a8\u6240\u6307\u5b9a\u7684\u6642\u9593 [%1]\uff08%2\uff09\u6050\u6015\u904e\u9577\u3002": "\u60a8\u6240\u6307\u5b9a\u7684\u6642\u9593 [%1]\uff08%2\uff09\u6050\u6015\u904e\u9577\u3002",
	"\u958b\u59cb\u4ee5 %1 \u76e3\u8996\u3001\u6383\u63cf %2 \u81ea %3 \u8d77\u66f4\u6539\u7684\u9801\u9762\u3002": "\u958b\u59cb\u4ee5 %1 \u76e3\u8996\u3001\u6383\u63cf %2 \u81ea %3 \u8d77\u66f4\u6539\u7684\u9801\u9762\u3002",
	"\u958b\u59cb\u4ee5 %1 \u76e3\u8996\u3001\u6383\u63cf %2 \u6700\u8fd1\u66f4\u6539\u7684\u9801\u9762\u3002": "\u958b\u59cb\u4ee5 %1 \u76e3\u8996\u3001\u6383\u63cf %2 \u6700\u8fd1\u66f4\u6539\u7684\u9801\u9762\u3002",
	"Configuration page: %1": "\u8a2d\u5b9a\u9801\uff1a%1\u3002",
	"\u8a2d\u5b9a\u9801\u9762 %1 \u5df2\u8b8a\u66f4\u3002\u91cd\u65b0\u89e3\u6790\u2026\u2026": "\u8a2d\u5b9a\u9801\u9762 %1 \u5df2\u8b8a\u66f4\u3002\u91cd\u65b0\u89e3\u6790\u2026\u2026",
	"\u7b49\u5f85 %1 \u4ee5\u61c9\u7528\u8a2d\u5b9a\u3002": "\u7b49\u5f85 %1 \u4ee5\u61c9\u7528\u8a2d\u5b9a\u3002",
	"wikitext parser checking: %1": "\u6e2c\u8a66 wikitext \u89e3\u6790\u5668\uff1a%1",
	"%1 {{PLURAL:%1|result|results}}": "%1\u7b46{{PLURAL:%1|\u7d50\u679c}}",
	"%1 is not exist in %2.": "%2 \u4e2d\u7121 %1\u3002",
	"\u6aa2\u67e5\u7dca\u6025\u505c\u6b62\u9801\u9762 %1": "\u6aa2\u67e5\u7dca\u6025\u505c\u6b62\u9801\u9762 %1",
	"The emergency stop page was not found (%1).": "\u672a\u767c\u73fe\u7528\u4f86\u505c\u6b62\u4f5c\u696d\u7684\u9801\u9762 %1\u3002",
	"The operation will proceed as usual.": "\u5c07\u5982\u5e38\u9032\u884c\u4f5c\u696d\u3002",
	"\u5df2\u8a2d\u5b9a\u7dca\u6025\u505c\u6b62\u7de8\u8f2f\u4f5c\u696d\uff01": "\u5df2\u8a2d\u5b9a\u7dca\u6025\u505c\u6b62\u7de8\u8f2f\u4f5c\u696d\uff01",
	"\u7dca\u6025\u505c\u6b62\u9801\u9762 %1 \u6709\u7559\u8a00\u8981\u505c\u6b62\u7de8\u8f2f\u4f5c\u696d\uff01": "\u7dca\u6025\u505c\u6b62\u9801\u9762 %1 \u6709\u7559\u8a00\u8981\u505c\u6b62\u7de8\u8f2f\u4f5c\u696d\uff01",
	"Editing of %1 has been rejected: %2": "\u5df2\u88ab\u62d2\u7d55\u7de8\u8f2f %1\uff1a%2",
	"\u7121\u6cd5\u4ee5\u6b63\u5e38\u65b9\u5f0f\u7de8\u8f2f\uff0c\u5617\u8a66\u7576\u4f5c Flow \u8a0e\u8ad6\u9801\u9762\u3002": "\u7121\u6cd5\u4ee5\u6b63\u5e38\u65b9\u5f0f\u7de8\u8f2f\uff0c\u5617\u8a66\u7576\u4f5c Flow \u8a0e\u8ad6\u9801\u9762\u3002",
	"Failed to edit the page %1: %2": "\u7de8\u8f2f\u9801\u9762 %1 \u5931\u6557\uff1a%2\u3002",
	"No changes to page content: %1": "\u9801\u9762\u5167\u5bb9\u7121\u66f4\u52d5\uff1a%1\u3002",
	"Content is empty": "\u5167\u5bb9\u88ab\u6e05\u7a7a",
	"Content is not settled": "\u672a\u8a2d\u5b9a\u7de8\u8f2f\u5167\u5bb9",
	"Abandon change": "\u653e\u68c4\u7de8\u8f2f\u9801\u9762",
	"No reason provided": "\u672a\u63cf\u8ff0\u539f\u56e0",
	"The text between update comments will be automatically overwritten by the bot.": "\u6a5f\u5668\u4eba\u5c07\u81ea\u52d5\u8986\u5beb\u66f4\u65b0\u8a3b\u89e3\u9593\u7684\u6587\u5b57\u3002",
	"\u6e05\u9664\u8a0a\u606f": "\u6e05\u9664\u8a0a\u606f",
	"\u986f\u793a/\u96b1\u85cf\u8a0a\u606f": "\u986f\u793a/\u96b1\u85cf\u8a0a\u606f",
	"\u8a0a\u606f\u63d0\u793a\u8207\u7d00\u9304\u6b04": "\u8a0a\u606f\u63d0\u793a\u8207\u7d00\u9304\u6b04",
	"\u516c\u5143\u5e74/\u4e2d\u66c6\u6708\u65e5": "\u516c\u5143\u5e74/\u4e2d\u66c6\u6708\u65e5",
	"Convert an era name to the specified format": "\u8f49\u63db\u7d00\u5e74\u6210\u6307\u5b9a\u4e4b\u683c\u5f0f",
	"\u5730\u7406\u5ea7\u6a19\uff1a": "\u5730\u7406\u5ea7\u6a19\uff1a",
	"\u81ea\u8a02\u8f38\u51fa\u683c\u5f0f": "\u81ea\u8a02\u8f38\u51fa\u683c\u5f0f",
	"\u7d00\u5e74\u8f49\u63db\u5de5\u5177": "\u7d00\u5e74\u8f49\u63db\u5de5\u5177",
	"\u7def\u5ea6\uff1a": "\u7def\u5ea6\uff1a",
	"\u7d93\u5ea6\uff1a": "\u7d93\u5ea6\uff1a",
	"\u8f38\u51fa\u683c\u5f0f": "\u8f38\u51fa\u683c\u5f0f",
	"\u524d\u7db4": "\u524d\u7db4",
	"\u6642\u5340\uff1a": "\u6642\u5340\uff1a",
	"\u8acb\u6ce8\u610f\uff1a\u672c\u6b04\u50c5\u4f9b\u958b\u767c\u4eba\u54e1\u4f7f\u7528\u3002": "\u8acb\u6ce8\u610f\uff1a\u672c\u6b04\u50c5\u4f9b\u958b\u767c\u4eba\u54e1\u4f7f\u7528\u3002",
	"\u671d\u4ee3\u7d00\u5e74\u65e5\u671f": "\u671d\u4ee3\u7d00\u5e74\u65e5\u671f",
	"\u6279\u6b21\u8f49\u63db": "\u6279\u6b21\u8f49\u63db",
	"\u516c\u5143\u65e5\u671f": "\u516c\u5143\u65e5\u671f",
	"Loading...": "\u8f09\u5165\u4e2d\u2026",
	"\u7d04%1\u5e74": "\u7d04%1\u5e74",
	"\u516c\u5143": "\u516c\u5143",
	"\u1019\u103c\u1014\u103a\u1019\u102c": "\u7dec\u7538",
	"Vi\u1ec7t Nam": "\u8d8a\u5357",
	"Unpin": "\u62d4\u8d77",
	"Pin": "\u91d8\u9078",
	"\u9664\u53bb\u6b64\u6b04": "\u9664\u53bb\u6b64\u6b04",
	"\u5206\u985e": "\u5206\u985e",
	"%1/%2/%3": "%1/%2/%3",
	"%1 BCE": "\u524d%1\u5e74",
	"%1 CE": "%1\u5e74",
	"\u5e74\u8b5c": "\u5e74\u8b5c",
	"\u66c6\u8b5c": "\u66c6\u8b5c",
	"\u5171\u6709 %1 \u500b\u6642\u6bb5{{PLURAL:%1|\u7d00\u9304}}": "\u5171\u6709 %1 \u500b\u6642\u6bb5{{PLURAL:%1|\u7d00\u9304}}",
	"\u5171\u6709 %1 \u500b\u5e74\u6bb5{{PLURAL:%1|\u7d00\u9304}}": "\u5171\u6709 %1 \u500b\u5e74\u6bb5{{PLURAL:%1|\u7d00\u9304}}",
	"\u7121\u53ef\u4f9b\u5217\u51fa\u4e4b\u66c6\u8b5c\uff01": "\u7121\u53ef\u4f9b\u5217\u51fa\u4e4b\u66c6\u8b5c\uff01",
	"\u5617\u8a66\u52a0\u6ce8\u65e5\u671f": "\u5617\u8a66\u52a0\u6ce8\u65e5\u671f",
	"\u5168\u4e0d\u9078": "\u5168\u4e0d\u9078",
	"\u589e\u52a0\u6b64\u6b04": "\u589e\u52a0\u6b64\u6b04",
	"\u4e2d\u570b\u7687\u5e1d\u751f\u5352": "\u4e2d\u570b\u7687\u5e1d\u751f\u5352",
	"\u81fa\u7063\u5730\u9707": "\u81fa\u7063\u5730\u9707",
	"\u541b\u4e3b\u751f\u5352": "\u541b\u4e3b\u751f\u5352",
	"\u96e3\u8fa8\u8b58\u6642\u6bb5\uff1a": "\u96e3\u8fa8\u8b58\u6642\u6bb5\uff1a",
	"general data layer": "\u4e00\u822c",
	"\u8cc7\u6599\u5716\u5c64": "\u8cc7\u6599\u5716\u5c64",
	"\u5c0e\u89bd\u5217\uff1a": "\u5c0e\u89bd\u5217\uff1a",
	"\u6240\u6709\u570b\u5bb6": "\u6240\u6709\u570b\u5bb6",
	"\u5171\u5b58\u7d00\u5e74": "\u5171\u5b58\u7d00\u5e74",
	"\u6e2c\u8a66\u7bc4\u4f8b": "\u6e2c\u8a66\u7bc4\u4f8b",
	"\u8f38\u5165\u7d00\u9304": "\u8f38\u5165\u7d00\u9304",
	"\u4f7f\u7528\u8aaa\u660e": "\u4f7f\u7528\u8aaa\u660e",
	"\u7d00\u5e74\u7dda\u5716": "\u7d00\u5e74\u7dda\u5716",
	"\u8a2d\u5b9a": "\u8a2d\u5b9a",
	"\u6a19\u6ce8\u6587\u672c": "\u6a19\u6ce8\u6587\u672c",
	"\u66c6\u6578\u8655\u7406": "\u66c6\u6578\u8655\u7406",
	"\u554f\u984c\u56de\u5831": "\u554f\u984c\u56de\u5831",
	"\u5e74\u6708\u65e5\u5e72\u652f": "\u5e74\u6708\u65e5\u5e72\u652f",
	"\u56db\u67f1\u516b\u5b57": "\u56db\u67f1\u516b\u5b57",
	"Julian Day Number": "\u5112\u7565\u65e5\u6578",
	"\u63a1\u7528\u66c6\u6cd5": "\u63a1\u7528\u66c6\u6cd5",
	"\u51fa\u5178": "\u51fa\u5178",
	"\u541b\u4e3b\u540d": "\u541b\u4e3b\u59d3\u540d",
	"\u8868\u5b57": "\u8868\u5b57",
	"\u541b\u4e3b\u865f": "\u5225\u865f",
	"\u8af1": "\u540d\u8af1",
	"\u8ae1": "\u8ae1",
	"\u5edf\u865f": "\u5edf\u865f",
	"\u51fa\u751f": "\u51fa\u751f",
	"\u901d\u4e16": "\u901d\u4e16",
	"\u5728\u4f4d": "\u5728\u4f4d",
	"\u52a0\u5195": "\u52a0\u5195",
	"\u524d\u4efb": "\u524d\u4efb",
	"\u7e7c\u4efb": "\u7e7c\u4efb",
	"\u7236\u89aa": "\u7236\u89aa",
	"\u6bcd\u89aa": "\u6bcd\u89aa",
	"\u914d\u5076": "\u914d\u5076",
	"\u5c55\u793a\u7dda\u5716": "\u5c55\u793a\u7dda\u5716",
	"\u7d00\u5e74 %1": "\u7d00\u5e74 %1",
	"Initializing...": "\u521d\u59cb\u5316\u4e2d\u2026",
	"\u516d\u66dc": "\u516d\u66dc",
	"\u7d00\u5e74\u7dda\u5716\u9078\u9805\uff1a": "\u7d00\u5e74\u7dda\u5716\u9078\u9805\uff1a",
	"\u6a19\u8a18\u6b63\u8655\u7406\u7684\u7d00\u5e74": "\u6a19\u8a18\u6b63\u8655\u7406\u7684\u7d00\u5e74",
	"\u5408\u4f75\u6b77\u53f2\u6642\u671f": "\u5408\u4f75\u6b77\u53f2\u6642\u671f",
	"\u64f4\u5f35\u7bc4\u570d\u81f3\u541b\u4e3b\u5728\u4e16\u6642\u6bb5": "\u64f4\u5f35\u7bc4\u570d\u81f3\u541b\u4e3b\u5728\u4e16\u6642\u6bb5",
	"\u8acb\u9078\u64c7\u6240\u6b32\u8f09\u5165\u4e4b\u8cc7\u6599\u5716\u5c64\u3002": "\u8acb\u9078\u64c7\u6240\u6b32\u8f09\u5165\u4e4b\u8cc7\u6599\u5716\u5c64\u3002",
	"\u5df2\u8f09\u5165 %1 \u7b46\u8cc7\u6599\u3002": "\u5df2\u8f09\u5165 %1 \u7b46\u8cc7\u6599\u3002",
	"Data will be presented at next calculation.": "\u8cc7\u6599\u5c07\u65bc\u4e0b\u6b21\u6f14\u7b97\u6642\u5448\u73fe\u3002",
	"Aries": "\u767d\u7f8a\u5bae",
	"Taurus": "\u91d1\u725b\u5bae",
	"Gemini": "\u96d9\u5b50\u5bae",
	"Cancer": "\u5de8\u87f9\u5bae",
	"Leo": "\u7345\u5b50\u5bae",
	"Virgo": "\u8655\u5973\u5bae",
	"Libra": "\u5929\u79e4\u5bae",
	"Scorpio": "\u5929\u880d\u5bae",
	"Sagittarius": "\u4eba\u99ac\u5bae",
	"Capricorn": "\u6469\u7faf\u5bae",
	"Aquarius": "\u6c34\u74f6\u5bae",
	"Pisces": "\u96d9\u9b5a\u5bae",
	"\u6708\u76f8": "\u6708\u76f8",
	"JDN": "\u5112\u7565\u65e5\u6578",
	"JD": "\u5112\u7565\u65e5",
	"Julian Date": "\u5112\u7565\u65e5",
	"\u5e74\u65e5\u671f": "\u5e74\u65e5\u671f",
	"\u9031\u65e5\u671f": "\u9031\u65e5\u671f",
	"Unix time": "Unix\u6642\u9593",
	"\u541b\u4e3b\u5be6\u6b72": "\u541b\u4e3b\u5be6\u6b72",
	"\u540c\u570b\u5171\u5b58\u7d00\u5e74": "\u540c\u570b\u5171\u5b58\u7d00\u5e74",
	"general precession": "\u7d9c\u5408\u6b72\u5dee",
	"\u5929\u6587\u7bc0\u6c23": "\u5929\u6587\u7bc0\u6c23",
	"\u7bc0\u6c23\u7d93\u904e\u65e5\u6578": "\u7bc0\u6c23\u7d93\u904e\u65e5\u6578",
	"Sun's apparent longitude": "\u592a\u967d\u8996\u9ec3\u7d93",
	"Moon longitude": "\u6708\u4eae\u8996\u9ec3\u7d93",
	"Moon latitude": "\u6708\u4eae\u8996\u9ec3\u7def",
	"\u6708\u65e5\u8996\u9ec3\u7d93\u5dee": "\u6708\u65e5\u8996\u9ec3\u7d93\u5dee",
	"\u6666\u65e5": "\u6666\u65e5",
	"\u6714": "\u6714",
	"saros %1": "\u6c99\u7f85\u5e8f\u5217%1",
	"\u65e5\u51fa\u65e5\u843d": "\u65e5\u51fa\u65e5\u843d",
	"\u66d9\u66ae\u5149": "\u66d9\u66ae\u5149",
	"\u6708\u51fa\u6708\u843d": "\u6708\u51fa\u6708\u843d",
	"calendar": "\u66c6\u6cd5",
	"Gregorian calendar": "\u683c\u91cc\u66c6",
	"Julian calendar": "\u5112\u7565\u66c6",
	"Revised Julian calendar": "\u5112\u7565\u6539\u9769\u66c6",
	"\u4f0a\u65af\u862d\u66c6": "\u4f0a\u65af\u862d\u66c6",
	"\u06af\u0627\u0647\u200c\u0634\u0645\u0627\u0631\u06cc \u0647\u062c\u0631\u06cc \u062e\u0648\u0631\u0634\u06cc\u062f\u06cc": "\u73fe\u4ee3\u4f0a\u6717\u66c6",
	"Bangla calendar": "\u73fe\u884c\u5b5f\u52a0\u62c9\u66c6",
	"\u5e0c\u4f2f\u4f86\u66c6": "\u5e0c\u4f2f\u4f86\u66c6",
	"\u9577\u7d00\u66c6": "\u9577\u7d00\u66c6",
	"Maya Tzolk'in": "\u99ac\u96c5\u5353\u723e\u91d1\u66c6",
	"Maya Haab'": "\u99ac\u96c5\u54c8\u5e03\u66c6",
	"\u50a3\u66c6": "\u50a3\u66c6",
	"\u1019\u103c\u1014\u103a\u1019\u102c \u1015\u103c\u1000\u1039\u1001\u1012\u102d\u1014\u103a": "\u7dec\u66c6",
	"\u5f5d\u66c6": "\u5f5d\u66c6",
	"\u0939\u093f\u0928\u094d\u0926\u0942 \u092a\u0902\u091a\u093e\u0902\u0917": "\u5370\u5ea6\u66c6",
	"\u092d\u093e\u0930\u0924\u0940\u092f \u0930\u093e\u0937\u094d\u091f\u094d\u0930\u0940\u092f \u092a\u0902\u091a\u093e\u0902\u0917": "\u5370\u5ea6\u570b\u5b9a\u66c6",
	"\u4f5b\u66c6": "\u4f5b\u66c6",
	"\u0a28\u0a3e\u0a28\u0a15\u0a38\u0a3c\u0a3e\u0a39\u0a40": "\u932b\u514b\u6559\u66c6",
	"\u06af\u0627\u0647\u200c\u0634\u0645\u0627\u0631\u06cc \u0628\u0647\u0627\u0626\u06cc": "\u5df4\u54c8\u4f0a\u66c6",
	"\u79d1\u666e\u7279\u66c6": "\u79d1\u666e\u7279\u66c6",
	"\u8863\u7d22\u6bd4\u4e9e\u66c6": "\u8863\u7d22\u6bd4\u4e9e\u66c6",
	"\u6559\u6703\u4e9e\u7f8e\u5c3c\u4e9e\u66c6": "\u6559\u6703\u4e9e\u7f8e\u5c3c\u4e9e\u66c6",
	"Byzantine calendar": "\u62dc\u5360\u5ead\u66c6",
	"\u53e4\u57c3\u53ca\u66c6": "\u53e4\u57c3\u53ca\u66c6",
	"\u6771\u4e9e\u9670\u967d\u66c6": "\u6771\u4e9e\u9670\u967d\u66c6",
	"\u5929\u6587\u590f\u66c6": "\u5929\u6587\u590f\u66c6",
	"\u66c6\u6ce8": "\u66c6\u6ce8",
	"\u6708\u5e72\u652f": "\u6708\u5e72\u652f",
	"\u660e\u6e05\u7bc0\u6c23": "\u660e\u6e05\u7bc0\u6c23",
	"\u5efa\u9664": "\u5efa\u9664",
	"\u4e2d\u570b": "\u4e2d\u570b",
	"\u6708\u306e\u5225\u540d": "\u6708\u4ee4\u5225\u540d",
	"\u4e03\u66dc": "\u4e03\u66dc",
	"\u4e8c\u5341\u516b\u5bbf": "\u4e8c\u5341\u516b\u5bbf",
	"\u4e8c\u5341\u4e03\u5bbf": "\u4e8c\u5341\u4e03\u5bbf",
	"zodiac sign": "\u9ec3\u9053\u5341\u4e8c\u5bae",
	"Year naming": "\u7d00\u5e74\u6cd5",
	"\u751f\u8096": "\u751f\u8096",
	"Year numbering": "\u7de8\u5e74\u6cd5",
	"\u6c11\u570b": "\u6c11\u570b",
	"\u9ec3\u5e1d\u7d00\u5143": "\u9ec3\u5e1d\u7d00\u5143",
	"\u7687\u7d00": "\u7687\u7d00",
	"\ub2e8\uad70\uae30\uc6d0": "\u6a80\u7d00",
	"\u6cf0\u570b\u4f5b\u66c6": "\u6cf0\u570b\u4f5b\u66c6",
	"\u7f85\u99ac\u5efa\u57ce": "\u7f85\u99ac\u5efa\u57ce",
	"Seleucid era": "\u585e\u7409\u53e4\u7d00\u5143",
	"Before Present": "\u8ddd\u4eca",
	"Holocene calendar": "\u5168\u65b0\u4e16\u7d00\u5e74",
	"Gregorian reform": "\u516c\u66c6\u6539\u66c6",
	"\u8457\u540d\u5730\u9ede\uff1a": "\u8457\u540d\u5730\u9ede\uff1a",
	"Loading %1%...": "\u5df2\u8f09\u5165 %1%\u2026",
	"\u4e2d\u6587\u6578\u5b57": "\u4e2d\u6587\u6578\u5b57",
	"astronomy": "\u5929\u6587",
	"\u4e0a\u5f26": "\u4e0a\u5f26",
	"\u671b": "\u671b",
	"\u4e0b\u5f26": "\u4e0b\u5f26",
	"annular solar eclipse": "\u65e5\u74b0\u98df",
	"hybrid solar eclipse": "\u5168\u74b0\u98df",
	"partial lunar eclipse": "\u6708\u504f\u98df",
	"partial solar eclipse": "\u65e5\u504f\u98df",
	"penumbral lunar eclipse": "\u534a\u5f71\u6708\u98df",
	"total lunar eclipse": "\u6708\u5168\u98df",
	"total solar eclipse": "\u65e5\u5168\u98df",
	"lunar eclipse": "\u6708\u98df",
	"solar eclipse": "\u65e5\u98df",
	"lower culmination": "\u4e0b\u4e2d\u5929",
	"moonrise": "\u6708\u5347",
	"sunrise": "\u65e5\u51fa",
	"upper culmination": "\u4e0a\u4e2d\u5929",
	"moonset": "\u6708\u964d",
	"sunset": "\u65e5\u843d",
	"astronomical twilight begin": "\u5929\u6587\u66d9\u5149",
	"civil twilight begin": "\u6c11\u7528\u66d9\u5149",
	"nautical twilight begin": "\u822a\u6d77\u66d9\u5149",
	"astronomical twilight end": "\u5929\u6587\u66ae\u5149",
	"civil twilight end": "\u6c11\u7528\u66ae\u5149",
	"nautical twilight end": "\u822a\u6d77\u66ae\u5149",
	"log-type-debug": "\u5075\u932f",
	"log-type-em": "\u91cd\u8981",
	"log-type-error": "\u932f\u8aa4",
	"log-type-fatal": "\u81f4\u547d",
	"log-type-info": "\u8a0a\u606f",
	"log-type-log": "\u8a18\u9304",
	"log-type-trace": "\u8ffd\u8e64",
	"log-type-warn": "\u8b66\u544a",
	"\u8df3\u904e %2 \u4e4b %1 \u8a2d\u5b9a\uff0c\u56e0\u6578\u503c\u5df2\u5b58\u5728\u4e14\u672a\u8a2d\u5b9a %3\u3002": "\u8df3\u904e %2 \u4e4b %1 \u8a2d\u5b9a\uff0c\u56e0\u6578\u503c\u5df2\u5b58\u5728\u4e14\u672a\u8a2d\u5b9a %3\u3002",
	"%1 \u5fc5\u9808\u66f4\u540d\u70ba %2 \u624d\u80fd\u8d77\u4f5c\u7528\uff01": "%1 \u5fc5\u9808\u66f4\u540d\u70ba %2 \u624d\u80fd\u8d77\u4f5c\u7528\uff01",
	"Cannot convert Lua pattern to RegExp pattern: %1": "\u7121\u6cd5\u5c07 Lua \u7684\u5339\u914d\u6a21\u5f0f\u8f49\u63db\u6210 RegExp \u7684\uff1a%1",
	"\u7121\u6cd5\u5f9e\u7db2\u5740\u64f7\u53d6\u4f5c\u54c1 id\uff1a%1": "\u7121\u6cd5\u5f9e\u7db2\u5740\u64f7\u53d6\u4f5c\u54c1 id\uff1a%1",
	"Starting %1": "\u8f09\u5165 %1",
	"\u300a%1\u300b\u5df2 %2 \u6c92\u6709\u66f4\u65b0\uff0c\u6642\u9593\u904e\u4e45\u4e0d\u518d\u5f37\u5236\u91cd\u65b0\u4e0b\u8f09\uff0c\u50c5\u5728\u7ae0\u7bc0\u6578\u91cf\u6709\u8b8a\u5316\u6642\u624d\u91cd\u65b0\u4e0b\u8f09\u3002": "\u300a%1\u300b\u5df2 %2 \u6c92\u6709\u66f4\u65b0\uff0c\u6642\u9593\u904e\u4e45\u4e0d\u518d\u5f37\u5236\u91cd\u65b0\u4e0b\u8f09\uff0c\u50c5\u5728\u7ae0\u7bc0\u6578\u91cf\u6709\u8b8a\u5316\u6642\u624d\u91cd\u65b0\u4e0b\u8f09\u3002",
	"\"%1\" \u9019\u500b\u503c\u6240\u5141\u8a31\u7684\u6578\u503c\u985e\u578b\u70ba %4\uff0c\u4f46\u73fe\u5728\u88ab\u8a2d\u5b9a\u6210 {%2} %3": "\"%1\" \u9019\u500b\u503c\u6240\u5141\u8a31\u7684\u6578\u503c\u985e\u578b\u70ba %4\uff0c\u4f46\u73fe\u5728\u88ab\u8a2d\u5b9a\u6210 {%2} %3",
	"\u81f3\u5c11\u4e00\u500b\u7531\u300c%1\u300d\u6240\u6307\u5b9a\u7684%2\u8def\u5f91\u4e0d\u5b58\u5728\uff1a%3": "\u81f3\u5c11\u4e00\u500b\u7531\u300c%1\u300d\u6240\u6307\u5b9a\u7684%2\u8def\u5f91\u4e0d\u5b58\u5728\uff1a%3",
	"directories": "\u76ee\u9304",
	"directory": "\u76ee\u9304",
	"file": "\u6a94\u6848",
	"files": "\u6a94\u6848",
	"\u7121\u6cd5\u8655\u7406 \"%1\" \u5728\u6578\u503c\u985e\u578b\u70ba %2 \u6642\u4e4b\u689d\u4ef6\uff01": "\u7121\u6cd5\u8655\u7406 \"%1\" \u5728\u6578\u503c\u985e\u578b\u70ba %2 \u6642\u4e4b\u689d\u4ef6\uff01",
	"\"%1\" \u88ab\u8a2d\u5b9a\u6210\u4e86\u6709\u554f\u984c\u7684\u503c\uff1a{%2} %3": "\"%1\" \u88ab\u8a2d\u5b9a\u6210\u4e86\u6709\u554f\u984c\u7684\u503c\uff1a{%2} %3",
	"\u672a\u63d0\u4f9b\u9375\u503c": "\u672a\u63d0\u4f9b\u9375\u503c",
	"Using proxy server: %1": "\u4f7f\u7528\u4ee3\u7406\u4f3a\u670d\u5668\uff1a%1",
	"\u7121\u6cd5\u89e3\u6790\u7684\u6642\u9593": "\u7121\u6cd5\u89e3\u6790\u7684\u6642\u9593",
	"\u672a\u8a2d\u5b9a User-Agent\u3002": "\u672a\u8a2d\u5b9a User-Agent\u3002",
	"Referer \u4e0d\u53ef\u70ba undefined\u3002": "Referer \u4e0d\u53ef\u70ba undefined\u3002",
	"\u8a2d\u5b9a Referer\uff1a%1": "\u8a2d\u5b9a Referer\uff1a%1",
	"\u6700\u5c0f\u5716\u7247\u5927\u5c0f\u61c9\u5927\u65bc\u7b49\u65bc\u96f6": "\u6700\u5c0f\u5716\u7247\u5927\u5c0f\u61c9\u5927\u65bc\u7b49\u65bc\u96f6",
	"\u7121\u6cd5\u89e3\u6790 %1": "\u7121\u6cd5\u89e3\u6790 %1",
	"\u7121\u6cd5\u8a2d\u5b9a %1\uff1a%2": "\u7121\u6cd5\u8a2d\u5b9a %1\uff1a%2",
	"\u7531\u547d\u4ee4\u5217": "\u7531\u547d\u4ee4\u5217",
	"boolean": "\u771f\u507d",
	"fso_directories": "\u76ee\u9304\u8def\u5f91",
	"fso_directory": "\u76ee\u9304\u8def\u5f91",
	"fso_file": "\u6a94\u6848\u8def\u5f91",
	"fso_files": "\u6a94\u6848\u8def\u5f91",
	"function": "\u51fd\u6578",
	"number": "\u6578\u5b57",
	"string": "\u5b57\u4e32",
	"\u8df3\u904e\u4e4b\u524d\u5df2\u4e0b\u8f09\u6216\u6aa2\u67e5\u904e\uff0c\u5df2\u7121\u9700\u518d\u6aa2\u67e5\u7684\u7ae0\u7bc0\u3002": "\u8df3\u904e\u4e4b\u524d\u5df2\u4e0b\u8f09\u6216\u6aa2\u67e5\u904e\uff0c\u5df2\u7121\u9700\u518d\u6aa2\u67e5\u7684\u7ae0\u7bc0\u3002",
	"\u8df3\u904e\u6240\u6709\u7ae0\u7bc0": "\u8df3\u904e\u6240\u6709\u7ae0\u7bc0",
	"\u50c5\u6aa2\u67e5 %1\u500b{{PLURAL:%1|\u7ae0\u7bc0}}\uff1a%2": "\u50c5\u6aa2\u67e5 %1\u500b{{PLURAL:%1|\u7ae0\u7bc0}}\uff1a%2",
	"\u53d6\u6d88\u4e0b\u8f09\u300a%1\u300b\u3002": "\u53d6\u6d88\u4e0b\u8f09\u300a%1\u300b\u3002",
	"\u66ab\u505c\u4e0b\u8f09\u300a%1\u300b\u3002": "\u66ab\u505c\u4e0b\u8f09\u300a%1\u300b\u3002",
	"\u8df3\u904e\u672c\u7ae0\u7bc0\u4e0d\u4e0b\u8f09\u3002": "\u8df3\u904e\u672c\u7ae0\u7bc0\u4e0d\u4e0b\u8f09\u3002",
	"\u4e0d\u5728 chapter_filter \u6240\u7be9\u7bc4\u570d\u5167\u3002\u8df3\u904e\u672c\u7ae0\u7bc0\u4e0d\u4e0b\u8f09\u3002": "\u4e0d\u5728 chapter_filter \u6240\u7be9\u7bc4\u570d\u5167\u3002\u8df3\u904e\u672c\u7ae0\u7bc0\u4e0d\u4e0b\u8f09\u3002",
	"\u8df3\u904e %1 \u4e0d\u8655\u7406\uff1a%2": "\u8df3\u904e %1 \u4e0d\u8655\u7406\uff1a%2",
	"\u4e0b\u8f09\u7b2c %1 %2\u4e4b\u7ae0\u7bc0\u5167\u5bb9\u524d\u5148\u7b49\u5f85 %3\u3002": "\u4e0b\u8f09\u7b2c %1 %2\u4e4b\u7ae0\u7bc0\u5167\u5bb9\u524d\u5148\u7b49\u5f85 %3\u3002",
	"\u300a%2\u300b\u00a7%3\uff1a\u57f7\u884c %1 \u6642\u767c\u751f\u56b4\u91cd\u932f\u8aa4\uff0c\u7570\u5e38\u4e2d\u65b7\u3002": "\u300a%2\u300b\u00a7%3\uff1a\u57f7\u884c %1 \u6642\u767c\u751f\u56b4\u91cd\u932f\u8aa4\uff0c\u7570\u5e38\u4e2d\u65b7\u3002",
	"\u539f\u5df2\u8a2d\u5b9a chapter_list.%1=%2\uff0c\u5f8c\u53c8\u8a2d\u5b9a chapter_data.%1=%3\uff0c\u5169\u8005\u76f8\u885d\u7a81\uff01": "\u539f\u5df2\u8a2d\u5b9a chapter_list.%1=%2\uff0c\u5f8c\u53c8\u8a2d\u5b9a chapter_data.%1=%3\uff0c\u5169\u8005\u76f8\u885d\u7a81\uff01",
	"The serial number of the work part (NO_in_part) is invalid: %1": "\u4f5c\u54c1\u5206\u90e8/\u5206\u5377\u4e4b\u5e8f\u865f\u7121\u6548\uff1a%1",
	"\u300a%1\u300b\uff1a\u8f49\u6210\u7531\u820a\u81f3\u65b0\u4e4b\u9806\u5e8f\u3002": "\u300a%1\u300b\uff1a\u8f49\u6210\u7531\u820a\u81f3\u65b0\u4e4b\u9806\u5e8f\u3002",
	"\u300a%1\u300b\uff1a": "\u300a%1\u300b\uff1a",
	"\u4e0b\u6b21\u5f9e %1\u300a%2\u300b\u8d77\u4e0b\u8f09\u3002": "\u4e0b\u6b21\u5f9e %1\u300a%2\u300b\u8d77\u4e0b\u8f09\u3002",
	"\u672c\u4f5c\u4f9d\u7ae0\u7bc0\u6a19\u984c\u4f86\u6c7a\u5b9a\u7ae0\u7bc0\u7de8\u865f\uff1b\u5efa\u8b70\u8a2d\u7f6e recheck=multi_parts_changed \u9078\u9805\u4f86\u907f\u514d\u591a\u6b21\u4e0b\u8f09\u6642\uff0c\u9047\u4e0a\u7f3a\u8a71\u7684\u60c5\u6cc1\u3002": "\u672c\u4f5c\u4f9d\u7ae0\u7bc0\u6a19\u984c\u4f86\u6c7a\u5b9a\u7ae0\u7bc0\u7de8\u865f\uff1b\u5efa\u8b70\u8a2d\u7f6e recheck=multi_parts_changed \u9078\u9805\u4f86\u907f\u514d\u591a\u6b21\u4e0b\u8f09\u6642\uff0c\u9047\u4e0a\u7f3a\u8a71\u7684\u60c5\u6cc1\u3002",
	"\u300a%1\u300b\u51fa\u73fe\u7ae0\u7bc0\u7de8\u865f\u5012\u7f6e\u7684\u60c5\u6cc1\uff1a%2": "\u300a%1\u300b\u51fa\u73fe\u7ae0\u7bc0\u7de8\u865f\u5012\u7f6e\u7684\u60c5\u6cc1\uff1a%2",
	"\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u6a19\u984c\u300a%1\u300b\u5224\u65b7\u7ae0\u7bc0\u5e8f\u865f\u3002": "\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u6a19\u984c\u300a%1\u300b\u5224\u65b7\u7ae0\u7bc0\u5e8f\u865f\u3002",
	"\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u8cc7\u6599\u5224\u65b7\u7ae0\u7bc0\u5e8f\u865f\uff1a%1\u3002": "\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u8cc7\u6599\u5224\u65b7\u7ae0\u7bc0\u5e8f\u865f\uff1a%1\u3002",
	"\u4f9d\u5e8f\u5c07\u7ae0\u7bc0\u5e8f\u865f\u8a2d\u5b9a\u70ba %1\u3002": "\u4f9d\u5e8f\u5c07\u7ae0\u7bc0\u5e8f\u865f\u8a2d\u5b9a\u70ba %1\u3002",
	"\u5de5\u5177\u6a94\u8a2d\u5b9a\u4e86 part_title %1\uff0c\u537b\u4f3c\u4e4e\u672a\u8a2d\u5b9a\u61c9\u8a2d\u5b9a\u7684 `work_data.chapter_list.part_NO`? (part_NO: %2)": "\u5de5\u5177\u6a94\u8a2d\u5b9a\u4e86 part_title %1\uff0c\u537b\u4f3c\u4e4e\u672a\u8a2d\u5b9a\u61c9\u8a2d\u5b9a\u7684 `work_data.chapter_list.part_NO`? (part_NO: %2)",
	"\u672c\u4f5c\u5b58\u6709\u4e0d\u540c\u7684 part\uff1b\u5efa\u8b70\u8a2d\u7f6e recheck=multi_parts_changed \u9078\u9805\u4f86\u907f\u514d\u591a\u6b21\u4e0b\u8f09\u6642\uff0c\u9047\u4e0a\u7f3a\u8a71\u7684\u60c5\u6cc1\u3002": "\u672c\u4f5c\u5b58\u6709\u4e0d\u540c\u7684 part\uff1b\u5efa\u8b70\u8a2d\u7f6e recheck=multi_parts_changed \u9078\u9805\u4f86\u907f\u514d\u591a\u6b21\u4e0b\u8f09\u6642\uff0c\u9047\u4e0a\u7f3a\u8a71\u7684\u60c5\u6cc1\u3002",
	"Invalid chapter_data: %1": "\u7ae0\u7bc0\u8cc7\u6599\u7121\u6548\uff1a%1",
	"\u7121\u6cd5\u53d6\u5f97 \u00a7%1 \u7684\u7db2\u5740\u3002": "\u7121\u6cd5\u53d6\u5f97 \u00a7%1 \u7684\u7db2\u5740\u3002",
	"Getting data of chapter %1, %2": "\u7372\u53d6\u7ae0\u7bc0\u8cc7\u6599 %1\uff0c%2",
	"Getting data of chapter %1": "\u7372\u53d6\u7ae0\u7bc0\u8cc7\u6599 %1",
	"\u5148\u5275\u5efa\u7ae0\u7bc0\u76ee\u9304\uff1a%1": "\u5148\u5275\u5efa\u7ae0\u7bc0\u76ee\u9304\uff1a%1",
	"\u89e3\u958b\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1": "\u89e3\u958b\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1",
	"\u8b80\u53d6\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1": "\u8b80\u53d6\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1",
	"\u522a\u9664\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1": "\u522a\u9664\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1",
	"%1 [%2] %3 {{PLURAL:%3|image|images}}.": "%1 [%2] \u5171 %3 \u5f35{{PLURAL:%3|\u5716\u7247}}\u3002",
	"\uff08\u672c\u7ae0\u70ba\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f\u7684\u7ae0\u7bc0\uff09": "\uff08\u672c\u7ae0\u70ba\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f\u7684\u7ae0\u7bc0\uff09",
	"File extension: %1": "\u5ef6\u4f38\u6a94\u540d\uff1a%1",
	"%1\uff1a\u5df2\u6d3e\u767c\u5b8c\u5de5\u4f5c\uff0c\u958b\u59cb\u4e26\u884c\u4e0b\u8f09\u5404\u5716\u7247\u3002": "%1\uff1a\u5df2\u6d3e\u767c\u5b8c\u5de5\u4f5c\uff0c\u958b\u59cb\u4e26\u884c\u4e0b\u8f09\u5404\u5716\u7247\u3002",
	"\u4e0b\u8f09\u5716 %1": "\u4e0b\u8f09\u5716 %1",
	"\u4e0b\u8f7d\u7b2c %2 \u5f35{{PLURAL:%2|\u5716\u7247}}\u524d\u5148\u7b49\u5f85 %1\u3002": "\u4e0b\u8f7d\u7b2c %2 \u5f35{{PLURAL:%2|\u5716\u7247}}\u524d\u5148\u7b49\u5f85 %1\u3002",
	"\u7121\u6cd5\u53d6\u5f97\u7b2c %1 \u7ae0\u7684\u5167\u5bb9\u3002": "\u7121\u6cd5\u53d6\u5f97\u7b2c %1 \u7ae0\u7684\u5167\u5bb9\u3002",
	"\u8df3\u904e %1 \u00a7%2 \u4e26\u63a5\u8457\u4e0b\u8f09\u4e0b\u4e00\u7ae0\u3002": "\u8df3\u904e %1 \u00a7%2 \u4e26\u63a5\u8457\u4e0b\u8f09\u4e0b\u4e00\u7ae0\u3002",
	"MESSAGE_NEED_RE_DOWNLOAD": "\u4ed9\u4eba\u62cd\u9f13\u6709\u6642\u932f\uff0c\u8de4\u6b65\u8e0f\u5dee\u5565\u4eba\u7121\uff1f\u4e0b\u8f09\u51fa\u932f\u4e86\uff0c\u4f8b\u5982\u670d\u52d9\u5668\u66ab\u6642\u65b7\u7dda\u3001\u6a94\u6848\u95d5\u5931(404)\u3002\u8acb\u78ba\u8a8d\u6392\u9664\u932f\u8aa4\u6216\u932f\u8aa4\u4e0d\u518d\u6301\u7e8c\u5f8c\uff0c\u91cd\u65b0\u57f7\u884c\u4ee5\u63a5\u7e8c\u4e0b\u8f09\u3002",
	"Retry %1/%2": "\u91cd\u8a66 %1/%2",
	"\u56e0\u5feb\u53d6\u6a94\u6848\u58de\u4e86\uff08\u4f8b\u5982\u70ba\u7a7a\u6a94\u6848\uff09\uff0c\u5c07\u91cd\u65b0\u53d6\u5f97 chapter_URL\uff0c\u8a2d\u5b9a .reget_chapter\u3002": "\u56e0\u5feb\u53d6\u6a94\u6848\u58de\u4e86\uff08\u4f8b\u5982\u70ba\u7a7a\u6a94\u6848\uff09\uff0c\u5c07\u91cd\u65b0\u53d6\u5f97 chapter_URL\uff0c\u8a2d\u5b9a .reget_chapter\u3002",
	"\u7ae0\u7bc0\u7de8\u865f\u4f9d\u5e8f\u61c9\u70ba %1\uff0c\u4f46\u7121\u6cd5\u81ea\u7ae0\u7bc0\u5167\u5bb9\u53d6\u5f97\u7de8\u865f\u3002": "\u7ae0\u7bc0\u7de8\u865f\u4f9d\u5e8f\u61c9\u70ba %1\uff0c\u4f46\u7121\u6cd5\u81ea\u7ae0\u7bc0\u5167\u5bb9\u53d6\u5f97\u7de8\u865f\u3002",
	"\u7ae0\u7bc0\u7de8\u865f\u4e0d\u4e00\u81f4\uff1a\u4f9d\u5e8f\u61c9\u70ba %1\uff0c\u4f46\u5f9e\u5167\u5bb9\u64f7\u53d6\u51fa %2\u3002": "\u7ae0\u7bc0\u7de8\u865f\u4e0d\u4e00\u81f4\uff1a\u4f9d\u5e8f\u61c9\u70ba %1\uff0c\u4f46\u5f9e\u5167\u5bb9\u64f7\u53d6\u51fa %2\u3002",
	"\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1": "\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1",
	"\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1": "\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1",
	"\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1": "\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1",
	"\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1": "\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u9801\u9762\uff1a%1",
	"\u89e3\u6790\u51fa\u7a7a\u7684\u9801\u9762\u8cc7\u8a0a\uff01": "\u89e3\u6790\u51fa\u7a7a\u7684\u9801\u9762\u8cc7\u8a0a\uff01",
	"\u89e3\u6790\u7ae0\u7bc0\u9801\u9762\u6642\u767c\u751f\u932f\u8aa4\uff0c\u4e2d\u65b7\u8df3\u51fa\uff1a%1": "\u89e3\u6790\u7ae0\u7bc0\u9801\u9762\u6642\u767c\u751f\u932f\u8aa4\uff0c\u4e2d\u65b7\u8df3\u51fa\uff1a%1",
	"\u672c\u7ae0\u70ba\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f\u7684\u7ae0\u7bc0\u3002": "\u672c\u7ae0\u70ba\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f\u7684\u7ae0\u7bc0\u3002",
	"\u672c\u7ae0\u7bc0\u6c92\u6709\u7372\u53d6\u5230\u4efb\u4f55\u5716\u7247\uff01": "\u672c\u7ae0\u7bc0\u6c92\u6709\u7372\u53d6\u5230\u4efb\u4f55\u5716\u7247\uff01",
	"\u6240\u767b\u8a18\u7684\u5716\u5f62\u6578\u91cf%1\u8207\u6709\u5716\u5f62\u5217\u8868\u9577\u5ea6%2\u4e0d\u540c\uff01": "\u6240\u767b\u8a18\u7684\u5716\u5f62\u6578\u91cf%1\u8207\u6709\u5716\u5f62\u5217\u8868\u9577\u5ea6%2\u4e0d\u540c\uff01",
	"\u539f\u5148\u7684\u7ae0\u7bc0\u8cc7\u6599\u8a2d\u5b9a\u4e86\u5206\u90e8\u6a19\u984c\uff0c\u4f46 .parse_chapter_data() \u50b3\u56de\u7684\u7ae0\u7bc0\u8cc7\u6599\u7f3a\u5c11\u4e86\u5206\u90e8\u6a19\u984c\u3002\u6216\u8a31\u60a8\u53ef\u4ee5\u6cbf\u7528\u539f\u5148\u7684\u7ae0\u7bc0\u8cc7\u6599\u3002": "\u539f\u5148\u7684\u7ae0\u7bc0\u8cc7\u6599\u8a2d\u5b9a\u4e86\u5206\u90e8\u6a19\u984c\uff0c\u4f46 .parse_chapter_data() \u50b3\u56de\u7684\u7ae0\u7bc0\u8cc7\u6599\u7f3a\u5c11\u4e86\u5206\u90e8\u6a19\u984c\u3002\u6216\u8a31\u60a8\u53ef\u4ee5\u6cbf\u7528\u539f\u5148\u7684\u7ae0\u7bc0\u8cc7\u6599\u3002",
	"\u5269 %1 \u5f35{{PLURAL:%1|\u5716}}...": "\u5269 %1 \u5f35{{PLURAL:%1|\u5716}}...",
	"\u7b49\u5f85\u5c1a\u672a\u4e0b\u8f09\u5b8c\u6210\u7684\u5716\u7247\u6a94\u6848\uff1a": "\u7b49\u5f85\u5c1a\u672a\u4e0b\u8f09\u5b8c\u6210\u7684\u5716\u7247\u6a94\u6848\uff1a",
	"%1\uff1a%2\u7b46{{PLURAL:%2|\u5716\u7247}}\u4e0b\u8f09\u932f\u8aa4\u7d00\u9304": "%1\uff1a%2\u7b46{{PLURAL:%2|\u5716\u7247}}\u4e0b\u8f09\u932f\u8aa4\u7d00\u9304",
	"\u5f9e\u5716\u7247\u58d3\u7e2e\u6a94\u522a\u9664%1\u5f35\u672c\u6b21\u4e0b\u8f09\u6210\u529f\u3001\u4e0a\u6b21\u4e0b\u8f09\u5931\u6557\u7684\u640d\u58de\u5716\u7247\uff1a%2": "\u5f9e\u5716\u7247\u58d3\u7e2e\u6a94\u522a\u9664%1\u5f35\u672c\u6b21\u4e0b\u8f09\u6210\u529f\u3001\u4e0a\u6b21\u4e0b\u8f09\u5931\u6557\u7684\u640d\u58de\u5716\u7247\uff1a%2",
	"\u66f4\u65b0\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1": "\u66f4\u65b0\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1",
	"\u5275\u5efa\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1": "\u5275\u5efa\u5716\u7247\u58d3\u7e2e\u6a94\uff1a%1",
	"%2: jump to chapter %1": "\u300a%2\u300b\uff1a\u8df3\u5230\u7ae0\u7bc0\u7de8\u865f%1",
	"\u82e5\u6b32\u52d5\u614b\u589e\u52a0\u7ae0\u7bc0\uff0c\u5fc5\u9808\u624b\u52d5\u589e\u52a0\u7ae0\u7bc0\u6578\u91cf: work_data.chapter_count++\uff01": "\u82e5\u6b32\u52d5\u614b\u589e\u52a0\u7ae0\u7bc0\uff0c\u5fc5\u9808\u624b\u52d5\u589e\u52a0\u7ae0\u7bc0\u6578\u91cf: work_data.chapter_count++\uff01",
	"\uff08\u672c\u6b21\u4e0b\u8f09\u5171\u8655\u7406 %1\u500b{{PLURAL:%1|\u5b57}}\uff09": "\uff08\u672c\u6b21\u4e0b\u8f09\u5171\u8655\u7406 %1\u500b{{PLURAL:%1|\u5b57}}\uff09",
	"\uff08\u672c\u6b21\u4e0b\u8f09\u5171\u8655\u7406 %1\u5f35{{PLURAL:%1|\u5716}}\uff09": "\uff08\u672c\u6b21\u4e0b\u8f09\u5171\u8655\u7406 %1\u5f35{{PLURAL:%1|\u5716}}\uff09",
	"\u65bc %1 \u4e0b\u8f09\u5b8c\u7562\u3002": "\u65bc %1 \u4e0b\u8f09\u5b8c\u7562\u3002",
	"\u6709\u4e9b\u70ba\u4ed8\u8cbb/\u53d7\u9650\u7ae0\u7bc0\u3002": "\u6709\u4e9b\u70ba\u4ed8\u8cbb/\u53d7\u9650\u7ae0\u7bc0\u3002",
	"%1\uff1a\u672c\u6b21\u4e0b\u8f09\u4f5c\u696d\uff0c\u672c\u4f5c\u54c1\u5171 %2\u5f35{{PLURAL:%2|\u5716\u7247}}\u4e0b\u8f09\u932f\u8aa4\u3002": "%1\uff1a\u672c\u6b21\u4e0b\u8f09\u4f5c\u696d\uff0c\u672c\u4f5c\u54c1\u5171 %2\u5f35{{PLURAL:%2|\u5716\u7247}}\u4e0b\u8f09\u932f\u8aa4\u3002",
	"\u7ae0\u7bc0\u7de8\u865f%1\uff1a": "\u7ae0\u7bc0\u7de8\u865f%1\uff1a",
	"Insert a chapter url after chapter %1: %2": "\u5728\u7ae0\u7bc0\u7de8\u865f %1 \u4e4b\u5f8c\u63d2\u5165\u65b0\u9801\u9762\uff1a%2",
	"\u5c07\u8986\u5beb\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u76ee\u9304 [%1] \u4e2d\u7684\u6a94\u6848\u3002": "\u5c07\u8986\u5beb\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u76ee\u9304 [%1] \u4e2d\u7684\u6a94\u6848\u3002",
	"\u89e3\u58d3\u7e2e\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u6a94\u6848\uff1a[%1]\u3002": "\u89e3\u58d3\u7e2e\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u6a94\u6848\uff1a[%1]\u3002",
	"\u58d3\u7e2e\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u6a94\u6848\uff1a[%1]\u3002": "\u58d3\u7e2e\u7e41\u7c21\u4e2d\u6587\u8f49\u63db\u5feb\u53d6\u6a94\u6848\uff1a[%1]\u3002",
	"\u8a9e\u8a00\u8f49\u63db": "\u8a9e\u8a00\u8f49\u63db",
	"Extract ebook as cache: [%1]": "\u89e3\u958b\u96fb\u5b50\u66f8\u4ee5\u7576\u4f5c\u5feb\u53d6\uff1a[%1]",
	"\u5c07\u7c21\u9ad4\u4e2d\u6587\u8f49\u63db\u6210\u7e41\u9ad4\u4e2d\u6587\uff1a\u300a%1\u300b": "\u5c07\u7c21\u9ad4\u4e2d\u6587\u8f49\u63db\u6210\u7e41\u9ad4\u4e2d\u6587\uff1a\u300a%1\u300b",
	"\u5c06\u7e41\u4f53\u4e2d\u6587\u8f6c\u6362\u6210\u7b80\u4f53\u4e2d\u6587\uff1a\u300a%1\u300b": "\u5c07\u7e41\u9ad4\u4e2d\u6587\u8f49\u63db\u6210\u7c21\u9ad4\u4e2d\u6587\uff1a\u300a%1\u300b",
	"\u7e41\u5316: %1": "\u7e41\u5316: %1",
	"\u7b80\u5316: %1": "\u7c21\u5316: %1",
	"\u5b57\u6578\u904e\u5c11\uff08%1{{PLURAL:%1|\u5b57\u5143}}\uff09": "\u5b57\u6578\u904e\u5c11\uff08%1{{PLURAL:%1|\u5b57\u5143}}\uff09",
	"\u4e0d\u5b58\u5728\u5c01\u5b58\u6a94\u6848\u7528\u7684\u76ee\u9304\uff1a%1": "\u4e0d\u5b58\u5728\u5c01\u5b58\u6a94\u6848\u7528\u7684\u76ee\u9304\uff1a%1",
	"\u4fdd\u7559\u820a\u6a94\uff1a": "\u4fdd\u7559\u820a\u6a94\uff1a",
	"\u642c\u79fb\u81f3 \u2192": "\u642c\u79fb\u81f3 \u2192",
	"\u79fb\u9664\u820a\u6a94\u6848\uff1a": "\u79fb\u9664\u820a\u6a94\u6848\uff1a",
	"\u6253\u5305 epub \u96fb\u5b50\u66f8\uff1a%1": "\u6253\u5305 epub \u96fb\u5b50\u66f8\uff1a%1",
	"\u672a\u6307\u5b9a\u5716\u7247\u8cc7\u6599": "\u672a\u6307\u5b9a\u5716\u7247\u8cc7\u6599",
	"Invalid acceptable_types: %1": "`acceptable_types` \u7121\u6548\uff1a%1",
	"\u5fc5\u9808\u5148\u5c07URL\u7de8\u78bc\uff1a%1": "\u5fc5\u9808\u5148\u5c07URL\u7de8\u78bc\uff1a%1",
	"\u6e2c\u8a66\u5716\u7247\u662f\u5426\u5b8c\u6574\uff1a%1": "\u6e2c\u8a66\u5716\u7247\u662f\u5426\u5b8c\u6574\uff1a%1",
	"\u7121\u6cd5\u8655\u7406\u985e\u578b\u70ba %2 \u4e4b\u5716\u7247\u6a94\uff1a%1": "\u7121\u6cd5\u8655\u7406\u985e\u578b\u70ba %2 \u4e4b\u5716\u7247\u6a94\uff1a%1",
	"\u7121\u6cd5\u5224\u5225\u5716\u7247\u6a94\u4e4b\u985e\u578b\uff1a%1": "\u7121\u6cd5\u5224\u5225\u5716\u7247\u6a94\u4e4b\u985e\u578b\uff1a%1",
	"\u51fa\u932f\u6b21\u6578\uff1a%1": "\u51fa\u932f\u6b21\u6578\uff1a%1",
	"\u5f37\u5236\u5c07\u975e\u5716\u7247\u6a94\u5132\u5b58\u70ba\u5716\u7247\u3002": "\u5f37\u5236\u5c07\u975e\u5716\u7247\u6a94\u5132\u5b58\u70ba\u5716\u7247\u3002",
	"\u5f37\u5236\u5c07\u7a7a\u5167\u5bb9\u5132\u5b58\u70ba\u5716\u7247\u3002": "\u5f37\u5236\u5c07\u7a7a\u5167\u5bb9\u5132\u5b58\u70ba\u5716\u7247\u3002",
	"\u5f37\u5236\u5132\u5b58\u640d\u58de\u7684\u5716\u7247\u3002": "\u5f37\u5236\u5132\u5b58\u640d\u58de\u7684\u5716\u7247\u3002",
	"HTTP status code %1.": "HTTP \u72c0\u614b\u78bc %1\u3002",
	"Error: %1": "\u932f\u8aa4\u767c\u751f\uff1a%1",
	"File size: %1.": "\u6a94\u6848\u5927\u5c0f %1\u3002",
	"\u522a\u9664\u640d\u58de\u7684\u820a\u5716\u7247\u6a94\uff1a%1": "\u522a\u9664\u640d\u58de\u7684\u820a\u5716\u7247\u6a94\uff1a%1",
	"\u58d3\u7e2e\u6a94\u5167\u7684\u5716\u7247\u54c1\u8cea\u6bd4\u76ee\u9304\u4e2d\u7684\u66f4\u597d\uff0c\u4f46\u5728\u4e0b\u8f09\u5b8c\u5f8c\u5c07\u53ef\u80fd\u5728\u58d3\u7e2e\u6642\u88ab\u8986\u84cb\uff1a%1": "\u58d3\u7e2e\u6a94\u5167\u7684\u5716\u7247\u54c1\u8cea\u6bd4\u76ee\u9304\u4e2d\u7684\u66f4\u597d\uff0c\u4f46\u5728\u4e0b\u8f09\u5b8c\u5f8c\u5c07\u53ef\u80fd\u5728\u58d3\u7e2e\u6642\u88ab\u8986\u84cb\uff1a%1",
	"\u58d3\u7e2e\u6a94\u5167\u7684\u5716\u7247\u54c1\u8cea\u6bd4\u76ee\u9304\u4e2d\u7684\u66f4\u597d\uff1a%1": "\u58d3\u7e2e\u6a94\u5167\u7684\u5716\u7247\u54c1\u8cea\u6bd4\u76ee\u9304\u4e2d\u7684\u66f4\u597d\uff1a%1",
	"\u4fdd\u5b58\u5716\u7247\u6578\u64da\u5230\u786c\u789f\u4e0a\uff1a%1": "\u4fdd\u5b58\u5716\u7247\u6578\u64da\u5230\u786c\u789f\u4e0a\uff1a%1",
	"\u7121\u6cd5\u5beb\u5165\u5716\u7247\u6a94\u6848 [%1]\u3002": "\u7121\u6cd5\u5beb\u5165\u5716\u7247\u6a94\u6848 [%1]\u3002",
	"\u53ef\u80fd\u56e0\u70ba\u4f5c\u54c1\u4e0b\u8f09\u76ee\u9304\u6539\u8b8a\u4e86\uff0c\u800c\u5feb\u53d6\u8cc7\u6599\u6307\u5411\u4e0d\u5b58\u5728\u7684\u820a\u4f4d\u7f6e\u3002": "\u53ef\u80fd\u56e0\u70ba\u4f5c\u54c1\u4e0b\u8f09\u76ee\u9304\u6539\u8b8a\u4e86\uff0c\u800c\u5feb\u53d6\u8cc7\u6599\u6307\u5411\u4e0d\u5b58\u5728\u7684\u820a\u4f4d\u7f6e\u3002",
	"\u53ef\u80fd\u56e0\u70ba\u4f5c\u54c1\u8cc7\u8a0a\u5feb\u53d6\u8207\u7576\u524d\u7db2\u7ad9\u4e0a\u4e4b\u4f5c\u54c1\u7ae0\u7bc0\u7d50\u69cb\u4e0d\u540c\u3002": "\u53ef\u80fd\u56e0\u70ba\u4f5c\u54c1\u8cc7\u8a0a\u5feb\u53d6\u8207\u7576\u524d\u7db2\u7ad9\u4e0a\u4e4b\u4f5c\u54c1\u7ae0\u7bc0\u7d50\u69cb\u4e0d\u540c\u3002",
	"\u82e5\u60a8\u4e4b\u524d\u66fe\u7d93\u4e0b\u8f09\u904e\u672c\u4f5c\u54c1\u7684\u8a71\uff0c\u8acb\u5c01\u5b58\u539f\u6709\u4f5c\u54c1\u76ee\u9304\uff0c\u6216\u5c07\u4f5c\u54c1\u8cc7\u8a0a\u5feb\u53d6\u6a94\uff08\u4f5c\u54c1\u76ee\u9304\u4e0b\u7684 \u4f5c\u54c1id.json\uff09\u6539\u540d\u4e4b\u5f8c\u5617\u8a66\u5168\u65b0\u4e0b\u8f09\u3002": "\u82e5\u60a8\u4e4b\u524d\u66fe\u7d93\u4e0b\u8f09\u904e\u672c\u4f5c\u54c1\u7684\u8a71\uff0c\u8acb\u5c01\u5b58\u539f\u6709\u4f5c\u54c1\u76ee\u9304\uff0c\u6216\u5c07\u4f5c\u54c1\u8cc7\u8a0a\u5feb\u53d6\u6a94\uff08\u4f5c\u54c1\u76ee\u9304\u4e0b\u7684 \u4f5c\u54c1id.json\uff09\u6539\u540d\u4e4b\u5f8c\u5617\u8a66\u5168\u65b0\u4e0b\u8f09\u3002",
	"\u5b58\u5728\u8f03\u5927\u7684\u820a\u6a94 (%2)\uff0c\u5c07\u4e0d\u8986\u84cb\uff1a%1": "\u5b58\u5728\u8f03\u5927\u7684\u820a\u6a94 (%2)\uff0c\u5c07\u4e0d\u8986\u84cb\uff1a%1",
	"\u5716\u6a94\u640d\u58de\uff1a": "\u5716\u6a94\u640d\u58de\uff1a",
	"\u7121\u6cd5\u53d6\u5f97\u5716\u7247\u3002": "\u7121\u6cd5\u53d6\u5f97\u5716\u7247\u3002",
	"\u5716\u7247\u7121\u5167\u5bb9\uff1a": "\u5716\u7247\u7121\u5167\u5bb9\uff1a",
	"\u6a94\u6848\u904e\u5c0f\uff0c\u50c5 %1 \u4f4d\u5143\u7d44\uff1a": "\u6a94\u6848\u904e\u5c0f\uff0c\u50c5 %1 \u4f4d\u5143\u7d44\uff1a",
	"\u6a94\u6848\u50c5 %1 {{PLURAL:$1|\u4f4d\u5143\u7d44}}\uff1a": "\u6a94\u6848\u50c5 %1 {{PLURAL:$1|\u4f4d\u5143\u7d44}}\uff1a",
	"\u6216\u8a31\u5716\u7247\u662f\u5b8c\u6574\u7684\uff0c\u53ea\u662f\u904e\u5c0f\u800c\u672a\u9054\u6a19\uff0c\u4f8b\u5982\u5e7e\u4e4e\u70ba\u7a7a\u767d\u4e4b\u5716\u7247\u3002": "\u6216\u8a31\u5716\u7247\u662f\u5b8c\u6574\u7684\uff0c\u53ea\u662f\u904e\u5c0f\u800c\u672a\u9054\u6a19\uff0c\u4f8b\u5982\u5e7e\u4e4e\u70ba\u7a7a\u767d\u4e4b\u5716\u7247\u3002",
	"work_crawler-skip-image-error-prompt": "\u60a8\u53ef\u8a2d\u5b9a MIN_LENGTH\uff0c\u5982 MIN_LENGTH=%1 \u8868\u793a\u5141\u8a31\u6700\u5c0f\u70ba %1 \u4f4d\u5143\u7d44\u7684\u5716\u7247\uff1b\u6216\u8005\u5148\u8a2d\u5b9a skip_error=true \u4f86\u5ffd\u7565\u5716\u7247\u932f\u8aa4\uff0c\u5f85\u53d6\u5f97\u6a94\u6848\u5f8c\uff0c\u81ea\u884c\u66f4\u6539\u6a94\u540d\uff0c\u53bb\u6389\u932f\u8aa4\u6a94\u540d\u5f8c\u7db4 %2 \u4ee5\u8df3\u904e\u6b64\u932f\u8aa4\u3002",
	"\u4e0b\u8f09\u6240\u5f97\u7684\u5716\u7247\u5927\u5c0f\u4e0d\u540c\uff1a%1\u3002": "\u4e0b\u8f09\u6240\u5f97\u7684\u5716\u7247\u5927\u5c0f\u4e0d\u540c\uff1a%1\u3002",
	"\u82e5\u975e\u56e0\u7db2\u7ad9\u63d0\u65e9\u622a\u65b7\u9023\u7dda\uff0c\u90a3\u9ebc\u60a8\u6216\u8a31\u9700\u8981\u589e\u9577\u6642\u9650\u4f86\u63d0\u4f9b\u8db3\u5920\u7684\u6642\u9593\u4e0b\u8f09\u5716\u7247\uff1f": "\u82e5\u975e\u56e0\u7db2\u7ad9\u63d0\u65e9\u622a\u65b7\u9023\u7dda\uff0c\u90a3\u9ebc\u60a8\u6216\u8a31\u9700\u8981\u589e\u9577\u6642\u9650\u4f86\u63d0\u4f9b\u8db3\u5920\u7684\u6642\u9593\u4e0b\u8f09\u5716\u7247\uff1f",
	"\u82e5\u932f\u8aa4\u6301\u7e8c\u767c\u751f\uff0c\u60a8\u53ef\u4ee5\u8a2d\u5b9a skip_error=true \u4f86\u5ffd\u7565\u5716\u7247\u932f\u8aa4\u3002": "\u82e5\u932f\u8aa4\u6301\u7e8c\u767c\u751f\uff0c\u60a8\u53ef\u4ee5\u8a2d\u5b9a skip_error=true \u4f86\u5ffd\u7565\u5716\u7247\u932f\u8aa4\u3002",
	"\u60a8\u5fc5\u9808\u8a2d\u5b9a skip_error \u6216 allow_EOI_error \u9078\u9805\uff0c\u624d\u6703\u5132\u5b58\u640d\u58de\u7684\u6a94\u6848\u3002": "\u60a8\u5fc5\u9808\u8a2d\u5b9a skip_error \u6216 allow_EOI_error \u9078\u9805\uff0c\u624d\u6703\u5132\u5b58\u640d\u58de\u7684\u6a94\u6848\u3002",
	"\u82e5\u60a8\u9700\u8981\u91cd\u65b0\u4e0b\u8f09\u4e4b\u524d\u4e0b\u8f09\u5931\u6557\u7684\u7ae0\u7bc0\uff0c\u8acb\u958b\u555f recheck \u9078\u9805\u3002": "\u82e5\u60a8\u9700\u8981\u91cd\u65b0\u4e0b\u8f09\u4e4b\u524d\u4e0b\u8f09\u5931\u6557\u7684\u7ae0\u7bc0\uff0c\u8acb\u958b\u555f recheck \u9078\u9805\u3002",
	"\u5716\u7247\u4e0b\u8f09\u932f\u8aa4": "\u5716\u7247\u4e0b\u8f09\u932f\u8aa4",
	"\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u5716\u7247\uff1a%1": "\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u5716\u7247\uff1a%1",
	"Invalid token pattern: {%1} %2": "\u7121\u6cd5\u63a1\u7528\u6b64\u7a2e\u5206\u9694\u4f5c\u54c1\u6b04\u4f4d\u4e4b\u6a23\u5f0f\uff1a{%1} %2",
	"\u5617\u8a66\u53d6\u5f97\u88ab\u5c4f\u853d\u7684\u4f5c\u54c1\u3002": "\u5617\u8a66\u53d6\u5f97\u88ab\u5c4f\u853d\u7684\u4f5c\u54c1\u3002",
	"\u4f7f\u7528\u4e4b\u524d\u7684\u5feb\u53d6\uff0c\u81ea \u00a7%1 \u63a5\u7e8c\u4e0b\u8f09\u3002": "\u4f7f\u7528\u4e4b\u524d\u7684\u5feb\u53d6\uff0c\u81ea \u00a7%1 \u63a5\u7e8c\u4e0b\u8f09\u3002",
	"\u7121\u6cd5\u89e3\u6790\u300a%1\u300b\u00a7%2 \u4e4b\u7ae0\u7bc0\u8cc7\u6599\uff01": "\u7121\u6cd5\u89e3\u6790\u300a%1\u300b\u00a7%2 \u4e4b\u7ae0\u7bc0\u8cc7\u6599\uff01",
	"\u00a7%1 \u5df2\u88ab\u5c4f\u853d\uff0c\u4e0d\u518d\u5617\u8a66\u89e3\u6790\u5176\u4ed6\u7ae0\u7bc0\u3002": "\u00a7%1 \u5df2\u88ab\u5c4f\u853d\uff0c\u4e0d\u518d\u5617\u8a66\u89e3\u6790\u5176\u4ed6\u7ae0\u7bc0\u3002",
	"\u5df2\u7121\u95b1\u8b80\u5377\u53ef\u7528\u3002": "\u5df2\u7121\u95b1\u8b80\u5377\u53ef\u7528\u3002",
	"\u6b64\u5f8c\u7684\u4f5c\u54c1\u6a19\u984c\u90fd\u88ab\u7576\u4f5c\u662f\u7db2\u9801\u9650\u5b9a\u4f5c\u54c1\u3002": "\u6b64\u5f8c\u7684\u4f5c\u54c1\u6a19\u984c\u90fd\u88ab\u7576\u4f5c\u662f\u7db2\u9801\u9650\u5b9a\u4f5c\u54c1\u3002",
	"\u672c\u7db2\u7ad9\u4e0d\u652f\u63f4\u5c01\u5b58\u820a\u4f5c\u54c1\u529f\u80fd (.archive_old_works)\uff01": "\u672c\u7db2\u7ad9\u4e0d\u652f\u63f4\u5c01\u5b58\u820a\u4f5c\u54c1\u529f\u80fd (.archive_old_works)\uff01",
	"\u4e0b\u6b21\u6536\u5230\u95b1\u8b80\u5238\u9084\u8981 %1\u3002": "\u4e0b\u6b21\u6536\u5230\u95b1\u8b80\u5238\u9084\u8981 %1\u3002",
	"\u5c07\u5012\u5e8f\u7ae0\u7bc0\u5217\u8868\u8f49\u70ba\u6b63\u5e8f\u3002": "\u5c07\u5012\u5e8f\u7ae0\u7bc0\u5217\u8868\u8f49\u70ba\u6b63\u5e8f\u3002",
	"\u9084\u6709%1\u5f35\u95b1\u8b80\u5377\uff0c\u4e14\u7b2c %2/%3 \u7ae0\u9084\u6709\u6c92\u4e0b\u8f09\u904e\uff0c\u5f9e\u6b64\u7ae0\u958b\u59cb\u6aa2\u67e5\u3002": "\u9084\u6709%1\u5f35\u95b1\u8b80\u5377\uff0c\u4e14\u7b2c %2/%3 \u7ae0\u9084\u6709\u6c92\u4e0b\u8f09\u904e\uff0c\u5f9e\u6b64\u7ae0\u958b\u59cb\u6aa2\u67e5\u3002",
	"\u5df2\u8cfc\u8cb7\u7ae0\u7bc0\u300a%1\u300b\u3002": "\u5df2\u8cfc\u8cb7\u7ae0\u7bc0\u300a%1\u300b\u3002",
	"\u5728 %1 \u4e4b\u524d\uff08\u9084\u6709 %2\uff09\u53ef\u4ee5\u95b1\u8b80\u672c\u7ae0\u7bc0\u300a%3\u300b\u3002": "\u5728 %1 \u4e4b\u524d\uff08\u9084\u6709 %2\uff09\u53ef\u4ee5\u95b1\u8b80\u672c\u7ae0\u7bc0\u300a%3\u300b\u3002",
	"\u4e4b\u524d\u5df2\u4e0b\u8f09\u904e\u7ae0\u7bc0\u300a%1\u300b\uff0c\u4e0d\u518d\u91cd\u65b0\u8cfc\u8cb7\u3002": "\u4e4b\u524d\u5df2\u4e0b\u8f09\u904e\u7ae0\u7bc0\u300a%1\u300b\uff0c\u4e0d\u518d\u91cd\u65b0\u8cfc\u8cb7\u3002",
	"\u672c\u7ae0\u7bc0\u72c0\u6cc1\u4e0d\u660e(%1)\u3002\u8df3\u904e\u300a%1\u300b\u4e0d\u63a1\u7528\u95b1\u8b80\u5377\u3002": "\u672c\u7ae0\u7bc0\u72c0\u6cc1\u4e0d\u660e(%1)\u3002\u8df3\u904e\u300a%1\u300b\u4e0d\u63a1\u7528\u95b1\u8b80\u5377\u3002",
	"\u672a\u8a2d\u5b9a\u8b93\u672c\u5de5\u5177\u81ea\u52d5\u4f7f\u7528\u95b1\u8b80\u5377\u3002\u82e5\u60a8\u4e26\u975e\u4f7f\u7528\u5b89\u88dd\u5305\uff0c\u4e26\u60f3\u8981\u8b93\u672c\u5de5\u5177\u81ea\u52d5\u4f7f\u7528\u95b1\u8b80\u5377\uff0c\u8acb\u6253\u958b\u6a94\u6848\u7e3d\u7ba1\uff0c\u5230\u5b89\u88dd\u672c\u5de5\u5177\u7684\u76ee\u9304\u4e0b\uff08\u82e5\u662f\u60a8\u4f7f\u7528\u5b89\u88dd\u5305\uff0c\u5c31\u4e0d\u80fd\u5920\u8a2d\u5b9a\u5e33\u865f\u5bc6\u78bc\u4e86\u3002\uff09\uff0c\u5728 work_crawler.configuration.js \u9019\u500b\u6a94\u6848\u4e2d\u8a2d\u5b9a\u597d\u5e33\u865f\u5bc6\u78bc\u8cc7\u6599\uff0c\u4ee5\u53ca \"auto_use_ticket:true\"\u3002\u60a8\u53ef\u4ee5\u53c3\u8003 work_crawler.default_configuration.js \u9019\u500b\u6a94\u6848\u4f86\u505a\u8a2d\u5b9a\u3002": "\u672a\u8a2d\u5b9a\u8b93\u672c\u5de5\u5177\u81ea\u52d5\u4f7f\u7528\u95b1\u8b80\u5377\u3002\u82e5\u60a8\u4e26\u975e\u4f7f\u7528\u5b89\u88dd\u5305\uff0c\u4e26\u60f3\u8981\u8b93\u672c\u5de5\u5177\u81ea\u52d5\u4f7f\u7528\u95b1\u8b80\u5377\uff0c\u8acb\u6253\u958b\u6a94\u6848\u7e3d\u7ba1\uff0c\u5230\u5b89\u88dd\u672c\u5de5\u5177\u7684\u76ee\u9304\u4e0b\uff08\u82e5\u662f\u60a8\u4f7f\u7528\u5b89\u88dd\u5305\uff0c\u5c31\u4e0d\u80fd\u5920\u8a2d\u5b9a\u5e33\u865f\u5bc6\u78bc\u4e86\u3002\uff09\uff0c\u5728 work_crawler.configuration.js \u9019\u500b\u6a94\u6848\u4e2d\u8a2d\u5b9a\u597d\u5e33\u865f\u5bc6\u78bc\u8cc7\u6599\uff0c\u4ee5\u53ca \"auto_use_ticket:true\"\u3002\u60a8\u53ef\u4ee5\u53c3\u8003 work_crawler.default_configuration.js \u9019\u500b\u6a94\u6848\u4f86\u505a\u8a2d\u5b9a\u3002",
	"\u7528\u95b1\u8b80\u5238\u95b1\u8b80\u300a%1\u300b\u3002": "\u7528\u95b1\u8b80\u5238\u95b1\u8b80\u300a%1\u300b\u3002",
	"\u7db2\u9801\u6539\u7248\uff1f\u7121\u6cd5\u89e3\u6790\uff01": "\u7db2\u9801\u6539\u7248\uff1f\u7121\u6cd5\u89e3\u6790\uff01",
	"Invalid image url: %1": "\u5716\u7247\u7db2\u5740\u932f\u8aa4\uff1a%1",
	"Login as [%1]": "\u767b\u5165\u70ba[%1]",
	"\u5df2\u6536\u5230%1\u9805\u6709\u671f\u9650\u7684\u7269\u54c1\u3002": "\u5df2\u6536\u5230%1\u9805\u6709\u671f\u9650\u7684\u7269\u54c1\u3002",
	"\u4e0b\u8f09\u6642\u767c\u751f\u932f\u8aa4\uff0c\u7121\u6cd5\u9806\u5229\u53d6\u5f97\u6a94\u6848\u5167\u5bb9\uff01": "\u4e0b\u8f09\u6642\u767c\u751f\u932f\u8aa4\uff0c\u7121\u6cd5\u9806\u5229\u53d6\u5f97\u6a94\u6848\u5167\u5bb9\uff01",
	"Different url: %1 \u2260 %2": "\u7db2\u5740\u4e0d\u540c\uff1a%1 \u2260 %2",
	"\u6216\u8a31\u662f\u4e0b\u8f09\u7684\u6a94\u6848\u51fa\u73fe\u932f\u8aa4\uff1f\u60a8\u53ef\u5617\u8a66\u904e\u6bb5\u6642\u9593\u518d\u4e0b\u8f09\uff0c\u6216\u9078\u7528 .recheck \u9078\u9805\u4f86\u5ffd\u7565\u5feb\u53d6\u3001\u91cd\u65b0\u4e0b\u8f09\u6bcf\u500b\u5716\u7247\u7684\u9801\u9762\u3002": "\u6216\u8a31\u662f\u4e0b\u8f09\u7684\u6a94\u6848\u51fa\u73fe\u932f\u8aa4\uff1f\u60a8\u53ef\u5617\u8a66\u904e\u6bb5\u6642\u9593\u518d\u4e0b\u8f09\uff0c\u6216\u9078\u7528 .recheck \u9078\u9805\u4f86\u5ffd\u7565\u5feb\u53d6\u3001\u91cd\u65b0\u4e0b\u8f09\u6bcf\u500b\u5716\u7247\u7684\u9801\u9762\u3002",
	"\u6709\u4e9b\u7bc7\u7ae0\u4e4bURL\u6a94\u540d\u975e\u6578\u5b57\uff1a%1": "\u6709\u4e9b\u7bc7\u7ae0\u4e4bURL\u6a94\u540d\u975e\u6578\u5b57\uff1a%1",
	"\u672c\u7ae0\u7bc0\u4e0a\u4e00\u5f35\u5716\u7247\u4e0b\u8f09\u6210\u529f\u3002\u4e0b\u8f09\u672c\u7ae0\u7bc0\u4e0b\u4e00\u5e45\u5716\u7247\u3002": "\u672c\u7ae0\u7bc0\u4e0a\u4e00\u5f35\u5716\u7247\u4e0b\u8f09\u6210\u529f\u3002\u4e0b\u8f09\u672c\u7ae0\u7bc0\u4e0b\u4e00\u5e45\u5716\u7247\u3002",
	"\u7b2c\u4e00\u5f35\u5716\u5c31\u4e0b\u8f09\u5931\u6557\u4e86\u3002\u7d50\u675f\u4e0b\u8f09\u672c\u4f5c\u54c1\u3002": "\u7b2c\u4e00\u5f35\u5716\u5c31\u4e0b\u8f09\u5931\u6557\u4e86\u3002\u7d50\u675f\u4e0b\u8f09\u672c\u4f5c\u54c1\u3002",
	"\u7121\u6cd5\u89e3\u6790\u7ae0\u7bc0\u8cc7\u6599\u4e26\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u6587\u5b57\uff01": "\u7121\u6cd5\u89e3\u6790\u7ae0\u7bc0\u8cc7\u6599\u4e26\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u6587\u5b57\uff01",
	"\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u5167\u5bb9\u4e2d\u4e4b\u9023\u7d50\u62bd\u53d6\u51fa\u5716\u7247\u7db2\u5740\uff1a%1": "\u7121\u6cd5\u5f9e\u7ae0\u7bc0\u5167\u5bb9\u4e2d\u4e4b\u9023\u7d50\u62bd\u53d6\u51fa\u5716\u7247\u7db2\u5740\uff1a%1",
	"\u5f9e[%1]\u53d6\u5f97 %2 \u500b\u5716\u7247\u4f3a\u670d\u5668\uff1a%3": "\u5f9e[%1]\u53d6\u5f97 %2 \u500b\u5716\u7247\u4f3a\u670d\u5668\uff1a%3",
	"\u7121\u6cd5\u5f9e[%1]\u62bd\u53d6\u51fa\u5716\u7247\u4f3a\u670d\u5668\u5217\u8868\uff01": "\u7121\u6cd5\u5f9e[%1]\u62bd\u53d6\u51fa\u5716\u7247\u4f3a\u670d\u5668\u5217\u8868\uff01",
	"%1: \u6c92\u6709\u8f38\u5165 work_id\uff01": "%1: \u6c92\u6709\u8f38\u5165 work_id\uff01",
	"\u958b\u59cb\u8655\u7406\u300a%1\u300b\uff0c\u5132\u5b58\u81f3 %2": "\u958b\u59cb\u8655\u7406\u300a%1\u300b\uff0c\u5132\u5b58\u81f3 %2",
	"Cannot create base directory: %1": "\u7121\u6cd5\u5275\u5efa\u4e0b\u8f09\u57fa\u5c64\u76ee\u9304\uff1a%1",
	"\u4f5c\u54c1\u5217\u8868\u5340\u584a\u6ce8\u89e3 \"*/\" \u5f8c\u9762\u7684\"%1\"\u6703\u88ab\u5ffd\u7565": "\u4f5c\u54c1\u5217\u8868\u5340\u584a\u6ce8\u89e3 \"*/\" \u5f8c\u9762\u7684\"%1\"\u6703\u88ab\u5ffd\u7565",
	"\u7121\u6cd5\u8b80\u53d6\u5217\u8868\u6a94\u6848\uff1a%1": "\u7121\u6cd5\u8b80\u53d6\u5217\u8868\u6a94\u6848\uff1a%1",
	"\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848\uff1a%1": "\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848\uff1a%1",
	"\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u8655\u7406\u4e86%2\u500b\u4f5c\u54c1\u3002": "\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u8655\u7406\u4e86%2\u500b\u4f5c\u54c1\u3002",
	"\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u6ce8\u89e3\u6392\u9664\u4e86%2\u500b\u4f5c\u54c1\u3002": "\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u6ce8\u89e3\u6392\u9664\u4e86%2\u500b\u4f5c\u54c1\u3002",
	"\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u672a\u4f5c\u6539\u8b8a\u3002": "\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848 [%1]\uff0c\u672a\u4f5c\u6539\u8b8a\u3002",
	"\u60a8\u53ef\u80fd\u932f\u628a\u4e0b\u8f09\u5de5\u5177\u6a94\u7576\u4f5c\u4e86\u5217\u8868\u6a94\u6848\uff1a%1": "\u60a8\u53ef\u80fd\u932f\u628a\u4e0b\u8f09\u5de5\u5177\u6a94\u7576\u4f5c\u4e86\u5217\u8868\u6a94\u6848\uff1a%1",
	"\u6539\u63a1\u7528\u5217\u8868\u6a94\u6848\uff1a%1": "\u6539\u63a1\u7528\u5217\u8868\u6a94\u6848\uff1a%1",
	"\u4f5c\u54c1 id \u7121\u6548\uff1a%1": "\u4f5c\u54c1 id \u7121\u6548\uff1a%1",
	"\u81ea\u4f5c\u54c1\u5217\u8868\u4e2d\u522a\u9664\u5c07\u5c01\u5b58\u4e4b\u4f5c\u54c1\uff1a\u300a%1\u300b": "\u81ea\u4f5c\u54c1\u5217\u8868\u4e2d\u522a\u9664\u5c07\u5c01\u5b58\u4e4b\u4f5c\u54c1\uff1a\u300a%1\u300b",
	"\u5df2\u5c01\u5b58\uff1a": "\u5df2\u5c01\u5b58\uff1a",
	"\u5c01\u5b58\u65e5\u671f\uff1a%1\uff0c\u6700\u5f8c\u4e00\u6b21\u65bc %2 \u4e0b\u8f09": "\u5c01\u5b58\u65e5\u671f\uff1a%1\uff0c\u6700\u5f8c\u4e00\u6b21\u65bc %2 \u4e0b\u8f09",
	"\u5c01\u5b58\u820a\u4f5c\u54c1\uff1a\u300a%1\u300b": "\u5c01\u5b58\u820a\u4f5c\u54c1\uff1a\u300a%1\u300b",
	"\u8b66\u544a\uff1a\u6b63\u4e0b\u8f09\u4ee5\"%2\"\u958b\u59cb\u3001\u9577\u5ea6 %1 \u7684\u4f5c\u54c1\u5217\u8868\u4e2d\u3002\u91cd\u8907\u4e0b\u8f09\u4f5c\u54c1\u5217\u8868\u53ef\u80fd\u9020\u6210\u932f\u8aa4\uff01": "\u8b66\u544a\uff1a\u6b63\u4e0b\u8f09\u4ee5\"%2\"\u958b\u59cb\u3001\u9577\u5ea6 %1 \u7684\u4f5c\u54c1\u5217\u8868\u4e2d\u3002\u91cd\u8907\u4e0b\u8f09\u4f5c\u54c1\u5217\u8868\u53ef\u80fd\u9020\u6210\u932f\u8aa4\uff01",
	"Using convert_id[%1]": "\u4f7f\u7528\u89e3\u6790\u5668[%1]",
	"Using convert_id[%1] via url: %2": "\u4f7f\u7528\u89e3\u6790\u5668[%1]\uff0c\u5f9e %2 \u89e3\u6790\u51fa\u4f5c\u54c1\u5217\u8868\u3002",
	"Invalid id converter for %1": "\u89e3\u6790\u5668\u7121\u6548\uff1a%1",
	"Downloading %1: %2": "\u4e0b\u8f09\u4f5c\u54c1\u5217\u8868 %1\uff1a%2",
	"\u5171%1\u500b\u4f5c\u54c1\u4e0b\u8f09\u5b8c\u7562\u3002": "\u5171%1\u500b\u4f5c\u54c1\u4e0b\u8f09\u5b8c\u7562\u3002",
	"\u5171%1\u500b\u4f5c\u54c1\u51fa\u73fe\u7279\u6b8a\u72c0\u6cc1\uff0c\u8a18\u9304\u65bc[%2]\u3002": "\u5171%1\u500b\u4f5c\u54c1\u51fa\u73fe\u7279\u6b8a\u72c0\u6cc1\uff0c\u8a18\u9304\u65bc[%2]\u3002",
	"\u6e96\u5099\u53d6\u6d88\u4e0b\u8f09\u4f5c\u696d\u4e2d\uff0c\u5c07\u6703\u5728\u4e0b\u8f09\u5b8c\u672c\u7ae0\u7bc0\u5f8c\u751f\u6548\u3002": "\u6e96\u5099\u53d6\u6d88\u4e0b\u8f09\u4f5c\u696d\u4e2d\uff0c\u5c07\u6703\u5728\u4e0b\u8f09\u5b8c\u672c\u7ae0\u7bc0\u5f8c\u751f\u6548\u3002",
	"\u6e96\u5099\u66ab\u505c\u4e0b\u8f09\u4f5c\u696d\u4e2d\uff0c\u5c07\u6703\u5728\u4e0b\u8f09\u5b8c\u672c\u7ae0\u7bc0\u5f8c\u751f\u6548\u3002": "\u6e96\u5099\u66ab\u505c\u4e0b\u8f09\u4f5c\u696d\u4e2d\uff0c\u5c07\u6703\u5728\u4e0b\u8f09\u5b8c\u672c\u7ae0\u7bc0\u5f8c\u751f\u6548\u3002",
	"\u7e7c\u7e8c\u4e0b\u8f09\u300a%1\u300b\u3002": "\u7e7c\u7e8c\u4e0b\u8f09\u300a%1\u300b\u3002",
	"\u9810\u4f30\u9084\u9700 %1 \u4e0b\u8f09\u5b8c\u672c\u4f5c\u54c1\u3002": "\u9810\u4f30\u9084\u9700 %1 \u4e0b\u8f09\u5b8c\u672c\u4f5c\u54c1\u3002",
	"work_data.author": "\u4f5c\u8005",
	"work_data.chapter_count": "\u7ae0\u7bc0\u6578\u91cf",
	"work_data.chapter_list": "\u7ae0\u7bc0\u5217\u8868",
	"work_data.description": "\u4f5c\u54c1\u7c21\u4ecb",
	"work_data.directory": "\u5132\u5b58\u76ee\u9304",
	"work_data.id": "\u4f5c\u54c1 id",
	"work_data.last_download.chapter": "\u4e0b\u8f09\u7ae0\u7bc0",
	"work_data.last_download.date": "\u4e0b\u8f09\u65e5\u671f",
	"work_data.last_update": "\u66f4\u65b0\u65e5\u671f",
	"work_data.status": "\u72c0\u614b",
	"work_data.title": "\u4f5c\u54c1\u6a19\u984c",
	"work_data.url": "\u4f5c\u54c1\u7db2\u5740",
	"work_status-finished": "\u5df2\u5b8c\u6210",
	"work_status-limited": "\u6709\u9650\u5236",
	"work_status-not found": "\u672a\u627e\u5230",
	"Work information": "\u4f5c\u54c1\u8cc7\u8a0a",
	"work_data.chapter_NO": "\u7ae0\u7bc0\u7de8\u865f",
	"work_data.chapter_title": "\u7ae0\u7bc0\u6a19\u984c",
	"\u60a8\u53ef\u6307\u5b9a \"start_chapter_NO=\u7ae0\u7bc0\u7de8\u865f\u6578\u5b57\" \u6216 \"start_chapter_title=\u7ae0\u7bc0\u6a19\u984c\" \u4f86\u9078\u64c7\u8981\u958b\u59cb\u4e0b\u8f09\u7684\u7ae0\u7bc0\u3002": "\u60a8\u53ef\u6307\u5b9a \"start_chapter_NO=\u7ae0\u7bc0\u7de8\u865f\u6578\u5b57\" \u6216 \"start_chapter_title=\u7ae0\u7bc0\u6a19\u984c\" \u4f86\u9078\u64c7\u8981\u958b\u59cb\u4e0b\u8f09\u7684\u7ae0\u7bc0\u3002",
	"\u6216\u6307\u5b9a \"chapter_filter=\u7ae0\u7bc0\u6a19\u984c\" \u50c5\u4e0b\u8f09\u67d0\u500b\u7ae0\u7bc0\u3002": "\u6216\u6307\u5b9a \"chapter_filter=\u7ae0\u7bc0\u6a19\u984c\" \u50c5\u4e0b\u8f09\u67d0\u500b\u7ae0\u7bc0\u3002",
	"\u7121\u6cd5\u5132\u5b58\u4f5c\u54c1\u300a%1\u300b\u4e4b\u8cc7\u8a0a\u81f3\u6a94\u6848\uff01": "\u7121\u6cd5\u5132\u5b58\u4f5c\u54c1\u300a%1\u300b\u4e4b\u8cc7\u8a0a\u81f3\u6a94\u6848\uff01",
	"\u5275\u5efa\u4e26\u4f7f\u7528\u4f5c\u54c1\u7db2\u5740 RegExp\uff1a%1": "\u5275\u5efa\u4e26\u4f7f\u7528\u4f5c\u54c1\u7db2\u5740 RegExp\uff1a%1",
	"\u81ea\u4f5c\u54c1\u7db2\u5740\u63d0\u53d6\u51fa work id\uff1a%1": "\u81ea\u4f5c\u54c1\u7db2\u5740\u63d0\u53d6\u51fa work id\uff1a%1",
	"\u7121\u6cd5\u81ea\u4f5c\u54c1\u7db2\u5740\u63d0\u53d6\u51fa work id\uff01\u4f5c\u54c1\u8cc7\u8a0a\uff1a%1": "\u7121\u6cd5\u81ea\u4f5c\u54c1\u7db2\u5740\u63d0\u53d6\u51fa work id\uff01\u4f5c\u54c1\u8cc7\u8a0a\uff1a%1",
	"\u627e\u5230%1\u500b\u4f5c\u54c1\uff1a%2": "\u627e\u5230%1\u500b\u4f5c\u54c1\uff1a%2",
	"crawler.extract_work_id() \u4e0d\u61c9\u56de\u50b3 true\uff01\u8acb\u4fee\u6539\u5de5\u5177\u6a94\u7a0b\u5f0f\u78bc\uff01": "crawler.extract_work_id() \u4e0d\u61c9\u56de\u50b3 true\uff01\u8acb\u4fee\u6539\u5de5\u5177\u6a94\u7a0b\u5f0f\u78bc\uff01",
	"Cache file of previous search for works: %1": "\u8a18\u9304\u5148\u524d\u641c\u5c0b\u4f5c\u54c1\u6240\u7372\u5f97\u7d50\u679c\u7684\u5feb\u53d6\u6a94\u6848\uff1a%1",
	"\u91cd\u65b0\u641c\u5c0b\u4f5c\u54c1\u300a%1\u300b": "\u91cd\u65b0\u641c\u5c0b\u4f5c\u54c1\u300a%1\u300b",
	"\u5df2\u5feb\u53d6\u4f5c\u54c1 id\uff0c\u4e0d\u518d\u91cd\u65b0\u641c\u5c0b\uff1a%1": "\u5df2\u5feb\u53d6\u4f5c\u54c1 id\uff0c\u4e0d\u518d\u91cd\u65b0\u641c\u5c0b\uff1a%1",
	"\u672c\u7db2\u8def\u4f5c\u54c1\u7db2\u7ad9 %1 \u7684\u6a21\u7d44\u672a\u63d0\u4f9b\u641c\u5c0b\u529f\u80fd\u3002": "\u672c\u7db2\u8def\u4f5c\u54c1\u7db2\u7ad9 %1 \u7684\u6a21\u7d44\u672a\u63d0\u4f9b\u641c\u5c0b\u529f\u80fd\u3002",
	"\u8acb\u5148\u8f38\u5165\u4f5c\u54c1 id\uff0c\u4e0b\u8f09\u904e\u4e00\u6b21\u5f8c\u5de5\u5177\u6703\u81ea\u52d5\u8a18\u9304\u4f5c\u54c1\u6a19\u984c\u8207 id \u7684\u8f49\u63db\u3002": "\u8acb\u5148\u8f38\u5165\u4f5c\u54c1 id\uff0c\u4e0b\u8f09\u904e\u4e00\u6b21\u5f8c\u5de5\u5177\u6703\u81ea\u52d5\u8a18\u9304\u4f5c\u54c1\u6a19\u984c\u8207 id \u7684\u8f49\u63db\u3002",
	"\u4ea6\u53ef\u624b\u52d5\u8a2d\u5b9a\uff0c\u7de8\u8f2f\u300a%1\u300b\u4e4b id \u65bc %2": "\u4ea6\u53ef\u624b\u52d5\u8a2d\u5b9a\uff0c\u7de8\u8f2f\u300a%1\u300b\u4e4b id \u65bc %2",
	"\u6c92\u6709\u300a%1\u300b\u7684\u641c\u7d22\u7d50\u679c\uff08\u7db2\u7ad9\u66ab\u6642\u4e0d\u53ef\u7528\u6216\u6539\u7248\uff1f\uff09": "\u6c92\u6709\u300a%1\u300b\u7684\u641c\u7d22\u7d50\u679c\uff08\u7db2\u7ad9\u66ab\u6642\u4e0d\u53ef\u7528\u6216\u6539\u7248\uff1f\uff09",
	"\u6c92\u6709\u641c\u7d22\u7d50\u679c\u3002\u7db2\u7ad9\u66ab\u6642\u4e0d\u53ef\u7528\u6216\u6539\u7248\uff1f": "\u6c92\u6709\u641c\u7d22\u7d50\u679c\u3002\u7db2\u7ad9\u66ab\u6642\u4e0d\u53ef\u7528\u6216\u6539\u7248\uff1f",
	"\u4f5c\u54c1\u7db2\u5740\u89e3\u6790\u51fd\u6578 parse_search_result \u672a\u56de\u50b3\u7d50\u679c\uff01": "\u4f5c\u54c1\u7db2\u5740\u89e3\u6790\u51fd\u6578 parse_search_result \u672a\u56de\u50b3\u7d50\u679c\uff01",
	"\u4f5c\u54c1\u7db2\u5740\u89e3\u6790\u51fd\u6578 parse_search_result \u672a\u56de\u50b3\u6b63\u898f\u7d50\u679c\uff01": "\u4f5c\u54c1\u7db2\u5740\u89e3\u6790\u51fd\u6578 parse_search_result \u672a\u56de\u50b3\u6b63\u898f\u7d50\u679c\uff01",
	"\u7121\u6cd5\u89e3\u6790\u641c\u5c0b\u4f5c\u54c1\u300a%1\u300b\u4e4b\u7d50\u679c\uff01": "\u7121\u6cd5\u89e3\u6790\u641c\u5c0b\u4f5c\u54c1\u300a%1\u300b\u4e4b\u7d50\u679c\uff01",
	"\u7121\u6cd5\u89e3\u6790\u641c\u5c0b\u4f5c\u54c1\u4e4b\u7d50\u679c\uff01": "\u7121\u6cd5\u89e3\u6790\u641c\u5c0b\u4f5c\u54c1\u4e4b\u7d50\u679c\uff01",
	"\u641c\u5c0b\u300a%1\u300b\u627e\u5230 %2\u500b{{PLURAL:%2|\u4f5c\u54c1}}\uff1a%3": "\u641c\u5c0b\u300a%1\u300b\u627e\u5230 %2\u500b{{PLURAL:%2|\u4f5c\u54c1}}\uff1a%3",
	"\u672a\u641c\u5c0b\u5230\u8207\u300a%1\u300b\u76f8\u7b26\u8005\u3002": "\u672a\u641c\u5c0b\u5230\u8207\u300a%1\u300b\u76f8\u7b26\u8005\u3002",
	"\u627e\u5230%2\u500b\u8207\u300a%1\u300b\u76f8\u7b26\u8005\u3002": "\u627e\u5230%2\u500b\u8207\u300a%1\u300b\u76f8\u7b26\u8005\u3002",
	"\u82e5\u60a8\u8f38\u5165\u7684\u662f work id\uff0c\u8acb\u56de\u5831\u8b70\u984c\u8b93\u4e0b\u8f09\u5de5\u5177\u8a2d\u5b9a extract_work_id()\uff0c\u4ee5\u514d\u5c07 work id \u8aa4\u5224\u70ba work title\u3002": "\u82e5\u60a8\u8f38\u5165\u7684\u662f work id\uff0c\u8acb\u56de\u5831\u8b70\u984c\u8b93\u4e0b\u8f09\u5de5\u5177\u8a2d\u5b9a extract_work_id()\uff0c\u4ee5\u514d\u5c07 work id \u8aa4\u5224\u70ba work title\u3002",
	"Using title:": "\u63a1\u7528\u6a19\u984c\uff1a",
	"\u4e0b\u8f09%1 - \u8cc7\u8a0a @ %2": "\u4e0b\u8f09%1 - \u8cc7\u8a0a @ %2",
	"\u7b49\u5f85 %2 \u4e4b\u5f8c\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1": "\u7b49\u5f85 %2 \u4e4b\u5f8c\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1",
	"\u7121\u6cd5\u53d6\u5f97 %1 \u7684\u4f5c\u54c1\u8cc7\u8a0a\uff1a%2": "\u7121\u6cd5\u53d6\u5f97 %1 \u7684\u4f5c\u54c1\u8cc7\u8a0a\uff1a%2",
	"\u53d6\u5f97\u7a7a\u7684\u5167\u5bb9": "\u53d6\u5f97\u7a7a\u7684\u5167\u5bb9",
	"\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1": "\u7b49\u5f85 %2 \u4e4b\u5f8c\u518d\u91cd\u65b0\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1",
	"\u91cd\u65b0\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1": "\u91cd\u65b0\u53d6\u5f97\u4f5c\u54c1\u8cc7\u8a0a\u9801\u9762\uff1a%1",
	"\u300a%1\u300b\uff08id\uff1a%2\uff09\u975e\u4e2d\u65e5\u97d3\u6587\u4f5c\u54c1\u6a19\u984c\u3002": "\u300a%1\u300b\uff08id\uff1a%2\uff09\u975e\u4e2d\u65e5\u97d3\u6587\u4f5c\u54c1\u6a19\u984c\u3002",
	"\u7121\u6cd5\u53d6\u5f97\u6216\u672a\u8a2d\u5b9a\u4f5c\u54c1\u6a19\u984c\u300a%1\u300b\uff08id\uff1a%2\uff09\u3002": "\u7121\u6cd5\u53d6\u5f97\u6216\u672a\u8a2d\u5b9a\u4f5c\u54c1\u6a19\u984c\u300a%1\u300b\uff08id\uff1a%2\uff09\u3002",
	"\u4e0b\u8f09%1 - \u76ee\u6b21 @ %2": "\u4e0b\u8f09%1 - \u76ee\u6b21 @ %2",
	"\u81ea\u8a02\u4f5c\u54c1\u76ee\u9304\u540d\u7a31\u6a21\u5f0f %1 \u4ee4\u4e0d\u540c\u4f5c\u54c1\u7522\u751f\u76f8\u540c\u540d\u7a31\uff0c\u6539\u63a1\u9810\u8a2d\u4f5c\u54c1\u76ee\u9304\u6a21\u5f0f\uff01": "\u81ea\u8a02\u4f5c\u54c1\u76ee\u9304\u540d\u7a31\u6a21\u5f0f %1 \u4ee4\u4e0d\u540c\u4f5c\u54c1\u7522\u751f\u76f8\u540c\u540d\u7a31\uff0c\u6539\u63a1\u9810\u8a2d\u4f5c\u54c1\u76ee\u9304\u6a21\u5f0f\uff01",
	"\u522a\u9664\u5df2\u5b58\u5728\u7684\u4f5c\u54c1\u8cc7\u6599\u5feb\u53d6\uff1a%1": "\u522a\u9664\u5df2\u5b58\u5728\u7684\u4f5c\u54c1\u8cc7\u6599\u5feb\u53d6\uff1a%1",
	"\u65b0\u8cc7\u6599\u2192": "\u65b0\u8cc7\u6599\u2192",
	"Cannot get chapter list page!": "\u7121\u6cd5\u53d6\u5f97\u7ae0\u7bc0\u5217\u8868\u9801\u9762\uff01",
	"Create work_data.directory: %1": "\u5275\u5efa\u4f5c\u54c1\u76ee\u9304\uff1a%1",
	"last saved date": "\u6700\u5f8c\u5132\u5b58\u65e5\u671f",
	"last updated date": "\u4f5c\u54c1\u6700\u5f8c\u66f4\u65b0\u65e5\u671f",
	"\u300a%2\u300b\uff1a\u57f7\u884c %1 \u6642\u767c\u751f\u56b4\u91cd\u932f\u8aa4\uff0c\u7570\u5e38\u4e2d\u65b7\u3002": "\u300a%2\u300b\uff1a\u57f7\u884c %1 \u6642\u767c\u751f\u56b4\u91cd\u932f\u8aa4\uff0c\u7570\u5e38\u4e2d\u65b7\u3002",
	"\u81ea\u7ae0\u7bc0\u8cc7\u6599\u2192": "\u81ea\u7ae0\u7bc0\u8cc7\u6599\u2192",
	"\u8f38\u5165 \u00a7%1 \u7684\u7db2\u5740\uff0c\u50c5\u4e0b\u8f09\u6b64\u4e00\u7ae0\u7bc0\u3002": "\u8f38\u5165 \u00a7%1 \u7684\u7db2\u5740\uff0c\u50c5\u4e0b\u8f09\u6b64\u4e00\u7ae0\u7bc0\u3002",
	"\u4f5c\u54c1\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u522a\u9664\u3002": "\u4f5c\u54c1\u4e0d\u5b58\u5728\u6216\u5df2\u88ab\u522a\u9664\u3002",
	"Cannot get chapter count!": "\u7121\u6cd5\u53d6\u5f97\u7ae0\u7bc0\u6578\u91cf\uff01",
	"\u6216\u8a31\u4f5c\u54c1\u5df2\u88ab\u522a\u9664\u6216\u5c4f\u853d\uff1f": "\u6216\u8a31\u4f5c\u54c1\u5df2\u88ab\u522a\u9664\u6216\u5c4f\u853d\uff1f",
	"\u6216\u8a31\u4f5c\u54c1\u5df2\u88ab\u522a\u9664\u6216\u5c4f\u853d\uff0c\u6216\u8005\u7db2\u7ad9\u6539\u7248\u4e86\uff1f": "\u6216\u8a31\u4f5c\u54c1\u5df2\u88ab\u522a\u9664\u6216\u5c4f\u853d\uff0c\u6216\u8005\u7db2\u7ad9\u6539\u7248\u4e86\uff1f",
	"Remove chapter list page: %1": "\u522a\u9664\u5df2\u5b58\u5728\u7684\u7ae0\u7bc0\u5217\u8868\u9801\u9762\uff1a%1",
	"\u624b\u52d5\u6307\u5b9a\u4e86\u4e0d\u4e0b\u8f09\u4efb\u4f55\u7ae0\u7bc0\uff01": "\u624b\u52d5\u6307\u5b9a\u4e86\u4e0d\u4e0b\u8f09\u4efb\u4f55\u7ae0\u7bc0\uff01",
	"\u50c5\u4e0b\u8f09\u7ae0\u7bc0\u7de8\u865f\uff1a%1": "\u50c5\u4e0b\u8f09\u7ae0\u7bc0\u7de8\u865f\uff1a%1",
	"\u5df2\u8a2d\u5b9a .recheck \u9078\u9805\uff0c\u4e14\u4e4b\u524d\u66fe\u4e0b\u8f09\u904e\u672c\u4f5c\u54c1\uff0c\u4f5c\u54c1\u76ee\u9304\u6709\u5167\u5bb9\u3002": "\u5df2\u8a2d\u5b9a .recheck \u9078\u9805\uff0c\u4e14\u4e4b\u524d\u66fe\u4e0b\u8f09\u904e\u672c\u4f5c\u54c1\uff0c\u4f5c\u54c1\u76ee\u9304\u6709\u5167\u5bb9\u3002",
	"\u65e2\u5df2\u8a2d\u5b9a .recheck \u9078\u9805\uff0c\u5247\u5c07 .reget_chapter \u9078\u9805\u8a2d\u5b9a\u70ba %1 \u5c07\u7121\u4f5c\u7528\uff01": "\u65e2\u5df2\u8a2d\u5b9a .recheck \u9078\u9805\uff0c\u5247\u5c07 .reget_chapter \u9078\u9805\u8a2d\u5b9a\u70ba %1 \u5c07\u7121\u4f5c\u7528\uff01",
	"\u5c07\u81ea\u52d5\u628a .reget_chapter \u8f49\u70ba true\uff0c\u660e\u78ba\u6307\u5b9a reget_chapter \u4ee5\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u3002": "\u5c07\u81ea\u52d5\u628a .reget_chapter \u8f49\u70ba true\uff0c\u660e\u78ba\u6307\u5b9a reget_chapter \u4ee5\u91cd\u65b0\u53d6\u5f97\u7ae0\u7bc0\u5167\u5bb9\u3002",
	"\u4f5c\u54c1\u8b8a\u66f4\u904e\uff0c\u4e14\u7b26\u5408\u9700\u8981\u66f4\u65b0\u7684\u689d\u4ef6\u3002": "\u4f5c\u54c1\u8b8a\u66f4\u904e\uff0c\u4e14\u7b26\u5408\u9700\u8981\u66f4\u65b0\u7684\u689d\u4ef6\u3002",
	"\u56e0\u7ae0\u7bc0\u6578\u91cf\u6709\u8b8a\u5316\uff0c\u5c07\u91cd\u65b0\u4e0b\u8f09\u4e26\u6aa2\u67e5\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\uff1a": "\u56e0\u7ae0\u7bc0\u6578\u91cf\u6709\u8b8a\u5316\uff0c\u5c07\u91cd\u65b0\u4e0b\u8f09\u4e26\u6aa2\u67e5\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\uff1a",
	"\u7ae0\u7bc0\u6578\u91cf\u7121\u8b8a\u5316\uff0c\u5171 %1 %2\uff1b": "\u7ae0\u7bc0\u6578\u91cf\u7121\u8b8a\u5316\uff0c\u5171 %1 %2\uff1b",
	"\u7ae0\u7bc0\u6578\u91cf\u8b8a\u5316\u904e\u5c0f\uff08\u50c5\u5dee %1 %2\uff09\uff0c\u56e0\u6b64\u4e0d\u91cd\u65b0\u4e0b\u8f09\uff1b": "\u7ae0\u7bc0\u6578\u91cf\u8b8a\u5316\u904e\u5c0f\uff08\u50c5\u5dee %1 %2\uff09\uff0c\u56e0\u6b64\u4e0d\u91cd\u65b0\u4e0b\u8f09\uff1b",
	"\u4f46\u5df2\u8a2d\u5b9a\u4e0b\u8f09\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u3002": "\u4f46\u5df2\u8a2d\u5b9a\u4e0b\u8f09\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u3002",
	"\u50c5\u5229\u7528\u5feb\u53d6\u91cd\u5efa\u8cc7\u6599\uff08\u5982\u5c0f\u8aaa\u3001\u96fb\u5b50\u66f8\uff09\uff0c\u4e0d\u91cd\u65b0\u4e0b\u8f09\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u3002": "\u50c5\u5229\u7528\u5feb\u53d6\u91cd\u5efa\u8cc7\u6599\uff08\u5982\u5c0f\u8aaa\u3001\u96fb\u5b50\u66f8\uff09\uff0c\u4e0d\u91cd\u65b0\u4e0b\u8f09\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u3002",
	"\u8df3\u904e\u672c\u4f5c\u54c1\u4e0d\u8655\u7406\u3002": "\u8df3\u904e\u672c\u4f5c\u54c1\u4e0d\u8655\u7406\u3002",
	"\u4e4b\u524d\u5df2\u4e0b\u8f09\u5230\u8f03\u65b0\u7684\u7b2c %2 %3\uff0c\u56e0\u6307\u5b9a start_chapter_title=%1 \u800c\u56de\u6eaf\u3002": "\u4e4b\u524d\u5df2\u4e0b\u8f09\u5230\u8f03\u65b0\u7684\u7b2c %2 %3\uff0c\u56e0\u6307\u5b9a start_chapter_title=%1 \u800c\u56de\u6eaf\u3002",
	"\u4e4b\u524d\u5df2\u4e0b\u8f09\u5230\u8f03\u65b0\u7684\u7b2c %2 %3\uff0c\u56e0\u6307\u5b9a start_chapter_NO=%1 \u800c\u56de\u6eaf\u3002": "\u4e4b\u524d\u5df2\u4e0b\u8f09\u5230\u8f03\u65b0\u7684\u7b2c %2 %3\uff0c\u56e0\u6307\u5b9a start_chapter_NO=%1 \u800c\u56de\u6eaf\u3002",
	"\u7ae0\u7bc0\u6578\u91cf %1 \u6bd4\u5c07\u958b\u59cb/\u63a5\u7e8c\u4e4b\u4e0b\u8f09\u7ae0\u7bc0\u7de8\u865f %2 \u9084\u5c11\uff0c\u6216\u8a31\u56e0\u70ba\u7ae0\u7bc0\u6709\u7d93\u904e\u91cd\u6574\uff0c\u6216\u8005\u4e0a\u6b21\u4e0b\u8f09\u6642\u4e2d\u9014\u589e\u522a\u904e\u7ae0\u7bc0\u3002": "\u7ae0\u7bc0\u6578\u91cf %1 \u6bd4\u5c07\u958b\u59cb/\u63a5\u7e8c\u4e4b\u4e0b\u8f09\u7ae0\u7bc0\u7de8\u865f %2 \u9084\u5c11\uff0c\u6216\u8a31\u56e0\u70ba\u7ae0\u7bc0\u6709\u7d93\u904e\u91cd\u6574\uff0c\u6216\u8005\u4e0a\u6b21\u4e0b\u8f09\u6642\u4e2d\u9014\u589e\u522a\u904e\u7ae0\u7bc0\u3002",
	"\u5c07\u5148\u5099\u4efd\u820a\u5167\u5bb9\u3001\u79fb\u52d5\u76ee\u9304\uff0c\u800c\u5f8c\u91cd\u65b0\u81ea\u7b2c %1 %2\u4e0b\u8f09\uff01": "\u5c07\u5148\u5099\u4efd\u820a\u5167\u5bb9\u3001\u79fb\u52d5\u76ee\u9304\uff0c\u800c\u5f8c\u91cd\u65b0\u81ea\u7b2c %1 %2\u4e0b\u8f09\uff01",
	"\u5c07\u5f9e\u982d\u6aa2\u67e5\u3001\u81ea\u7b2c %1 %2\u91cd\u65b0\u4e0b\u8f09\u3002": "\u5c07\u5f9e\u982d\u6aa2\u67e5\u3001\u81ea\u7b2c %1 %2\u91cd\u65b0\u4e0b\u8f09\u3002",
	"\u5c07\u5f9e\u982d\u6aa2\u67e5\u3001\u81ea\u7b2c %1 %2\u91cd\u65b0\u751f\u6210\u96fb\u5b50\u66f8\u3002": "\u5c07\u5f9e\u982d\u6aa2\u67e5\u3001\u81ea\u7b2c %1 %2\u91cd\u65b0\u751f\u6210\u96fb\u5b50\u66f8\u3002",
	"\u8df3\u904e %1 \u4e0d\u8655\u7406\u3002": "\u8df3\u904e %1 \u4e0d\u8655\u7406\u3002",
	"Unknown": "\u672a\u77e5",
	"\u81ea \u00a7%1 \u63a5\u7e8c\u4e0b\u8f09\u3002": "\u81ea \u00a7%1 \u63a5\u7e8c\u4e0b\u8f09\u3002",
	"\u4ee5\u9ede \".\" \u4f5c\u70ba\u7d50\u5c3e\u7684\u76ee\u9304\u540d\u7a31\uff0c\u5c07\u5c0e\u81f4\u6c92\u6709\u8fa6\u6cd5\u522a\u9664\u6216\u8005\u8907\u88fd\uff1a%1": "\u4ee5\u9ede \".\" \u4f5c\u70ba\u7d50\u5c3e\u7684\u76ee\u9304\u540d\u7a31\uff0c\u5c07\u5c0e\u81f4\u6c92\u6709\u8fa6\u6cd5\u522a\u9664\u6216\u8005\u8907\u88fd\uff1a%1",
	"\u5275\u5efa\u76ee\u9304 [%1] \u5931\u6557\uff1a%2": "\u5275\u5efa\u76ee\u9304 [%1] \u5931\u6557\uff1a%2",
	"Recursively removing subdirectories of %1": "\u905e\u6b78\u522a\u9664 %1 \u7684\u5b50\u76ee\u9304",
	"Removing directory: %1": "\u522a\u9664\u76ee\u9304\uff1a%1",
	"Removing file: %1": "\u6b63\u5728\u522a\u9664\u6a94\u6848\uff1a%1",
	"Cannot save data to file [%1]!": "\u7121\u6cd5\u5c07\u6578\u64da\u4fdd\u5b58\u5230\u6a94\u6848 [%1]\uff01",
	"Move %1 to %2 failed: %3": "\u5c07 %1 \u79fb\u52d5\u5230 %2 \u5931\u6557\uff1a%3",
	"\u4e0d\u5b58\u5728\u6a94\u6848\u6216\u76ee\u9304\uff1a%1": "\u4e0d\u5b58\u5728\u6a94\u6848\u6216\u76ee\u9304\uff1a%1",
	"\u8655\u7406\u5b8c\u7562\uff1a%1": "\u8655\u7406\u5b8c\u7562\uff1a%1",
	"Invalid command-line argument: [%1]": "\u7121\u6548\u7684\u547d\u4ee4\u884c\u53c3\u6578\uff1a[%1]",
	"JScript \u6a94\u6848\u53ea\u80fd\u5728 Windows \u74b0\u5883\u4e0b\u57f7\u884c\uff01": "JScript \u6a94\u6848\u53ea\u80fd\u5728 Windows \u74b0\u5883\u4e0b\u57f7\u884c\uff01",
	"\u672c\u51fd\u5f0f\u5eab\u5c1a\u4e0d\u652f\u63f4\u591a rootfile (.opf)\uff01": "\u672c\u51fd\u5f0f\u5eab\u5c1a\u4e0d\u652f\u63f4\u591a rootfile (.opf)\uff01",
	"Invalid id prefix: %1": "id \u524d\u7db4\u7121\u6548\uff1a%1",
	"\u672a\u8a2d\u5b9a\u96fb\u5b50\u66f8\u7ae0\u7bc0\u76ee\u9304\uff0c\u5c07\u628a\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u76f4\u63a5\u653e\u5728\u96fb\u5b50\u66f8\u6839\u76ee\u9304\u5e95\u4e0b\uff01": "\u672a\u8a2d\u5b9a\u96fb\u5b50\u66f8\u7ae0\u7bc0\u76ee\u9304\uff0c\u5c07\u628a\u6240\u6709\u7ae0\u7bc0\u5167\u5bb9\u76f4\u63a5\u653e\u5728\u96fb\u5b50\u66f8\u6839\u76ee\u9304\u5e95\u4e0b\uff01",
	"\u91cd\u5efa index_of_id\u2026\u2026": "\u91cd\u5efa index_of_id\u2026\u2026",
	"<spine> \u4e2d\u5305\u542b\u4e86\u91cd\u8907\u7684 id\uff0c\u5c07\u8df3\u904e\u4e4b\uff1a%1": "<spine> \u4e2d\u5305\u542b\u4e86\u91cd\u8907\u7684 id\uff0c\u5c07\u8df3\u904e\u4e4b\uff1a%1",
	"Duplicate element: %1": "\u6709\u91cd\u8907\u7684\u5143\u7d20\uff1a%1",
	"Invalid metadata value: %1": "\u7121\u6548\u7684 metadata \u503c\uff1a%1",
	"\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u8cc7\u6e90\uff0c\u5f8c\u9762\u7684\u8cc7\u6e90\u5c07\u76f4\u63a5\u6d88\u5931\uff01": "\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u8cc7\u6e90\uff0c\u5f8c\u9762\u7684\u8cc7\u6e90\u5c07\u76f4\u63a5\u6d88\u5931\uff01",
	"\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u7ae0\u7bc0\uff0c\u5f8c\u9762\u7684\u7ae0\u7bc0\u5c07\u76f4\u63a5\u6d88\u5931\uff01": "\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u7ae0\u7bc0\uff0c\u5f8c\u9762\u7684\u7ae0\u7bc0\u5c07\u76f4\u63a5\u6d88\u5931\uff01",
	"\u7121\u6cd5\u7de8\u78bc\u7121\u6548\u7684 id\uff1a%1": "\u7121\u6cd5\u7de8\u78bc\u7121\u6548\u7684 id\uff1a%1",
	"\u7121\u6cd5\u89e3\u78bc\uff1a[%1]": "\u7121\u6cd5\u89e3\u78bc\uff1a[%1]",
	"\u7121\u6cd5\u5224\u5225\u6a94\u6848 [%1] \u7684\u985e\u578b\u3002": "\u7121\u6cd5\u5224\u5225\u6a94\u6848 [%1] \u7684\u985e\u578b\u3002",
	"\u9805\u76ee\u8cc7\u8a0a\u7121\u6548\uff1a%1": "\u9805\u76ee\u8cc7\u8a0a\u7121\u6548\uff1a%1",
	"\u5148\u524d\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u7ae0\u7bc0\uff0c\u5c07\u66f4\u6539\u5f8c\u8005\u4e4b id\u3002": "\u5148\u524d\u5df2\u7d93\u5b58\u5728\u76f8\u540c id \u4e4b\u7ae0\u7bc0\uff0c\u5c07\u66f4\u6539\u5f8c\u8005\u4e4b id\u3002",
	"\u672a\u8a2d\u5b9a media-type\uff0c\u6216 media-type \u7121\u6548\uff1a%1": "\u672a\u8a2d\u5b9a media-type\uff0c\u6216 media-type \u7121\u6548\uff1a%1",
	"\u6b63\u898f\u5316 XHTML \u66f8\u7c4d\u7ae0\u7bc0\u5167\u5bb9\uff1a%1": "\u6b63\u898f\u5316 XHTML \u66f8\u7c4d\u7ae0\u7bc0\u5167\u5bb9\uff1a%1",
	"\u6b63\u898f\u5316\u5f8c\u4e4b\u7ae0\u7bc0\u5167\u5bb9\uff1a%1": "\u6b63\u898f\u5316\u5f8c\u4e4b\u7ae0\u7bc0\u5167\u5bb9\uff1a%1",
	"\u8a2d\u5b9a\u591a\u500b\u6a94\u6848\u70ba\u76f8\u540c\u7684\u5167\u5bb9\uff1a%1": "\u8a2d\u5b9a\u591a\u500b\u6a94\u6848\u70ba\u76f8\u540c\u7684\u5167\u5bb9\uff1a%1",
	"\u5df2\u7d93\u6709\u76f8\u540c\u7684\u8cc7\u6e90\u6a94 [%1] %2\u3002": "\u5df2\u7d93\u6709\u76f8\u540c\u7684\u8cc7\u6e90\u6a94 [%1] %2\u3002",
	"\u4f46 .href \u4e0d\u540c\uff0c\u60a8\u5fc5\u9808\u624b\u52d5\u4fee\u6b63\uff1a%1": "\u4f46 .href \u4e0d\u540c\uff0c\u60a8\u5fc5\u9808\u624b\u52d5\u4fee\u6b63\uff1a%1",
	"\u6a94\u6848\u5df2\u5728\u4e0b\u8f09\u968a\u5217\u4e2d\uff0c\u8df3\u904e\u91cd\u8907\u4e0b\u8f09\u52d5\u4f5c\uff1a%1": "\u6a94\u6848\u5df2\u5728\u4e0b\u8f09\u968a\u5217\u4e2d\uff0c\u8df3\u904e\u91cd\u8907\u4e0b\u8f09\u52d5\u4f5c\uff1a%1",
	"\u4e0b\u8f09\u968a\u5217\u4e2d\u5b58\u5728\u76f8\u540c\u6a94\u540d\uff0c\u537b\u6709\u8457\u4e0d\u540c\u7db2\u5740\u7684\u8cc7\u6e90\uff1a\u4e0b\u8f09\u968a\u5217\u4e2d URL [%1] \u2260 \u6e96\u5099\u4e0b\u8f09\u4e4b URL [%2]\uff0c\u5617\u8a66\u6539\u6210\u53e6\u4e00\u500b\u6a94\u6848\u540d\u7a31\u3002": "\u4e0b\u8f09\u968a\u5217\u4e2d\u5b58\u5728\u76f8\u540c\u6a94\u540d\uff0c\u537b\u6709\u8457\u4e0d\u540c\u7db2\u5740\u7684\u8cc7\u6e90\uff1a\u4e0b\u8f09\u968a\u5217\u4e2d URL [%1] \u2260 \u6e96\u5099\u4e0b\u8f09\u4e4b URL [%2]\uff0c\u5617\u8a66\u6539\u6210\u53e6\u4e00\u500b\u6a94\u6848\u540d\u7a31\u3002",
	"\u5132\u5b58\u6a94\u540d\u6539\u8b8a\uff0c\u60a8\u9700\u8981\u81ea\u884c\u4fee\u6b63\u539f\u53c3\u7167\u6a94\u6848\u4e2d\u4e4b\u6a94\u540d\uff1a": "\u5132\u5b58\u6a94\u540d\u6539\u8b8a\uff0c\u60a8\u9700\u8981\u81ea\u884c\u4fee\u6b63\u539f\u53c3\u7167\u6a94\u6848\u4e2d\u4e4b\u6a94\u540d\uff1a",
	"id \u6539\u8b8a\uff0c\u60a8\u9700\u8981\u81ea\u884c\u4fee\u6b63\u539f\u53c3\u7167\u6a94\u6848\u4e2d\u4e4b\u6a94\u540d\uff1a": "id \u6539\u8b8a\uff0c\u60a8\u9700\u8981\u81ea\u884c\u4fee\u6b63\u539f\u53c3\u7167\u6a94\u6848\u4e2d\u4e4b\u6a94\u540d\uff1a",
	"\u5df2\u53d6\u5f97\u4e4b\u8cc7\u6e90\uff0c\u5176\u5167\u5bb9\u4e4b\u5a92\u9ad4\u985e\u578b\u70ba [%1]\uff0c\u8207\u5f9e\u526f\u6a94\u540d\u6240\u5f97\u5230\u7684\u5a92\u9ad4\u985e\u578b [%2] \u4e0d\u540c\uff01": "\u5df2\u53d6\u5f97\u4e4b\u8cc7\u6e90\uff0c\u5176\u5167\u5bb9\u4e4b\u5a92\u9ad4\u985e\u578b\u70ba [%1]\uff0c\u8207\u5f9e\u526f\u6a94\u540d\u6240\u5f97\u5230\u7684\u5a92\u9ad4\u985e\u578b [%2] \u4e0d\u540c\uff01",
	"\u7121\u6cd5\u5224\u5225\u5df2\u53d6\u5f97\u8cc7\u6e90\u4e4b\u5a92\u9ad4\u985e\u578b\uff1a%1": "\u7121\u6cd5\u5224\u5225\u5df2\u53d6\u5f97\u8cc7\u6e90\u4e4b\u5a92\u9ad4\u985e\u578b\uff1a%1",
	"\u6240\u53d6\u5f97\u4e4b\u8cc7\u6e90\uff0c\u985e\u578b\u70ba[%1]\uff0c\u4e26\u975e\u5716\u50cf\u6a94\uff1a%2": "\u6240\u53d6\u5f97\u4e4b\u8cc7\u6e90\uff0c\u985e\u578b\u70ba[%1]\uff0c\u4e26\u975e\u5716\u50cf\u6a94\uff1a%2",
	"\u5df2\u53d6\u5f97\u8cc7\u6e90\uff1a[%1] %2": "\u5df2\u53d6\u5f97\u8cc7\u6e90\uff1a[%1] %2",
	"\u6a94\u6848\u4e26\u672a\u5728\u4e0b\u8f09\u968a\u5217\u4e2d\uff1a%1": "\u6a94\u6848\u4e26\u672a\u5728\u4e0b\u8f09\u968a\u5217\u4e2d\uff1a%1",
	"\u8cc7\u6e90\u4ecd\u5728\u4e0b\u8f09\u4e2d\uff1a": "\u8cc7\u6e90\u4ecd\u5728\u4e0b\u8f09\u4e2d\uff1a",
	"\u6240\u6709\u8cc7\u6e90\u4e0b\u8f09\u5b8c\u7562\u3002\u958b\u59cb\u57f7\u884c\u5f8c\u7e8c %1 \u500b\u5df2\u767b\u8a18\u4e4b{{PLURAL:%1|\u4f5c\u696d}}\u3002": "\u6240\u6709\u8cc7\u6e90\u4e0b\u8f09\u5b8c\u7562\u3002\u958b\u59cb\u57f7\u884c\u5f8c\u7e8c %1 \u500b\u5df2\u767b\u8a18\u4e4b{{PLURAL:%1|\u4f5c\u696d}}\u3002",
	"\u5df2\u7d93\u6709\u76f8\u540c\u7684\u7bc7\u7ae0\u6216\u8cc7\u6e90\u6a94\uff0c\u5c07\u4e0d\u8986\u5beb\uff1a%1": "\u5df2\u7d93\u6709\u76f8\u540c\u7684\u7bc7\u7ae0\u6216\u8cc7\u6e90\u6a94\uff0c\u5c07\u4e0d\u8986\u5beb\uff1a%1",
	"\u8df3\u904e\u8cc7\u6599 URI scheme\uff1a%1": "\u8df3\u904e\u8cc7\u6599 URI scheme\uff1a%1",
	"\u6a94\u6848\u8def\u5f91\uff1a%1": "\u6a94\u6848\u8def\u5f91\uff1a%1",
	"\u8df3\u904e\u7db2\u9801\u8cc7\u6e90\uff1a%1": "\u8df3\u904e\u7db2\u9801\u8cc7\u6e90\uff1a%1",
	"\u672a\u8a2d\u5b9a\u6a19\u984c\uff1a%1\u2026\u2026": "\u672a\u8a2d\u5b9a\u6a19\u984c\uff1a%1\u2026\u2026",
	"Content Length: %1 {{PLURAL:%1|character|characters}}": "\u5167\u5bb9\u5171\u9577 %1 {{PLURAL:%1|\u5b57\u5143}}",
	"No content received: %1": "\u672a\u53d6\u5f97\u4efb\u4f55\u5167\u5bb9\uff1a%1",
	"%1 {{PLURAL:%1|word|words}}": "%1{{PLURAL:%1|\u5b57}}",
	"\u56e0\u70ba\u6b32\u8a2d\u5b9a\u7684\u5167\u5bb9\u9577\u5ea6\u904e\u77ed\u6216\u8005\u7121\u5167\u5bb9\uff0c\u5c07\u5f9e\u5feb\u53d6\u6a94\u6848\u4e2d\u53d6\u5f97\u820a\u7684\u5167\u5bb9\uff08%1 \u500b{{PLURAL:%1|\u5b57\u5143}}\uff09\uff1a": "\u56e0\u70ba\u6b32\u8a2d\u5b9a\u7684\u5167\u5bb9\u9577\u5ea6\u904e\u77ed\u6216\u8005\u7121\u5167\u5bb9\uff0c\u5c07\u5f9e\u5feb\u53d6\u6a94\u6848\u4e2d\u53d6\u5f97\u820a\u7684\u5167\u5bb9\uff08%1 \u500b{{PLURAL:%1|\u5b57\u5143}}\uff09\uff1a",
	"Writing %1 {{PLURAL:%1|character|characters}} to [%2]...": "\u6b63\u5728\u5beb\u5165 %1 {{PLURAL:%1|\u5b57\u5143}}\u81f3\u6a94\u6848 [%2]\u2026\u2026",
	"\u50c5\u8a2d\u5b9a\u9805\u76ee\u8cc7\u6599\u7d22\u5f15\uff0c\u672a\u81ea\u52d5\u5beb\u5165\u6a94\u6848 [%1]\uff0c\u60a8\u9700\u8981\u81ea\u5df1\u5b8c\u6210\u9019\u52d5\u4f5c\u3002": "\u50c5\u8a2d\u5b9a\u9805\u76ee\u8cc7\u6599\u7d22\u5f15\uff0c\u672a\u81ea\u52d5\u5beb\u5165\u6a94\u6848 [%1]\uff0c\u60a8\u9700\u8981\u81ea\u5df1\u5b8c\u6210\u9019\u52d5\u4f5c\u3002",
	"\u8df3\u904e\u9577\u5ea6\u904e\u77ed\u7684\u5167\u5bb9\uff08%1 \u500b{{PLURAL:%1|\u5b57\u5143}}\uff09\uff1a": "\u8df3\u904e\u9577\u5ea6\u904e\u77ed\u7684\u5167\u5bb9\uff08%1 \u500b{{PLURAL:%1|\u5b57\u5143}}\uff09\uff1a",
	"\u8df3\u904e\u7121\u5167\u5bb9/\u7a7a\u7ae0\u7bc0\uff1a": "\u8df3\u904e\u7121\u5167\u5bb9/\u7a7a\u7ae0\u7bc0\uff1a",
	"too short": "\u5167\u5bb9\u9577\u5ea6\u904e\u77ed",
	"\u82e5\u662f\u5df2\u5b58\u5728\u6b64\u7ae0\u7bc0\u5247\u5148\u79fb\u9664\uff1a%1": "\u82e5\u662f\u5df2\u5b58\u5728\u6b64\u7ae0\u7bc0\u5247\u5148\u79fb\u9664\uff1a%1",
	"Using language: %1": "\u4f7f\u7528\u8a9e\u8a00\uff1a%1",
	"TOC.calibre:series": "\u53e2\u66f8",
	"TOC.creator": "\u4f5c\u8005",
	"TOC.date": "\u65e5\u671f",
	"TOC.dcterms:modified": "\u4f5c\u54c1\u6700\u5f8c\u7de8\u8f2f\u6642\u9593",
	"TOC.description": "\u7c21\u4ecb",
	"TOC.identifier": "\u8b58\u5225\u7b26",
	"TOC.language": "\u8a9e\u8a00",
	"TOC.publisher": "\u767c\u5e03\u8005",
	"TOC.source": "\u4f86\u6e90",
	"TOC.subject": "\u6a19\u7c64",
	"TOC.title": "\u6a19\u984c",
	"word count": "\u5b57\u6578",
	"%1 {{PLURAL:%1|chapter|chapters}}": "%1{{PLURAL:%1|\u7ae0}}",
	"Waiting for all resources loaded...": "\u7b49\u5f85\u6240\u6709\u8cc7\u6e90\u8f09\u5165\u4e2d\u2026\u2026",
	"\u958b\u59cb\u5beb\u5165\u96fb\u5b50\u66f8\u8cc7\u6599\u2026\u2026": "\u958b\u59cb\u5beb\u5165\u96fb\u5b50\u66f8\u8cc7\u6599\u2026\u2026",
	"\u4e1f\u5931\u8cc7\u6e90\u9805\u76ee %1": "\u4e1f\u5931\u8cc7\u6e90\u9805\u76ee %1",
	"\u6240\u6b32\u5c01\u5165\u6ce8\u91cb\u7684\u8a6e\u91cb\u8cc7\u6599\u672c\u8eab\u542b\u6709 \"%2D%2D\" \u6216 \"%2D-\" \u4e4b\u985e\u6587\u5b57\uff0c\u5c07\u9020\u6210\u89e3\u78bc\u6642\u51fa\u73fe\u932f\u8aa4\uff01": "\u6240\u6b32\u5c01\u5165\u6ce8\u91cb\u7684\u8a6e\u91cb\u8cc7\u6599\u672c\u8eab\u542b\u6709 \"%2D%2D\" \u6216 \"%2D-\" \u4e4b\u985e\u6587\u5b57\uff0c\u5c07\u9020\u6210\u89e3\u78bc\u6642\u51fa\u73fe\u932f\u8aa4\uff01",
	"\u958b\u59cb\u5efa\u69cb\u96fb\u5b50\u66f8\u2026\u2026": "\u958b\u59cb\u5efa\u69cb\u96fb\u5b50\u66f8\u2026\u2026",
	"\u79fb\u9664\u7a7a\u76ee\u9304\uff1a%1": "\u79fb\u9664\u7a7a\u76ee\u9304\uff1a%1",
	"\u4ee5 7zip \u5275\u5efa\u96fb\u5b50\u66f8\uff1a%1\u2026\u2026": "\u4ee5 7zip \u5275\u5efa\u96fb\u5b50\u66f8\uff1a%1\u2026\u2026",
	"\u6a94\u6848\u5217\u8868\u904e\u9577\uff0c\u6539\u6210\u58d3\u7e2e\u6574\u500b\u76ee\u9304\u3002": "\u6a94\u6848\u5217\u8868\u904e\u9577\uff0c\u6539\u6210\u58d3\u7e2e\u6574\u500b\u76ee\u9304\u3002",
	"\u96fb\u5b50\u66f8\u5275\u5efa\u5b8c\u7562\uff1a%1": "\u96fb\u5b50\u66f8\u5275\u5efa\u5b8c\u7562\uff1a%1",
	"Unknown type: %1, please install %2": "\u7121\u6cd5\u8655\u7406\u58d3\u7e2e\u985e\u578b %1\uff0c\u8acb\u5b89\u88dd\u7a0b\u5f0f %2",
	"Working directory: %1": "\u7576\u524d\u64cd\u4f5c\u76ee\u9304\uff1a%1",
	"Callback execution error!": "\u56de\u547c\u51fd\u5f0f\u57f7\u884c\u51fa\u932f\uff01",
	"%1 execution error!": "%1 \u57f7\u884c\u51fa\u932f\uff01",
	"Duplicate FSO path: %1": "\u6a94\u6848\u6216\u76ee\u9304\u8def\u5f91\u885d\u7a81\uff1a%1",
	"%1 \u672a\u63d0\u4f9b\u9019\u7a2e\u529f\u80fd\uff1a%2": "%1 \u672a\u63d0\u4f9b\u9019\u7a2e\u529f\u80fd\uff1a%2",
	"\u5728\u58d3\u7e2e\u6a94\u6240\u5728\u76ee\u9304\u4e0b\u64cd\u4f5c %1\u3002": "\u5728\u58d3\u7e2e\u6a94\u6240\u5728\u76ee\u9304\u4e0b\u64cd\u4f5c %1\u3002",
	"Changing working directory: [%1]\u2192[%2]": "\u6539\u8b8a\u64cd\u4f5c\u76ee\u9304\uff1a[%1]\u2192[%2]",
	"Invalid set of number ranges: %1": "\u7121\u6548\u7684\u6578\u5b57\u7bc4\u570d\u96c6\u5408\uff1a%1",
	"Invalid number range: %1": "\u7121\u6548\u7684\u6578\u5b57\u7bc4\u570d\uff1a%1",
	"\u5e74\u865f": "\u5e74\u865f",
	"\u8a3b": "\u8a3b",
	"\u4e94\u884c": "\u4e94\u884c",
	"\u7d00\u5e74": "\u7d00\u5e74",
	"\u8df3\u904e [%1]\uff1a\u672c[%2]\u50c5\u4f9b\u53c3\u7167\u7528\u3002": "\u8df3\u904e[%1]\uff1a\u6b64[%2]\u50c5\u4f9b\u53c3\u7167\u7528\u3002",
	"\u7121\u5e74\u865f\u6216\u5e1d\u738b\u7d00\u5e74\u540d\u7a31\u4f5c [%1]\uff01": "\u7121\u5e74\u865f\u6216\u5e1d\u738b\u7d00\u5e74\u540d\u7a31\u4f5c [%1]\uff01",
	"\u7409\u7403": "\u7409\u7403",
	"\u65e5\u672c": "\u65e5\u672c",
	"\ud55c\uad6d": "\u97d3\u570b",
	"B\u1eafc thu\u1ed9c": "\u5317\u5c6c\u6642\u671f",
	"Th\u1eddi k\u1ef3 \u0111\u1ed9c l\u1eadp": "\u7368\u7acb\u6642\u671f",
	"\u0e44\u0e17\u0e22": "\u6cf0\u570b",
	"\u0e23\u0e32\u0e0a\u0e27\u0e07\u0e28\u0e4c\u0e1e\u0e23\u0e30\u0e23\u0e48\u0e27\u0e07": "\u5e15\u947e\u738b\u671d",
	"\u0e2d\u0e32\u0e13\u0e32\u0e08\u0e31\u0e01\u0e23\u0e2a\u0e38\u0e42\u0e02\u0e17\u0e31\u0e22": "\u7d20\u53ef\u6cf0\u738b\u570b",
	"\u0e2d\u0e32\u0e13\u0e32\u0e08\u0e31\u0e01\u0e23\u0e2d\u0e22\u0e38\u0e18\u0e22\u0e32": "\u5927\u57ce\u738b\u570b",
	"\u0e2a\u0e21\u0e40\u0e14\u0e47\u0e08\u0e1e\u0e23\u0e30\u0e40\u0e08\u0e49\u0e32\u0e01\u0e23\u0e38\u0e07\u0e18\u0e19\u0e1a\u0e38\u0e23\u0e35": "\u912d\u4fe1",
	"\u0e23\u0e32\u0e0a\u0e27\u0e07\u0e28\u0e4c\u0e18\u0e19\u0e1a\u0e38\u0e23\u0e35": "\u541e\u6b66\u91cc\u738b\u671d",
	"\u0e2d\u0e32\u0e13\u0e32\u0e08\u0e31\u0e01\u0e23\u0e18\u0e19\u0e1a\u0e38\u0e23\u0e35": "\u541e\u6b66\u91cc\u738b\u570b",
	"\u0e23\u0e32\u0e0a\u0e27\u0e07\u0e28\u0e4c\u0e08\u0e31\u0e01\u0e23\u0e35": "\u537b\u514b\u91cc\u738b\u671d",
	"\u0e2d\u0e32\u0e13\u0e32\u0e08\u0e31\u0e01\u0e23\u0e23\u0e31\u0e15\u0e19\u0e42\u0e01\u0e2a\u0e34\u0e19\u0e17\u0e23\u0e4c": "\u62c9\u9054\u90a3\u54e5\u6b23\u738b\u570b",
	"Pagan": "\u84b2\u7518",
	"Toungoo": "\u6771\u5401",
	"\u1000\u102f\u1014\u103a\u1038\u1018\u1031\u102c\u1004\u103a\u1001\u1031\u1010\u103a": "\u8ca2\u699c",
	"\u1019\u103c\u1014\u103a\u1019\u102c\u1015\u103c\u100a\u103a": "\u7dec\u7538\u806f\u90a6\u5171\u548c\u570b",
	"India": "\u5370\u5ea6",
	"Mesopotamian": "\u7f8e\u7d22\u4e0d\u9054\u7c73\u4e9e\u6587\u660e",
	"Neo-Assyrian": "\u65b0\u4e9e\u8ff0",
	"Babylon": "\u5df4\u6bd4\u502b",
	"Babylonian Dynasty of E": "\u5df4\u6bd4\u502b\u7b2c\u4e5d\u738b\u671d",
	"Babylonian calendar": "\u5df4\u6bd4\u502b\u5c3c\u4e9e\u66c6",
	"Neo-Babylonian": "\u65b0\u5df4\u6bd4\u502b",
	"Persia": "\u6ce2\u65af",
	"\u039c\u03b1\u03ba\u03b5\u03b4\u03bf\u03bd\u03af\u03b1": "\u99ac\u5176\u9813",
	"\u03a3\u03b5\u03bb\u03b5\u03c5\u03ba\u03b9\u03b4\u03ce\u03bd": "\u585e\u7409\u53e4",
	"\u1f08\u03b8\u1fc6\u03bd\u03b1\u03b9": "\u53e4\u96c5\u5178",
	"\u03a3\u03c0\u03ac\u03c1\u03c4\u03b7": "\u65af\u5df4\u9054",
	"Hittite": "\u897f\u81fa",
	"British": "\u82f1\u570b",
	"Maya": "\u746a\u96c5",
	"Palenque": "\u5e15\u502b\u514b",
	"Search style name [%1] in `SGR_code.style_name_alias`...": "\u5728 `SGR_code.style_name_alias` \u4e2d\u641c\u5c0b\u6a23\u5f0f\u540d\u7a31 [%1]\u2026\u2026",
	"Unknown style name: [%1].": "\u672a\u77e5\u6a23\u5f0f\u540d\u7a31\uff1a[%1]\u3002",
	"Invalid name of color: [%1].": "\u984f\u8272\u540d\u7a31\u7121\u6548\uff1a[%1]\u3002",
	"Invalid value [%1] of style: [%2]:": "\u6a23\u5f0f\u7684\u503c[%1]\u7121\u6548\uff1a[%2]\uff1a",
	"\u7121\u6cd5\u5c07\u771f\u507d\u503c\u8f49\u70ba\u6a23\u5f0f\u3002": "\u7121\u6cd5\u5c07\u771f\u507d\u503c\u8f49\u70ba\u6a23\u5f0f\u3002",
	"\u6b32\u8a2d\u5b9a\u7684\u6a23\u5f0f\u503c\u4e26\u975e\u6578\u5b57\u3002": "\u6b32\u8a2d\u5b9a\u7684\u6a23\u5f0f\u503c\u4e26\u975e\u6578\u5b57\u3002",
	"\u6a23\u5f0f\u503c\u4e0d\u5728\u53ef\u8a2d\u5b9a\u7684\u6a23\u5f0f\u8cc7\u6599[%1]\u4e2d\u3002": "\u6a23\u5f0f\u503c\u4e0d\u5728\u53ef\u8a2d\u5b9a\u7684\u6a23\u5f0f\u8cc7\u6599[%1]\u4e2d\u3002",
	"Searching style {%2} [%1] in SGR_code.style_value_alias...": "\u5728 SGR_code.style_value_alias \u4e2d\u641c\u5c0b\u6a23\u5f0f {%2} [%1]\u2026\u2026",
	"Find style [%1] normalized to \u2192 [%2]": "\u627e\u5230\u6a23\u5f0f [%1] \u6a19\u6e96\u5316\u70ba\u2192[%2]",
	"Parse {%2} [%1] if it is a primitive value.": "\u89e3\u6790\u7c21\u55ae\u578b\u614b\u7684\u6a23\u5f0f\u503c\uff1a{%2} [%1]",
	"Test if [%1] is \"[+-] style name\".": "\u6e2c\u8a66[%1]\u662f\u5426\u70ba\u201c[+-]\u6a23\u5f0f\u540d\u7a31\u201d\u3002",
	"Invalid configuration of style: [%1].": "\u6a23\u5f0f\u914d\u7f6e\u7121\u6548\uff1a[%1]\u3002",
	"Set style \"%1\" = %2.": "\u8a2d\u7f6e\u6a23\u5f0f \"%1\" = %2\u3002",
	"Test if [%1] is \"style name = style value (0, 1, false, true, ...)\".": "\u6e2c\u8a66[%1]\u662f\u5426\u70ba\u201cstyle name = style value \uff080,1\uff0cfalse\uff0ctrue\uff0c\u2026\u2026\uff09\u201d\u3002",
	"Parse {%2} [%1] if it is a object.": "\u89e3\u6790\u7269\u4ef6\u578b\u614b\u7684\u6a23\u5f0f\u503c\uff1a{%2} [%1]",
	"Reset style {%2} [%1].": "\u91cd\u7f6e\u6a23\u5f0f{%2} [%1]\u3002",
	"Unknown style: [%1].": "\u672a\u77e5\u6a23\u5f0f\uff1a[%1]\u3002",
	"Illegal %1: [%2]": "\u6709\u554f\u984c\uff08\u7121\u6548\u6216\u4e0d\u5408\u7406\uff09\u7684%1\uff1a[%2]",
	"%1\u8f49\u63db\u5c0d": "%1\u8f49\u63db\u5c0d",
	"\u5f37\u5236\u4f7f\u7528 LTP server\uff0c\u8df3\u904e\u5c0d LTP server \u7684\u904b\u4f5c\u6e2c\u8a66\u3002\u8acb\u53ea\u5728\u60a8\u6e96\u5099\u5168\u7a0b\u4f7f\u7528 cache \u7684\u60c5\u6cc1\u4e0b\u624d\u4f7f\u7528\u9019\u500b\u9078\u9805\u3002": "\u5f37\u5236\u4f7f\u7528 LTP server\uff0c\u8df3\u904e\u5c0d LTP server \u7684\u904b\u4f5c\u6e2c\u8a66\u3002\u8acb\u53ea\u5728\u60a8\u6e96\u5099\u5168\u7a0b\u4f7f\u7528 cache \u7684\u60c5\u6cc1\u4e0b\u624d\u4f7f\u7528\u9019\u500b\u9078\u9805\u3002",
	"\u751f\u6210 %1 \u7684\u89e3\u7b54\u6a94": "\u751f\u6210 %1 \u7684\u89e3\u7b54\u6a94",
	"\u8df3\u904e\u5df2\u8f09\u5165\u7684\u6a94\u6848\uff1a%1": "\u8df3\u904e\u5df2\u8f09\u5165\u7684\u6a94\u6848\uff1a%1",
	"\u591a\u6b21\u5339\u914d\u7684\u8a08\u6578\uff1a": "\u591a\u6b21\u5339\u914d\u7684\u8a08\u6578\uff1a",
	"\u6709\u591a\u500b\u8f49\u63db\u6a19\u7684\uff1a%1": "\u6709\u591a\u500b\u8f49\u63db\u6a19\u7684\uff1a%1",
	"\u672a\u8a2d\u5b9a\u4efb\u4f55\u540c\u7fa9\u8a5e\uff1a%1": "\u672a\u8a2d\u5b9a\u4efb\u4f55\u540c\u7fa9\u8a5e\uff1a%1",
	"\u672a\u8a2d\u5b9a\u6587\u5b57\uff1a%1": "\u672a\u8a2d\u5b9a\u6587\u5b57\uff1a%1",
	"\u9019\u689d\u898f\u5247\u4f3c\u4e4e\u6c92\u6709\u5fc5\u8981": "\u9019\u689d\u898f\u5247\u4f3c\u4e4e\u6c92\u6709\u5fc5\u8981",
	"Cannot move to %1": "\u7121\u6cd5\u79fb\u5230%1",
	"Close %1 {{PLURAL:%1|request|requests}}: %2": "\u95dc\u9589 %1 {{PLURAL:%1|\u8acb\u6c42}}\uff1a%2",
	"Treat %1 as language: %2.": "\u5c07 %1 \u8996\u70ba\u8a9e\u8a00\uff1a%2\u3002",
	"Cannot detect language of %1!": "\u7121\u6cd5\u8b58\u5225 %1 \u7684\u8a9e\u8a00\uff01",
	"Get parameter %1=%2 from command line": "\u5f9e\u547d\u4ee4\u5217\u7372\u5f97\u53c3\u6578 %1=%2",
	"Change section title:": "\u66f4\u6539\u7ae0\u7bc0\u6a19\u984c\uff1a",
	"Get %1 from edit summary: %2": "\u5f9e\u7de8\u8f2f\u6458\u8981\u4e2d\u53d6\u5f97%1: %2",
	"revision id": "\u7248\u672c\u6a19\u8b58\u7b26",
	"Get %2 edit {{PLURAL:%2|summary|summaries}} of %1": "\u53d6\u5f97%1\u7684%2\u500b\u7de8\u8f2f\u6458\u8981",
	"Get %2 {{PLURAL:%2|revision|revisions}} of %1": "\u53d6\u5f97%1\u7684%2\u500b\u7248\u672c",
	"No section title set!": "\u672a\u8a2d\u7f6e\u7ae0\u7bc0\u6a19\u984c\uff01",
	"Unable to extract the revision difference id from page edit summary of %1!": "\u7121\u6cd5\u5f9e%1\u7684\u9801\u9762\u7de8\u8f2f\u6458\u8981\u4e2d\u63d0\u53d6\u7248\u672c\u5dee\u7570id!",
	"Duplicate task name %1! Will overwrite old task with new task: %2\u2192%3": "\u4efb\u52d9\u540d\u7a31\u91cd\u8907%1\uff01\u5c07\u4ee5\u65b0\u7684\u8986\u84cb\u820a\u7684\uff1a%2\u2192%3",
	"Get %1 {{PLURAL:%1|task|tasks}} from %2.": "\u5f9e%2\u53d6\u5f97%1\u9805\u4efb\u52d9",
	"Already reminded that the operation is in progress: %1": "\u5df2\u63d0\u9192\u6b63\u5728\u4f5c\u696d\u4e2d\uff1a%1",
	"Add warning messages.": "\u6dfb\u52a0\u8b66\u544a\u8a0a\u606f\u3002",
	"No title found for %1.": "\u672a\u767c\u73fe\u6a19\u984c %1\u3002",
	"Will not automatically notify the task begins!": "\u4e0d\u6703\u81ea\u52d5\u63d0\u9192\u4efb\u52d9\u958b\u59cb\uff01",
	"The requested robot task finished.": "\u8acb\u6c42\u7684\u6a5f\u5668\u4eba\u4efb\u52d9\u5df2\u5b8c\u6210\u3002",
	"{{Done}} Please check the results and let me know if there is something wrong, thank you.": "{{BOTREQ|done}}: \u8acb\u5354\u52a9\u6aa2\u67e5\u932f\u8aa4\uff0c\u4e26\u4e0d\u541d\u63d0\u4f9b\u4e9b\u610f\u898b\uff0c\u8b1d\u8b1d\u3002",
	"Already notified that the task is finished: %1": "\u5df2\u63d0\u9192\u4efb\u52d9\u5b8c\u6210\uff1a%1",
	"Will not automatically notify the task finished!": "\u4e0d\u6703\u81ea\u52d5\u63d0\u9192\u4efb\u52d9\u7d50\u675f\uff01",
	"Automatically replace the display text of links: %1\u2192%2": "\u81ea\u52d5\u66ff\u63db\u9023\u7d50\u986f\u793a\u6587\u5b57\uff1a%1\u2192%2",
	"Get list of %1 from %2.": "\u5f9e %2 \u53d6\u5f97%1\u7684\u5217\u8868\u3002",
	"List types: %1.": "\u5217\u8868\u7a2e\u985e\uff1a%1\u3002",
	"Namespaces: %1.": "\u547d\u540d\u7a7a\u9593\uff1a%1\u3002",
	"Get %1 {{PLURAL:%1|page|pages}} from %2": "\u5f9e%2\u53d6\u5f97%1\u500b{{PLURAL:%1|\u9801\u9762}}",
	"Normalize {{%1}}": "\u898f\u7bc4{{%1}}\u6a21\u677f",
	"maintenance template list": "\u7dad\u8b77\u6a21\u677f\u540d\u7a31\u5217\u8868",
	"maintenance template list to be excluded": "\u9808\u6392\u9664\u4e4b\u7dad\u8b77\u6a21\u677f\u540d\u7a31\u5217\u8868",
	"Categories added to the report": "\u5831\u8868\u6dfb\u52a0\u7dad\u8b77\u5206\u985e",
	"Merge %1 {{PLURAL:%1|template|templates}} into {{%2}}": "\u5c07%1\u500b\u7dad\u8b77{{PLURAL:%1|\u6a21\u677f}}\u7d0d\u5165{{%2}}\u6a21\u677f",
	"Create {{%2}} with %1 maintenance {{PLURAL:%1|template|templates}}": "\u5275\u5efa\u5305\u542b%1\u500b\u7dad\u8b77\u6a21\u677f\u7684{{%2}}{{PLURAL:%1|\u6a21\u677f}}",
	"Remove {{%2}} for only %1 maintenance {{PLURAL:%1|template|templates}}": "\u62c6\u5206\u50c5\u6709%1\u500b\u7dad\u8b77\u6a21\u677f\u7684{{%2}} {{PLURAL:%1|\u6a21\u677f}}",
	"Total %1 {{PLURAL:%1|article|articles}}.": "\u5171%1\u7bc7{{PLURAL:%1|\u689d\u76ee}}\u3002",
	"number-of-templates": "\u6a21\u677f\u6578",
	"Articles containing maintenance templates": "\u542b\u6709\u7dad\u8b77\u6a21\u677f\u4e4b\u689d\u76ee",
	"The articles containing too many maintenance templates are listed below:": "\u4ee5\u4e0b\u5217\u51fa\u542b\u6709\u592a\u591a\u7dad\u8b77\u6a21\u677f\u4e4b\u689d\u76ee\uff1a",
	"The report will be updated weekly by the robot.": "\u672c\u5831\u544a\u6703\u6bcf\u5468\u66f4\u65b0\uff0c\u6bcb\u9808\u624b\u52d5\u4fee\u6b63\u3002",
	"You can change the configuration from %1.": "\u60a8\u53ef\u4ee5\u5f9e%1\u66f4\u6539\u8a2d\u5b9a\u53c3\u6578\u3002",
	"the configuration page": "\u9019\u500b\u8a2d\u5b9a\u9801\u9762",
	"Generate date: %1": "\u7522\u751f\u6642\u9593\uff1a%1",
	"Problematic articles": "\u6709\u554f\u984c\u7684\u689d\u76ee",
	"Too many entries with maintenance templates in the record: %1 {{PLURAL:%1|entrie|entries}}": "\u7d00\u9304\u542b\u6709\u592a\u591a\u7dad\u8b77\u6a21\u677f\u4e4b\u689d\u76ee\uff1a%1{{PLURAL:%1|\u689d}}",
	"Minimum number of templates to report: %1": "\u5217\u5165\u5831\u8868\u7684\u6700\u4f4e\u6a21\u677f\u6578\uff1a%1",
	"Here is a list of interlanguage links that need to be manually corrected. This list will be updated automatically by the robot.": "\u9019\u88e1\u5217\u51fa\u4e86\u9700\u4eba\u5de5\u4fee\u6b63\u7684\u8de8\u8a9e\u8a00\u9023\u7d50\u3002\u672c\u5217\u8868\u5c07\u7531\u6a5f\u5668\u4eba\u81ea\u52d5\u66f4\u65b0\u3002",
	"edit-mark": "\u7de8",
	"... A total of %1 {{PLURAL:%1|occurrence|occurrences}}.": "\u5171\u767c\u751f\u4e86%1\u6b21",
	"Report generation date: %1": "\u5831\u544a\u751f\u6210\u6642\u9593\uff1a%1",
	"Cleanup report for interlanguage link templates": "\u8de8\u8a9e\u8a00\u9023\u7d50\u6e05\u7406\u5831\u544a",
	"Convert %1 to wikilink": "\u6e05\u7406\u8de8\u8a9e\u8a00\u9023\u7d50%1\u6210\u70ba\u5167\u90e8\u9023\u7d50:\u7de8\u8f2f\u6458\u8981\u7684red link\u7d93\u7e41\u7c21\u8f49\u63db\u5f8c\u5b58\u5728",
	"Preserve interlanguage links because of the \"preserve\" parameter is set.": "\u6307\u5b9a\u4e86\u5f37\u5236\u986f\u793a\u53c3\u6578\uff0c\u4e0d\u505a\u4fee\u6539\u3002",
	"The task does not process talk pages": "\u672c\u4efb\u52d9\u4e0d\u8655\u7406\u5c0d\u8a71\u9801",
	"The local link target links back to the page itself. [[MOS:CIRCULAR]]?": "\u6240\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\u91cd\u5b9a\u5411\u5230\u4e86\u9801\u9762\u672c\u8eab\u3002[[WP:CIRCULAR]]\u6216\u53ef\u64f4\u5145\u91cd\u5b9a\u5411\uff1f",
	"The local page is too new. Will try again next time.": "\u4e2d\u6587\u689d\u76ee\u904e\u65b0\uff0c\u5c07\u904e\u5e7e\u5929\u518d\u6e2c\u8a66\u3002",
	"\u5916\u8a9e\u689d\u76ee\u6c92\u6709\u76f8\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\uff0c\u6216\u61c9\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\u4e26\u6c92\u6709\u9023\u7d50\u5230\u6b63\u78ba\u7684Wikidata\u9805\u76ee\u3002": "\u5916\u8a9e\u689d\u76ee\u6c92\u6709\u76f8\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\uff0c\u6216\u61c9\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\u4e26\u6c92\u6709\u9023\u7d50\u5230\u6b63\u78ba\u7684Wikidata\u9805\u76ee\u3002",
	"\u8de8\u8a9e\u8a00\u6a21\u677f\u7684\u672c\u5730\u6a19\u984c\u8207\u5916\u8a9e\u6a19\u984c\u76f8\u540c": "\u8de8\u8a9e\u8a00\u6a21\u677f\u7684\u672c\u5730\u6a19\u984c\u8207\u5916\u8a9e\u6a19\u984c\u76f8\u540c",
	"Local page title contains the local title in the interlanguage template": "\u672c\u5730\u9801\u9762\u6a19\u984c\u5305\u542b\u8de8\u8a9e\u8a00\u6a21\u677f\u4e2d\u7684\u672c\u5730\u6a19\u984c",
	"From the parameter of template": "\u5f9e\u6a21\u677f\u53c3\u6578",
	"From foreign language title": "\u5f9e\u5916\u8a9e\u9801\u9762\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee",
	"The local title is different from the one given by the template parameters.": "\u6240\u5c0d\u61c9\u7684\u4e2d\u6587\u689d\u76ee\u6a19\u984c\u8207\u6a21\u677f\u53c3\u6578\u6240\u5217\u51fa\u7684\u4e0d\u76f8\u7b26\u3002",
	"The corresponding foreign language page does not exist.": "\u6240\u5c0d\u61c9\u7684\u5916\u8a9e\u689d\u76ee\u4e0d\u5b58\u5728\u3002",
	"The corresponding foreign language page is a disambiguation page.": "\u6240\u5c0d\u61c9\u7684\u5916\u8a9e\u9801\u9762\u70ba\u6d88\u6b67\u7fa9\u9801\u3002",
	"The corresponding foreign language page is redirected to a section.": "\u6240\u5c0d\u61c9\u7684\u5916\u8a9e\u9801\u9762\u91cd\u5b9a\u5411\u5230\u4e86\u689d\u76ee\u7ae0\u7bc0\u3002",
	"Syntax error in the interlanguage link template.": "\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\u7684\u8a9e\u6cd5\u932f\u8aa4\u3002",
	"Could not retrieve the foreign page. I will retry next time.": "\u7121\u6cd5\u53d6\u5f97\u6240\u5c0d\u61c9\u7684\u5916\u8a9e\u689d\u76ee\u3002\u5c07\u65bc\u4e0b\u6b21\u57f7\u884c\u6642\u518d\u505a\u5617\u8a66\u3002",
	"No registered interwiki link templates were found.": "\u672a\u767c\u73fe\u5df2\u767b\u8a18\u4e4b\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\u3002",
	"\u4e5f\u8a31\u6709\u5c1a\u672a\u767b\u8a18\u7684\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\uff0c\u6216\u662f\u88ab\u5d4c\u5165\u7684\u6a94\u6848/\u6a21\u677f\u4e2d\u5b58\u6709\u5df2\u5b58\u5728\u672c\u5730\u689d\u76ee\u4e4b\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\uff08\u901a\u5e38\u4f4d\u65bc\u9801\u9762\u6700\u5f8c\u4e00\u7bc0\uff09\uff1f": "\u4e5f\u8a31\u6709\u5c1a\u672a\u767b\u8a18\u7684\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\uff0c\u6216\u662f\u88ab\u5d4c\u5165\u7684\u6a94\u6848/\u6a21\u677f\u4e2d\u5b58\u6709\u5df2\u5b58\u5728\u672c\u5730\u689d\u76ee\u4e4b\u8de8\u8a9e\u8a00\u9023\u7d50\u6a21\u677f\uff08\u901a\u5e38\u4f4d\u65bc\u9801\u9762\u6700\u5f8c\u4e00\u7bc0\uff09\uff1f",
	"Only inserted or modified templates / section titles / non-specific-meaning-text": "\u9019\u4e00\u6bb5\u7de8\u8f2f\u53ea\u6dfb\u52a0\u3001\u4fee\u6539\u4e86\u6a21\u677f\u3001\u7ae0\u7bc0\u6a19\u984c\u3001\u683c\u5f0f\u6392\u7248\u6216\u8005\u6c92\u6709\u5177\u9ad4\u610f\u7fa9\u7684\u6587\u5b57",
	"Pre-existing text": "\u6b64\u7b46\u7de8\u8f2f\u4e4b\u524d\u5c31\u5df2\u7d93\u6709\u9019\u4e00\u6bb5\u6587\u5b57",
	"Only inserted punctuation / symbols": "\u6b64\u7b46\u7de8\u8f2f\u50c5\u50c5\u6dfb\u52a0\u4e86\u7b26\u865f",
	"Skip the edit for including [[WP:TRANS|transclusion]] <code>&lt;%1&gt;</code>": "\u9019\u6bb5\u4fee\u6539\u4e2d\u6709[[WP:TRANS|\u5d4c\u5165\u5305\u542b]]\u5ba3\u544a<code>&lt;%1&gt;</code>\uff0c\u56e0\u6b64\u8df3\u904e\u4e0d\u8655\u7406",
	"Maybe user %1 edit text signed by %2, or %1 help correcting the text": "%1 \u53ef\u80fd\u7de8\u8f2f\u4e86 %2 \u7f72\u540d\u7684\u6587\u5b57\uff08\u4e5f\u53ef\u80fd\u662f\u7528\u6236 %1\u4ee3\u7c3d\u540d\u3001\u5e6b\u5fd9\u4fee\u6b63\u932f\u8aa4\u683c\u5f0f\u3001\u7279\u610f\u63d0\u53ca\u3001\u642c\u79fb\u689d\u76ee\u8a0e\u8ad6\uff0c\u6216\u662f\u9084\u539f/\u64a4\u92b7\u7de8\u8f2f\uff09",
	"It seems the user %1 did not signed with link.": "\u7528\u6236 %1 \u4f3c\u4e4e\u672a\u4ee5\u9023\u7d50\u7684\u5f62\u5f0f\u52a0\u4e0a\u7c3d\u540d\u3002\u4f8b\u5982\u53ea\u5beb\u4e86\u7528\u6236\u540d\u6216\u65e5\u671f\uff08\u8acb\u6ce8\u610f\uff0c\u53ea\u5beb\u65e5\u671f\u4e5f\u6703\u88ab\u8df3\u904e\u4e0d\u88dc\u7c3d\u540d\uff09\uff0c\u4f46\u662f\u6c92\u6709\u52a0\u9023\u7d50\u7684\u60c5\u6cc1\u3002\u4e5f\u6709\u53ef\u80fd\u628a<code>~~<nowiki />~~</code>\u8f38\u5165\u6210<code><nowiki>~~~~~</nowiki></code>\u4e86",
	"The user may have appended date and signature, but it is not clear. Still '''need to append signature for %1 %2'''": "\u7de8\u8f2f\u8005\u6216\u8a31\u5df2\u7d93\u52a0\u4e0a\u65e5\u671f\u8207\u7c3d\u540d\uff0c\u4f46\u662f\u4e26\u4e0d\u660e\u78ba\u3002\u4ecd\u7136'''\u9700\u8981\u5728\u6700\u5f8c\u88dc\u4e0a%1 %2 \u7684\u7c3d\u540d'''",
	"'''Need to append signature for %1 %2'''": "'''\u9700\u8981\u5728\u6700\u5f8c\u88dc\u4e0a%1 %2 \u7684\u7c3d\u540d'''",
	"IP user": "IP\u7528\u6236",
	"user": "\u7528\u6236",
	"(%1 {{PLURAL:%1|character|characters}} modified)": "\uff08\u672c\u6bb5\u4fee\u6539\u5171 %1 {{PLURAL:%1|\u5b57\u5143}}\uff09",
	"(new page)": "\uff08\u65b0\u9801\u9762\uff09",
	"Pages that are not linked to the signature, such as %1. Thank you for your participation.": "\u7c3d\u540d\u6c92\u6709\u9023\u7d50\u7684\u9801\u9762\u4f8b\u5982 %1\u3002\u8b1d\u8b1d\u60a8\u53c3\u8207\u8a0e\u8ad6\u3002",
	"Hi, maybe you can change the format of your signature": "\u60a8\u597d\uff0c\u53ef\u80fd\u9700\u8981\u9ebb\u7169\u6539\u8b8a\u4e00\u4e0b\u60a8\u7684\u7559\u8a00\u7c3d\u540d\u683c\u5f0f",
	"[[%1|Remind you to add a link when signing]], such as the %2 {{PLURAL:%2|page|pages}} listed in the notification.": "[[%1|\u63d0\u9192\u7c3d\u540d\u6642\u8981\u52a0\u4e0a\u9023\u7d50]]\uff0c\u4f8b\u5982\u5728\u6587\u4e2d\u6240\u5217\u7684 %2 \u500b{{PLURAL:%2|\u9801\u9762}}\u3002",
	"If you have updated your past messages, please add a signature at the end.": "\u82e5\u662f\u60a8\u66f4\u65b0\u4e86\u904e\u53bb\u7684\u7559\u8a00\uff0c\u4e5f\u8acb\u60a8\u5728\u6700\u5f8c\u52a0\u4e0a\u500b\u7c3d\u540d\u7684\u9023\u7d50\u3002",
	"[[%3|Signing]] [[Special:Diff/%1|comment by %2]].": "\u70ba[[Special:Diff/%1|%2\u7684\u7de8\u8f2f]][[%3|\u88dc\u7c3d\u540d]]\u3002",
	"This tool is only for recording.": "\u672c\u5de5\u5177\u50c5\u70ba\u7d00\u9304\u7528\u3002",
	"You may re-edit the text whatever you want.": "\u82e5\u60a8\u53ea\u662f\u66ab\u5b58\uff0c\u8acb\u5728\u7de8\u8f2f\u8a3b\u89e3\u52a0\u4e0a\"\u66ab\u5b58\"\u5b57\u6a23\u5373\u53ef\u907f\u514d\u88dc\u7c3d\u540d\u3002\u82e5\u60a8\u5e0c\u671b\u81ea\u884c\u624b\u52d5\u88dc\u7c3d\u540d\uff0c\u8acb\u9015\u884c\u4fee\u6539\u5373\u53ef\u3002",
	"Pages that may require a signature, such as %1. Thank you for your participation.": "\u53ef\u80fd\u9700\u8981\u7c3d\u540d\u7684\u9801\u9762\u4f8b\u5982 %1\u3002\u8b1d\u8b1d\u60a8\u7684\u53c3\u8207\u3002",
	"Please remember to sign when you leave messages": "\u8acb\u8a18\u5f97\u5728\u7559\u8a00\u6642\u7f72\u540d",
	"[[%1|Remind to sign]], such as the %2 pages listed in the notification.": "[[%1|\u63d0\u9192\u8a18\u5f97\u7c3d\u540d]]\uff0c\u4f8b\u5982\u5728\u6587\u4e2d\u6240\u5217\u7684 %2 \u500b\u9801\u9762\u3002",
	"Generate topic list: %1 {{PLURAL:%1|topic|topics}}": "\u751f\u6210\u8b70\u984c\u5217\u8868\uff1a%1\u500b{{PLURAL:%1|\u8b70\u984c}}",
	"\u4fee\u6b63\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede": "\u4fee\u6b63\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede",
	"\u63d0\u9192\u79fb\u9664%1\u500b\u5931\u6548\u7db2\u9801{{PLURAL:%1|\u9328\u9ede}}": "\u63d0\u9192\u79fb\u9664%1\u500b\u5931\u6548\u7db2\u9801{{PLURAL:%1|\u9328\u9ede}}",
	"\u7db2\u9801\u9328\u9ede %1 \u9023\u7d50\u5230\u5c08\u5c6c\u9801\u9762\uff1a%2\u3002": "\u7db2\u9801\u9328\u9ede %1 \u9023\u7d50\u5230\u5c08\u5c6c\u9801\u9762\uff1a%2\u3002",
	"\u6b64\u7db2\u9801\u9328\u9ede\uff08%2\uff09\u4e4b\u524d[[Special:Diff/%1|\u66fe\u88ab\u5176\u4ed6\u7528\u6236\u522a\u9664\u904e]]\u3002": "\u6b64\u7db2\u9801\u9328\u9ede\uff08%2\uff09\u4e4b\u524d[[Special:Diff/%1|\u66fe\u88ab\u5176\u4ed6\u7528\u6236\u522a\u9664\u904e]]\u3002",
	"\u63d0\u9192\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede": "\u63d0\u9192\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede",
	"\u66f4\u65b0\u6307\u5411\u5b58\u6a94\u7684\u9023\u7d50%1\uff1a%2": "\u66f4\u65b0\u6307\u5411\u5b58\u6a94\u7684\u9023\u7d50%1\uff1a%2",
	"\u5927\u5c0f\u5beb\u6216\u7a7a\u767d\u76f8\u7570\u7684\u7db2\u9801\u9328\u9ede": "\u5927\u5c0f\u5beb\u6216\u7a7a\u767d\u76f8\u7570\u7684\u7db2\u9801\u9328\u9ede",
	"\u7e41\u7c21\u4e0d\u7b26\u5339\u914d\u800c\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede": "\u7e41\u7c21\u4e0d\u7b26\u5339\u914d\u800c\u5931\u6548\u7684\u7db2\u9801\u9328\u9ede",
	"\u5dee\u7570\u6975\u5927": "\u5dee\u7570\u6975\u5927",
	"\u8acb\u5e6b\u5fd9\u6aa2\u6838\u6b64\u6b21\u7de8\u8f2f\u3002": "\u8acb\u5e6b\u5fd9\u6aa2\u6838\u6b64\u6b21\u7de8\u8f2f\u3002",
	"%1\u2192\u7576\u524d\u6700\u8fd1\u4f3c\u7684\u7db2\u9801\u9328\u9ede%2": "%1\u2192\u7576\u524d\u6700\u8fd1\u4f3c\u7684\u7db2\u9801\u9328\u9ede%2",
	"Archiving operation": "\u6b78\u6a94\u5c01\u5b58\u4f5c\u696d",
	"Append %1 {{PLURAL:%1|topic|topics}}": "\u6dfb\u52a0 %1 {{PLURAL:%1|\u8b70\u984c}}",
	"Remove %1 {{PLURAL:%1|topic|topics}}": "\u79fb\u9664 %1 {{PLURAL:%1|\u8b70\u984c}}",
	"\u66f4\u65b0%1": "\u66f4\u65b0%1",
	"%1\u7248\u689d\u76ee": "%1\u7248\u689d\u76ee",
	"\u8a9e\u8a00\u6578": "\u8a9e\u8a00\u6578",
	"\u5e73\u5747": "\u5e73\u5747",
	"\u5408\u8a08": "\u5408\u8a08",
	"\u689d\u76ee\u4e00\u89bd": "\u689d\u76ee\u4e00\u89bd",
	"See also": "\u76f8\u95dc\u9805\u76ee",
	"\u7121\u6a19\u7c64": "\u7121\u6a19\u7c64",
	"Synchronizing common pages": "\u540c\u6b65\u901a\u7528\u9801\u9762",
	"Synchronizing %1": "\u540c\u6b65 %1",
	"Create a redirect with the same name as the original wiki project page: %1": "\u6dfb\u52a0\u8207\u539f\u7dad\u57fa\u9805\u76ee\u9801\u9762\u540c\u540d\u7684\u91cd\u5b9a\u5411\uff1a%1",
	"%1 dependent on module \u2192 %2": "%1 \u4f9d\u8cf4\u65bc module \u2192 %2",
	"%1 dependent on \u2192 %2": "%1 \u4f9d\u8cf4\u65bc \u2192 %2",
	"%1 does not start with %2": "%1 \u4e26\u975e\u4ee5 %2 \u70ba\u958b\u982d",
	"The latest version was edited in %1, too close to time, later than %2, skip this page.": "\u6700\u65b0\u7248\u672c\u65bc%1\u7de8\u8f2f\uff0c\u6642\u9593\u904e\u8fd1\uff0c\u665a\u65bc%2\uff0c\u8df3\u904e\u6b64\u9801\u9762\u3002",
	"This page does not exist, skip this page.": "\u4e0d\u5b58\u5728\u6b64\u9801\u9762\uff0c\u8df3\u904e\u6b64\u9801\u9762\u3002",
	"The page %1 of the source wiki project redirects to %2, but the same page of the target wiki project redirects to %3, they are different! Skip this page.": "\u4f86\u6e90\u7dad\u57fa\u9805\u76ee %1 \u91cd\u5b9a\u5411\u81f3\u2192 %2\uff0c\u4f46\u76ee\u6a19\u7dad\u57fa\u9805\u76ee\u91cd\u5b9a\u5411\u81f3\u2192 %3\uff0c\u5169\u8005\u4e0d\u540c\uff01\u8df3\u904e\u6b64\u9801\u9762\u3002",
	"This page is copied from %1 and updated regularly by the robot. Please edit the original wiki project page directly, or edit this page after removing it from %2 of the custom page.": "\u672c\u9801\u9762\u8907\u88fd\u81ea%1\uff0c\u7531\u6a5f\u5668\u4eba\u5b9a\u671f\u66f4\u65b0\u3002\u8acb\u76f4\u63a5\u7de8\u8f2f\u539f\u7dad\u57fa\u9805\u76ee\u9801\u9762\uff0c\u6216\u81ea\u8a2d\u5b9a\u9801\u9762%2\u53bb\u9664\u672c\u9801\u9762\u4e4b\u5f8c\u518d\u7de8\u8f2f\u3002",
	"Template documentation to assist in understanding": "\u8f14\u52a9\u7406\u89e3\u7528\u7684\u6a21\u677f\u8aaa\u660e\u6587\u4ef6",
	"Required template style file": "\u5fc5\u8981\u7684\u6a21\u677f\u6a23\u5f0f\u6587\u4ef6",
	"Overwrite target page %1": "\u8986\u84cb\u76ee\u6a19\u9801\u9762 %1",
	"Revision id %1": "\u7248\u672c%1",
	"Fine-tuned": "\u7d93\u904e\u5fae\u8abf",
	"Required by %1": "\u53d7 %1 \u6240\u9700",
	"Adding sitelinks when synchronizing common pages: %1 \u2192 %2": "\u540c\u6b65\u901a\u7528\u9801\u9762\u6642\u6dfb\u52a0\u5371\u6a5f\u9023\u7d50\uff1a%1 \u2192 %2",
	"Very Sorry. Undo the robot's wrong edits. (%1)": "\u5f88\u62b1\u6b49\u3002\u64a4\u6d88\u6a5f\u5668\u4eba\u7684\u932f\u8aa4\u7de8\u8f2f\u3002\uff08%1\uff09",
	"debug level": "\u5075\u932f\u5c64\u7d1a",
	"%2: The target directory [%1] does not exist?": "%2\uff1a\u4e0d\u5b58\u5728\u6a19\u7684\u76ee\u9304 [%1]\uff1f",
	"%3: %1: %2 {{PLURAL:%2|file|files}} / {{PLURAL:%2|directory|directories}} to check.": "%3: %1: %2 \u500b{{PLURAL:%2|\u6a94\u6848}}\u6216{{PLURAL:%2|\u76ee\u9304}}\u3002",
	"Create directory of sub-catalog [%1]:": "\u5275\u5efa\u5b50\u5206\u985e %1 \u7684\u76ee\u9304\uff1a",
	"Invalid catalog: %1": "\u5b50\u5206\u985e\u7121\u6548\uff1a%1",
	"\u56e0\u70ba\u6700\u5927\u7684\u6a94\u6848\u6709 %1 {{PLURAL:%1|\u4f4d\u5143\u7d44}}\uff0c\u56e0\u6b64\u8df3\u904e\u9019\u500b%2\u7684\u76ee\u9304\uff1a%3": "\u56e0\u70ba\u6700\u5927\u7684\u6a94\u6848\u6709 %1 {{PLURAL:%1|\u4f4d\u5143\u7d44}}\uff0c\u56e0\u6b64\u8df3\u904e\u9019\u500b%2\u7684\u76ee\u9304\uff1a%3",
	"Cannot read file / directory: %1": "\u7121\u6cd5\u8b80\u53d6\u6a94\u6848\u6216\u76ee\u9304\uff1a%1",
	"\u70ba\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab": "\u70ba\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab",
	"Cannot read directory: %1": "\u7121\u6cd5\u8b80\u53d6\u76ee\u9304\uff1a%1",
	"Empty directory: %1": "\u7a7a\u76ee\u9304\uff1a%1",
	"\u542b\u6709 %1/%2 \u500b\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab": "\u542b\u6709 %1/%2 \u500b\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab",
	"\u542b\u6709 %1/%2 \u5f35{{PLURAL:%1|\u5716\u7247}}": "\u542b\u6709 %1/%2 \u5f35{{PLURAL:%1|\u5716\u7247}}",
	"\u6b21\u76ee\u9304\u4e2d\u542b\u6709\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab": "\u6b21\u76ee\u9304\u4e2d\u542b\u6709\u53ef\u57f7\u884c\u6a94\u6216\u51fd\u5f0f\u5eab",
	"\u9700\u8981\u624b\u52d5\u6aa2\u67e5\u7684\u76ee\u9304\uff1a%1": "\u9700\u8981\u624b\u52d5\u6aa2\u67e5\u7684\u76ee\u9304\uff1a%1",
	"Move %1:": "\u642c\u79fb %1\uff1a",
	"Remove empty directory: %1": "\u522a\u9664\u7a7a\u76ee\u9304\uff1a%1",
	"Directory of sub-catalog [%1] created: %2": "\u5df2\u5275\u5efa\u5b50\u5206\u985e %1 \u7684\u76ee\u9304\uff1a%2",
	"%2: %1 {{PLURAL:%1|directory|directories}} to compress.": "%2: \u58d3\u7e2e%1\u500b\u76ee\u9304\u3002",
	"\u56e0\u70ba\u672a\u8a2d\u5b9a\u8981\u58d3\u7e2e (do_compress)\uff0c\u6709 %1 \u500b\u6a94\u6848\u6216\u76ee\u9304\u6c92\u6709\u58d3\u7e2e\u3002": "\u56e0\u70ba\u672a\u8a2d\u5b9a\u8981\u58d3\u7e2e (do_compress)\uff0c\u6709 %1 \u500b\u6a94\u6848\u6216\u76ee\u9304\u6c92\u6709\u58d3\u7e2e\u3002",
	"%1/%2 compressing": "%1/%2 \u58d3\u7e2e\u4e2d",
	"Compress %1:": "\u58d3\u7e2e %1\uff1a",
	"Target exists: %1": "\u5df2\u5b58\u5728\u58d3\u7e2e\u6a19\u7684\uff1a%1",
	"\u00a7%1\u300a%2\u300b\u4e4b\u5f8c\u5fc5\u9808\u7b49\u5230 %3 \u624d\u80fd\u95b1\u8b80\u3002\u8df3\u904e\u9918\u4e0b\u7684\u7ae0\u7bc0\u3002": "\u00a7%1\u300a%2\u300b\u4e4b\u5f8c\u5fc5\u9808\u7b49\u5230 %3 \u624d\u80fd\u95b1\u8b80\u3002\u8df3\u904e\u9918\u4e0b\u7684\u7ae0\u7bc0\u3002",
	"\u300a%1\u300b\u70ba\u6703\u54e1\u5c08\u5c6c\u4f5c\u54c1\uff0c\u5fc5\u9808\u5145\u503c\u5f8c\u624d\u80fd\u95b1\u8b80\uff01": "\u300a%1\u300b\u70ba\u6703\u54e1\u5c08\u5c6c\u4f5c\u54c1\uff0c\u5fc5\u9808\u5145\u503c\u5f8c\u624d\u80fd\u95b1\u8b80\uff01",
	"\u641c\u5c0b\u7d50\u679c": "\u641c\u5c0b\u7d50\u679c",
	"\u4e0b\u8f09\u9078\u9805": "\u4e0b\u8f09\u9078\u9805",
	"\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u958b\u555f\u5075\u932f\u5de5\u5177": "\u958b\u555f\u5075\u932f\u5de5\u5177",
	"\u958b\u5553\u4e0b\u8f09\u76ee\u9304": "\u958b\u5553\u4e0b\u8f09\u76ee\u9304",
	"\u641c\u5c0b": "\u641c\u5c0b",
	"\u641c\u5c0b\u5404\u7db2\u7ad9\u4e26\u4e0b\u8f09\u4f5c\u54c1\u3002": "\u641c\u5c0b\u5404\u7db2\u7ad9\u4e26\u4e0b\u8f09\u4f5c\u54c1\u3002",
	"\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94": "\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94",
	"\u958b\u59cb\u4e0b\u8f09": "\u958b\u59cb\u4e0b\u8f09",
	"\u7db2\u8def\u4f5c\u54c1\u7db2\u7ad9": "\u7db2\u8def\u4f5c\u54c1\u7db2\u7ad9",
	"\u4e0b\u8f09\u4e2d\u7684\u4f5c\u54c1": "\u4e0b\u8f09\u4e2d\u7684\u4f5c\u54c1",
	"\u4e0d\u9650\u5236\u8a0a\u606f\u884c\u6578": "\u4e0d\u9650\u5236\u8a0a\u606f\u884c\u6578",
	"CeJS \u7db2\u8def\u5c0f\u8aaa\u6f2b\u756b\u4e0b\u8f09\u5de5\u5177": "CeJS \u7db2\u8def\u5c0f\u8aaa\u6f2b\u756b\u4e0b\u8f09\u5de5\u5177",
	"\u8cbc\u4e0a": "\u8cbc\u4e0a",
	"\u958b\u59cb\u6aa2\u6e2c\u4e26\u66f4\u65b0\u5b89\u88dd\u5305\u2026\u2026": "\u958b\u59cb\u6aa2\u6e2c\u4e26\u66f4\u65b0\u5b89\u88dd\u5305\u2026\u2026",
	"\u6240\u57f7\u884c\u7684\u4e26\u975e\u5b89\u88dd\u5305\u7248\u672c\uff0c\u56e0\u6b64\u4e0d\u57f7\u884c\u5b89\u88dd\u5305\u7248\u672c\u7684\u5347\u7d1a\u6aa2\u67e5\u3002": "\u6240\u57f7\u884c\u7684\u4e26\u975e\u5b89\u88dd\u5305\u7248\u672c\uff0c\u56e0\u6b64\u4e0d\u57f7\u884c\u5b89\u88dd\u5305\u7248\u672c\u7684\u5347\u7d1a\u6aa2\u67e5\u3002",
	"\u958b\u59cb\u6aa2\u6e2c\u5b89\u88dd\u5305\u66f4\u65b0\u2026\u2026": "\u958b\u59cb\u6aa2\u6e2c\u5b89\u88dd\u5305\u66f4\u65b0\u2026\u2026",
	"\u6709\u65b0\u7248\u5b89\u88dd\u5305\uff1a%1": "\u6709\u65b0\u7248\u5b89\u88dd\u5305\uff1a%1",
	"\u958b\u59cb\u4e0b\u8f09\u5b89\u88dd\u5305\u3002\u82e5\u9084\u6c92\u4e0b\u8f09\u5b8c\u5c31\u96e2\u958b\u7a0b\u5f0f\u3001\u51fa\u932f\uff0c\u4e0b\u6b21\u6703\u5f9e\u982d\u4e0b\u8f09\u3002\u60a8\u53ef\u5347\u9ad8\u8a0a\u606f\u6b04\u7684\u5075\u932f\u7b49\u7d1a\uff0c\u4ee5\u5f97\u77e5\u4e0b\u8f09\u9032\u5ea6\u3002": "\u958b\u59cb\u4e0b\u8f09\u5b89\u88dd\u5305\u3002\u82e5\u9084\u6c92\u4e0b\u8f09\u5b8c\u5c31\u96e2\u958b\u7a0b\u5f0f\u3001\u51fa\u932f\uff0c\u4e0b\u6b21\u6703\u5f9e\u982d\u4e0b\u8f09\u3002\u60a8\u53ef\u5347\u9ad8\u8a0a\u606f\u6b04\u7684\u5075\u932f\u7b49\u7d1a\uff0c\u4ee5\u5f97\u77e5\u4e0b\u8f09\u9032\u5ea6\u3002",
	"\u6c92\u6709\u65b0\u5b89\u88dd\u5305\u3002\u7576\u524d\u7248\u672c\uff1a%1": "\u6c92\u6709\u65b0\u5b89\u88dd\u5305\u3002\u7576\u524d\u7248\u672c\uff1a%1",
	"\u5b89\u88dd\u5305\u66f4\u65b0\u51fa\u932f\uff1a%1": "\u5b89\u88dd\u5305\u66f4\u65b0\u51fa\u932f\uff1a%1",
	"\u5b89\u88dd\u5305\u5df2\u4e0b\u8f09 %1\uff0c\u4e0b\u8f09\u901f\u5ea6 %2 bytes/s\u3002": "\u5b89\u88dd\u5305\u5df2\u4e0b\u8f09 %1\uff0c\u4e0b\u8f09\u901f\u5ea6 %2 bytes/s\u3002",
	"\u5b89\u88dd\u5305\u5df2\u4e0b\u8f09 %1\uff0c\u9810\u4f30\u9084\u9700 %2 \u5206\u9418\u4e0b\u8f09\u5b8c\u7562\u3002": "\u5b89\u88dd\u5305\u5df2\u4e0b\u8f09 %1\uff0c\u9810\u4f30\u9084\u9700 %2 \u5206\u9418\u4e0b\u8f09\u5b8c\u7562\u3002",
	"\u65b0\u7248\u5b89\u88dd\u5305\u4e0b\u8f09\u5b8c\u6210\uff1a%1": "\u65b0\u7248\u5b89\u88dd\u5305\u4e0b\u8f09\u5b8c\u6210\uff1a%1",
	"\u91cd\u65b0\u555f\u52d5\u7a0b\u5f0f\u5373\u53ef\u66f4\u65b0\u3002": "\u91cd\u65b0\u555f\u52d5\u7a0b\u5f0f\u5373\u53ef\u66f4\u65b0\u3002",
	"\u5b89\u88dd\u5305\u66f4\u65b0\u5931\u6557\uff1a%1": "\u5b89\u88dd\u5305\u66f4\u65b0\u5931\u6557\uff1a%1",
	"\u7e41\u9ad4\u5b57\u6f2b\u756b": "\u7e41\u9ad4\u5b57\u6f2b\u756b",
	"\u4e2d\u56fd\u5185\u5730\u6f2b\u753b": "\u4e2d\u570b\u5167\u5730\u6f2b\u756b",
	"\u65e5\u672c\u8a9e\u306e\u30a6\u30a7\u30d6\u30b3\u30df\u30c3\u30af": "\u65e5\u8a9e\u7db2\u8def\u6f2b\u756b",
	"English webcomics": "\u82f1\u8a9e\u7db2\u8def\u6f2b\u756b",
	"\u4e2d\u56fd\u5185\u5730\u5c0f\u8bf4": "\u4e2d\u570b\u5167\u5730\u5c0f\u8aaa",
	"\u65e5\u672c\u8a9e\u306e\u30aa\u30f3\u30e9\u30a4\u30f3\u5c0f\u8aac": "\u65e5\u8a9e\u7db2\u8def\u5c0f\u8aaa",
	"\u4e0d\u518d\u7dad\u8b77": "\u4e0d\u518d\u7dad\u8b77",
	"download_options.chapter_NO_range": "\u4e0b\u8f09\u6b64\u7ae0\u7bc0\u7de8\u865f\u7bc4\u570d\u3002\u4f8b\u5982 \"20-30,50-60\"\u3002",
	"download_options.directory_name_pattern": "\u81ea\u8a02\u4f5c\u54c1\u76ee\u9304\u540d\u7a31\u6a21\u5f0f\u3002\u9810\u8a2d\uff1a'${id_title}${directory_name_extension}'\u3002'${title}' \u5c07\u53ea\u4ee5\u4f5c\u54c1\u6a19\u984c\u70ba\u4f5c\u54c1\u76ee\u9304\uff0c'${id}' \u5c07\u53ea\u4ee5\u4f5c\u54c1id\u70ba\u4f5c\u54c1\u76ee\u9304\u3002",
	"download_options.acceptable_types": "\u53ef\u63a5\u53d7\u7684\u5716\u7247\u985e\u5225\uff08\u5ef6\u4f38\u6a94\u540d\uff09\u3002\u4ee5 \"|\" \u5b57\u5143\u4f5c\u5206\u9694\uff0c\u5982 \"webp|jpg|jpeg|png\"\u3002\u672a\u8a2d\u5b9a\u5c07\u4e0d\u4f5c\u6aa2\u67e5\u3002\u8f38\u5165 \"images\" \u8868\u793a\u63a5\u53d7\u6240\u6709\u5716\u7247\u3002\u82e5\u4e0b\u8f09\u7684\u5716\u7247\u4e0d\u5305\u542b\u5728\u6307\u5b9a\u985e\u578b\u4e2d\uff0c\u5247\u6703\u8996\u70ba\u932f\u8aa4\u3002\u672c\u5de5\u5177\u53ea\u80fd\u4e0b\u8f09\u7279\u5b9a\u5e7e\u7a2e\u5716\u7247\u985e\u578b\u3002\u672c\u9078\u9805\u50c5\u4f9b\u6aa2\u67e5\u5716\u7247\uff0c\u975e\u7528\u4f86\u6311\u9078\u60f3\u4e0b\u8f09\u7684\u5716\u7247\u985e\u578b\u3002",
	"download_options.allow_EOI_error": "\u7576\u5716\u7247\u4e0d\u5b58\u5728 EOI (end of image) \u6a19\u8a18\uff0c\u6216\u662f\u88ab\u5075\u6e2c\u51fa\u975e\u5716\u7247\u6642\uff0c\u4f9d\u820a\u5f37\u5236\u5132\u5b58\u6a94\u6848\u3002",
	"download_options.archive_all_good_images_only": "\u5b8c\u5168\u6c92\u6709\u51fa\u73fe\u932f\u8aa4\u624d\u58d3\u7e2e\u5716\u7247\u6a94\u6848\u3002",
	"download_options.archive_images": "\u6f2b\u756b\u4e0b\u8f09\u5b8c\u7562\u5f8c\u58d3\u7e2e\u5716\u7247\u6a94\u6848\u3002",
	"download_options.archive_old_works": "\u5c01\u5b58\u820a\u4f5c\u54c1\u3002\u7576\u524d\u50c5\u5c0d\u58d3\u7e2e\u6a94\u4e4b\u6f2b\u756b\u6709\u7528\uff0c\u5fc5\u9808\u8a2d\u5b9a `archive_images=true`\u3002\u9810\u8a2d\u4e0d\u5c01\u5b58\u820a\u4f5c\u54c1\u3002\u82e5\u8f38\u5165 \"3M\"\uff0c\u5c07\u53ea\u5c01\u5b58\u8d85\u904e3\u500b\u6708\u6c92\u66f4\u65b0\u4e0b\u8f09\u904e\u7684\u4f5c\u54c1\u3002\u8f38\u5165 true \u6642\uff0c\u63a1\u7528\u9810\u8a2d\u9593\u9694 \"0.5Y\"\uff0c\u5c01\u5b58\u534a\u5e74\u6c92\u6709\u65b0\u4e0b\u8f09\u7684\u4f5c\u54c1\u3002",
	"download_options.archive_program_path": "\u524d\u5f8c\u6dfb\u52a0\u5f15\u865f\u7684 7-Zip \u57f7\u884c\u6a94\u8def\u5f91\u3002",
	"download_options.cache_title_to_id": "\u4ee5 id \u4e0b\u8f09\u4f5c\u54c1\u6642\uff0c\u5132\u5b58\u4f5c\u54c1\u6a19\u984c\u5c0d\u61c9\u81f3 id \u4e4b\u5feb\u53d6\u3002\u8a2d\u5b9a\u6b64\u529f\u80fd\u5f8c\uff0c\u4e0b\u6b21\u8f38\u5165\u4f5c\u54c1\u6a19\u984c\u6642\u4e0d\u5fc5\u518d\u641c\u5c0b\u3002\u672a\u8a2d\u5b9a\u6b64\u529f\u80fd\uff0c\u5c07\u4e0d\u6703\u7522\u751f\u6210\u5feb\u53d6\u6a94\u6848\uff08\u9810\u8a2d\u70ba .search_result_file_name=search.json\uff09\u3002",
	"download_options.chapter_filter": "\u7be9\u9078\u60f3\u8981\u4e0b\u8f09\u7684\u7ae0\u7bc0\u6a19\u984c\u95dc\u9375\u5b57\u3002\u4f8b\u5982\"\u55ae\u884c\u672c\"\u3002",
	"download_options.chapter_time_interval": "\u7576\u7db2\u7ad9\u4e0d\u5141\u8a31\u592a\u904e\u983b\u7e41\u7684\u8a2a\u554f\u8b80\u53d6/access\u6642\uff0c\u53ef\u4ee5\u8a2d\u5b9a\u4e0b\u8f09\u7ae0\u7bc0\u8cc7\u8a0a/\u7ae0\u7bc0\u5167\u5bb9\u524d\u7684\u7b49\u5f85\u6642\u9593(ms)\u3002\u4f8b\u5982\u6b63\u5e38\u60c5\u6cc1\u53ef\u80fd30\u79d2\u624d\u770b\u4e00\u7ae0\u7bc0\uff0c\u53ef\u8a2d\u5b9a\u6210 \"30s\"\u3002\u53ef\u914d\u5408 one_by_one \u9078\u9805\u4f7f\u7528\u3002",
	"download_options.convert_to_language": "\u5c07\u7c21\u9ad4\u5c0f\u8aaa\u8f49\u63db\u70ba\u7e41\u9ad4\u5c0f\u8aaa\u6216\u8005\u5012\u904e\u4f86\u3002",
	"download_options.cookie": "\u8a2d\u5b9a\u4e0b\u8f09\u6642\u8981\u6dfb\u52a0\u7684 cookie\u3002\u4f8b\u5982 \"key1=value1; key2=value2\"\u3002",
	"download_options.data_directory": "\u9810\u8a2d\u4e3b\u8981\u4e0b\u8f09\u76ee\u9304\u3002\u5c07\u6703\u5728\u9019\u500b\u76ee\u9304\u4e0b\u5275\u5efa\u5404\u7db2\u7ad9\u7684\u5b50\u76ee\u9304\uff08\u5373 main_directory\uff09\uff0c\u518d\u5c07\u5404\u7db2\u7ad9\u4e0b\u8f09\u7684\u6a94\u6848\u653e\u5728\u6b64\u5b50\u76ee\u9304\u4e0b\u3002\u82e5\u5168\u90e8\u6e05\u7a7a\u5c07\u6703\u91cd\u8a2d\u4e0b\u8f09\u76ee\u9304\u3002",
	"download_options.discard_old_ebook_file": "\u4e0d\u89e3\u958b\u539f\u96fb\u5b50\u66f8\u3002\u5c31\u7b97\u5b58\u5728\u820a\u96fb\u5b50\u66f8\u6a94\u6848\uff0c\u4e5f\u4e0d\u89e3\u58d3\u7e2e\u3001\u5229\u7528\u820a\u8cc7\u6599\u3002",
	"download_options.images_archive_extension": "\u58d3\u7e2e\u6a94\u6848\u6642\u63a1\u7528\u7684\u526f\u6a94\u540d\u3002\u4f8b\u5982\u201ccbz\u201d\u3002\u9810\u8a2d\u70ba\u201czip\u201d\u3002",
	"download_options.main_directory": "\u5716\u7247\u6a94\u8207\u7d00\u9304\u6a94\u7684\u4e0b\u8f09\u4f4d\u7f6e\u3002\u4e0b\u8f09\u7db2\u7ad9\u4e0a\u7684\u4f5c\u54c1\u6a94\u6848\u5f8c\uff0c\u5c07\u5132\u5b58\u65bc\u6b64\u76ee\u9304\u4e0b\u3002",
	"download_options.MAX_ERROR_RETRY": "\u91cd\u8a66\u6b21\u6578\uff1a\u4e0b\u8f09\u5931\u6557\u3001\u51fa\u932f\u6642\u91cd\u65b0\u5617\u8a66\u4e0b\u8f09\u7684\u6b21\u6578\u3002\u540c\u4e00\u6a94\u6848\u932f\u8aa4\u8d85\u904e\u6b64\u6578\u91cf\u5247\u8df3\u51fa\u3002\u82e5\u503c\u592a\u5c0f\uff0c\u5728\u67d0\u4e9b\u7db2\u7ad9\u5f88\u5bb9\u6613\u51fa\u73fe\u5716\u7247\u58de\u6389\u7684\u554f\u984c\u3002",
	"download_options.MIN_LENGTH": "\u6700\u5c0f\u5bb9\u8a31\u5716\u7247\u6a94\u6848\u5927\u5c0f\uff08\u4f4d\u5143\u7d44\uff09\u3002\u82e5\u503c\u592a\u5c0f\uff0c\u50b3\u8f38\u5230\u4e00\u534a\u58de\u6389\u7684\u5716\u7247\u53ef\u80fd\u88ab\u7576\u4f5c\u6b63\u5e38\u5716\u7247\u800c\u4e0d\u6703\u51fa\u73fe\u932f\u8aa4\u3002",
	"download_options.modify_work_list_when_archive_old_works": "\u540c\u6642\u81ea\u4f5c\u54c1\u5217\u8868\u4e2d\u522a\u9664\u5c07\u5c01\u5b58\u4e4b\u4f5c\u54c1\u3002",
	"download_options.one_by_one": "\u5faa\u5e8f\u9010\u500b\u3001\u4e00\u500b\u500b\u4e0b\u8f09\u5716\u7247\u3002\u50c5\u5c0d\u6f2b\u756b\u6709\u7528\uff0c\u5c0d\u5c0f\u8aaa\u7121\u7528\u3002\u5c0f\u8aaa\u7ae0\u7bc0\u7686\u70ba\u9010\u500b\u4e0b\u8f09\u3002",
	"download_options.overwrite_old_file": "\u7576\u65b0\u7372\u53d6\u7684\u5c0f\u8aaa\u6a94\u6848\u6bd4\u8f03\u5927\u6642\uff0c\u8986\u5beb\u820a\u7684\u6a94\u6848\u3002",
	"download_options.play_finished_sound": "\u4efb\u52d9\u5b8c\u6210\u5f8c\u64ad\u653e\u97f3\u6548\u3002",
	"download_options.preserve_chapter_page": "\u662f\u5426\u4fdd\u7559 chapter page\u3002false: \u660e\u78ba\u6307\u5b9a\u4e0d\u4fdd\u7559\uff0c\u5c07\u522a\u9664\u5df2\u5b58\u5728\u7684 chapter page\u3002\u6ce8\u610f: \u82e5\u662f\u6c92\u6709\u8a2d\u5b9a .reget_chapter\uff0c\u5247 preserve_chapter_page \u4e0d\u61c9\u767c\u751f\u6548\u7528\u3002",
	"download_options.preserve_download_work_layer": "\u4e0b\u8f09\u5b8c\u6210\u5f8c\u4fdd\u7559\u4e0b\u8f09\u9032\u5ea6\u689d\u3002",
	"download_options.preserve_work_page": "\u662f\u5426\u4fdd\u7559\u4f5c\u54c1\u8cc7\u6599\u5feb\u53d6\u65bc .cache_directory_name \u4e0b\u3002",
	"download_options.proxy": "\u4ee3\u7406\u4f3a\u670d\u5668\u3002\u8f38\u5165\u683c\u5f0f\uff1a\"username:password@hostname:port\"",
	"download_options.rearrange_list_file": "\u91cd\u65b0\u6574\u7406\u5217\u8868\u6a94\u6848\u3002",
	"download_options.recheck": "\u5f9e\u982d\u6aa2\u6e2c\u6240\u6709\u4f5c\u54c1\u4e4b\u6240\u6709\u7ae0\u7bc0\u8207\u6240\u6709\u5716\u7247\u3002\u4f46\u4e0d\u91cd\u65b0\u4e0b\u8f09\u5df2\u5b8c\u6210\u5716\u7247\u3002\u8a2d\u5b9a 'multi_parts_changed' \u6642\uff0c\u7576\u6709\u591a\u500b\u5206\u90e8\u624d\u91cd\u65b0\u6aa2\u67e5\u3002",
	"download_options.regenerate": "\u7ae0\u7bc0\u6578\u91cf\u7121\u8b8a\u5316\u6642\uff0c\u4f9d\u820a\u5229\u7528\u5feb\u53d6\u91cd\u5efa\u8cc7\u6599\u3002\uff08\u4f8b\u5982\u4e0b\u8f09\u5c0f\u8aaa\u6642\uff0c\u4e0d\u91cd\u65b0\u7372\u53d6\u7db2\u9801\u8cc7\u6599\uff0c\u53ea\u91cd\u5efa ebook \u6a94\u3002\uff09",
	"download_options.reget_chapter": "\u91cd\u65b0\u7372\u53d6\u6bcf\u500b\u6240\u6aa2\u6e2c\u7684\u7ae0\u7bc0\u5167\u5bb9\u3002",
	"download_options.remove_ebook_directory": "\u5728\u5305\u88dd\u5b8c\u96fb\u5b50\u66f8\u4e4b\u5f8c\uff0c\u628a\u96fb\u5b50\u66f8\u76ee\u9304\u6574\u500b\u522a\u6389\u3002\u8acb\u6ce8\u610f\uff1a\u5fc5\u9808\u5148\u5b89\u88dd 7-Zip **18.01 \u4ee5\u4e0a\u7684\u7248\u672c**\u3002",
	"download_options.remove_images_after_archive": "\u58d3\u7e2e\u5716\u7247\u6a94\u6848\u4e4b\u5f8c\uff0c\u522a\u6389\u539f\u5148\u7684\u5716\u7247\u6a94\u6848\u3002",
	"download_options.save_preference": "\u5132\u5b58\u504f\u597d\u9078\u9805\u3002",
	"download_options.search_again": "\u91cd\u65b0\u641c\u5c0b\u4f5c\u54c1\u6a19\u984c\u3002\u9810\u8a2d\u70ba\u4f7f\u7528\u5feb\u53d6\uff0c\u4e0d\u91cd\u65b0\u641c\u5c0b\u3002",
	"download_options.show_information_only": "\u5728\u547d\u4ee4\u5217\u4ecb\u9762\u986f\u793a\u4f5c\u54c1\u8cc7\u8a0a\u3002",
	"download_options.skip_chapter_data_error": "\u7576\u7121\u6cd5\u7372\u53d6 chapter \u8cc7\u6599\u6642\uff0c\u76f4\u63a5\u5617\u8a66\u4e0b\u4e00\u7ae0\u7bc0\u3002",
	"download_options.skip_error": "\u5ffd\u7565/\u8df3\u904e\u5716\u7247\u932f\u8aa4\u3002\u7576404\u5716\u7247\u4e0d\u5b58\u5728\u3001\u6a94\u6848\u904e\u5c0f\uff0c\u6216\u662f\u88ab\u5075\u6e2c\u51fa\u975e\u5716\u7247(\u5982\u4e0d\u5177\u6709EOI)\u6642\uff0c\u4f9d\u820a\u5f37\u5236\u5132\u5b58\u6a94\u6848\u3002",
	"download_options.start_chapter": "\u958b\u59cb/\u63a5\u7e8c\u4e0b\u8f09\u7684\u7ae0\u7bc0\u3002\u5c07\u4f9d\u985e\u578b\u81ea\u52d5\u8f49\u6210 .start_chapter_NO \u6216 .start_chapter_title\u3002\u5c0d\u5df2\u4e0b\u8f09\u904e\u7684\u7ae0\u7bc0\uff0c\u5fc5\u9808\u914d\u5408 .recheck\u3002",
	"download_options.start_chapter_NO": "\u958b\u59cb/\u63a5\u7e8c\u4e0b\u8f09\u7684\u7ae0\u7bc0\u7de8\u865f\u3002",
	"download_options.start_chapter_title": "\u958b\u59cb/\u63a5\u7e8c\u4e0b\u8f09\u7684\u7ae0\u7bc0\u6a19\u984c\u3002",
	"download_options.start_list_serial": "\u6307\u5b9a\u4e86\u8981\u958b\u59cb\u4e0b\u8f09\u7684\u5217\u8868\u5e8f\u865f\u3002\u5c07\u6703\u8df3\u904e\u9019\u500b\u8a0a\u865f\u4e4b\u524d\u7684\u4f5c\u54c1\u3002\u4e00\u822c\u50c5\u4f7f\u7528\u65bc\u547d\u4ee4\u5217\u8a2d\u5b9a\u3002Default:1",
	"download_options.timeout": "\u4e0b\u8f09\u7db2\u9801\u6216\u5716\u7247\u7684\u903e\u6642\u7b49\u5f85\u6642\u9593(ms)\u3002\u82e5\u903e\u6642\u6642\u9593\u592a\u5c0f\uff08\u598210\u79d2\uff09\uff0c\u4e0b\u8f09\u5927\u6a94\u6848\u5bb9\u6613\u5931\u6557\u3002",
	"download_options.user_agent": "\u700f\u89bd\u5668\u8b58\u5225\u3002\u904b\u884c\u524d\u5f8c\u59cb\u7d42\u7dad\u6301\u76f8\u540c\u7684\u700f\u89bd\u5668\u8b58\u5225\uff0c\u61c9\u8a72\u5c31\u4e0d\u6703\u5f71\u97ff\u5230\u4e0b\u8f09\u3002",
	"download_options.vertical_writing": "\u5c07\u5c0f\u8aaa\u5f9e\u6a6b\u66f8\u6539\u6210\u7e31\u66f8\u3002",
	"download_options.write_chapter_metadata": "\u5c07\u6bcf\u500b\u7ae0\u7bc0\u58d3\u7e2e\u6a94\u7684\u8cc7\u8a0a\u5beb\u5165\u540c\u540d(\u6dfb\u52a0.json\u5ef6\u4f38\u6a94\u540d)\u7684JSON\u6a94\uff0c\u65b9\u4fbf\u5176\u4ed6\u5de5\u5177\u532f\u5165\u7528\u3002",
	"download_options.write_image_metadata": "\u5c07\u6bcf\u5f35\u5716\u7247\u7684\u8cc7\u8a0a\u5beb\u5165\u540c\u540d(\u6dfb\u52a0.json\u5ef6\u4f38\u6a94\u540d)\u7684JSON\u6a94\uff0c\u65b9\u4fbf\u5176\u4ed6\u5de5\u5177\u532f\u5165\u7528\u3002",
	"\u9650\u5236\u8a0a\u606f\u884c\u6578": "\u9650\u5236\u8a0a\u606f\u884c\u6578",
	"local-language-name": "\u7e41\u9ad4\u4e2d\u6587",
	"\u73fe\u6709%1\u689d%2\u8a0a\u606f\u5c1a\u672a\u7ffb\u8b6f\uff0c\u6b61\u8fce\u60a8\u4e00\u540c\u53c3\u8207\u7ffb\u8b6f\u8a0a\u606f\uff01": "\u73fe\u6709%1\u689d%2\u8a0a\u606f\u5c1a\u672a\u7ffb\u8b6f\uff0c\u6b61\u8fce\u60a8\u4e00\u540c\u53c3\u8207\u7ffb\u8b6f\u8a0a\u606f\uff01",
	"\u6240\u6709\u74b0\u5883\u8b8a\u6578\uff1a%1": "\u6240\u6709\u74b0\u5883\u8b8a\u6578\uff1a%1",
	"Default download directory: %1": "\u9810\u8a2d\u4e3b\u8981\u4e0b\u8f09\u76ee\u9304\uff1a%1",
	"\u6b61\u8fce\u8207\u6211\u5011\u4e00\u540c<a>\u7ffb\u8b6f\u4ecb\u9762\u6587\u5b57</a>\uff01": "\u6b61\u8fce\u8207\u6211\u5011\u4e00\u540c<a>\u7ffb\u8b6f\u4ecb\u9762\u6587\u5b57</a>\uff01",
	"\u8907\u88fd\u8cbc\u4e0a\u5feb\u901f\u9375": "\u8907\u88fd\u8cbc\u4e0a\u5feb\u901f\u9375",
	"\u8907\u88fd\u9078\u53d6\u7684\u9805\u76ee\uff1a": "\u8907\u88fd\u9078\u53d6\u7684\u9805\u76ee\uff1a",
	"Invalid theme name: %1": "\u7121\u6b64\u5e03\u666f\u540d\u7a31\uff1a%1",
	"\u5e03\u666f\u4e3b\u984c\uff1a": "\u5e03\u666f\u4e3b\u984c\uff1a",
	"dark theme": "\u6697\u8272",
	"default theme": "\u9810\u8a2d",
	"light theme": "\u660e\u4eae",
	"\u9078\u64c7%1\u8def\u5f91": "\u9078\u64c7%1\u8def\u5f91",
	"\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u8207\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u8207\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a": "\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a",
	"\u5df2\u8a2d\u5b9a\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u3002": "\u5df2\u8a2d\u5b9a\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u3002",
	"\u5df2\u8a2d\u5b9a\u4e0d\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u3002": "\u5df2\u8a2d\u5b9a\u4e0d\u81ea\u52d5\u5132\u5b58\u9078\u9805\u8a2d\u5b9a\u3002",
	"\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805\u8207\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805\u8207\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805": "\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805",
	"\u672a\u9078\u64c7\u6a94\u6848\u6216\u76ee\u9304\u3002": "\u672a\u9078\u64c7\u6a94\u6848\u6216\u76ee\u9304\u3002",
	"\u9078\u64c7\u4e86%2\u7684\u8def\u5f91\uff1a%1": "\u9078\u64c7\u4e86%2\u7684\u8def\u5f91\uff1a%1",
	"\u5df2\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805\u3002": "\u5df2\u91cd\u8a2d\u4e0b\u8f09\u9078\u9805\u3002",
	"\u540c\u6642\u66f4\u6539\u5df2\u624b\u52d5\u8a2d\u5b9a\u4e0b\u8f09\u76ee\u9304\u7684\u7db2\u7ad9 %1\uff1a%2 \u2192 %3": "\u540c\u6642\u66f4\u6539\u5df2\u624b\u52d5\u8a2d\u5b9a\u4e0b\u8f09\u76ee\u9304\u7684\u7db2\u7ad9 %1\uff1a%2 \u2192 %3",
	"\u820a\u4e0b\u8f09\u76ee\u9304 \"%1\" \u70ba\u7a7a\u76ee\u9304\uff0c\u5c07\u4e4b\u79fb\u9664\u3002": "\u820a\u4e0b\u8f09\u76ee\u9304 \"%1\" \u70ba\u7a7a\u76ee\u9304\uff0c\u5c07\u4e4b\u79fb\u9664\u3002",
	"\u6a94\u6848\u63db\u884c\u70ba %1\uff0c\u548c\u7cfb\u7d71\u63db\u884c %2 \u4e0d\u7b26\u3002": "\u6a94\u6848\u63db\u884c\u70ba %1\uff0c\u548c\u7cfb\u7d71\u63db\u884c %2 \u4e0d\u7b26\u3002",
	"\u958b\u555f\u6a94\u6848\u6642\u53ef\u80fd\u6703\u6709\u4e82\u78bc\u3002": "\u958b\u555f\u6a94\u6848\u6642\u53ef\u80fd\u6703\u6709\u4e82\u78bc\u3002",
	"\u4e00\u9375\u4fee\u6b63\u6a94\u6848\u63db\u884c": "\u4e00\u9375\u4fee\u6b63\u6a94\u6848\u63db\u884c",
	"\u5df2\u4fee\u6539\u6a94\u6848\u63db\u884c\u3002\u60a8\u5fc5\u9808\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae\u624d\u80fd\u751f\u6548\u3002": "\u5df2\u4fee\u6539\u6a94\u6848\u63db\u884c\u3002\u60a8\u5fc5\u9808\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae\u624d\u80fd\u751f\u6548\u3002",
	"\u8acb\u5728\u6bcf\u4e00\u884c\u9375\u5165\u4e00\u500b\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\uff1a": "\u8acb\u5728\u6bcf\u4e00\u884c\u9375\u5165\u4e00\u500b\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\uff1a",
	"\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u653e\u68c4\u7de8\u8f2f\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u653e\u68c4\u7de8\u8f2f\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae\u7684\u6a94\u6848\u4e0d\u5b58\u5728\u6216\u8005\u6c92\u6709\u5167\u5bb9\u3002\u63a1\u7528\u820a\u6709\u7684\u6700\u611b\u4f5c\u54c1\u5217\u8868\u3002": "\u5132\u5b58\u6700\u611b\u4f5c\u54c1\u6e05\u55ae\u7684\u6a94\u6848\u4e0d\u5b58\u5728\u6216\u8005\u6c92\u6709\u5167\u5bb9\u3002\u63a1\u7528\u820a\u6709\u7684\u6700\u611b\u4f5c\u54c1\u5217\u8868\u3002",
	"\u958b\u5553\u4f5c\u54c1\u4e0b\u8f09\u76ee\u9304": "\u958b\u5553\u4f5c\u54c1\u4e0b\u8f09\u76ee\u9304",
	"\u4f5c\u54c1\u5df2\u5b8c\u7d50\u3002": "\u4f5c\u54c1\u5df2\u5b8c\u7d50\u3002",
	"\u5f9e\u6700\u611b\u540d\u55ae\u4e2d\u6ce8\u89e3\u6389\u672c\u4f5c\u54c1\u3002": "\u5f9e\u6700\u611b\u540d\u55ae\u4e2d\u6ce8\u89e3\u6389\u672c\u4f5c\u54c1\u3002",
	"%1 \u5df2\u5b8c\u7d50\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\uff1a%2": "%1 \u5df2\u5b8c\u7d50\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\uff1a%2",
	"\u6aa2\u67e5\u6240\u6709\u6700\u611b\u4f5c\u54c1\u4e4b\u66f4\u65b0\uff0c\u4e26\u4e0b\u8f09\u66f4\u65b0\u4f5c\u54c1\u3002": "\u6aa2\u67e5\u6240\u6709\u6700\u611b\u4f5c\u54c1\u4e4b\u66f4\u65b0\uff0c\u4e26\u4e0b\u8f09\u66f4\u65b0\u4f5c\u54c1\u3002",
	"\ud83c\ude33 \u5c1a\u7121\u6700\u611b\u4f5c\u54c1\u3002": "\ud83c\ude33 \u5c1a\u7121\u6700\u611b\u4f5c\u54c1\u3002",
	"\ud83c\ude33 \u5c1a\u672a\u8a2d\u5b9a\u6700\u611b\u4f5c\u54c1\u3002": "\ud83c\ude33 \u5c1a\u672a\u8a2d\u5b9a\u6700\u611b\u4f5c\u54c1\u3002",
	"\u7de8\u8f2f\u6700\u611b\u4f5c\u54c1\u6e05\u55ae": "\u7de8\u8f2f\u6700\u611b\u4f5c\u54c1\u6e05\u55ae",
	"\u522a\u9664\u6240\u6709%1\u500b\u6ce8\u89e3\u3001%2\u500b\u91cd\u8907\u8207%3\u500b\u7a7a\u767d\u884c\u3002": "\u522a\u9664\u6240\u6709%1\u500b\u6ce8\u89e3\u3001%2\u500b\u91cd\u8907\u8207%3\u500b\u7a7a\u767d\u884c\u3002",
	"\u5217\u8868\u6a94\u6848\u4e2d\u6709%1\u500b\u91cd\u8907\u4f5c\u54c1\u540d\u7a31\u6216 id\u3002": "\u5217\u8868\u6a94\u6848\u4e2d\u6709%1\u500b\u91cd\u8907\u4f5c\u54c1\u540d\u7a31\u6216 id\u3002",
	"\u6ce8\u89e3\u6389\u91cd\u8907\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94": "\u6ce8\u89e3\u6389\u91cd\u8907\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94",
	"\u522a\u9664\u91cd\u8907\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94": "\u522a\u9664\u91cd\u8907\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94",
	"\u6ce8\u89e3\u6389%1\u500b\u5df2\u5b8c\u7d50\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94": "\u6ce8\u89e3\u6389%1\u500b\u5df2\u5b8c\u7d50\u7684\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94",
	"\u8b80\u53d6\u672c\u7db2\u7ad9\u4f5c\u54c1\u8cc7\u8a0a\u6a94\u6848\u4ee5\u5224\u5225\u4f5c\u54c1\u662f\u5426\u5df2\u4e0b\u8f09\u904e\u3001\u662f\u5426\u5b8c\u7d50\u3002": "\u8b80\u53d6\u672c\u7db2\u7ad9\u4f5c\u54c1\u8cc7\u8a0a\u6a94\u6848\u4ee5\u5224\u5225\u4f5c\u54c1\u662f\u5426\u5df2\u4e0b\u8f09\u904e\u3001\u662f\u5426\u5b8c\u7d50\u3002",
	"\u9078\u64c7\u7db2\u7ad9\u6642\uff0c\u9019\u53ef\u80fd\u9020\u6210\u5e7e\u5341\u79d2\u9418\u7121\u56de\u61c9\u3002": "\u9078\u64c7\u7db2\u7ad9\u6642\uff0c\u9019\u53ef\u80fd\u9020\u6210\u5e7e\u5341\u79d2\u9418\u7121\u56de\u61c9\u3002",
	"\u8b80\u53d6\u6240\u6709\u7db2\u7ad9\u4e4b\u4f5c\u54c1\u8cc7\u8a0a\u6a94\u6848": "\u8b80\u53d6\u6240\u6709\u7db2\u7ad9\u4e4b\u4f5c\u54c1\u8cc7\u8a0a\u6a94\u6848",
	"Imported configuration of %1: %2": "\u532f\u5165%1\u7684\u6574\u9ad4\u8a2d\u5b9a\uff1a%2",
	"Imported preference of %1: %2": "\u532f\u5165%1\u7684\u504f\u597d\uff1a%2",
	"\u9023\u7d50": "\u9023\u7d50",
	"work_crawler-search_result_columns-site": "\u7db2\u7ad9",
	"work_crawler-search_result_columns-title": "\u6a19\u984c",
	"\u50c5\u65bc\u6240\u7372\u5f97\u4e4b\u4f5c\u54c1\u6a19\u984c\u7279\u6b8a\uff0c\u4e0d\u540c\u65bc\u6240\u67e5\u8a62\u4e4b\u4f5c\u54c1\u6a19\u984c\u6642\uff0c\u624d\u6703\u6a19\u793a\u3002": "\u50c5\u65bc\u6240\u7372\u5f97\u4e4b\u4f5c\u54c1\u6a19\u984c\u7279\u6b8a\uff0c\u4e0d\u540c\u65bc\u6240\u67e5\u8a62\u4e4b\u4f5c\u54c1\u6a19\u984c\u6642\uff0c\u624d\u6703\u6a19\u793a\u3002",
	"work_crawler-search_result_columns-author": "\u4f5c\u8005",
	"work_crawler-search_result_columns-favorite": "\u6700\u611b",
	"work_crawler-favorite_list_label": "\ud83d\ude18: \u5728\u6700\u611b\u6e05\u55ae\u4e2d, \u2795: \u52a0\u5165\u6700\u611b\u6e05\u55ae",
	"work_crawler-search_result_columns-chapters": "\u8a71\u6578",
	"\u7ae0\u7bc0\u6578\u91cf": "\u7ae0\u7bc0\u6578\u91cf",
	"work_crawler-search_result_columns-once-downloaded": "\u66fe\u4e0b\u8f09",
	"\u7576\u4e4b\u524d\u4e0b\u8f09\u904e\u6642\uff0c\u6a19\u793a\u4e0a\u6b21\u4e0b\u8f09\u5230\u7b2c\u5e7e\u7ae0\u7bc0\u3002": "\u7576\u4e4b\u524d\u4e0b\u8f09\u904e\u6642\uff0c\u6a19\u793a\u4e0a\u6b21\u4e0b\u8f09\u5230\u7b2c\u5e7e\u7ae0\u7bc0\u3002",
	"work_crawler-search_result_columns-restricted": "\u9650",
	"\u90e8\u4efd\u7ae0\u7bc0\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f/\u88ab\u9650\u5236": "\u90e8\u4efd\u7ae0\u7bc0\u9700\u8981\u4ed8\u8cbb/\u88ab\u9396\u4f4f/\u88ab\u9650\u5236",
	"work_crawler-search_result_columns-completed": "\u5b8c",
	"work_crawler-search_result_columns-status": "\u72c0\u6cc1",
	"\u4f5c\u54c1\u72c0\u6cc1": "\u4f5c\u54c1\u72c0\u6cc1",
	"work_crawler-search_result_columns-lastest": "\u6700\u65b0",
	"\u6700\u65b0\u7ae0\u7bc0": "\u6700\u65b0\u7ae0\u7bc0",
	"\u8cc7\u8a0a\u4f86\u81ea\u7ae0\u7bc0\u6e05\u55ae": "\u8cc7\u8a0a\u4f86\u81ea\u7ae0\u7bc0\u6e05\u55ae",
	"\u9ede\u64ca\u7db2\u7ad9\u540d\u7a31\u53ef\u4e0b\u8f09\u6b64\u7db2\u7ad9\u4e4b\u672c\u4f5c\u54c1\u3002": "\u9ede\u64ca\u7db2\u7ad9\u540d\u7a31\u53ef\u4e0b\u8f09\u6b64\u7db2\u7ad9\u4e4b\u672c\u4f5c\u54c1\u3002",
	"\u6240\u6709\u7db2\u7ad9\u90fd\u672a\u80fd\u627e\u5230\u672c\u4f5c\u54c1\u3002": "\u6240\u6709\u7db2\u7ad9\u90fd\u672a\u80fd\u627e\u5230\u672c\u4f5c\u54c1\u3002",
	"\u641c\u5c0b\u4f5c\u54c1[%1]\u4e4b\u7d50\u679c\uff1a": "\u641c\u5c0b\u4f5c\u54c1[%1]\u4e4b\u7d50\u679c\uff1a",
	"\u4e0b\u8f09\u6240\u6709%1\u500b\u7db2\u7ad9\u627e\u5230\u7684\u4f5c\u54c1": "\u4e0b\u8f09\u6240\u6709%1\u500b\u7db2\u7ad9\u627e\u5230\u7684\u4f5c\u54c1",
	"\u5c07\u6240\u6709%1\u500b\u7db2\u7ad9\u627e\u5230\u7684\u4f5c\u54c1\u5168\u90e8\u52a0\u5165\u7db2\u7ad9\u5404\u81ea\u4e4b\u6700\u611b\u6e05\u55ae": "\u5c07\u6240\u6709%1\u500b\u7db2\u7ad9\u627e\u5230\u7684\u4f5c\u54c1\u5168\u90e8\u52a0\u5165\u7db2\u7ad9\u5404\u81ea\u4e4b\u6700\u611b\u6e05\u55ae",
	"\u4e0b\u8f09\u6240\u6709\u6700\u611b\u6e05\u55ae\u4e2d\u7684\u672c\u4f5c\u54c1": "\u4e0b\u8f09\u6240\u6709\u6700\u611b\u6e05\u55ae\u4e2d\u7684\u672c\u4f5c\u54c1",
	"\u4ee5\u4e0b%1\u500b\u7db2\u7ad9\u672a\u80fd\u627e\u5230\u672c\u4f5c\u54c1\uff1a": "\u4ee5\u4e0b%1\u500b\u7db2\u7ad9\u672a\u80fd\u627e\u5230\u672c\u4f5c\u54c1\uff1a",
	"\u932f\u8aa4\u539f\u56e0": "\u932f\u8aa4\u539f\u56e0",
	"\u4f5c\u54c1\u7db2\u7ad9": "\u4f5c\u54c1\u7db2\u7ad9",
	"\u8acb\u5148\u5728\u7db2\u8def\u4f5c\u54c1\u5340\u6307\u5b9a\u8981\u641c\u5c0b\u7684\u4f5c\u54c1\u985e\u5225\u3002": "\u8acb\u5148\u5728\u7db2\u8def\u4f5c\u54c1\u5340\u6307\u5b9a\u8981\u641c\u5c0b\u7684\u4f5c\u54c1\u985e\u5225\u3002",
	"\u8acb\u5148\u8f38\u5165\u4f5c\u54c1\u540d\u7a31\u3002": "\u8acb\u5148\u8f38\u5165\u4f5c\u54c1\u540d\u7a31\u3002",
	"\u6b63\u5728\u641c\u5c0b[%1]\u4e2d\uff0c\u5fc5\u9808\u5148\u53d6\u6d88\u7576\u524d\u7684\u641c\u5c0b\u7a0b\u5e8f\u624d\u80fd\u91cd\u65b0\u641c\u5c0b\u3002": "\u6b63\u5728\u641c\u5c0b[%1]\u4e2d\uff0c\u5fc5\u9808\u5148\u53d6\u6d88\u7576\u524d\u7684\u641c\u5c0b\u7a0b\u5e8f\u624d\u80fd\u91cd\u65b0\u641c\u5c0b\u3002",
	"\u4f5c\u54c1\u540d\u7a31\u4e4b\u8a9e\u8a00\u4f3c\u4e4e\u70ba%1\uff0c\u4f46\u6307\u5b9a\u4e86%2\u3002": "\u4f5c\u54c1\u540d\u7a31\u4e4b\u8a9e\u8a00\u4f3c\u4e4e\u70ba%1\uff0c\u4f46\u6307\u5b9a\u4e86%2\u3002",
	"\u6b63\u5728\u641c\u5c0b[%1]\u4e2d\u2026\u2026": "\u6b63\u5728\u641c\u5c0b[%1]\u4e2d\u2026\u2026",
	"\u5c1a\u7121\u4efb\u4f55\u7db2\u7ad9\u56de\u50b3\u7d50\u679c\u2026\u2026": "\u5c1a\u7121\u4efb\u4f55\u7db2\u7ad9\u56de\u50b3\u7d50\u679c\u2026\u2026",
	"\u53d6\u6d88\u641c\u5c0b": "\u53d6\u6d88\u641c\u5c0b",
	"\u653e\u68c4\u9084\u6c92\u641c\u5c0b\u5b8c\u6210\u7684\u7db2\u7ad9": "\u653e\u68c4\u9084\u6c92\u641c\u5c0b\u5b8c\u6210\u7684\u7db2\u7ad9",
	"\u672c\u7db2\u7ad9\u5f37\u5236\u7b49\u5f85\u6642\u9593\u904e\u9577\uff0c\u70ba\u9632\u5c01\u9396\u4e0d\u4f5c\u641c\u5c0b\u3002": "\u672c\u7db2\u7ad9\u5f37\u5236\u7b49\u5f85\u6642\u9593\u904e\u9577\uff0c\u70ba\u9632\u5c01\u9396\u4e0d\u4f5c\u641c\u5c0b\u3002",
	"\u5df2\u5b8c\u6210 %1": "\u5df2\u5b8c\u7d50 %1",
	"%1\u500b{{PLURAL:%1|\u7db2\u7ad9}}\u4ecd\u5728\u641c\u5c0b\u4e2d\uff1a%2": "%1\u500b{{PLURAL:%1|\u7db2\u7ad9}}\u4ecd\u5728\u641c\u5c0b\u4e2d\uff1a%2",
	"\u8acb\u5148\u6307\u5b9a\u8981\u4e0b\u8f09\u7684\u7db2\u7ad9\u3002": "\u8acb\u5148\u6307\u5b9a\u8981\u4e0b\u8f09\u7684\u7db2\u7ad9\u3002",
	"\u7576\u524d\u8def\u5f91\uff1a%1": "\u7576\u524d\u8def\u5f91\uff1a%1",
	"\u8f09\u5165\u4e26\u4f7f\u7528\u4e0b\u8f09\u5de5\u5177 %1": "\u8f09\u5165\u4e26\u4f7f\u7528\u4e0b\u8f09\u5de5\u5177 %1",
	"\u9078\u64c7\u4e0b\u8f09\u5de5\u5177\uff1a%1": "\u9078\u64c7\u4e0b\u8f09\u5de5\u5177\uff1a%1",
	"\u4e0b\u8f09\u4efb\u52d9\u521d\u59cb\u5316\u3001\u8b80\u53d6\u4f5c\u54c1\u8cc7\u8a0a\u4e2d\u2026\u2026": "\u4e0b\u8f09\u4efb\u52d9\u521d\u59cb\u5316\u3001\u8b80\u53d6\u4f5c\u54c1\u8cc7\u8a0a\u4e2d\u2026\u2026",
	"\u66ab\u505c": "\u66ab\u505c",
	"\u66ab\u505c/\u6062\u5fa9\u4e0b\u8f09": "\u66ab\u505c/\u6062\u5fa9\u4e0b\u8f09",
	"\u4e0d\u6703\u99ac\u4e0a\u53cd\u61c9\uff0c\u5c07\u7b49\u5230\u7576\u524d\u7684\u7ae0\u7bc0\u8655\u7406\u5b8c\u7562\u624d\u8655\u7406\u3002": "\u4e0d\u6703\u99ac\u4e0a\u53cd\u61c9\uff0c\u5c07\u7b49\u5230\u7576\u524d\u7684\u7ae0\u7bc0\u8655\u7406\u5b8c\u7562\u624d\u8655\u7406\u3002",
	"\u53d6\u6d88": "\u53d6\u6d88",
	"\u53d6\u6d88\u4e0b\u8f09": "\u53d6\u6d88\u4e0b\u8f09",
	"\u7e7c\u7e8c": "\u7e7c\u7e8c",
	"\u8acb\u5148\u8f38\u5165\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\u3002": "\u8acb\u5148\u8f38\u5165\u4f5c\u54c1\u540d\u7a31\u6216\ud83c\udd94\u3002",
	"\u6b63\u5728\u5f9e%1\u4e0b\u8f09\u300a%2\u300b\u9019\u500b\u4f5c\u54c1\u3002\u5c07\u7b49\u5230\u9019\u500b\u4f5c\u54c1\u4e0b\u8f09\u5b8c\u7562\uff0c\u6216\u8005\u53d6\u6d88\u4e0b\u8f09\u5f8c\uff0c\u518d\u4e0b\u8f09 %3\u3002": "\u6b63\u5728\u5f9e%1\u4e0b\u8f09\u300a%2\u300b\u9019\u500b\u4f5c\u54c1\u3002\u5c07\u7b49\u5230\u9019\u500b\u4f5c\u54c1\u4e0b\u8f09\u5b8c\u7562\uff0c\u6216\u8005\u53d6\u6d88\u4e0b\u8f09\u5f8c\uff0c\u518d\u4e0b\u8f09 %3\u3002",
	"\u91cd\u65b0\u4e0b\u8f09": "\u91cd\u65b0\u4e0b\u8f09",
	"\u6e05\u9664\u672c\u4e0b\u8f09\u7d00\u9304": "\u6e05\u9664\u672c\u4e0b\u8f09\u7d00\u9304",
	"\uff08\u7e3d\u5171\u6709%1\u500b{{PLURAL:%1|\u932f\u8aa4}}\uff09": "\uff08\u7e3d\u5171\u6709%1\u500b{{PLURAL:%1|\u932f\u8aa4}}\uff09",
	"\u81ea\u52d5\u66f4\u65b0\u975e\u5b89\u88dd\u5305\u7248\u672c\u4e2d\u2026\u2026": "\u81ea\u52d5\u66f4\u65b0\u975e\u5b89\u88dd\u5305\u7248\u672c\u4e2d\u2026\u2026",
	"\u975e\u5b89\u88dd\u5305\u7248\u672c\u66f4\u65b0\u5931\u6557\uff1a%1": "\u975e\u5b89\u88dd\u5305\u7248\u672c\u66f4\u65b0\u5931\u6557\uff1a%1",
	"\u975e\u5b89\u88dd\u5305\u7248\u672c\u66f4\u65b0\u5b8c\u7562\u3002\u60a8\u9700\u8981\u91cd\u65b0\u555f\u52d5\u7a0b\u5f0f\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u3002": "\u975e\u5b89\u88dd\u5305\u7248\u672c\u66f4\u65b0\u5b8c\u7562\u3002\u60a8\u9700\u8981\u91cd\u65b0\u555f\u52d5\u7a0b\u5f0f\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u3002",
	"\u66f4\u65b0\u5b8c\u7562\u3002": "\u66f4\u65b0\u5b8c\u7562\u3002",
	"\u91cd\u65b0\u555f\u52d5\u61c9\u7528\u7a0b\u5f0f\u3002": "\u91cd\u65b0\u555f\u52d5\u61c9\u7528\u7a0b\u5f0f\u3002",
	"\u6240\u6709\u7576\u524d\u4f5c\u696d\u90fd\u6703\u4e2d\u65b7\uff01": "\u6240\u6709\u7576\u524d\u4f5c\u696d\u90fd\u6703\u4e2d\u65b7\uff01",
	"\u5efa\u8b70\u91cd\u65b0\u555f\u52d5\u61c9\u7528\u7a0b\u5f0f\u4ee5\u4f7f\u7528\u5b8c\u6574\u66f4\u65b0\u5f8c\u7684\u7a0b\u5f0f\u3002": "\u5efa\u8b70\u91cd\u65b0\u555f\u52d5\u61c9\u7528\u7a0b\u5f0f\u4ee5\u4f7f\u7528\u5b8c\u6574\u66f4\u65b0\u5f8c\u7684\u7a0b\u5f0f\u3002",
	"\u5df2\u8a2d\u5b9a\u4e0d\u81ea\u52d5\u66f4\u65b0\u3002": "\u5df2\u8a2d\u5b9a\u4e0d\u81ea\u52d5\u66f4\u65b0\u3002",
	"\u6aa2\u67e5\u66f4\u65b0\u4e2d\u2026\u2026": "\u6aa2\u67e5\u66f4\u65b0\u4e2d\u2026\u2026",
	"\u672a\u767c\u73fe\u65b0\u7248\u672c\u3002": "\u672a\u767c\u73fe\u65b0\u7248\u672c\u3002",
	"\u7121\u6cd5\u8b80\u53d6\u7248\u672c\u8cc7\u8a0a package.json\uff01": "\u7121\u6cd5\u8b80\u53d6\u7248\u672c\u8cc7\u8a0a package.json\uff01",
	"\u6709\u65b0\u7248\u672c\uff1a%1": "\u6709\u65b0\u7248\u672c\uff1a%1",
	"\u66f4\u65b0\u6aa2\u6e2c\u5931\u6557\uff1a%1": "\u66f4\u65b0\u6aa2\u6e2c\u5931\u6557\uff1a%1",
	"\u66f4\u65b0\u5931\u6557\uff01": "\u66f4\u65b0\u5931\u6557\uff01",
	"\u672c\u6b04\u57fa\u672c\u4e0a\u50c5\u4f9b\u8abf\u8a66\u4f7f\u7528\u3002\u82e5\u60a8\u6709\u4e0b\u8f09\u529f\u80fd\u65b9\u9762\u7684\u9700\u6c42\uff0c\u7169\u8acb\u63d0\u5831\u8b70\u984c\uff0c\u8b1d\u8b1d\u3002": "\u672c\u6b04\u57fa\u672c\u4e0a\u50c5\u4f9b\u8abf\u8a66\u4f7f\u7528\u3002\u82e5\u60a8\u6709\u4e0b\u8f09\u529f\u80fd\u65b9\u9762\u7684\u9700\u6c42\uff0c\u7169\u8acb\u63d0\u5831\u8b70\u984c\uff0c\u8b1d\u8b1d\u3002",
	"\u8b66\u544a\uff1a\u7121\u6cd5\u5b58\u53d6\u4f5c\u54c1\u5b58\u653e\u76ee\u9304 [%1]\uff01": "\u8b66\u544a\uff1a\u7121\u6cd5\u5b58\u53d6\u4f5c\u54c1\u5b58\u653e\u76ee\u9304 [%1]\uff01",
	"\u4e0b\u8f09\u7684\u6a94\u6848\u5c07\u653e\u5728\u9810\u8a2d\u76ee\u9304\u4e0b\u3002": "\u4e0b\u8f09\u7684\u6a94\u6848\u5c07\u653e\u5728\u9810\u8a2d\u76ee\u9304\u4e0b\u3002",
	"\u6b32\u63a1\u7528\u5716\u5f62\u4ecb\u9762\u8acb\u57f7\u884c `%1`\u3002": "\u6b32\u63a1\u7528\u5716\u5f62\u4ecb\u9762\u8acb\u57f7\u884c `%1`\u3002",
	"option=true": "\u9078\u9805=true",
	"option=value": "\u9078\u9805=\u6578\u503c",
	"Usage:": "\u7528\u6cd5\uff1a",
	"\u4f5c\u54c1\u6a19\u984c\u6216 id": "\u4f5c\u54c1\u6a19\u984c\u6216 id",
	"\u4f5c\u54c1\u5217\u8868\u6a94\u6848": "\u4f5c\u54c1\u5217\u8868\u6a94\u6848",
	"Options:": "\u9078\u9805\uff1a"
},
"cmn-Hant-TW");

// application/locale/resources/de-DE.js
/*	Localized messages of CeL.
	This file is auto created by auto-generate tool: build.nodejs(.js) @ 2022.
*/'use strict';typeof CeL==='function'&&CeL.application.locale.gettext.set_text({
	"untranslated message count": "1000+",
	"Load failed": "Laden fehlgeschlagen",
	"Italy": "Italien",
	"Poland": "Polen",
	"Portugal": "Portugal",
	"Spain": "Spanien",
	"France": "Frankreich",
	"Luxembourg": "Luxemburg",
	"Netherlands": "Niederlande",
	"Bavaria": "Bayern",
	"Austria": "\u00d6sterreich",
	"Switzerland": "Schweiz",
	"Hungary": "Ungarn",
	"Germany": "Deutschland",
	"Norway": "Norwegen",
	"Denmark": "D\u00e4nemark",
	"Great Britain": "Gro\u00dfbritannien",
	"Sweden": "Schweden",
	"Finland": "Finnland",
	"Bulgaria": "Bulgarien",
	"Soviet Union": "Sowjetunion",
	"Serbia": "Serbien",
	"Romania": "Rum\u00e4nien",
	"Greece": "Griechenland",
	"T\u00fcrkiye": "T\u00fcrkei",
	"Egypt": "\u00c4gypten",
	"%1 {{PLURAL:%1|minute|minutes}}": "%1 {{PLURAL:%1|Minute|Minuten}}",
	"now": "jetzt",
	"several seconds ago": "vor einigen Sekunden",
	"soon": "bald",
	"%1 {{PLURAL:%1|second|seconds}} ago": "vor %1 Sekunden",
	"%1 {{PLURAL:%1|second|seconds}} later": "%1 Sekunden sp\u00e4ter",
	"%1 {{PLURAL:%1|minute|minutes}} ago": "vor %1 Minuten",
	"%1 {{PLURAL:%1|minute|minutes}} later": "%1 Minuten sp\u00e4ter",
	"%1 {{PLURAL:%1|hour|hours}} ago": "vor %1 Stunden",
	"%1 {{PLURAL:%1|hour|hours}} later": "%1 Stunden sp\u00e4ter",
	"%1 {{PLURAL:%1|day|days}} ago": "vor %1 Tagen",
	"%1 {{PLURAL:%1|day|days}} later": "%1 Tage sp\u00e4ter",
	"Not Yet Implemented!": "Noch nicht implementiert!",
	"Language": "Sprache",
	"\u661f\u671f": "Wochentag",
	"\u66dc\u65e5": "Wochentag (japanisch)",
	"\u2191Back to TOC": "\u2191Zur\u00fcck zum Inhaltsverzeichnis",
	"Contents of [%1]": "Inhalt von [%1]",
	"Contents": "Inhalt",
	"expand": "ausklappen",
	"collapse": "einklappen",
	"Invalid title: %1": "Ung\u00fcltiger Titel: %1",
	"\u7121\u9801\u9762\u91cd\u5b9a\u5411\u81f3\u672c\u9801": "Keine andere Seite leitet auf diese Seite weiter",
	"no change": "keine \u00c4nderung",
	"finished": "fertig",
	"Missing page": "Fehlende Seite",
	"Invalid page title": "Ung\u00fcltiger Seitenname",
	"No changes.": "Keine \u00c4nderungen.",
	"Too many failed login attempts: %1": "Zu viele fehlgeschlagene Login-Versuche: %1",
	"Comma-separator": ", ",
	"Invalid parameter: %1": "Ung\u00fcltiger Parameter: %1",
	"No content": "Kein Inhalt",
	"%1 {{PLURAL:%1|result|results}}": "%1 {{PLURAL:%1|Ergebnis|Ergebnisse}}",
	"Abandon change": "\u00c4nderung verwerfen",
	"No reason provided": "Es wurde kein Grund angegeben",
	"\u5730\u7406\u5ea7\u6a19\uff1a": "Koordinaten: ",
	"\u81ea\u8a02\u8f38\u51fa\u683c\u5f0f": "Ausgabeformat anpassen",
	"\u7def\u5ea6\uff1a": "Breitengrad: ",
	"\u7d93\u5ea6\uff1a": "L\u00e4ngengrad: ",
	"\u8f38\u51fa\u683c\u5f0f": "Ausgabeformat",
	"\u524d\u7db4": "Pr\u00e4fix",
	"\u6642\u5340\uff1a": "Zeitzone: ",
	"Loading...": "Laden...",
	"\u1019\u103c\u1014\u103a\u1019\u102c": "Myanmar",
	"Vi\u1ec7t Nam": "Vietnam",
	"\u9664\u53bb\u6b64\u6b04": "Spalte entfernen",
	"\u5206\u985e": "Gruppe",
	"%1/%2/%3": "%1/%2/%3",
	"\u5168\u4e0d\u9078": "ALLE entfernen",
	"\u589e\u52a0\u6b64\u6b04": "Spalte hinzuf\u00fcgen",
	"\u81fa\u7063\u5730\u9707": "Erdbeben in Taiwan",
	"\u5c0e\u89bd\u5217\uff1a": "Navigation:",
	"\u6240\u6709\u570b\u5bb6": "Alle L\u00e4nder",
	"\u541b\u4e3b\u865f": "K\u00fcnstlername",
	"\u51fa\u751f": "Geboren",
	"\u901d\u4e16": "Gestorben",
	"\u5728\u4f4d": "Regierungszeit",
	"\u52a0\u5195": "Kr\u00f6nung",
	"\u524d\u4efb": "Vorg\u00e4nger",
	"\u7e7c\u4efb": "Nachfolger",
	"\u7236\u89aa": "Vater",
	"\u6bcd\u89aa": "Mutter",
	"Initializing...": "Initialisiere\u2026",
	"Aries": "Widder",
	"Taurus": "Stier",
	"Gemini": "Zwilling",
	"Cancer": "Krebs",
	"Leo": "L\u00f6we",
	"Virgo": "Jungfrau",
	"Libra": "Waage",
	"Scorpio": "Skorpion",
	"Sagittarius": "Sch\u00fctze",
	"Capricorn": "Steinbock",
	"Aquarius": "Wassermann",
	"Pisces": "Fische",
	"\u6708\u76f8": "Mondphase",
	"\u6714": "Neumond",
	"\u65e5\u51fa\u65e5\u843d": "Sonnenaufgang / Sonnenuntergang",
	"\u66d9\u66ae\u5149": "D\u00e4mmerung",
	"\u6708\u51fa\u6708\u843d": "Mondaufgang / Monduntergang",
	"calendar": "Kalender",
	"Gregorian calendar": "Gregorianischer Kalender",
	"Julian calendar": "Julianischer Kalender",
	"\u4f0a\u65af\u862d\u66c6": "Islamischer Kalender",
	"\u06af\u0627\u0647\u200c\u0634\u0645\u0627\u0631\u06cc \u0647\u062c\u0631\u06cc \u062e\u0648\u0631\u0634\u06cc\u062f\u06cc": "Moderner iranischer Kalender",
	"\u5e0c\u4f2f\u4f86\u66c6": "Hebr\u00e4ischer Kalender",
	"\u9577\u7d00\u66c6": "Lange Z\u00e4hlung",
	"\u50a3\u66c6": "Dai-Kalender",
	"\u1019\u103c\u1014\u103a\u1019\u102c \u1015\u103c\u1000\u1039\u1001\u1012\u102d\u1014\u103a": "Myanmar-Kalender",
	"\u5f5d\u66c6": "Yi-Kalender",
	"\u0939\u093f\u0928\u094d\u0926\u0942 \u092a\u0902\u091a\u093e\u0902\u0917": "Hindu-Kalender",
	"\u06af\u0627\u0647\u200c\u0634\u0645\u0627\u0631\u06cc \u0628\u0647\u0627\u0626\u06cc": "Bah\u00e1\u2019\u00ed-Kalender",
	"\u79d1\u666e\u7279\u66c6": "Koptischer Kalender",
	"\u8863\u7d22\u6bd4\u4e9e\u66c6": "\u00c4thiopischer Kalender",
	"\u6559\u6703\u4e9e\u7f8e\u5c3c\u4e9e\u66c6": "Armenischer Kalender",
	"Byzantine calendar": "Byzantinischer Kalender",
	"\u53e4\u57c3\u53ca\u66c6": "\u00c4gyptischer Kalender",
	"\u6771\u4e9e\u9670\u967d\u66c6": "Ostasiatischer Kalender",
	"\u4e2d\u570b": "China",
	"\u6708\u306e\u5225\u540d": "Japanischer Monatsname",
	"\u4e8c\u5341\u516b\u5bbf": "28 H\u00e4user",
	"zodiac sign": "Sternzeichen",
	"\u751f\u8096": "Chinesisches Tierkreiszeichen",
	"Year numbering": "Jahreszahl",
	"\u8457\u540d\u5730\u9ede\uff1a": "Ber\u00fchmte Orte:",
	"Loading %1%...": "Laden %1%...",
	"\u4e0a\u5f26": "erstes Viertel",
	"\u671b": "Vollmond",
	"\u4e0b\u5f26": "letztes Viertel",
	"partial lunar eclipse": "partielle Mondfinsternis",
	"partial solar eclipse": "partielle Sonnenfinsternis",
	"total lunar eclipse": "totale Mondfinsternis",
	"total solar eclipse": "totale Sonnenfinsternis",
	"lunar eclipse": "Mondfinsternis",
	"solar eclipse": "Sonnenfinsternis",
	"moonrise": "Mondaufgang",
	"sunrise": "Sonnenaufgang",
	"moonset": "Monduntergang",
	"sunset": "Sonnenuntergang",
	"astronomical twilight begin": "Beginn der astronomischen D\u00e4mmerung",
	"civil twilight begin": "Beginn der b\u00fcrgerlichen D\u00e4mmerung",
	"nautical twilight begin": "Beginn der nautischen D\u00e4mmerung",
	"astronomical twilight end": "Ende der astronomischen D\u00e4mmerung",
	"civil twilight end": "Ende der b\u00fcrgerlichen D\u00e4mmerung",
	"nautical twilight end": "Ende der nautischen D\u00e4mmerung",
	"log-type-error": "Fehler",
	"file": "Datei",
	"files": "Dateien",
	"function": "Funktion",
	"number": "Zahl",
	"MESSAGE_NEED_RE_DOWNLOAD": "Der Download ist fehlgeschlagen, m\u00f6glicherweise ist der Server vor\u00fcbergehend nicht verf\u00fcgbar oder die Datei ist verloren gegangen (404). Bitte best\u00e4tige, dass der Fehler behoben wurde oder der Fehler nicht mehr besteht, und f\u00fchre den Download erneut aus.",
	"Retry %1/%2": "%1/%2 erneut versuchen",
	"\u7409\u7403": "Ryukyu",
	"\u65e5\u672c": "Japan",
	"\ud55c\uad6d": "Korea",
	"\u0e44\u0e17\u0e22": "Thailand",
	"India": "Indien",
	"user": "Benutzer",
	"\u8a9e\u8a00\u6578": "Anzahl der Sprachen",
	"\u4f5c\u54c1\u5df2\u5b8c\u7d50\u3002": "Serie ist beendet."
},
"de-DE");

if (!window.CeL) window.CeL = { initializer : function() { CeL.run('application.net.wiki', initialization); } };
	function initialization() {
		console.trace(CeL.wiki.parse(`[[A|a]]`));
		console.log("CeL ready");
}
CeL.run(CeL.get_old_namespace()?._initializer);
//function initialization() {
//	console.trace(CeL.wiki.parse(`[[A|a]]`));
//	console.log("CeL ready");
//}
//window.CeL = CeL.run('application.net.wiki', initialization);

//polyfill from https://github.com/tc39/proposal-relative-indexing-method#polyfill
function at(n) {
	// ToInteger() abstract op
	n = Math.trunc(n) || 0;
	// Allow negative indexing from the end
	if (n < 0) n += this.length;
	// OOB access is guaranteed to return undefined
	if (n < 0 || n >= this.length) return undefined;
	// Otherwise, this is just normal property access
	return this[n];
}

const TypedArray = Reflect.getPrototypeOf(Int8Array);
for (const C of [Array, String, TypedArray]) {
    Object.defineProperty(C.prototype, "at",
                          { value: at,
                            writable: true,
                            enumerable: false,
                            configurable: true });
}
